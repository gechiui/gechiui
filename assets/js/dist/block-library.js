this["gc"] = this["gc"] || {}; this["gc"]["blockLibrary"] =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "3+o8");
/******/ })
/************************************************************************/
/******/ ({

/***/ "0+Iy":
/***/ (function(module, exports) {

(function() { module.exports = window["gc"]["htmlEntities"]; }());

/***/ }),

/***/ "2BQN":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _gechiui_element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("ewfG");
/* harmony import */ var _gechiui_element__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_gechiui_element__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("Gz8V");
/* harmony import */ var _gechiui_primitives__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__);


/**
 * GeChiUI dependencies
 */

const listView = Object(_gechiui_element__WEBPACK_IMPORTED_MODULE_0__["createElement"])(_gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__["SVG"], {
  viewBox: "0 0 24 24",
  xmlns: "http://www.w3.org/2000/svg"
}, Object(_gechiui_element__WEBPACK_IMPORTED_MODULE_0__["createElement"])(_gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__["Path"], {
  d: "M13.8 5.2H3v1.5h10.8V5.2zm-3.6 12v1.5H21v-1.5H10.2zm7.2-6H6.6v1.5h10.8v-1.5z"
}));
/* harmony default export */ __webpack_exports__["a"] = (listView);


/***/ }),

/***/ "3+o8":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, "__experimentalGetCoreBlocks", function() { return /* binding */ __experimentalGetCoreBlocks; });
__webpack_require__.d(__webpack_exports__, "registerCoreBlocks", function() { return /* binding */ registerCoreBlocks; });
__webpack_require__.d(__webpack_exports__, "__experimentalRegisterExperimentalCoreBlocks", function() { return /* binding */ __experimentalRegisterExperimentalCoreBlocks; });

// NAMESPACE OBJECT: ./node_modules/@gechiui/block-library/build-module/archives/index.js
var archives_namespaceObject = {};
__webpack_require__.r(archives_namespaceObject);
__webpack_require__.d(archives_namespaceObject, "metadata", function() { return archives_metadata; });
__webpack_require__.d(archives_namespaceObject, "name", function() { return archives_name; });
__webpack_require__.d(archives_namespaceObject, "settings", function() { return archives_settings; });

// NAMESPACE OBJECT: ./node_modules/@gechiui/block-library/build-module/audio/index.js
var build_module_audio_namespaceObject = {};
__webpack_require__.r(build_module_audio_namespaceObject);
__webpack_require__.d(build_module_audio_namespaceObject, "metadata", function() { return audio_metadata; });
__webpack_require__.d(build_module_audio_namespaceObject, "name", function() { return audio_name; });
__webpack_require__.d(build_module_audio_namespaceObject, "settings", function() { return audio_settings; });

// NAMESPACE OBJECT: ./node_modules/@gechiui/block-library/build-module/button/index.js
var button_namespaceObject = {};
__webpack_require__.r(button_namespaceObject);
__webpack_require__.d(button_namespaceObject, "metadata", function() { return button_metadata; });
__webpack_require__.d(button_namespaceObject, "name", function() { return button_name; });
__webpack_require__.d(button_namespaceObject, "settings", function() { return button_settings; });

// NAMESPACE OBJECT: ./node_modules/@gechiui/block-library/build-module/buttons/index.js
var build_module_buttons_namespaceObject = {};
__webpack_require__.r(build_module_buttons_namespaceObject);
__webpack_require__.d(build_module_buttons_namespaceObject, "metadata", function() { return buttons_metadata; });
__webpack_require__.d(build_module_buttons_namespaceObject, "name", function() { return buttons_name; });
__webpack_require__.d(build_module_buttons_namespaceObject, "settings", function() { return buttons_settings; });

// NAMESPACE OBJECT: ./node_modules/@gechiui/block-library/build-module/calendar/index.js
var build_module_calendar_namespaceObject = {};
__webpack_require__.r(build_module_calendar_namespaceObject);
__webpack_require__.d(build_module_calendar_namespaceObject, "metadata", function() { return calendar_metadata; });
__webpack_require__.d(build_module_calendar_namespaceObject, "name", function() { return calendar_name; });
__webpack_require__.d(build_module_calendar_namespaceObject, "settings", function() { return calendar_settings; });

// NAMESPACE OBJECT: ./node_modules/@gechiui/block-library/build-module/categories/index.js
var categories_namespaceObject = {};
__webpack_require__.r(categories_namespaceObject);
__webpack_require__.d(categories_namespaceObject, "metadata", function() { return categories_metadata; });
__webpack_require__.d(categories_namespaceObject, "name", function() { return categories_name; });
__webpack_require__.d(categories_namespaceObject, "settings", function() { return categories_settings; });

// NAMESPACE OBJECT: ./node_modules/@gechiui/block-library/build-module/freeform/index.js
var freeform_namespaceObject = {};
__webpack_require__.r(freeform_namespaceObject);
__webpack_require__.d(freeform_namespaceObject, "metadata", function() { return freeform_metadata; });
__webpack_require__.d(freeform_namespaceObject, "name", function() { return freeform_name; });
__webpack_require__.d(freeform_namespaceObject, "settings", function() { return freeform_settings; });

// NAMESPACE OBJECT: ./node_modules/@gechiui/block-library/build-module/code/index.js
var code_namespaceObject = {};
__webpack_require__.r(code_namespaceObject);
__webpack_require__.d(code_namespaceObject, "metadata", function() { return code_metadata; });
__webpack_require__.d(code_namespaceObject, "name", function() { return code_name; });
__webpack_require__.d(code_namespaceObject, "settings", function() { return code_settings; });

// NAMESPACE OBJECT: ./node_modules/@gechiui/block-library/build-module/column/index.js
var build_module_column_namespaceObject = {};
__webpack_require__.r(build_module_column_namespaceObject);
__webpack_require__.d(build_module_column_namespaceObject, "metadata", function() { return column_metadata; });
__webpack_require__.d(build_module_column_namespaceObject, "name", function() { return column_name; });
__webpack_require__.d(build_module_column_namespaceObject, "settings", function() { return column_settings; });

// NAMESPACE OBJECT: ./node_modules/@gechiui/block-library/build-module/columns/index.js
var build_module_columns_namespaceObject = {};
__webpack_require__.r(build_module_columns_namespaceObject);
__webpack_require__.d(build_module_columns_namespaceObject, "metadata", function() { return columns_metadata; });
__webpack_require__.d(build_module_columns_namespaceObject, "name", function() { return columns_name; });
__webpack_require__.d(build_module_columns_namespaceObject, "settings", function() { return columns_settings; });

// NAMESPACE OBJECT: ./node_modules/@gechiui/block-library/build-module/cover/index.js
var build_module_cover_namespaceObject = {};
__webpack_require__.r(build_module_cover_namespaceObject);
__webpack_require__.d(build_module_cover_namespaceObject, "metadata", function() { return cover_metadata; });
__webpack_require__.d(build_module_cover_namespaceObject, "name", function() { return cover_name; });
__webpack_require__.d(build_module_cover_namespaceObject, "settings", function() { return cover_settings; });

// NAMESPACE OBJECT: ./node_modules/@gechiui/block-library/build-module/embed/index.js
var embed_namespaceObject = {};
__webpack_require__.r(embed_namespaceObject);
__webpack_require__.d(embed_namespaceObject, "metadata", function() { return embed_metadata; });
__webpack_require__.d(embed_namespaceObject, "name", function() { return embed_name; });
__webpack_require__.d(embed_namespaceObject, "settings", function() { return embed_settings; });

// NAMESPACE OBJECT: ./node_modules/@gechiui/block-library/build-module/file/index.js
var build_module_file_namespaceObject = {};
__webpack_require__.r(build_module_file_namespaceObject);
__webpack_require__.d(build_module_file_namespaceObject, "metadata", function() { return file_metadata; });
__webpack_require__.d(build_module_file_namespaceObject, "name", function() { return file_name; });
__webpack_require__.d(build_module_file_namespaceObject, "settings", function() { return file_settings; });

// NAMESPACE OBJECT: ./node_modules/@gechiui/block-library/build-module/gallery/index.js
var build_module_gallery_namespaceObject = {};
__webpack_require__.r(build_module_gallery_namespaceObject);
__webpack_require__.d(build_module_gallery_namespaceObject, "metadata", function() { return gallery_metadata; });
__webpack_require__.d(build_module_gallery_namespaceObject, "name", function() { return gallery_name; });
__webpack_require__.d(build_module_gallery_namespaceObject, "settings", function() { return gallery_settings; });

// NAMESPACE OBJECT: ./node_modules/@gechiui/block-library/build-module/group/index.js
var group_namespaceObject = {};
__webpack_require__.r(group_namespaceObject);
__webpack_require__.d(group_namespaceObject, "metadata", function() { return group_metadata; });
__webpack_require__.d(group_namespaceObject, "name", function() { return group_name; });
__webpack_require__.d(group_namespaceObject, "settings", function() { return group_settings; });

// NAMESPACE OBJECT: ./node_modules/@gechiui/block-library/build-module/heading/index.js
var build_module_heading_namespaceObject = {};
__webpack_require__.r(build_module_heading_namespaceObject);
__webpack_require__.d(build_module_heading_namespaceObject, "metadata", function() { return heading_metadata; });
__webpack_require__.d(build_module_heading_namespaceObject, "name", function() { return heading_name; });
__webpack_require__.d(build_module_heading_namespaceObject, "settings", function() { return heading_settings; });

// NAMESPACE OBJECT: ./node_modules/@gechiui/block-library/build-module/html/index.js
var build_module_html_namespaceObject = {};
__webpack_require__.r(build_module_html_namespaceObject);
__webpack_require__.d(build_module_html_namespaceObject, "metadata", function() { return html_metadata; });
__webpack_require__.d(build_module_html_namespaceObject, "name", function() { return html_name; });
__webpack_require__.d(build_module_html_namespaceObject, "settings", function() { return html_settings; });

// NAMESPACE OBJECT: ./node_modules/@gechiui/block-library/build-module/image/index.js
var build_module_image_namespaceObject = {};
__webpack_require__.r(build_module_image_namespaceObject);
__webpack_require__.d(build_module_image_namespaceObject, "metadata", function() { return image_metadata; });
__webpack_require__.d(build_module_image_namespaceObject, "name", function() { return image_name; });
__webpack_require__.d(build_module_image_namespaceObject, "settings", function() { return image_settings; });

// NAMESPACE OBJECT: ./node_modules/@gechiui/block-library/build-module/latest-comments/index.js
var latest_comments_namespaceObject = {};
__webpack_require__.r(latest_comments_namespaceObject);
__webpack_require__.d(latest_comments_namespaceObject, "metadata", function() { return latest_comments_metadata; });
__webpack_require__.d(latest_comments_namespaceObject, "name", function() { return latest_comments_name; });
__webpack_require__.d(latest_comments_namespaceObject, "settings", function() { return latest_comments_settings; });

// NAMESPACE OBJECT: ./node_modules/@gechiui/block-library/build-module/latest-posts/index.js
var latest_posts_namespaceObject = {};
__webpack_require__.r(latest_posts_namespaceObject);
__webpack_require__.d(latest_posts_namespaceObject, "metadata", function() { return latest_posts_metadata; });
__webpack_require__.d(latest_posts_namespaceObject, "name", function() { return latest_posts_name; });
__webpack_require__.d(latest_posts_namespaceObject, "settings", function() { return latest_posts_settings; });

// NAMESPACE OBJECT: ./node_modules/@gechiui/block-library/build-module/list/index.js
var build_module_list_namespaceObject = {};
__webpack_require__.r(build_module_list_namespaceObject);
__webpack_require__.d(build_module_list_namespaceObject, "metadata", function() { return list_metadata; });
__webpack_require__.d(build_module_list_namespaceObject, "name", function() { return list_name; });
__webpack_require__.d(build_module_list_namespaceObject, "settings", function() { return list_settings; });

// NAMESPACE OBJECT: ./node_modules/@gechiui/block-library/build-module/loginout/index.js
var loginout_namespaceObject = {};
__webpack_require__.r(loginout_namespaceObject);
__webpack_require__.d(loginout_namespaceObject, "metadata", function() { return loginout_metadata; });
__webpack_require__.d(loginout_namespaceObject, "name", function() { return loginout_name; });
__webpack_require__.d(loginout_namespaceObject, "settings", function() { return loginout_settings; });

// NAMESPACE OBJECT: ./node_modules/@gechiui/block-library/build-module/media-text/index.js
var media_text_namespaceObject = {};
__webpack_require__.r(media_text_namespaceObject);
__webpack_require__.d(media_text_namespaceObject, "metadata", function() { return media_text_metadata; });
__webpack_require__.d(media_text_namespaceObject, "name", function() { return media_text_name; });
__webpack_require__.d(media_text_namespaceObject, "settings", function() { return media_text_settings; });

// NAMESPACE OBJECT: ./node_modules/@gechiui/block-library/build-module/missing/index.js
var missing_namespaceObject = {};
__webpack_require__.r(missing_namespaceObject);
__webpack_require__.d(missing_namespaceObject, "metadata", function() { return missing_metadata; });
__webpack_require__.d(missing_namespaceObject, "name", function() { return missing_name; });
__webpack_require__.d(missing_namespaceObject, "settings", function() { return missing_settings; });

// NAMESPACE OBJECT: ./node_modules/@gechiui/block-library/build-module/more/index.js
var build_module_more_namespaceObject = {};
__webpack_require__.r(build_module_more_namespaceObject);
__webpack_require__.d(build_module_more_namespaceObject, "metadata", function() { return more_metadata; });
__webpack_require__.d(build_module_more_namespaceObject, "name", function() { return more_name; });
__webpack_require__.d(build_module_more_namespaceObject, "settings", function() { return more_settings; });

// NAMESPACE OBJECT: ./node_modules/@gechiui/block-library/build-module/navigation/index.js
var build_module_navigation_namespaceObject = {};
__webpack_require__.r(build_module_navigation_namespaceObject);
__webpack_require__.d(build_module_navigation_namespaceObject, "metadata", function() { return navigation_metadata; });
__webpack_require__.d(build_module_navigation_namespaceObject, "name", function() { return navigation_name; });
__webpack_require__.d(build_module_navigation_namespaceObject, "settings", function() { return navigation_settings; });

// NAMESPACE OBJECT: ./node_modules/@gechiui/block-library/build-module/navigation-link/index.js
var navigation_link_namespaceObject = {};
__webpack_require__.r(navigation_link_namespaceObject);
__webpack_require__.d(navigation_link_namespaceObject, "metadata", function() { return navigation_link_metadata; });
__webpack_require__.d(navigation_link_namespaceObject, "name", function() { return navigation_link_name; });
__webpack_require__.d(navigation_link_namespaceObject, "settings", function() { return navigation_link_settings; });

// NAMESPACE OBJECT: ./node_modules/@gechiui/block-library/build-module/navigation-submenu/index.js
var navigation_submenu_namespaceObject = {};
__webpack_require__.r(navigation_submenu_namespaceObject);
__webpack_require__.d(navigation_submenu_namespaceObject, "metadata", function() { return navigation_submenu_metadata; });
__webpack_require__.d(navigation_submenu_namespaceObject, "name", function() { return navigation_submenu_name; });
__webpack_require__.d(navigation_submenu_namespaceObject, "settings", function() { return navigation_submenu_settings; });

// NAMESPACE OBJECT: ./node_modules/@gechiui/block-library/build-module/nextpage/index.js
var nextpage_namespaceObject = {};
__webpack_require__.r(nextpage_namespaceObject);
__webpack_require__.d(nextpage_namespaceObject, "metadata", function() { return nextpage_metadata; });
__webpack_require__.d(nextpage_namespaceObject, "name", function() { return nextpage_name; });
__webpack_require__.d(nextpage_namespaceObject, "settings", function() { return nextpage_settings; });

// NAMESPACE OBJECT: ./node_modules/@gechiui/block-library/build-module/pattern/index.js
var pattern_namespaceObject = {};
__webpack_require__.r(pattern_namespaceObject);
__webpack_require__.d(pattern_namespaceObject, "metadata", function() { return pattern_metadata; });
__webpack_require__.d(pattern_namespaceObject, "name", function() { return pattern_name; });
__webpack_require__.d(pattern_namespaceObject, "settings", function() { return pattern_settings; });

// NAMESPACE OBJECT: ./node_modules/@gechiui/block-library/build-module/page-list/index.js
var page_list_namespaceObject = {};
__webpack_require__.r(page_list_namespaceObject);
__webpack_require__.d(page_list_namespaceObject, "metadata", function() { return page_list_metadata; });
__webpack_require__.d(page_list_namespaceObject, "name", function() { return page_list_name; });
__webpack_require__.d(page_list_namespaceObject, "settings", function() { return page_list_settings; });

// NAMESPACE OBJECT: ./node_modules/@gechiui/block-library/build-module/paragraph/index.js
var build_module_paragraph_namespaceObject = {};
__webpack_require__.r(build_module_paragraph_namespaceObject);
__webpack_require__.d(build_module_paragraph_namespaceObject, "metadata", function() { return paragraph_metadata; });
__webpack_require__.d(build_module_paragraph_namespaceObject, "name", function() { return paragraph_name; });
__webpack_require__.d(build_module_paragraph_namespaceObject, "settings", function() { return paragraph_settings; });

// NAMESPACE OBJECT: ./node_modules/@gechiui/block-library/build-module/post-author/index.js
var build_module_post_author_namespaceObject = {};
__webpack_require__.r(build_module_post_author_namespaceObject);
__webpack_require__.d(build_module_post_author_namespaceObject, "metadata", function() { return post_author_metadata; });
__webpack_require__.d(build_module_post_author_namespaceObject, "name", function() { return post_author_name; });
__webpack_require__.d(build_module_post_author_namespaceObject, "settings", function() { return post_author_settings; });

// NAMESPACE OBJECT: ./node_modules/@gechiui/block-library/build-module/post-comments/index.js
var build_module_post_comments_namespaceObject = {};
__webpack_require__.r(build_module_post_comments_namespaceObject);
__webpack_require__.d(build_module_post_comments_namespaceObject, "metadata", function() { return post_comments_metadata; });
__webpack_require__.d(build_module_post_comments_namespaceObject, "name", function() { return post_comments_name; });
__webpack_require__.d(build_module_post_comments_namespaceObject, "settings", function() { return post_comments_settings; });

// NAMESPACE OBJECT: ./node_modules/@gechiui/block-library/build-module/post-content/index.js
var build_module_post_content_namespaceObject = {};
__webpack_require__.r(build_module_post_content_namespaceObject);
__webpack_require__.d(build_module_post_content_namespaceObject, "metadata", function() { return post_content_metadata; });
__webpack_require__.d(build_module_post_content_namespaceObject, "name", function() { return post_content_name; });
__webpack_require__.d(build_module_post_content_namespaceObject, "settings", function() { return post_content_settings; });

// NAMESPACE OBJECT: ./node_modules/@gechiui/block-library/build-module/post-date/index.js
var build_module_post_date_namespaceObject = {};
__webpack_require__.r(build_module_post_date_namespaceObject);
__webpack_require__.d(build_module_post_date_namespaceObject, "metadata", function() { return post_date_metadata; });
__webpack_require__.d(build_module_post_date_namespaceObject, "name", function() { return post_date_name; });
__webpack_require__.d(build_module_post_date_namespaceObject, "settings", function() { return post_date_settings; });

// NAMESPACE OBJECT: ./node_modules/@gechiui/block-library/build-module/post-excerpt/index.js
var build_module_post_excerpt_namespaceObject = {};
__webpack_require__.r(build_module_post_excerpt_namespaceObject);
__webpack_require__.d(build_module_post_excerpt_namespaceObject, "metadata", function() { return post_excerpt_metadata; });
__webpack_require__.d(build_module_post_excerpt_namespaceObject, "name", function() { return post_excerpt_name; });
__webpack_require__.d(build_module_post_excerpt_namespaceObject, "settings", function() { return post_excerpt_settings; });

// NAMESPACE OBJECT: ./node_modules/@gechiui/block-library/build-module/post-featured-image/index.js
var build_module_post_featured_image_namespaceObject = {};
__webpack_require__.r(build_module_post_featured_image_namespaceObject);
__webpack_require__.d(build_module_post_featured_image_namespaceObject, "metadata", function() { return post_featured_image_metadata; });
__webpack_require__.d(build_module_post_featured_image_namespaceObject, "name", function() { return post_featured_image_name; });
__webpack_require__.d(build_module_post_featured_image_namespaceObject, "settings", function() { return post_featured_image_settings; });

// NAMESPACE OBJECT: ./node_modules/@gechiui/block-library/build-module/post-navigation-link/index.js
var post_navigation_link_namespaceObject = {};
__webpack_require__.r(post_navigation_link_namespaceObject);
__webpack_require__.d(post_navigation_link_namespaceObject, "metadata", function() { return post_navigation_link_metadata; });
__webpack_require__.d(post_navigation_link_namespaceObject, "name", function() { return post_navigation_link_name; });
__webpack_require__.d(post_navigation_link_namespaceObject, "settings", function() { return post_navigation_link_settings; });

// NAMESPACE OBJECT: ./node_modules/@gechiui/block-library/build-module/post-template/index.js
var post_template_namespaceObject = {};
__webpack_require__.r(post_template_namespaceObject);
__webpack_require__.d(post_template_namespaceObject, "metadata", function() { return post_template_metadata; });
__webpack_require__.d(post_template_namespaceObject, "name", function() { return post_template_name; });
__webpack_require__.d(post_template_namespaceObject, "settings", function() { return post_template_settings; });

// NAMESPACE OBJECT: ./node_modules/@gechiui/block-library/build-module/post-terms/index.js
var post_terms_namespaceObject = {};
__webpack_require__.r(post_terms_namespaceObject);
__webpack_require__.d(post_terms_namespaceObject, "metadata", function() { return post_terms_metadata; });
__webpack_require__.d(post_terms_namespaceObject, "name", function() { return post_terms_name; });
__webpack_require__.d(post_terms_namespaceObject, "settings", function() { return post_terms_settings; });

// NAMESPACE OBJECT: ./node_modules/@gechiui/block-library/build-module/post-title/index.js
var build_module_post_title_namespaceObject = {};
__webpack_require__.r(build_module_post_title_namespaceObject);
__webpack_require__.d(build_module_post_title_namespaceObject, "metadata", function() { return post_title_metadata; });
__webpack_require__.d(build_module_post_title_namespaceObject, "name", function() { return post_title_name; });
__webpack_require__.d(build_module_post_title_namespaceObject, "settings", function() { return post_title_settings; });

// NAMESPACE OBJECT: ./node_modules/@gechiui/block-library/build-module/preformatted/index.js
var build_module_preformatted_namespaceObject = {};
__webpack_require__.r(build_module_preformatted_namespaceObject);
__webpack_require__.d(build_module_preformatted_namespaceObject, "metadata", function() { return preformatted_metadata; });
__webpack_require__.d(build_module_preformatted_namespaceObject, "name", function() { return preformatted_name; });
__webpack_require__.d(build_module_preformatted_namespaceObject, "settings", function() { return preformatted_settings; });

// NAMESPACE OBJECT: ./node_modules/@gechiui/block-library/build-module/pullquote/index.js
var build_module_pullquote_namespaceObject = {};
__webpack_require__.r(build_module_pullquote_namespaceObject);
__webpack_require__.d(build_module_pullquote_namespaceObject, "metadata", function() { return pullquote_metadata; });
__webpack_require__.d(build_module_pullquote_namespaceObject, "name", function() { return pullquote_name; });
__webpack_require__.d(build_module_pullquote_namespaceObject, "settings", function() { return pullquote_settings; });

// NAMESPACE OBJECT: ./node_modules/@gechiui/block-library/build-module/query/index.js
var query_namespaceObject = {};
__webpack_require__.r(query_namespaceObject);
__webpack_require__.d(query_namespaceObject, "metadata", function() { return query_metadata; });
__webpack_require__.d(query_namespaceObject, "name", function() { return query_name; });
__webpack_require__.d(query_namespaceObject, "settings", function() { return query_settings; });

// NAMESPACE OBJECT: ./node_modules/@gechiui/block-library/build-module/query-pagination/index.js
var build_module_query_pagination_namespaceObject = {};
__webpack_require__.r(build_module_query_pagination_namespaceObject);
__webpack_require__.d(build_module_query_pagination_namespaceObject, "metadata", function() { return query_pagination_metadata; });
__webpack_require__.d(build_module_query_pagination_namespaceObject, "name", function() { return query_pagination_name; });
__webpack_require__.d(build_module_query_pagination_namespaceObject, "settings", function() { return query_pagination_settings; });

// NAMESPACE OBJECT: ./node_modules/@gechiui/block-library/build-module/query-pagination-next/index.js
var build_module_query_pagination_next_namespaceObject = {};
__webpack_require__.r(build_module_query_pagination_next_namespaceObject);
__webpack_require__.d(build_module_query_pagination_next_namespaceObject, "metadata", function() { return query_pagination_next_metadata; });
__webpack_require__.d(build_module_query_pagination_next_namespaceObject, "name", function() { return query_pagination_next_name; });
__webpack_require__.d(build_module_query_pagination_next_namespaceObject, "settings", function() { return query_pagination_next_settings; });

// NAMESPACE OBJECT: ./node_modules/@gechiui/block-library/build-module/query-pagination-numbers/index.js
var build_module_query_pagination_numbers_namespaceObject = {};
__webpack_require__.r(build_module_query_pagination_numbers_namespaceObject);
__webpack_require__.d(build_module_query_pagination_numbers_namespaceObject, "metadata", function() { return query_pagination_numbers_metadata; });
__webpack_require__.d(build_module_query_pagination_numbers_namespaceObject, "name", function() { return query_pagination_numbers_name; });
__webpack_require__.d(build_module_query_pagination_numbers_namespaceObject, "settings", function() { return query_pagination_numbers_settings; });

// NAMESPACE OBJECT: ./node_modules/@gechiui/block-library/build-module/query-pagination-previous/index.js
var build_module_query_pagination_previous_namespaceObject = {};
__webpack_require__.r(build_module_query_pagination_previous_namespaceObject);
__webpack_require__.d(build_module_query_pagination_previous_namespaceObject, "metadata", function() { return query_pagination_previous_metadata; });
__webpack_require__.d(build_module_query_pagination_previous_namespaceObject, "name", function() { return query_pagination_previous_name; });
__webpack_require__.d(build_module_query_pagination_previous_namespaceObject, "settings", function() { return query_pagination_previous_settings; });

// NAMESPACE OBJECT: ./node_modules/@gechiui/block-library/build-module/query-title/index.js
var query_title_namespaceObject = {};
__webpack_require__.r(query_title_namespaceObject);
__webpack_require__.d(query_title_namespaceObject, "metadata", function() { return query_title_metadata; });
__webpack_require__.d(query_title_namespaceObject, "name", function() { return query_title_name; });
__webpack_require__.d(query_title_namespaceObject, "settings", function() { return query_title_settings; });

// NAMESPACE OBJECT: ./node_modules/@gechiui/block-library/build-module/quote/index.js
var build_module_quote_namespaceObject = {};
__webpack_require__.r(build_module_quote_namespaceObject);
__webpack_require__.d(build_module_quote_namespaceObject, "metadata", function() { return quote_metadata; });
__webpack_require__.d(build_module_quote_namespaceObject, "name", function() { return quote_name; });
__webpack_require__.d(build_module_quote_namespaceObject, "settings", function() { return quote_settings; });

// NAMESPACE OBJECT: ./node_modules/@gechiui/block-library/build-module/block/index.js
var block_namespaceObject = {};
__webpack_require__.r(block_namespaceObject);
__webpack_require__.d(block_namespaceObject, "metadata", function() { return block_metadata; });
__webpack_require__.d(block_namespaceObject, "name", function() { return block_name; });
__webpack_require__.d(block_namespaceObject, "settings", function() { return block_settings; });

// NAMESPACE OBJECT: ./node_modules/@gechiui/block-library/build-module/rss/index.js
var build_module_rss_namespaceObject = {};
__webpack_require__.r(build_module_rss_namespaceObject);
__webpack_require__.d(build_module_rss_namespaceObject, "metadata", function() { return rss_metadata; });
__webpack_require__.d(build_module_rss_namespaceObject, "name", function() { return rss_name; });
__webpack_require__.d(build_module_rss_namespaceObject, "settings", function() { return rss_settings; });

// NAMESPACE OBJECT: ./node_modules/@gechiui/block-library/build-module/search/index.js
var search_namespaceObject = {};
__webpack_require__.r(search_namespaceObject);
__webpack_require__.d(search_namespaceObject, "metadata", function() { return search_metadata; });
__webpack_require__.d(search_namespaceObject, "name", function() { return search_name; });
__webpack_require__.d(search_namespaceObject, "settings", function() { return search_settings; });

// NAMESPACE OBJECT: ./node_modules/@gechiui/block-library/build-module/separator/index.js
var build_module_separator_namespaceObject = {};
__webpack_require__.r(build_module_separator_namespaceObject);
__webpack_require__.d(build_module_separator_namespaceObject, "metadata", function() { return separator_metadata; });
__webpack_require__.d(build_module_separator_namespaceObject, "name", function() { return separator_name; });
__webpack_require__.d(build_module_separator_namespaceObject, "settings", function() { return build_module_separator_settings; });

// NAMESPACE OBJECT: ./node_modules/@gechiui/block-library/build-module/shortcode/index.js
var build_module_shortcode_namespaceObject = {};
__webpack_require__.r(build_module_shortcode_namespaceObject);
__webpack_require__.d(build_module_shortcode_namespaceObject, "metadata", function() { return shortcode_metadata; });
__webpack_require__.d(build_module_shortcode_namespaceObject, "name", function() { return shortcode_name; });
__webpack_require__.d(build_module_shortcode_namespaceObject, "settings", function() { return shortcode_settings; });

// NAMESPACE OBJECT: ./node_modules/@gechiui/block-library/build-module/site-logo/index.js
var build_module_site_logo_namespaceObject = {};
__webpack_require__.r(build_module_site_logo_namespaceObject);
__webpack_require__.d(build_module_site_logo_namespaceObject, "metadata", function() { return site_logo_metadata; });
__webpack_require__.d(build_module_site_logo_namespaceObject, "name", function() { return site_logo_name; });
__webpack_require__.d(build_module_site_logo_namespaceObject, "settings", function() { return site_logo_settings; });

// NAMESPACE OBJECT: ./node_modules/@gechiui/block-library/build-module/site-tagline/index.js
var site_tagline_namespaceObject = {};
__webpack_require__.r(site_tagline_namespaceObject);
__webpack_require__.d(site_tagline_namespaceObject, "metadata", function() { return site_tagline_metadata; });
__webpack_require__.d(site_tagline_namespaceObject, "name", function() { return site_tagline_name; });
__webpack_require__.d(site_tagline_namespaceObject, "settings", function() { return site_tagline_settings; });

// NAMESPACE OBJECT: ./node_modules/@gechiui/block-library/build-module/site-title/index.js
var site_title_namespaceObject = {};
__webpack_require__.r(site_title_namespaceObject);
__webpack_require__.d(site_title_namespaceObject, "metadata", function() { return site_title_metadata; });
__webpack_require__.d(site_title_namespaceObject, "name", function() { return site_title_name; });
__webpack_require__.d(site_title_namespaceObject, "settings", function() { return site_title_settings; });

// NAMESPACE OBJECT: ./node_modules/@gechiui/block-library/build-module/social-link/index.js
var social_link_namespaceObject = {};
__webpack_require__.r(social_link_namespaceObject);
__webpack_require__.d(social_link_namespaceObject, "metadata", function() { return social_link_metadata; });
__webpack_require__.d(social_link_namespaceObject, "name", function() { return social_link_name; });
__webpack_require__.d(social_link_namespaceObject, "settings", function() { return social_link_settings; });

// NAMESPACE OBJECT: ./node_modules/@gechiui/block-library/build-module/social-links/index.js
var social_links_namespaceObject = {};
__webpack_require__.r(social_links_namespaceObject);
__webpack_require__.d(social_links_namespaceObject, "metadata", function() { return social_links_metadata; });
__webpack_require__.d(social_links_namespaceObject, "name", function() { return social_links_name; });
__webpack_require__.d(social_links_namespaceObject, "settings", function() { return social_links_settings; });

// NAMESPACE OBJECT: ./node_modules/@gechiui/block-library/build-module/spacer/index.js
var spacer_namespaceObject = {};
__webpack_require__.r(spacer_namespaceObject);
__webpack_require__.d(spacer_namespaceObject, "metadata", function() { return spacer_metadata; });
__webpack_require__.d(spacer_namespaceObject, "name", function() { return spacer_name; });
__webpack_require__.d(spacer_namespaceObject, "settings", function() { return spacer_settings; });

// NAMESPACE OBJECT: ./node_modules/@gechiui/block-library/build-module/table/index.js
var build_module_table_namespaceObject = {};
__webpack_require__.r(build_module_table_namespaceObject);
__webpack_require__.d(build_module_table_namespaceObject, "metadata", function() { return table_metadata; });
__webpack_require__.d(build_module_table_namespaceObject, "name", function() { return table_name; });
__webpack_require__.d(build_module_table_namespaceObject, "settings", function() { return table_settings; });

// NAMESPACE OBJECT: ./node_modules/@gechiui/block-library/build-module/tag-cloud/index.js
var tag_cloud_namespaceObject = {};
__webpack_require__.r(tag_cloud_namespaceObject);
__webpack_require__.d(tag_cloud_namespaceObject, "metadata", function() { return tag_cloud_metadata; });
__webpack_require__.d(tag_cloud_namespaceObject, "name", function() { return tag_cloud_name; });
__webpack_require__.d(tag_cloud_namespaceObject, "settings", function() { return tag_cloud_settings; });

// NAMESPACE OBJECT: ./node_modules/@gechiui/block-library/build-module/template-part/index.js
var template_part_namespaceObject = {};
__webpack_require__.r(template_part_namespaceObject);
__webpack_require__.d(template_part_namespaceObject, "metadata", function() { return template_part_metadata; });
__webpack_require__.d(template_part_namespaceObject, "name", function() { return template_part_name; });
__webpack_require__.d(template_part_namespaceObject, "settings", function() { return template_part_settings; });

// NAMESPACE OBJECT: ./node_modules/@gechiui/block-library/build-module/term-description/index.js
var build_module_term_description_namespaceObject = {};
__webpack_require__.r(build_module_term_description_namespaceObject);
__webpack_require__.d(build_module_term_description_namespaceObject, "metadata", function() { return term_description_metadata; });
__webpack_require__.d(build_module_term_description_namespaceObject, "name", function() { return term_description_name; });
__webpack_require__.d(build_module_term_description_namespaceObject, "settings", function() { return term_description_settings; });

// NAMESPACE OBJECT: ./node_modules/@gechiui/block-library/build-module/text-columns/index.js
var text_columns_namespaceObject = {};
__webpack_require__.r(text_columns_namespaceObject);
__webpack_require__.d(text_columns_namespaceObject, "metadata", function() { return text_columns_metadata; });
__webpack_require__.d(text_columns_namespaceObject, "name", function() { return text_columns_name; });
__webpack_require__.d(text_columns_namespaceObject, "settings", function() { return text_columns_settings; });

// NAMESPACE OBJECT: ./node_modules/@gechiui/block-library/build-module/verse/index.js
var build_module_verse_namespaceObject = {};
__webpack_require__.r(build_module_verse_namespaceObject);
__webpack_require__.d(build_module_verse_namespaceObject, "metadata", function() { return verse_metadata; });
__webpack_require__.d(build_module_verse_namespaceObject, "name", function() { return verse_name; });
__webpack_require__.d(build_module_verse_namespaceObject, "settings", function() { return verse_settings; });

// NAMESPACE OBJECT: ./node_modules/@gechiui/block-library/build-module/video/index.js
var build_module_video_namespaceObject = {};
__webpack_require__.r(build_module_video_namespaceObject);
__webpack_require__.d(build_module_video_namespaceObject, "metadata", function() { return video_metadata; });
__webpack_require__.d(build_module_video_namespaceObject, "name", function() { return video_name; });
__webpack_require__.d(build_module_video_namespaceObject, "settings", function() { return video_settings; });

// EXTERNAL MODULE: external ["gc","blocks"]
var external_gc_blocks_ = __webpack_require__("n68F");

// EXTERNAL MODULE: external ["gc","element"]
var external_gc_element_ = __webpack_require__("ewfG");

// EXTERNAL MODULE: external ["gc","primitives"]
var external_gc_primitives_ = __webpack_require__("Gz8V");

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/archive.js


/**
 * GeChiUI dependencies
 */

const archive = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  viewBox: "0 0 24 24",
  xmlns: "http://www.w3.org/2000/svg"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M19 6.2h-5.9l-.6-1.1c-.3-.7-1-1.1-1.8-1.1H5c-1.1 0-2 .9-2 2v11.8c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V8.2c0-1.1-.9-2-2-2zm.5 11.6c0 .3-.2.5-.5.5H5c-.3 0-.5-.2-.5-.5V6c0-.3.2-.5.5-.5h5.8c.2 0 .4.1.4.3l1 2H19c.3 0 .5.2.5.5v9.5zM8 12.8h8v-1.5H8v1.5zm0 3h8v-1.5H8v1.5z"
}));
/* harmony default export */ var library_archive = (archive);

// EXTERNAL MODULE: external ["gc","components"]
var external_gc_components_ = __webpack_require__("jd0n");

// EXTERNAL MODULE: external ["gc","i18n"]
var external_gc_i18n_ = __webpack_require__("z4sU");

// EXTERNAL MODULE: external ["gc","blockEditor"]
var external_gc_blockEditor_ = __webpack_require__("nLrk");

// EXTERNAL MODULE: external ["gc","serverSideRender"]
var external_gc_serverSideRender_ = __webpack_require__("bLmS");
var external_gc_serverSideRender_default = /*#__PURE__*/__webpack_require__.n(external_gc_serverSideRender_);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/archives/edit.js


/**
 * GeChiUI dependencies
 */




function ArchivesEdit(_ref) {
  let {
    attributes,
    setAttributes
  } = _ref;
  const {
    showPostCounts,
    displayAsDropdown
  } = attributes;
  return Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InspectorControls"], null, Object(external_gc_element_["createElement"])(external_gc_components_["PanelBody"], {
    title: Object(external_gc_i18n_["__"])('归档设置')
  }, Object(external_gc_element_["createElement"])(external_gc_components_["ToggleControl"], {
    label: Object(external_gc_i18n_["__"])('以下拉菜单显示'),
    checked: displayAsDropdown,
    onChange: () => setAttributes({
      displayAsDropdown: !displayAsDropdown
    })
  }), Object(external_gc_element_["createElement"])(external_gc_components_["ToggleControl"], {
    label: Object(external_gc_i18n_["__"])('显示文章数目'),
    checked: showPostCounts,
    onChange: () => setAttributes({
      showPostCounts: !showPostCounts
    })
  }))), Object(external_gc_element_["createElement"])("div", Object(external_gc_blockEditor_["useBlockProps"])(), Object(external_gc_element_["createElement"])(external_gc_components_["Disabled"], null, Object(external_gc_element_["createElement"])(external_gc_serverSideRender_default.a, {
    block: "core/archives",
    attributes: attributes
  }))));
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/archives/index.js
/**
 * GeChiUI dependencies
 */

/**
 * Internal dependencies
 */

const archives_metadata = {
  apiVersion: 2,
  name: "core/archives",
  title: "归档",
  category: "widgets",
  description: "显示您的文章的月度归档。",
  textdomain: "default",
  attributes: {
    displayAsDropdown: {
      type: "boolean",
      "default": false
    },
    showPostCounts: {
      type: "boolean",
      "default": false
    }
  },
  supports: {
    align: true,
    html: false
  },
  editorStyle: "gc-block-archives-editor"
};

const {
  name: archives_name
} = archives_metadata;

const archives_settings = {
  icon: library_archive,
  example: {},
  edit: ArchivesEdit
};

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/audio.js


/**
 * GeChiUI dependencies
 */

const audio = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  viewBox: "0 0 24 24",
  xmlns: "http://www.w3.org/2000/svg"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M17.7 4.3c-1.2 0-2.8 0-3.8 1-.6.6-.9 1.5-.9 2.6V14c-.6-.6-1.5-1-2.5-1C8.6 13 7 14.6 7 16.5S8.6 20 10.5 20c1.5 0 2.8-1 3.3-2.3.5-.8.7-1.8.7-2.5V7.9c0-.7.2-1.2.5-1.6.6-.6 1.8-.6 2.8-.6h.3V4.3h-.4z"
}));
/* harmony default export */ var library_audio = (audio);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/audio/deprecated.js


/**
 * GeChiUI dependencies
 */

/* harmony default export */ var deprecated = ([{
  attributes: {
    src: {
      type: 'string',
      source: 'attribute',
      selector: 'audio',
      attribute: 'src'
    },
    caption: {
      type: 'string',
      source: 'html',
      selector: 'figcaption'
    },
    id: {
      type: 'number'
    },
    autoplay: {
      type: 'boolean',
      source: 'attribute',
      selector: 'audio',
      attribute: 'autoplay'
    },
    loop: {
      type: 'boolean',
      source: 'attribute',
      selector: 'audio',
      attribute: 'loop'
    },
    preload: {
      type: 'string',
      source: 'attribute',
      selector: 'audio',
      attribute: 'preload'
    }
  },
  supports: {
    align: true
  },

  save(_ref) {
    let {
      attributes
    } = _ref;
    const {
      autoplay,
      caption,
      loop,
      preload,
      src
    } = attributes;
    return Object(external_gc_element_["createElement"])("figure", null, Object(external_gc_element_["createElement"])("audio", {
      controls: "controls",
      src: src,
      autoPlay: autoplay,
      loop: loop,
      preload: preload
    }), !external_gc_blockEditor_["RichText"].isEmpty(caption) && Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"].Content, {
      tagName: "figcaption",
      value: caption
    }));
  }

}]);

// EXTERNAL MODULE: external ["gc","blob"]
var external_gc_blob_ = __webpack_require__("8mya");

// EXTERNAL MODULE: external ["gc","data"]
var external_gc_data_ = __webpack_require__("IgLd");

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/embed/constants.js
const ASPECT_RATIOS = [// Common video resolutions.
{
  ratio: '2.33',
  className: 'gc-embed-aspect-21-9'
}, {
  ratio: '2.00',
  className: 'gc-embed-aspect-18-9'
}, {
  ratio: '1.78',
  className: 'gc-embed-aspect-16-9'
}, {
  ratio: '1.33',
  className: 'gc-embed-aspect-4-3'
}, // Vertical video and instagram square video support.
{
  ratio: '1.00',
  className: 'gc-embed-aspect-1-1'
}, {
  ratio: '0.56',
  className: 'gc-embed-aspect-9-16'
}, {
  ratio: '0.50',
  className: 'gc-embed-aspect-1-2'
}];
const GC_EMBED_TYPE = 'gc-embed';

// EXTERNAL MODULE: external "lodash"
var external_lodash_ = __webpack_require__("YLtl");

// EXTERNAL MODULE: ./node_modules/classnames/dedupe.js
var dedupe = __webpack_require__("A/WM");
var dedupe_default = /*#__PURE__*/__webpack_require__.n(dedupe);

// EXTERNAL MODULE: ./node_modules/memize/index.js
var memize = __webpack_require__("4eJC");
var memize_default = /*#__PURE__*/__webpack_require__.n(memize);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/embed/util.js


/**
 * Internal dependencies
 */

/**
 * External dependencies
 */




/**
 * GeChiUI dependencies
 */



/**
 * Internal dependencies
 */

const util_metadata = {
  apiVersion: 2,
  name: "core/embed",
  title: "嵌入",
  category: "embed",
  description: "添加可显示 Twitter、YouTube等站点嵌入内容的区块。",
  textdomain: "default",
  attributes: {
    url: {
      type: "string"
    },
    caption: {
      type: "string",
      source: "html",
      selector: "figcaption"
    },
    type: {
      type: "string"
    },
    providerNameSlug: {
      type: "string"
    },
    allowResponsive: {
      type: "boolean",
      "default": true
    },
    responsive: {
      type: "boolean",
      "default": false
    },
    previewable: {
      type: "boolean",
      "default": true
    }
  },
  supports: {
    align: true
  },
  editorStyle: "gc-block-embed-editor",
  style: "gc-block-embed"
};
const {
  name: DEFAULT_EMBED_BLOCK
} = util_metadata;
/** @typedef {import('@gechiui/blocks').GCBlockVariation} GCBlockVariation */

/**
 * Returns the embed block's information by matching the provided service provider
 *
 * @param {string} provider The embed block's provider
 * @return {GCBlockVariation} The embed block's information
 */

const getEmbedInfoByProvider = provider => {
  var _getBlockVariations;

  return (_getBlockVariations = Object(external_gc_blocks_["getBlockVariations"])(DEFAULT_EMBED_BLOCK)) === null || _getBlockVariations === void 0 ? void 0 : _getBlockVariations.find(_ref => {
    let {
      name
    } = _ref;
    return name === provider;
  });
};
/**
 * Returns true if any of the regular expressions match the URL.
 *
 * @param {string} url      The URL to test.
 * @param {Array}  patterns The list of regular expressions to test agains.
 * @return {boolean} True if any of the regular expressions match the URL.
 */

const matchesPatterns = function (url) {
  let patterns = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  return patterns.some(pattern => url.match(pattern));
};
/**
 * Finds the block variation that should be used for the URL,
 * based on the provided URL and the variation's patterns.
 *
 * @param {string} url The URL to test.
 * @return {GCBlockVariation} The block variation that should be used for this URL
 */

const findMoreSuitableBlock = url => {
  var _getBlockVariations2;

  return (_getBlockVariations2 = Object(external_gc_blocks_["getBlockVariations"])(DEFAULT_EMBED_BLOCK)) === null || _getBlockVariations2 === void 0 ? void 0 : _getBlockVariations2.find(_ref2 => {
    let {
      patterns
    } = _ref2;
    return matchesPatterns(url, patterns);
  });
};
const isFromGeChiUI = html => html && html.includes('class="gc-embedded-content"');
const getPhotoHtml = photo => {
  // 100% width for the preview so it fits nicely into the document, some "thumbnails" are
  // actually the full size photo. If thumbnails not found, use full image.
  const imageUrl = photo.thumbnail_url || photo.url;
  const photoPreview = Object(external_gc_element_["createElement"])("p", null, Object(external_gc_element_["createElement"])("img", {
    src: imageUrl,
    alt: photo.title,
    width: "100%"
  }));
  return Object(external_gc_element_["renderToString"])(photoPreview);
};
/**
 * Creates a more suitable embed block based on the passed in props
 * and attributes generated from an embed block's preview.
 *
 * We require `attributesFromPreview` to be generated from the latest attributes
 * and preview, and because of the way the react lifecycle operates, we can't
 * guarantee that the attributes contained in the block's props are the latest
 * versions, so we require that these are generated separately.
 * See `getAttributesFromPreview` in the generated embed edit component.
 *
 * @param {Object} props                   The block's props.
 * @param {Object} [attributesFromPreview] Attributes generated from the block's most up to date preview.
 * @return {Object|undefined} A more suitable embed block if one exists.
 */

const createUpgradedEmbedBlock = function (props) {
  var _getBlockVariations3;

  let attributesFromPreview = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  const {
    preview,
    attributes = {}
  } = props;
  const {
    url,
    providerNameSlug,
    type,
    ...restAttributes
  } = attributes;
  if (!url || !Object(external_gc_blocks_["getBlockType"])(DEFAULT_EMBED_BLOCK)) return;
  const matchedBlock = findMoreSuitableBlock(url); // GeChiUI blocks can work on multiple sites, and so don't have patterns,
  // so if we're in a GeChiUI block, assume the user has chosen it for a GeChiUI URL.

  const isCurrentBlockGC = providerNameSlug === 'gechiui' || type === GC_EMBED_TYPE; // if current block is not GeChiUI and a more suitable block found
  // that is different from the current one, create the new matched block

  const shouldCreateNewBlock = !isCurrentBlockGC && matchedBlock && (matchedBlock.attributes.providerNameSlug !== providerNameSlug || !providerNameSlug);

  if (shouldCreateNewBlock) {
    return Object(external_gc_blocks_["createBlock"])(DEFAULT_EMBED_BLOCK, {
      url,
      ...restAttributes,
      ...matchedBlock.attributes
    });
  }

  const gcVariation = (_getBlockVariations3 = Object(external_gc_blocks_["getBlockVariations"])(DEFAULT_EMBED_BLOCK)) === null || _getBlockVariations3 === void 0 ? void 0 : _getBlockVariations3.find(_ref3 => {
    let {
      name
    } = _ref3;
    return name === 'gechiui';
  }); // We can't match the URL for GeChiUI embeds, we have to check the HTML instead.

  if (!gcVariation || !preview || !isFromGeChiUI(preview.html) || isCurrentBlockGC) {
    return;
  } // This is not the GeChiUI embed block so transform it into one.


  return Object(external_gc_blocks_["createBlock"])(DEFAULT_EMBED_BLOCK, {
    url,
    ...gcVariation.attributes,
    // By now we have the preview, but when the new block first renders, it
    // won't have had all the attributes set, and so won't get the correct
    // type and it won't render correctly. So, we pass through the current attributes
    // here so that the initial render works when we switch to the GeChiUI
    // block. This only affects the GeChiUI block because it can't be
    // rendered in the usual Sandbox (it has a sandbox of its own) and it
    // relies on the preview to set the correct render type.
    ...attributesFromPreview
  });
};
/**
 * Removes all previously set aspect ratio related classes and return the rest
 * existing class names.
 *
 * @param {string} existingClassNames Any existing class names.
 * @return {string} The class names without any aspect ratio related class.
 */

const removeAspectRatioClasses = existingClassNames => {
  if (!existingClassNames) {
    // Avoids extraneous work and also, by returning the same value as
    // received, ensures the post is not dirtied by a change of the block
    // attribute from `undefined` to an emtpy string.
    return existingClassNames;
  }

  const aspectRatioClassNames = ASPECT_RATIOS.reduce((accumulator, _ref4) => {
    let {
      className
    } = _ref4;
    accumulator[className] = false;
    return accumulator;
  }, {
    'gc-has-aspect-ratio': false
  });
  return dedupe_default()(existingClassNames, aspectRatioClassNames);
};
/**
 * Returns class names with any relevant responsive aspect ratio names.
 *
 * @param {string}  html               The preview HTML that possibly contains an iframe with width and height set.
 * @param {string}  existingClassNames Any existing class names.
 * @param {boolean} allowResponsive    If the responsive class names should be added, or removed.
 * @return {string} Deduped class names.
 */

function getClassNames(html, existingClassNames) {
  let allowResponsive = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

  if (!allowResponsive) {
    return removeAspectRatioClasses(existingClassNames);
  }

  const previewDocument = document.implementation.createHTMLDocument('');
  previewDocument.body.innerHTML = html;
  const iframe = previewDocument.body.querySelector('iframe'); // If we have a fixed aspect iframe, and it's a responsive embed block.

  if (iframe && iframe.height && iframe.width) {
    const aspectRatio = (iframe.width / iframe.height).toFixed(2); // Given the actual aspect ratio, find the widest ratio to support it.

    for (let ratioIndex = 0; ratioIndex < ASPECT_RATIOS.length; ratioIndex++) {
      const potentialRatio = ASPECT_RATIOS[ratioIndex];

      if (aspectRatio >= potentialRatio.ratio) {
        // Evaluate the difference between actual aspect ratio and closest match.
        // If the difference is too big, do not scale the embed according to aspect ratio.
        const ratioDiff = aspectRatio - potentialRatio.ratio;

        if (ratioDiff > 0.1) {
          // No close aspect ratio match found.
          return removeAspectRatioClasses(existingClassNames);
        } // Close aspect ratio match found.


        return dedupe_default()(removeAspectRatioClasses(existingClassNames), potentialRatio.className, 'gc-has-aspect-ratio');
      }
    }
  }

  return existingClassNames;
}
/**
 * Fallback behaviour for unembeddable URLs.
 * Creates a paragraph block containing a link to the URL, and calls `onReplace`.
 *
 * @param {string}   url       The URL that could not be embedded.
 * @param {Function} onReplace Function to call with the created fallback block.
 */

function util_fallback(url, onReplace) {
  const link = Object(external_gc_element_["createElement"])("a", {
    href: url
  }, url);
  onReplace(Object(external_gc_blocks_["createBlock"])('core/paragraph', {
    content: Object(external_gc_element_["renderToString"])(link)
  }));
}
/***
 * Gets block attributes based on the preview and responsive state.
 *
 * @param {Object} preview The preview data.
 * @param {string} title The block's title, e.g. Twitter.
 * @param {Object} currentClassNames The block's current class names.
 * @param {boolean} isResponsive Boolean indicating if the block supports responsive content.
 * @param {boolean} allowResponsive Apply responsive classes to fixed size content.
 * @return {Object} Attributes and values.
 */

const getAttributesFromPreview = memize_default()(function (preview, title, currentClassNames, isResponsive) {
  let allowResponsive = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;

  if (!preview) {
    return {};
  }

  const attributes = {}; // Some plugins only return HTML with no type info, so default this to 'rich'.

  let {
    type = 'rich'
  } = preview; // If we got a provider name from the API, use it for the slug, otherwise we use the title,
  // because not all embed code gives us a provider name.

  const {
    html,
    provider_name: providerName
  } = preview;
  const providerNameSlug = Object(external_lodash_["kebabCase"])((providerName || title).toLowerCase());

  if (isFromGeChiUI(html)) {
    type = GC_EMBED_TYPE;
  }

  if (html || 'photo' === type) {
    attributes.type = type;
    attributes.providerNameSlug = providerNameSlug;
  }

  attributes.className = getClassNames(html, currentClassNames, isResponsive && allowResponsive);
  return attributes;
});

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/audio/edit.js


/**
 * GeChiUI dependencies
 */








/**
 * Internal dependencies
 */


const ALLOWED_MEDIA_TYPES = ['audio'];

function AudioEdit(_ref) {
  let {
    attributes,
    noticeOperations,
    setAttributes,
    onReplace,
    isSelected,
    noticeUI,
    insertBlocksAfter
  } = _ref;
  const {
    id,
    autoplay,
    caption,
    loop,
    preload,
    src
  } = attributes;
  const blockProps = Object(external_gc_blockEditor_["useBlockProps"])();
  const mediaUpload = Object(external_gc_data_["useSelect"])(select => {
    const {
      getSettings
    } = select(external_gc_blockEditor_["store"]);
    return getSettings().mediaUpload;
  }, []);
  Object(external_gc_element_["useEffect"])(() => {
    if (!id && Object(external_gc_blob_["isBlobURL"])(src)) {
      const file = Object(external_gc_blob_["getBlobByURL"])(src);

      if (file) {
        mediaUpload({
          filesList: [file],
          onFileChange: _ref2 => {
            let [{
              id: mediaId,
              url
            }] = _ref2;
            setAttributes({
              id: mediaId,
              src: url
            });
          },
          onError: e => {
            setAttributes({
              src: undefined,
              id: undefined
            });
            noticeOperations.createErrorNotice(e);
          },
          allowedTypes: ALLOWED_MEDIA_TYPES
        });
      }
    }
  }, []);

  function toggleAttribute(attribute) {
    return newValue => {
      setAttributes({
        [attribute]: newValue
      });
    };
  }

  function onSelectURL(newSrc) {
    // Set the block's src from the edit component's state, and switch off
    // the editing UI.
    if (newSrc !== src) {
      // Check if there's an embed block that handles this URL.
      const embedBlock = createUpgradedEmbedBlock({
        attributes: {
          url: newSrc
        }
      });

      if (undefined !== embedBlock) {
        onReplace(embedBlock);
        return;
      }

      setAttributes({
        src: newSrc,
        id: undefined
      });
    }
  }

  function onUploadError(message) {
    noticeOperations.removeAllNotices();
    noticeOperations.createErrorNotice(message);
  }

  function getAutoplayHelp(checked) {
    return checked ? Object(external_gc_i18n_["__"])('自动播放可能对一些用户造成可用性问题。') : null;
  } // const { setAttributes, isSelected, noticeUI } = this.props;


  function onSelectAudio(media) {
    if (!media || !media.url) {
      // in this case there was an error and we should continue in the editing state
      // previous attributes should be removed because they may be temporary blob urls
      setAttributes({
        src: undefined,
        id: undefined
      });
      return;
    } // sets the block's attribute and updates the edit component from the
    // selected media, then switches off the editing UI


    setAttributes({
      src: media.url,
      id: media.id
    });
  }

  if (!src) {
    return Object(external_gc_element_["createElement"])("div", blockProps, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["MediaPlaceholder"], {
      icon: Object(external_gc_element_["createElement"])(external_gc_blockEditor_["BlockIcon"], {
        icon: library_audio
      }),
      onSelect: onSelectAudio,
      onSelectURL: onSelectURL,
      accept: "audio/*",
      allowedTypes: ALLOWED_MEDIA_TYPES,
      value: attributes,
      notices: noticeUI,
      onError: onUploadError
    }));
  }

  return Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["BlockControls"], {
    group: "other"
  }, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["MediaReplaceFlow"], {
    mediaId: id,
    mediaURL: src,
    allowedTypes: ALLOWED_MEDIA_TYPES,
    accept: "audio/*",
    onSelect: onSelectAudio,
    onSelectURL: onSelectURL,
    onError: onUploadError
  })), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InspectorControls"], null, Object(external_gc_element_["createElement"])(external_gc_components_["PanelBody"], {
    title: Object(external_gc_i18n_["__"])('音频设置')
  }, Object(external_gc_element_["createElement"])(external_gc_components_["ToggleControl"], {
    label: Object(external_gc_i18n_["__"])('自动播放'),
    onChange: toggleAttribute('autoplay'),
    checked: autoplay,
    help: getAutoplayHelp
  }), Object(external_gc_element_["createElement"])(external_gc_components_["ToggleControl"], {
    label: Object(external_gc_i18n_["__"])('循环'),
    onChange: toggleAttribute('loop'),
    checked: loop
  }), Object(external_gc_element_["createElement"])(external_gc_components_["SelectControl"], {
    label: Object(external_gc_i18n_["_x"])('预加载', 'noun; Audio block parameter'),
    value: preload || '' // `undefined` is required for the preload attribute to be unset.
    ,
    onChange: value => setAttributes({
      preload: value || undefined
    }),
    options: [{
      value: '',
      label: Object(external_gc_i18n_["__"])('浏览器默认')
    }, {
      value: 'auto',
      label: Object(external_gc_i18n_["__"])('自动')
    }, {
      value: 'metadata',
      label: Object(external_gc_i18n_["__"])('元数据')
    }, {
      value: 'none',
      label: Object(external_gc_i18n_["_x"])('无', '"Preload" value')
    }]
  }))), Object(external_gc_element_["createElement"])("figure", blockProps, Object(external_gc_element_["createElement"])(external_gc_components_["Disabled"], {
    isDisabled: !isSelected
  }, Object(external_gc_element_["createElement"])("audio", {
    controls: "controls",
    src: src
  })), (!external_gc_blockEditor_["RichText"].isEmpty(caption) || isSelected) && Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"], {
    tagName: "figcaption",
    "aria-label": Object(external_gc_i18n_["__"])('音频说明文字'),
    placeholder: Object(external_gc_i18n_["__"])('添加说明文字'),
    value: caption,
    onChange: value => setAttributes({
      caption: value
    }),
    inlineToolbar: true,
    __unstableOnSplitAtEnd: () => insertBlocksAfter(Object(external_gc_blocks_["createBlock"])('core/paragraph'))
  })));
}

/* harmony default export */ var edit = (Object(external_gc_components_["withNotices"])(AudioEdit));

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/audio/save.js


/**
 * GeChiUI dependencies
 */

function save(_ref) {
  let {
    attributes
  } = _ref;
  const {
    autoplay,
    caption,
    loop,
    preload,
    src
  } = attributes;
  return src && Object(external_gc_element_["createElement"])("figure", external_gc_blockEditor_["useBlockProps"].save(), Object(external_gc_element_["createElement"])("audio", {
    controls: "controls",
    src: src,
    autoPlay: autoplay,
    loop: loop,
    preload: preload
  }), !external_gc_blockEditor_["RichText"].isEmpty(caption) && Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"].Content, {
    tagName: "figcaption",
    value: caption
  }));
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/audio/transforms.js
/**
 * GeChiUI dependencies
 */


const transforms_transforms = {
  from: [{
    type: 'files',

    isMatch(files) {
      return files.length === 1 && files[0].type.indexOf('audio/') === 0;
    },

    transform(files) {
      const file = files[0]; // We don't need to upload the media directly here
      // It's already done as part of the `componentDidMount`
      // in the audio block

      const block = Object(external_gc_blocks_["createBlock"])('core/audio', {
        src: Object(external_gc_blob_["createBlobURL"])(file)
      });
      return block;
    }

  }, {
    type: 'shortcode',
    tag: 'audio',
    attributes: {
      src: {
        type: 'string',
        shortcode: _ref => {
          let {
            named: {
              src,
              mp3,
              m4a,
              ogg,
              wav,
              wma
            }
          } = _ref;
          return src || mp3 || m4a || ogg || wav || wma;
        }
      },
      loop: {
        type: 'string',
        shortcode: _ref2 => {
          let {
            named: {
              loop
            }
          } = _ref2;
          return loop;
        }
      },
      autoplay: {
        type: 'string',
        shortcode: _ref3 => {
          let {
            named: {
              autoplay
            }
          } = _ref3;
          return autoplay;
        }
      },
      preload: {
        type: 'string',
        shortcode: _ref4 => {
          let {
            named: {
              preload
            }
          } = _ref4;
          return preload;
        }
      }
    }
  }]
};
/* harmony default export */ var audio_transforms = (transforms_transforms);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/audio/index.js
/**
 * GeChiUI dependencies
 */

/**
 * Internal dependencies
 */



const audio_metadata = {
  apiVersion: 2,
  name: "core/audio",
  title: "音频",
  category: "media",
  description: "嵌入简单音频播放器。",
  keywords: ["music", "sound", "podcast", "recording"],
  textdomain: "default",
  attributes: {
    src: {
      type: "string",
      source: "attribute",
      selector: "audio",
      attribute: "src"
    },
    caption: {
      type: "string",
      source: "html",
      selector: "figcaption"
    },
    id: {
      type: "number"
    },
    autoplay: {
      type: "boolean",
      source: "attribute",
      selector: "audio",
      attribute: "autoplay"
    },
    loop: {
      type: "boolean",
      source: "attribute",
      selector: "audio",
      attribute: "loop"
    },
    preload: {
      type: "string",
      source: "attribute",
      selector: "audio",
      attribute: "preload"
    }
  },
  supports: {
    anchor: true,
    align: true
  },
  editorStyle: "gc-block-audio-editor",
  style: "gc-block-audio"
};


const {
  name: audio_name
} = audio_metadata;

const audio_settings = {
  icon: library_audio,
  example: {
    attributes: {
      src: 'https://upload.wikimedia.org/wikipedia/commons/d/dd/Armstrong_Small_Step.ogg'
    }
  },
  transforms: audio_transforms,
  deprecated: deprecated,
  edit: edit,
  save: save
};

// EXTERNAL MODULE: ./node_modules/@gechiui/icons/build-module/library/button.js
var library_button = __webpack_require__("UEDd");

// EXTERNAL MODULE: ./node_modules/classnames/index.js
var classnames = __webpack_require__("TSYQ");
var classnames_default = /*#__PURE__*/__webpack_require__.n(classnames);

// EXTERNAL MODULE: external ["gc","compose"]
var external_gc_compose_ = __webpack_require__("dMTb");

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/utils/clean-empty-object.js
/**
 * External dependencies
 */

/**
 * Removed empty nodes from nested objects.
 *
 * @param {Object} object
 * @return {Object} Object cleaned from empty nodes.
 */

const cleanEmptyObject = object => {
  if (!Object(external_lodash_["isObject"])(object) || Array.isArray(object)) {
    return object;
  }

  const cleanedNestedObjects = Object(external_lodash_["pickBy"])(Object(external_lodash_["mapValues"])(object, cleanEmptyObject), external_lodash_["identity"]);
  return Object(external_lodash_["isEmpty"])(cleanedNestedObjects) ? undefined : cleanedNestedObjects;
};

/* harmony default export */ var clean_empty_object = (cleanEmptyObject);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/utils/migrate-font-family.js
/**
 * External dependencies
 */

/**
 * Internal dependencies
 */


/**
 * Migrates the current style.typography.fontFamily attribute,
 * whose value was "var:preset|font-family|helvetica-arial",
 * to the style.fontFamily attribute, whose value will be "helvetica-arial".
 *
 * @param {Object} attributes The current attributes
 * @return {Object} The updated attributes.
 */

/* harmony default export */ var migrate_font_family = (function (attributes) {
  var _attributes$style, _attributes$style$typ;

  if (!(attributes !== null && attributes !== void 0 && (_attributes$style = attributes.style) !== null && _attributes$style !== void 0 && (_attributes$style$typ = _attributes$style.typography) !== null && _attributes$style$typ !== void 0 && _attributes$style$typ.fontFamily)) {
    return attributes;
  } // Clone first so when we delete the fontFamily
  // below we're not modifying the original
  // attributes. Because the deprecation may be discarded
  // we don't want to alter the original attributes.


  const atts = Object(external_lodash_["cloneDeep"])(attributes);
  const fontFamily = atts.style.typography.fontFamily.split('|').pop();
  delete atts.style.typography.fontFamily;
  atts.style = clean_empty_object(atts.style);
  return { ...atts,
    fontFamily
  };
});

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/button/deprecated.js


/**
 * External dependencies
 */


/**
 * GeChiUI dependencies
 */



/**
 * Internal dependencies
 */



const migrateBorderRadius = attributes => {
  var _newAttributes$style, _newAttributes$style$, _newAttributes$style2;

  const {
    borderRadius,
    ...newAttributes
  } = attributes; // We have to check old property `borderRadius` and if
  // `styles.border.radius` is a `number`

  const oldBorderRadius = [borderRadius, (_newAttributes$style = newAttributes.style) === null || _newAttributes$style === void 0 ? void 0 : (_newAttributes$style$ = _newAttributes$style.border) === null || _newAttributes$style$ === void 0 ? void 0 : _newAttributes$style$.radius].find(possibleBorderRadius => {
    return typeof possibleBorderRadius === 'number' && possibleBorderRadius !== 0;
  });

  if (!oldBorderRadius) {
    return newAttributes;
  }

  return { ...newAttributes,
    style: { ...newAttributes.style,
      border: { ...((_newAttributes$style2 = newAttributes.style) === null || _newAttributes$style2 === void 0 ? void 0 : _newAttributes$style2.border),
        radius: `${oldBorderRadius}px`
      }
    }
  };
};

const migrateCustomColorsAndGradients = attributes => {
  if (!attributes.customTextColor && !attributes.customBackgroundColor && !attributes.customGradient) {
    return attributes;
  }

  const style = {
    color: {}
  };

  if (attributes.customTextColor) {
    style.color.text = attributes.customTextColor;
  }

  if (attributes.customBackgroundColor) {
    style.color.background = attributes.customBackgroundColor;
  }

  if (attributes.customGradient) {
    style.color.gradient = attributes.customGradient;
  }

  return { ...Object(external_lodash_["omit"])(attributes, ['customTextColor', 'customBackgroundColor', 'customGradient']),
    style
  };
};

const oldColorsMigration = attributes => {
  return migrateCustomColorsAndGradients(Object(external_lodash_["omit"])({ ...attributes,
    customTextColor: attributes.textColor && '#' === attributes.textColor[0] ? attributes.textColor : undefined,
    customBackgroundColor: attributes.color && '#' === attributes.color[0] ? attributes.color : undefined
  }, ['color', 'textColor']));
};

const deprecated_blockAttributes = {
  url: {
    type: 'string',
    source: 'attribute',
    selector: 'a',
    attribute: 'href'
  },
  title: {
    type: 'string',
    source: 'attribute',
    selector: 'a',
    attribute: 'title'
  },
  text: {
    type: 'string',
    source: 'html',
    selector: 'a'
  }
};
const v10 = {
  attributes: {
    url: {
      type: 'string',
      source: 'attribute',
      selector: 'a',
      attribute: 'href'
    },
    title: {
      type: 'string',
      source: 'attribute',
      selector: 'a',
      attribute: 'title'
    },
    text: {
      type: 'string',
      source: 'html',
      selector: 'a'
    },
    linkTarget: {
      type: 'string',
      source: 'attribute',
      selector: 'a',
      attribute: 'target'
    },
    rel: {
      type: 'string',
      source: 'attribute',
      selector: 'a',
      attribute: 'rel'
    },
    placeholder: {
      type: 'string'
    },
    backgroundColor: {
      type: 'string'
    },
    textColor: {
      type: 'string'
    },
    gradient: {
      type: 'string'
    },
    width: {
      type: 'number'
    }
  },
  supports: {
    anchor: true,
    align: true,
    alignWide: false,
    color: {
      __experimentalSkipSerialization: true,
      gradients: true
    },
    typography: {
      fontSize: true,
      __experimentalFontFamily: true
    },
    reusable: false,
    spacing: {
      __experimentalSkipSerialization: true,
      padding: ['horizontal', 'vertical'],
      __experimentalDefaultControls: {
        padding: true
      }
    },
    __experimentalBorder: {
      radius: true,
      __experimentalSkipSerialization: true
    },
    __experimentalSelector: '.gc-block-button__link'
  },

  save(_ref) {
    var _style$border, _style$typography;

    let {
      attributes,
      className
    } = _ref;
    const {
      fontSize,
      linkTarget,
      rel,
      style,
      text,
      title,
      url,
      width
    } = attributes;

    if (!text) {
      return null;
    }

    const borderProps = Object(external_gc_blockEditor_["__experimentalGetBorderClassesAndStyles"])(attributes);
    const colorProps = Object(external_gc_blockEditor_["__experimentalGetColorClassesAndStyles"])(attributes);
    const spacingProps = Object(external_gc_blockEditor_["__experimentalGetSpacingClassesAndStyles"])(attributes);
    const buttonClasses = classnames_default()('gc-block-button__link', colorProps.className, borderProps.className, {
      // For backwards compatibility add style that isn't provided via
      // block support.
      'no-border-radius': (style === null || style === void 0 ? void 0 : (_style$border = style.border) === null || _style$border === void 0 ? void 0 : _style$border.radius) === 0
    });
    const buttonStyle = { ...borderProps.style,
      ...colorProps.style,
      ...spacingProps.style
    }; // The use of a `title` attribute here is soft-deprecated, but still applied
    // if it had already been assigned, for the sake of backward-compatibility.
    // A title will no longer be assigned for new or updated button block links.

    const wrapperClasses = classnames_default()(className, {
      [`has-custom-width gc-block-button__width-${width}`]: width,
      [`has-custom-font-size`]: fontSize || (style === null || style === void 0 ? void 0 : (_style$typography = style.typography) === null || _style$typography === void 0 ? void 0 : _style$typography.fontSize)
    });
    return Object(external_gc_element_["createElement"])("div", external_gc_blockEditor_["useBlockProps"].save({
      className: wrapperClasses
    }), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"].Content, {
      tagName: "a",
      className: buttonClasses,
      href: url,
      title: title,
      style: buttonStyle,
      value: text,
      target: linkTarget,
      rel: rel
    }));
  },

  migrate: migrate_font_family,

  isEligible(_ref2) {
    var _style$typography2;

    let {
      style
    } = _ref2;
    return style === null || style === void 0 ? void 0 : (_style$typography2 = style.typography) === null || _style$typography2 === void 0 ? void 0 : _style$typography2.fontFamily;
  }

};
const deprecated_deprecated = [v10, {
  supports: {
    anchor: true,
    align: true,
    alignWide: false,
    color: {
      __experimentalSkipSerialization: true,
      gradients: true
    },
    typography: {
      fontSize: true,
      __experimentalFontFamily: true
    },
    reusable: false,
    __experimentalSelector: '.gc-block-button__link'
  },
  attributes: { ...deprecated_blockAttributes,
    linkTarget: {
      type: 'string',
      source: 'attribute',
      selector: 'a',
      attribute: 'target'
    },
    rel: {
      type: 'string',
      source: 'attribute',
      selector: 'a',
      attribute: 'rel'
    },
    placeholder: {
      type: 'string'
    },
    backgroundColor: {
      type: 'string'
    },
    textColor: {
      type: 'string'
    },
    gradient: {
      type: 'string'
    },
    width: {
      type: 'number'
    }
  },

  isEligible(_ref3) {
    var _style$border2;

    let {
      style
    } = _ref3;
    return typeof (style === null || style === void 0 ? void 0 : (_style$border2 = style.border) === null || _style$border2 === void 0 ? void 0 : _style$border2.radius) === 'number';
  },

  save(_ref4) {
    var _style$border3, _style$border4, _style$typography3;

    let {
      attributes,
      className
    } = _ref4;
    const {
      fontSize,
      linkTarget,
      rel,
      style,
      text,
      title,
      url,
      width
    } = attributes;

    if (!text) {
      return null;
    }

    const borderRadius = style === null || style === void 0 ? void 0 : (_style$border3 = style.border) === null || _style$border3 === void 0 ? void 0 : _style$border3.radius;
    const colorProps = Object(external_gc_blockEditor_["__experimentalGetColorClassesAndStyles"])(attributes);
    const buttonClasses = classnames_default()('gc-block-button__link', colorProps.className, {
      'no-border-radius': (style === null || style === void 0 ? void 0 : (_style$border4 = style.border) === null || _style$border4 === void 0 ? void 0 : _style$border4.radius) === 0
    });
    const buttonStyle = {
      borderRadius: borderRadius ? borderRadius : undefined,
      ...colorProps.style
    }; // The use of a `title` attribute here is soft-deprecated, but still applied
    // if it had already been assigned, for the sake of backward-compatibility.
    // A title will no longer be assigned for new or updated button block links.

    const wrapperClasses = classnames_default()(className, {
      [`has-custom-width gc-block-button__width-${width}`]: width,
      [`has-custom-font-size`]: fontSize || (style === null || style === void 0 ? void 0 : (_style$typography3 = style.typography) === null || _style$typography3 === void 0 ? void 0 : _style$typography3.fontSize)
    });
    return Object(external_gc_element_["createElement"])("div", external_gc_blockEditor_["useBlockProps"].save({
      className: wrapperClasses
    }), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"].Content, {
      tagName: "a",
      className: buttonClasses,
      href: url,
      title: title,
      style: buttonStyle,
      value: text,
      target: linkTarget,
      rel: rel
    }));
  },

  migrate: Object(external_gc_compose_["compose"])(migrate_font_family, migrateBorderRadius)
}, {
  supports: {
    anchor: true,
    align: true,
    alignWide: false,
    color: {
      __experimentalSkipSerialization: true
    },
    reusable: false,
    __experimentalSelector: '.gc-block-button__link'
  },
  attributes: { ...deprecated_blockAttributes,
    linkTarget: {
      type: 'string',
      source: 'attribute',
      selector: 'a',
      attribute: 'target'
    },
    rel: {
      type: 'string',
      source: 'attribute',
      selector: 'a',
      attribute: 'rel'
    },
    placeholder: {
      type: 'string'
    },
    borderRadius: {
      type: 'number'
    },
    backgroundColor: {
      type: 'string'
    },
    textColor: {
      type: 'string'
    },
    gradient: {
      type: 'string'
    },
    style: {
      type: 'object'
    },
    width: {
      type: 'number'
    }
  },

  save(_ref5) {
    let {
      attributes,
      className
    } = _ref5;
    const {
      borderRadius,
      linkTarget,
      rel,
      text,
      title,
      url,
      width
    } = attributes;
    const colorProps = Object(external_gc_blockEditor_["__experimentalGetColorClassesAndStyles"])(attributes);
    const buttonClasses = classnames_default()('gc-block-button__link', colorProps.className, {
      'no-border-radius': borderRadius === 0
    });
    const buttonStyle = {
      borderRadius: borderRadius ? borderRadius + 'px' : undefined,
      ...colorProps.style
    }; // The use of a `title` attribute here is soft-deprecated, but still applied
    // if it had already been assigned, for the sake of backward-compatibility.
    // A title will no longer be assigned for new or updated button block links.

    const wrapperClasses = classnames_default()(className, {
      [`has-custom-width gc-block-button__width-${width}`]: width
    });
    return Object(external_gc_element_["createElement"])("div", external_gc_blockEditor_["useBlockProps"].save({
      className: wrapperClasses
    }), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"].Content, {
      tagName: "a",
      className: buttonClasses,
      href: url,
      title: title,
      style: buttonStyle,
      value: text,
      target: linkTarget,
      rel: rel
    }));
  },

  migrate: Object(external_gc_compose_["compose"])(migrate_font_family, migrateBorderRadius)
}, {
  supports: {
    anchor: true,
    align: true,
    alignWide: false,
    color: {
      __experimentalSkipSerialization: true
    },
    reusable: false,
    __experimentalSelector: '.gc-block-button__link'
  },
  attributes: { ...deprecated_blockAttributes,
    linkTarget: {
      type: 'string',
      source: 'attribute',
      selector: 'a',
      attribute: 'target'
    },
    rel: {
      type: 'string',
      source: 'attribute',
      selector: 'a',
      attribute: 'rel'
    },
    placeholder: {
      type: 'string'
    },
    borderRadius: {
      type: 'number'
    },
    backgroundColor: {
      type: 'string'
    },
    textColor: {
      type: 'string'
    },
    gradient: {
      type: 'string'
    },
    style: {
      type: 'object'
    },
    width: {
      type: 'number'
    }
  },

  save(_ref6) {
    let {
      attributes,
      className
    } = _ref6;
    const {
      borderRadius,
      linkTarget,
      rel,
      text,
      title,
      url,
      width
    } = attributes;
    const colorProps = Object(external_gc_blockEditor_["__experimentalGetColorClassesAndStyles"])(attributes);
    const buttonClasses = classnames_default()('gc-block-button__link', colorProps.className, {
      'no-border-radius': borderRadius === 0
    });
    const buttonStyle = {
      borderRadius: borderRadius ? borderRadius + 'px' : undefined,
      ...colorProps.style
    }; // The use of a `title` attribute here is soft-deprecated, but still applied
    // if it had already been assigned, for the sake of backward-compatibility.
    // A title will no longer be assigned for new or updated button block links.

    const wrapperClasses = classnames_default()(className, {
      [`has-custom-width gc-block-button__width-${width}`]: width
    });
    return Object(external_gc_element_["createElement"])("div", external_gc_blockEditor_["useBlockProps"].save({
      className: wrapperClasses
    }), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"].Content, {
      tagName: "a",
      className: buttonClasses,
      href: url,
      title: title,
      style: buttonStyle,
      value: text,
      target: linkTarget,
      rel: rel
    }));
  },

  migrate: Object(external_gc_compose_["compose"])(migrate_font_family, migrateBorderRadius)
}, {
  supports: {
    align: true,
    alignWide: false,
    color: {
      gradients: true
    }
  },
  attributes: { ...deprecated_blockAttributes,
    linkTarget: {
      type: 'string',
      source: 'attribute',
      selector: 'a',
      attribute: 'target'
    },
    rel: {
      type: 'string',
      source: 'attribute',
      selector: 'a',
      attribute: 'rel'
    },
    placeholder: {
      type: 'string'
    },
    borderRadius: {
      type: 'number'
    },
    backgroundColor: {
      type: 'string'
    },
    textColor: {
      type: 'string'
    },
    gradient: {
      type: 'string'
    },
    style: {
      type: 'object'
    }
  },

  save(_ref7) {
    let {
      attributes
    } = _ref7;
    const {
      borderRadius,
      linkTarget,
      rel,
      text,
      title,
      url
    } = attributes;
    const buttonClasses = classnames_default()('gc-block-button__link', {
      'no-border-radius': borderRadius === 0
    });
    const buttonStyle = {
      borderRadius: borderRadius ? borderRadius + 'px' : undefined
    };
    return Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"].Content, {
      tagName: "a",
      className: buttonClasses,
      href: url,
      title: title,
      style: buttonStyle,
      value: text,
      target: linkTarget,
      rel: rel
    });
  },

  migrate: migrateBorderRadius
}, {
  supports: {
    align: true,
    alignWide: false
  },
  attributes: { ...deprecated_blockAttributes,
    linkTarget: {
      type: 'string',
      source: 'attribute',
      selector: 'a',
      attribute: 'target'
    },
    rel: {
      type: 'string',
      source: 'attribute',
      selector: 'a',
      attribute: 'rel'
    },
    placeholder: {
      type: 'string'
    },
    borderRadius: {
      type: 'number'
    },
    backgroundColor: {
      type: 'string'
    },
    textColor: {
      type: 'string'
    },
    customBackgroundColor: {
      type: 'string'
    },
    customTextColor: {
      type: 'string'
    },
    customGradient: {
      type: 'string'
    },
    gradient: {
      type: 'string'
    }
  },
  isEligible: attributes => !!attributes.customTextColor || !!attributes.customBackgroundColor || !!attributes.customGradient,
  migrate: Object(external_gc_compose_["compose"])(migrateBorderRadius, migrateCustomColorsAndGradients),

  save(_ref8) {
    let {
      attributes
    } = _ref8;
    const {
      backgroundColor,
      borderRadius,
      customBackgroundColor,
      customTextColor,
      customGradient,
      linkTarget,
      gradient,
      rel,
      text,
      textColor,
      title,
      url
    } = attributes;
    const textClass = Object(external_gc_blockEditor_["getColorClassName"])('color', textColor);
    const backgroundClass = !customGradient && Object(external_gc_blockEditor_["getColorClassName"])('background-color', backgroundColor);

    const gradientClass = Object(external_gc_blockEditor_["__experimentalGetGradientClass"])(gradient);

    const buttonClasses = classnames_default()('gc-block-button__link', {
      'has-text-color': textColor || customTextColor,
      [textClass]: textClass,
      'has-background': backgroundColor || customBackgroundColor || customGradient || gradient,
      [backgroundClass]: backgroundClass,
      'no-border-radius': borderRadius === 0,
      [gradientClass]: gradientClass
    });
    const buttonStyle = {
      background: customGradient ? customGradient : undefined,
      backgroundColor: backgroundClass || customGradient || gradient ? undefined : customBackgroundColor,
      color: textClass ? undefined : customTextColor,
      borderRadius: borderRadius ? borderRadius + 'px' : undefined
    }; // The use of a `title` attribute here is soft-deprecated, but still applied
    // if it had already been assigned, for the sake of backward-compatibility.
    // A title will no longer be assigned for new or updated button block links.

    return Object(external_gc_element_["createElement"])("div", null, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"].Content, {
      tagName: "a",
      className: buttonClasses,
      href: url,
      title: title,
      style: buttonStyle,
      value: text,
      target: linkTarget,
      rel: rel
    }));
  }

}, {
  attributes: { ...deprecated_blockAttributes,
    align: {
      type: 'string',
      default: 'none'
    },
    backgroundColor: {
      type: 'string'
    },
    textColor: {
      type: 'string'
    },
    customBackgroundColor: {
      type: 'string'
    },
    customTextColor: {
      type: 'string'
    },
    linkTarget: {
      type: 'string',
      source: 'attribute',
      selector: 'a',
      attribute: 'target'
    },
    rel: {
      type: 'string',
      source: 'attribute',
      selector: 'a',
      attribute: 'rel'
    },
    placeholder: {
      type: 'string'
    }
  },

  isEligible(attribute) {
    return attribute.className && attribute.className.includes('is-style-squared');
  },

  migrate(attributes) {
    let newClassName = attributes.className;

    if (newClassName) {
      newClassName = newClassName.replace(/is-style-squared[\s]?/, '').trim();
    }

    return migrateBorderRadius(migrateCustomColorsAndGradients({ ...attributes,
      className: newClassName ? newClassName : undefined,
      borderRadius: 0
    }));
  },

  save(_ref9) {
    let {
      attributes
    } = _ref9;
    const {
      backgroundColor,
      customBackgroundColor,
      customTextColor,
      linkTarget,
      rel,
      text,
      textColor,
      title,
      url
    } = attributes;
    const textClass = Object(external_gc_blockEditor_["getColorClassName"])('color', textColor);
    const backgroundClass = Object(external_gc_blockEditor_["getColorClassName"])('background-color', backgroundColor);
    const buttonClasses = classnames_default()('gc-block-button__link', {
      'has-text-color': textColor || customTextColor,
      [textClass]: textClass,
      'has-background': backgroundColor || customBackgroundColor,
      [backgroundClass]: backgroundClass
    });
    const buttonStyle = {
      backgroundColor: backgroundClass ? undefined : customBackgroundColor,
      color: textClass ? undefined : customTextColor
    };
    return Object(external_gc_element_["createElement"])("div", null, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"].Content, {
      tagName: "a",
      className: buttonClasses,
      href: url,
      title: title,
      style: buttonStyle,
      value: text,
      target: linkTarget,
      rel: rel
    }));
  }

}, {
  attributes: { ...deprecated_blockAttributes,
    align: {
      type: 'string',
      default: 'none'
    },
    backgroundColor: {
      type: 'string'
    },
    textColor: {
      type: 'string'
    },
    customBackgroundColor: {
      type: 'string'
    },
    customTextColor: {
      type: 'string'
    }
  },
  migrate: oldColorsMigration,

  save(_ref10) {
    let {
      attributes
    } = _ref10;
    const {
      url,
      text,
      title,
      backgroundColor,
      textColor,
      customBackgroundColor,
      customTextColor
    } = attributes;
    const textClass = Object(external_gc_blockEditor_["getColorClassName"])('color', textColor);
    const backgroundClass = Object(external_gc_blockEditor_["getColorClassName"])('background-color', backgroundColor);
    const buttonClasses = classnames_default()('gc-block-button__link', {
      'has-text-color': textColor || customTextColor,
      [textClass]: textClass,
      'has-background': backgroundColor || customBackgroundColor,
      [backgroundClass]: backgroundClass
    });
    const buttonStyle = {
      backgroundColor: backgroundClass ? undefined : customBackgroundColor,
      color: textClass ? undefined : customTextColor
    };
    return Object(external_gc_element_["createElement"])("div", null, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"].Content, {
      tagName: "a",
      className: buttonClasses,
      href: url,
      title: title,
      style: buttonStyle,
      value: text
    }));
  }

}, {
  attributes: { ...deprecated_blockAttributes,
    color: {
      type: 'string'
    },
    textColor: {
      type: 'string'
    },
    align: {
      type: 'string',
      default: 'none'
    }
  },

  save(_ref11) {
    let {
      attributes
    } = _ref11;
    const {
      url,
      text,
      title,
      align,
      color,
      textColor
    } = attributes;
    const buttonStyle = {
      backgroundColor: color,
      color: textColor
    };
    const linkClass = 'gc-block-button__link';
    return Object(external_gc_element_["createElement"])("div", {
      className: `align${align}`
    }, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"].Content, {
      tagName: "a",
      className: linkClass,
      href: url,
      title: title,
      style: buttonStyle,
      value: text
    }));
  },

  migrate: oldColorsMigration
}, {
  attributes: { ...deprecated_blockAttributes,
    color: {
      type: 'string'
    },
    textColor: {
      type: 'string'
    },
    align: {
      type: 'string',
      default: 'none'
    }
  },

  save(_ref12) {
    let {
      attributes
    } = _ref12;
    const {
      url,
      text,
      title,
      align,
      color,
      textColor
    } = attributes;
    return Object(external_gc_element_["createElement"])("div", {
      className: `align${align}`,
      style: {
        backgroundColor: color
      }
    }, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"].Content, {
      tagName: "a",
      href: url,
      title: title,
      style: {
        color: textColor
      },
      value: text
    }));
  },

  migrate: oldColorsMigration
}];
/* harmony default export */ var button_deprecated = (deprecated_deprecated);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/extends.js
var esm_extends = __webpack_require__("wx14");

// EXTERNAL MODULE: external ["gc","keycodes"]
var external_gc_keycodes_ = __webpack_require__("l35S");

// EXTERNAL MODULE: ./node_modules/@gechiui/icons/build-module/library/link.js
var library_link = __webpack_require__("qsmw");

// EXTERNAL MODULE: ./node_modules/@gechiui/icons/build-module/library/link-off.js
var link_off = __webpack_require__("FOZ3");

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/button/edit.js



/**
 * External dependencies
 */

/**
 * GeChiUI dependencies
 */








const NEW_TAB_REL = 'noreferrer noopener';

function WidthPanel(_ref) {
  let {
    selectedWidth,
    setAttributes
  } = _ref;

  function handleChange(newWidth) {
    // Check if we are toggling the width off
    const width = selectedWidth === newWidth ? undefined : newWidth; // Update attributes

    setAttributes({
      width
    });
  }

  return Object(external_gc_element_["createElement"])(external_gc_components_["PanelBody"], {
    title: Object(external_gc_i18n_["__"])('宽度设置')
  }, Object(external_gc_element_["createElement"])(external_gc_components_["ButtonGroup"], {
    "aria-label": Object(external_gc_i18n_["__"])('按钮宽度')
  }, [25, 50, 75, 100].map(widthValue => {
    return Object(external_gc_element_["createElement"])(external_gc_components_["Button"], {
      key: widthValue,
      isSmall: true,
      variant: widthValue === selectedWidth ? 'primary' : undefined,
      onClick: () => handleChange(widthValue)
    }, widthValue, "%");
  })));
}

function ButtonEdit(props) {
  var _style$border;

  const {
    attributes,
    setAttributes,
    className,
    isSelected,
    onReplace,
    mergeBlocks
  } = props;
  const {
    linkTarget,
    placeholder,
    rel,
    style,
    text,
    url,
    width
  } = attributes;
  const onSetLinkRel = Object(external_gc_element_["useCallback"])(value => {
    setAttributes({
      rel: value
    });
  }, [setAttributes]);

  function onToggleOpenInNewTab(value) {
    const newLinkTarget = value ? '_blank' : undefined;
    let updatedRel = rel;

    if (newLinkTarget && !rel) {
      updatedRel = NEW_TAB_REL;
    } else if (!newLinkTarget && rel === NEW_TAB_REL) {
      updatedRel = undefined;
    }

    setAttributes({
      linkTarget: newLinkTarget,
      rel: updatedRel
    });
  }

  function setButtonText(newText) {
    // Remove anchor tags from button text content.
    setAttributes({
      text: newText.replace(/<\/?a[^>]*>/g, '')
    });
  }

  function onKeyDown(event) {
    if (external_gc_keycodes_["isKeyboardEvent"].primary(event, 'k')) {
      startEditing(event);
    } else if (external_gc_keycodes_["isKeyboardEvent"].primaryShift(event, 'k')) {
      var _richTextRef$current;

      unlink();
      (_richTextRef$current = richTextRef.current) === null || _richTextRef$current === void 0 ? void 0 : _richTextRef$current.focus();
    }
  }

  const borderProps = Object(external_gc_blockEditor_["__experimentalUseBorderProps"])(attributes);
  const colorProps = Object(external_gc_blockEditor_["__experimentalUseColorProps"])(attributes);
  const spacingProps = Object(external_gc_blockEditor_["__experimentalGetSpacingClassesAndStyles"])(attributes);
  const ref = Object(external_gc_element_["useRef"])();
  const richTextRef = Object(external_gc_element_["useRef"])();
  const blockProps = Object(external_gc_blockEditor_["useBlockProps"])({
    ref,
    onKeyDown
  });
  const [isEditingURL, setIsEditingURL] = Object(external_gc_element_["useState"])(false);
  const isURLSet = !!url;
  const opensInNewTab = linkTarget === '_blank';

  function startEditing(event) {
    event.preventDefault();
    setIsEditingURL(true);
  }

  function unlink() {
    setAttributes({
      url: undefined,
      linkTarget: undefined,
      rel: undefined
    });
    setIsEditingURL(false);
  }

  Object(external_gc_element_["useEffect"])(() => {
    if (!isSelected) {
      setIsEditingURL(false);
    }
  }, [isSelected]);
  return Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])("div", Object(esm_extends["a" /* default */])({}, blockProps, {
    className: classnames_default()(blockProps.className, {
      [`has-custom-width gc-block-button__width-${width}`]: width,
      [`has-custom-font-size`]: blockProps.style.fontSize
    })
  }), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"], {
    ref: richTextRef,
    "aria-label": Object(external_gc_i18n_["__"])('按钮文字'),
    placeholder: placeholder || Object(external_gc_i18n_["__"])('添加文字…'),
    value: text,
    onChange: value => setButtonText(value),
    withoutInteractiveFormatting: true,
    className: classnames_default()(className, 'gc-block-button__link', colorProps.className, borderProps.className, {
      // For backwards compatibility add style that isn't
      // provided via block support.
      'no-border-radius': (style === null || style === void 0 ? void 0 : (_style$border = style.border) === null || _style$border === void 0 ? void 0 : _style$border.radius) === 0
    }),
    style: { ...borderProps.style,
      ...colorProps.style,
      ...spacingProps.style
    },
    onSplit: value => Object(external_gc_blocks_["createBlock"])('core/button', { ...attributes,
      text: value
    }),
    onReplace: onReplace,
    onMerge: mergeBlocks,
    identifier: "text"
  })), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["BlockControls"], {
    group: "block"
  }, !isURLSet && Object(external_gc_element_["createElement"])(external_gc_components_["ToolbarButton"], {
    name: "link",
    icon: library_link["a" /* default */],
    title: Object(external_gc_i18n_["__"])('链接'),
    shortcut: external_gc_keycodes_["displayShortcut"].primary('k'),
    onClick: startEditing
  }), isURLSet && Object(external_gc_element_["createElement"])(external_gc_components_["ToolbarButton"], {
    name: "link",
    icon: link_off["a" /* default */],
    title: Object(external_gc_i18n_["__"])('移除链接'),
    shortcut: external_gc_keycodes_["displayShortcut"].primaryShift('k'),
    onClick: unlink,
    isActive: true
  })), isSelected && (isEditingURL || isURLSet) && Object(external_gc_element_["createElement"])(external_gc_components_["Popover"], {
    position: "bottom center",
    onClose: () => {
      var _richTextRef$current2;

      setIsEditingURL(false);
      (_richTextRef$current2 = richTextRef.current) === null || _richTextRef$current2 === void 0 ? void 0 : _richTextRef$current2.focus();
    },
    anchorRef: ref === null || ref === void 0 ? void 0 : ref.current,
    focusOnMount: isEditingURL ? 'firstElement' : false
  }, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["__experimentalLinkControl"], {
    className: "gc-block-navigation-link__inline-link-input",
    value: {
      url,
      opensInNewTab
    },
    onChange: _ref2 => {
      let {
        url: newURL = '',
        opensInNewTab: newOpensInNewTab
      } = _ref2;
      setAttributes({
        url: newURL
      });

      if (opensInNewTab !== newOpensInNewTab) {
        onToggleOpenInNewTab(newOpensInNewTab);
      }
    },
    onRemove: () => {
      var _richTextRef$current3;

      unlink();
      (_richTextRef$current3 = richTextRef.current) === null || _richTextRef$current3 === void 0 ? void 0 : _richTextRef$current3.focus();
    },
    forceIsEditingLink: isEditingURL
  })), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InspectorControls"], null, Object(external_gc_element_["createElement"])(WidthPanel, {
    selectedWidth: width,
    setAttributes: setAttributes
  })), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InspectorControls"], {
    __experimentalGroup: "advanced"
  }, Object(external_gc_element_["createElement"])(external_gc_components_["TextControl"], {
    label: Object(external_gc_i18n_["__"])('链接rel'),
    value: rel || '',
    onChange: onSetLinkRel
  })));
}

/* harmony default export */ var button_edit = (ButtonEdit);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/button/save.js


/**
 * External dependencies
 */

/**
 * GeChiUI dependencies
 */


function save_save(_ref) {
  var _style$border, _style$typography;

  let {
    attributes,
    className
  } = _ref;
  const {
    fontSize,
    linkTarget,
    rel,
    style,
    text,
    title,
    url,
    width
  } = attributes;

  if (!text) {
    return null;
  }

  const borderProps = Object(external_gc_blockEditor_["__experimentalGetBorderClassesAndStyles"])(attributes);
  const colorProps = Object(external_gc_blockEditor_["__experimentalGetColorClassesAndStyles"])(attributes);
  const spacingProps = Object(external_gc_blockEditor_["__experimentalGetSpacingClassesAndStyles"])(attributes);
  const buttonClasses = classnames_default()('gc-block-button__link', colorProps.className, borderProps.className, {
    // For backwards compatibility add style that isn't provided via
    // block support.
    'no-border-radius': (style === null || style === void 0 ? void 0 : (_style$border = style.border) === null || _style$border === void 0 ? void 0 : _style$border.radius) === 0
  });
  const buttonStyle = { ...borderProps.style,
    ...colorProps.style,
    ...spacingProps.style
  }; // The use of a `title` attribute here is soft-deprecated, but still applied
  // if it had already been assigned, for the sake of backward-compatibility.
  // A title will no longer be assigned for new or updated button block links.

  const wrapperClasses = classnames_default()(className, {
    [`has-custom-width gc-block-button__width-${width}`]: width,
    [`has-custom-font-size`]: fontSize || (style === null || style === void 0 ? void 0 : (_style$typography = style.typography) === null || _style$typography === void 0 ? void 0 : _style$typography.fontSize)
  });
  return Object(external_gc_element_["createElement"])("div", external_gc_blockEditor_["useBlockProps"].save({
    className: wrapperClasses
  }), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"].Content, {
    tagName: "a",
    className: buttonClasses,
    href: url,
    title: title,
    style: buttonStyle,
    value: text,
    target: linkTarget,
    rel: rel
  }));
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/button/index.js
/**
 * GeChiUI dependencies
 */


/**
 * Internal dependencies
 */



const button_metadata = {
  apiVersion: 2,
  name: "core/button",
  title: "按钮",
  category: "design",
  parent: ["core/buttons"],
  description: "通过按钮式的链接来提示访客进行操作。",
  keywords: ["link"],
  textdomain: "default",
  attributes: {
    url: {
      type: "string",
      source: "attribute",
      selector: "a",
      attribute: "href"
    },
    title: {
      type: "string",
      source: "attribute",
      selector: "a",
      attribute: "title"
    },
    text: {
      type: "string",
      source: "html",
      selector: "a"
    },
    linkTarget: {
      type: "string",
      source: "attribute",
      selector: "a",
      attribute: "target"
    },
    rel: {
      type: "string",
      source: "attribute",
      selector: "a",
      attribute: "rel"
    },
    placeholder: {
      type: "string"
    },
    backgroundColor: {
      type: "string"
    },
    textColor: {
      type: "string"
    },
    gradient: {
      type: "string"
    },
    width: {
      type: "number"
    }
  },
  supports: {
    anchor: true,
    align: true,
    alignWide: false,
    color: {
      __experimentalSkipSerialization: true,
      gradients: true
    },
    typography: {
      fontSize: true,
      __experimentalFontFamily: true,
      __experimentalDefaultControls: {
        fontSize: true
      }
    },
    reusable: false,
    spacing: {
      __experimentalSkipSerialization: true,
      padding: ["horizontal", "vertical"],
      __experimentalDefaultControls: {
        padding: true
      }
    },
    __experimentalBorder: {
      radius: true,
      __experimentalSkipSerialization: true
    },
    __experimentalSelector: ".gc-block-button__link"
  },
  styles: [{
    name: "fill",
    label: "填充",
    isDefault: true
  }, {
    name: "outline",
    label: "轮廓"
  }],
  editorStyle: "gc-block-button-editor",
  style: "gc-block-button"
};

const {
  name: button_name
} = button_metadata;

const button_settings = {
  icon: library_button["a" /* default */],
  example: {
    attributes: {
      className: 'is-style-fill',
      text: Object(external_gc_i18n_["__"])("引导操作")
    }
  },
  edit: button_edit,
  save: save_save,
  deprecated: button_deprecated,
  merge: (a, _ref) => {
    let {
      text = ''
    } = _ref;
    return { ...a,
      text: (a.text || '') + text
    };
  }
};

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/buttons.js


/**
 * GeChiUI dependencies
 */

const buttons_buttons = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  viewBox: "0 0 24 24",
  xmlns: "http://www.w3.org/2000/svg"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M17 3H7c-1.1 0-2 .9-2 2v4c0 1.1.9 2 2 2h10c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm.5 6c0 .3-.2.5-.5.5H7c-.3 0-.5-.2-.5-.5V5c0-.3.2-.5.5-.5h10c.3 0 .5.2.5.5v4zm-8-1.2h5V6.2h-5v1.6zM17 13H7c-1.1 0-2 .9-2 2v4c0 1.1.9 2 2 2h10c1.1 0 2-.9 2-2v-4c0-1.1-.9-2-2-2zm.5 6c0 .3-.2.5-.5.5H7c-.3 0-.5-.2-.5-.5v-4c0-.3.2-.5.5-.5h10c.3 0 .5.2.5.5v4zm-8-1.2h5v-1.5h-5v1.5z"
}));
/* harmony default export */ var library_buttons = (buttons_buttons);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/buttons/deprecated.js


/**
 * External dependencies
 */

/**
 * GeChiUI dependencies
 */


/**
 * @param {Object} attributes Block's attributes.
 */

const migrateWithLayout = attributes => {
  if (!!attributes.layout) {
    return attributes;
  }

  const {
    contentJustification,
    orientation,
    ...updatedAttributes
  } = attributes;

  if (contentJustification || orientation) {
    Object.assign(updatedAttributes, {
      layout: {
        type: 'flex',
        ...(contentJustification && {
          justifyContent: contentJustification
        }),
        ...(orientation && {
          orientation
        })
      }
    });
  }

  return updatedAttributes;
};

const buttons_deprecated_deprecated = [{
  attributes: {
    contentJustification: {
      type: 'string'
    },
    orientation: {
      type: 'string',
      default: 'horizontal'
    }
  },
  supports: {
    anchor: true,
    align: ['wide', 'full'],
    __experimentalExposeControlsToChildren: true,
    spacing: {
      blockGap: true,
      margin: ['top', 'bottom'],
      __experimentalDefaultControls: {
        blockGap: true
      }
    }
  },
  isEligible: _ref => {
    let {
      contentJustification,
      orientation
    } = _ref;
    return !!contentJustification || !!orientation;
  },
  migrate: migrateWithLayout,

  save(_ref2) {
    let {
      attributes: {
        contentJustification,
        orientation
      }
    } = _ref2;
    return Object(external_gc_element_["createElement"])("div", external_gc_blockEditor_["useBlockProps"].save({
      className: classnames_default()({
        [`is-content-justification-${contentJustification}`]: contentJustification,
        'is-vertical': orientation === 'vertical'
      })
    }), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InnerBlocks"].Content, null));
  }

}, {
  supports: {
    align: ['center', 'left', 'right'],
    anchor: true
  },

  save() {
    return Object(external_gc_element_["createElement"])("div", null, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InnerBlocks"].Content, null));
  },

  isEligible(_ref3) {
    let {
      align
    } = _ref3;
    return align && ['center', 'left', 'right'].includes(align);
  },

  migrate(attributes) {
    return migrateWithLayout({ ...attributes,
      align: undefined,
      // Floating Buttons blocks shouldn't have been supported in the
      // first place. Most users using them probably expected them to
      // act like content justification controls, so these blocks are
      // migrated to use content justification.
      // As for center-aligned Buttons blocks, the content justification
      // equivalent will create an identical end result in most cases.
      contentJustification: attributes.align
    });
  }

}];
/* harmony default export */ var buttons_deprecated = (buttons_deprecated_deprecated);

// EXTERNAL MODULE: external ["gc","richText"]
var external_gc_richText_ = __webpack_require__("kt2g");

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/buttons/transforms.js
/**
 * GeChiUI dependencies
 */


/**
 * Internal dependencies
 */

const {
  name: transforms_name
} = {
  apiVersion: 2,
  name: "core/buttons",
  title: "多个按钮",
  category: "design",
  description: "使用一组按钮式的链接来提示访客进行操作。",
  keywords: ["link"],
  textdomain: "default",
  supports: {
    anchor: true,
    align: ["wide", "full"],
    __experimentalExposeControlsToChildren: true,
    spacing: {
      blockGap: true,
      margin: ["top", "bottom"],
      __experimentalDefaultControls: {
        blockGap: true
      }
    },
    __experimentalLayout: {
      allowSwitching: false,
      allowInheriting: false,
      "default": {
        type: "flex"
      }
    }
  },
  editorStyle: "gc-block-buttons-editor",
  style: "gc-block-buttons"
};
const buttons_transforms_transforms = {
  from: [{
    type: 'block',
    isMultiBlock: true,
    blocks: ['core/button'],
    transform: buttons => // Creates the buttons block
    Object(external_gc_blocks_["createBlock"])(transforms_name, {}, // Loop the selected buttons
    buttons.map(attributes => // Create singular button in the buttons block
    Object(external_gc_blocks_["createBlock"])('core/button', attributes)))
  }, {
    type: 'block',
    isMultiBlock: true,
    blocks: ['core/paragraph'],
    transform: buttons => // Creates the buttons block
    Object(external_gc_blocks_["createBlock"])(transforms_name, {}, // Loop the selected buttons
    buttons.map(attributes => {
      const element = Object(external_gc_richText_["__unstableCreateElement"])(document, attributes.content); // Remove any HTML tags

      const text = element.innerText || ''; // Get first url

      const link = element.querySelector('a');
      const url = link === null || link === void 0 ? void 0 : link.getAttribute('href'); // Create singular button in the buttons block

      return Object(external_gc_blocks_["createBlock"])('core/button', {
        text,
        url
      });
    })),
    isMatch: paragraphs => {
      return paragraphs.every(attributes => {
        const element = Object(external_gc_richText_["__unstableCreateElement"])(document, attributes.content);
        const text = element.innerText || '';
        const links = element.querySelectorAll('a');
        return text.length <= 30 && links.length <= 1;
      });
    }
  }]
};
/* harmony default export */ var buttons_transforms = (buttons_transforms_transforms);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/buttons/edit.js


/**
 * GeChiUI dependencies
 */


/**
 * Internal dependencies
 */


const ALLOWED_BLOCKS = [button_name];

function ButtonsEdit(_ref) {
  let {
    attributes: {
      layout = {}
    }
  } = _ref;
  const blockProps = Object(external_gc_blockEditor_["useBlockProps"])();
  const preferredStyle = Object(external_gc_data_["useSelect"])(select => {
    var _preferredStyleVariat;

    const preferredStyleVariations = select(external_gc_blockEditor_["store"]).getSettings().__experimentalPreferredStyleVariations;

    return preferredStyleVariations === null || preferredStyleVariations === void 0 ? void 0 : (_preferredStyleVariat = preferredStyleVariations.value) === null || _preferredStyleVariat === void 0 ? void 0 : _preferredStyleVariat[button_name];
  }, []);
  const innerBlocksProps = Object(external_gc_blockEditor_["useInnerBlocksProps"])(blockProps, {
    allowedBlocks: ALLOWED_BLOCKS,
    template: [[button_name, {
      className: preferredStyle && `is-style-${preferredStyle}`
    }]],
    __experimentalLayout: layout,
    templateInsertUpdatesSelection: true
  });
  return Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])("div", innerBlocksProps));
}

/* harmony default export */ var buttons_edit = (ButtonsEdit);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/buttons/save.js


/**
 * GeChiUI dependencies
 */

function buttons_save_save() {
  const innerBlocksProps = external_gc_blockEditor_["useInnerBlocksProps"].save(external_gc_blockEditor_["useBlockProps"].save());
  return Object(external_gc_element_["createElement"])("div", innerBlocksProps);
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/buttons/index.js
/**
 * GeChiUI dependencies
 */


/**
 * Internal dependencies
 */




const buttons_metadata = {
  apiVersion: 2,
  name: "core/buttons",
  title: "多个按钮",
  category: "design",
  description: "使用一组按钮式的链接来提示访客进行操作。",
  keywords: ["link"],
  textdomain: "default",
  supports: {
    anchor: true,
    align: ["wide", "full"],
    __experimentalExposeControlsToChildren: true,
    spacing: {
      blockGap: true,
      margin: ["top", "bottom"],
      __experimentalDefaultControls: {
        blockGap: true
      }
    },
    __experimentalLayout: {
      allowSwitching: false,
      allowInheriting: false,
      "default": {
        type: "flex"
      }
    }
  },
  editorStyle: "gc-block-buttons-editor",
  style: "gc-block-buttons"
};

const {
  name: buttons_name
} = buttons_metadata;

const buttons_settings = {
  icon: library_buttons,
  example: {
    innerBlocks: [{
      name: 'core/button',
      attributes: {
        text: Object(external_gc_i18n_["__"])('了解更多')
      }
    }, {
      name: 'core/button',
      attributes: {
        text: Object(external_gc_i18n_["__"])('联系我们')
      }
    }]
  },
  deprecated: buttons_deprecated,
  transforms: buttons_transforms,
  edit: buttons_edit,
  save: buttons_save_save
};

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/calendar.js


/**
 * GeChiUI dependencies
 */

const calendar = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  viewBox: "0 0 24 24",
  xmlns: "http://www.w3.org/2000/svg"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm.5 16c0 .3-.2.5-.5.5H5c-.3 0-.5-.2-.5-.5V7h15v12zM9 10H7v2h2v-2zm0 4H7v2h2v-2zm4-4h-2v2h2v-2zm4 0h-2v2h2v-2zm-4 4h-2v2h2v-2zm4 0h-2v2h2v-2z"
}));
/* harmony default export */ var library_calendar = (calendar);

// EXTERNAL MODULE: external "moment"
var external_moment_ = __webpack_require__("wy2R");
var external_moment_default = /*#__PURE__*/__webpack_require__.n(external_moment_);

// EXTERNAL MODULE: external ["gc","coreData"]
var external_gc_coreData_ = __webpack_require__("NxuN");

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/calendar/edit.js


/**
 * External dependencies
 */


/**
 * GeChiUI dependencies
 */








const getYearMonth = memize_default()(date => {
  if (!date) {
    return {};
  }

  const momentDate = external_moment_default()(date);
  return {
    year: momentDate.year(),
    month: momentDate.month() + 1
  };
});
function CalendarEdit(_ref) {
  let {
    attributes
  } = _ref;
  const blockProps = Object(external_gc_blockEditor_["useBlockProps"])();
  const {
    date,
    hasPosts,
    hasPostsResolved
  } = Object(external_gc_data_["useSelect"])(select => {
    const {
      getEntityRecords,
      hasFinishedResolution
    } = select(external_gc_coreData_["store"]);
    const singlePublishedPostQuery = {
      status: 'publish',
      per_page: 1
    };
    const posts = getEntityRecords('postType', 'post', singlePublishedPostQuery);
    const postsResolved = hasFinishedResolution('getEntityRecords', ['postType', 'post', singlePublishedPostQuery]);

    let _date; // FIXME: @gechiui/block-library should not depend on @gechiui/editor.
    // Blocks can be loaded into a *non-post* block editor.
    // eslint-disable-next-line @gechiui/data-no-store-string-literals


    const editorSelectors = select('core/editor');

    if (editorSelectors) {
      const postType = editorSelectors.getEditedPostAttribute('type'); // Dates are used to overwrite year and month used on the calendar.
      // This overwrite should only happen for 'post' post types.
      // For other post types the calendar always displays the current month.

      if (postType === 'post') {
        _date = editorSelectors.getEditedPostAttribute('date');
      }
    }

    return {
      date: _date,
      hasPostsResolved: postsResolved,
      hasPosts: postsResolved && (posts === null || posts === void 0 ? void 0 : posts.length) === 1
    };
  }, []);

  if (!hasPosts) {
    return Object(external_gc_element_["createElement"])("div", blockProps, Object(external_gc_element_["createElement"])(external_gc_components_["Placeholder"], {
      icon: library_calendar,
      label: Object(external_gc_i18n_["__"])('日历')
    }, !hasPostsResolved ? Object(external_gc_element_["createElement"])(external_gc_components_["Spinner"], null) : Object(external_gc_i18n_["__"])('未找到已发布的文章。')));
  }

  return Object(external_gc_element_["createElement"])("div", blockProps, Object(external_gc_element_["createElement"])(external_gc_components_["Disabled"], null, Object(external_gc_element_["createElement"])(external_gc_serverSideRender_default.a, {
    block: "core/calendar",
    attributes: { ...attributes,
      ...getYearMonth(date)
    }
  })));
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/calendar/index.js
/**
 * GeChiUI dependencies
 */

/**
 * Internal dependencies
 */

const calendar_metadata = {
  apiVersion: 2,
  name: "core/calendar",
  title: "日历",
  category: "widgets",
  description: "网站文章的日历。",
  keywords: ["posts", "archive"],
  textdomain: "default",
  attributes: {
    month: {
      type: "integer"
    },
    year: {
      type: "integer"
    }
  },
  supports: {
    align: true
  },
  style: "gc-block-calendar"
};

const {
  name: calendar_name
} = calendar_metadata;

const calendar_settings = {
  icon: library_calendar,
  example: {},
  edit: CalendarEdit
};

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/category.js


/**
 * GeChiUI dependencies
 */

const category_category = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  viewBox: "0 0 24 24",
  xmlns: "http://www.w3.org/2000/svg"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M6 5.5h3a.5.5 0 01.5.5v3a.5.5 0 01-.5.5H6a.5.5 0 01-.5-.5V6a.5.5 0 01.5-.5zM4 6a2 2 0 012-2h3a2 2 0 012 2v3a2 2 0 01-2 2H6a2 2 0 01-2-2V6zm11-.5h3a.5.5 0 01.5.5v3a.5.5 0 01-.5.5h-3a.5.5 0 01-.5-.5V6a.5.5 0 01.5-.5zM13 6a2 2 0 012-2h3a2 2 0 012 2v3a2 2 0 01-2 2h-3a2 2 0 01-2-2V6zm5 8.5h-3a.5.5 0 00-.5.5v3a.5.5 0 00.5.5h3a.5.5 0 00.5-.5v-3a.5.5 0 00-.5-.5zM15 13a2 2 0 00-2 2v3a2 2 0 002 2h3a2 2 0 002-2v-3a2 2 0 00-2-2h-3zm-9 1.5h3a.5.5 0 01.5.5v3a.5.5 0 01-.5.5H6a.5.5 0 01-.5-.5v-3a.5.5 0 01.5-.5zM4 15a2 2 0 012-2h3a2 2 0 012 2v3a2 2 0 01-2 2H6a2 2 0 01-2-2v-3z",
  fillRule: "evenodd",
  clipRule: "evenodd"
}));
/* harmony default export */ var library_category = (category_category);

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/pin.js


/**
 * GeChiUI dependencies
 */

const pin = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "-2 -2 24 24"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M10.44 3.02l1.82-1.82 6.36 6.35-1.83 1.82c-1.05-.68-2.48-.57-3.41.36l-.75.75c-.92.93-1.04 2.35-.35 3.41l-1.83 1.82-2.41-2.41-2.8 2.79c-.42.42-3.38 2.71-3.8 2.29s1.86-3.39 2.28-3.81l2.79-2.79L4.1 9.36l1.83-1.82c1.05.69 2.48.57 3.4-.36l.75-.75c.93-.92 1.05-2.35.36-3.41z"
}));
/* harmony default export */ var library_pin = (pin);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/categories/edit.js


/**
 * External dependencies
 */

/**
 * GeChiUI dependencies
 */








function CategoriesEdit(_ref) {
  let {
    attributes: {
      displayAsDropdown,
      showHierarchy,
      showPostCounts,
      showOnlyTopLevel
    },
    setAttributes
  } = _ref;
  const selectId = Object(external_gc_compose_["useInstanceId"])(CategoriesEdit, 'blocks-category-select');
  const {
    categories,
    isRequesting
  } = Object(external_gc_data_["useSelect"])(select => {
    const {
      getEntityRecords,
      isResolving
    } = select(external_gc_coreData_["store"]);
    const query = {
      per_page: -1,
      hide_empty: true,
      context: 'view'
    };

    if (showOnlyTopLevel) {
      query.parent = 0;
    }

    return {
      categories: getEntityRecords('taxonomy', 'category', query),
      isRequesting: isResolving('getEntityRecords', ['taxonomy', 'category', query])
    };
  }, [showOnlyTopLevel]);

  const getCategoriesList = parentId => {
    if (!(categories !== null && categories !== void 0 && categories.length)) {
      return [];
    }

    if (parentId === null) {
      return categories;
    }

    return categories.filter(_ref2 => {
      let {
        parent
      } = _ref2;
      return parent === parentId;
    });
  };

  const getCategoryListClassName = level => {
    return `gc-block-categories__list gc-block-categories__list-level-${level}`;
  };

  const toggleAttribute = attributeName => newValue => setAttributes({
    [attributeName]: newValue
  });

  const renderCategoryName = name => !name ? Object(external_gc_i18n_["__"])('未命名') : Object(external_lodash_["unescape"])(name).trim();

  const renderCategoryList = () => {
    const parentId = showHierarchy ? 0 : null;
    const categoriesList = getCategoriesList(parentId);
    return Object(external_gc_element_["createElement"])("ul", {
      className: getCategoryListClassName(0)
    }, categoriesList.map(category => renderCategoryListItem(category, 0)));
  };

  const renderCategoryListItem = (category, level) => {
    const childCategories = getCategoriesList(category.id);
    const {
      id,
      link,
      count,
      name
    } = category;
    return Object(external_gc_element_["createElement"])("li", {
      key: id
    }, Object(external_gc_element_["createElement"])("a", {
      href: link,
      target: "_blank",
      rel: "noreferrer noopener"
    }, renderCategoryName(name)), showPostCounts && Object(external_gc_element_["createElement"])("span", {
      className: "gc-block-categories__post-count"
    }, ` (${count})`), showHierarchy && !!childCategories.length && Object(external_gc_element_["createElement"])("ul", {
      className: getCategoryListClassName(level + 1)
    }, childCategories.map(childCategory => renderCategoryListItem(childCategory, level + 1))));
  };

  const renderCategoryDropdown = () => {
    const parentId = showHierarchy ? 0 : null;
    const categoriesList = getCategoriesList(parentId);
    return Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])(external_gc_components_["VisuallyHidden"], {
      as: "label",
      htmlFor: selectId
    }, Object(external_gc_i18n_["__"])('分类')), Object(external_gc_element_["createElement"])("select", {
      id: selectId,
      className: "gc-block-categories__dropdown"
    }, categoriesList.map(category => renderCategoryDropdownItem(category, 0))));
  };

  const renderCategoryDropdownItem = (category, level) => {
    const {
      id,
      count,
      name
    } = category;
    const childCategories = getCategoriesList(id);
    return [Object(external_gc_element_["createElement"])("option", {
      key: id
    }, Object(external_lodash_["times"])(level * 3, () => '\xa0'), renderCategoryName(name), showPostCounts && ` (${count})`), showHierarchy && !!childCategories.length && childCategories.map(childCategory => renderCategoryDropdownItem(childCategory, level + 1))];
  };

  return Object(external_gc_element_["createElement"])("div", Object(external_gc_blockEditor_["useBlockProps"])(), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InspectorControls"], null, Object(external_gc_element_["createElement"])(external_gc_components_["PanelBody"], {
    title: Object(external_gc_i18n_["__"])('分类设置')
  }, Object(external_gc_element_["createElement"])(external_gc_components_["ToggleControl"], {
    label: Object(external_gc_i18n_["__"])('以下拉菜单显示'),
    checked: displayAsDropdown,
    onChange: toggleAttribute('displayAsDropdown')
  }), Object(external_gc_element_["createElement"])(external_gc_components_["ToggleControl"], {
    label: Object(external_gc_i18n_["__"])('显示文章数目'),
    checked: showPostCounts,
    onChange: toggleAttribute('showPostCounts')
  }), Object(external_gc_element_["createElement"])(external_gc_components_["ToggleControl"], {
    label: Object(external_gc_i18n_["__"])('仅显示顶级类别'),
    checked: showOnlyTopLevel,
    onChange: toggleAttribute('showOnlyTopLevel')
  }), !showOnlyTopLevel && Object(external_gc_element_["createElement"])(external_gc_components_["ToggleControl"], {
    label: Object(external_gc_i18n_["__"])('体现层级关系'),
    checked: showHierarchy,
    onChange: toggleAttribute('showHierarchy')
  }))), isRequesting && Object(external_gc_element_["createElement"])(external_gc_components_["Placeholder"], {
    icon: library_pin,
    label: Object(external_gc_i18n_["__"])('分类')
  }, Object(external_gc_element_["createElement"])(external_gc_components_["Spinner"], null)), !isRequesting && (categories === null || categories === void 0 ? void 0 : categories.length) === 0 && Object(external_gc_element_["createElement"])("p", null, Object(external_gc_i18n_["__"])('您的站点没有任何文章，因此目前没有任何内容可供显示。')), !isRequesting && (categories === null || categories === void 0 ? void 0 : categories.length) > 0 && (displayAsDropdown ? renderCategoryDropdown() : renderCategoryList()));
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/categories/index.js
/**
 * GeChiUI dependencies
 */

/**
 * Internal dependencies
 */

const categories_metadata = {
  apiVersion: 2,
  name: "core/categories",
  title: "分类",
  category: "widgets",
  description: "显示所有分类的列表。",
  textdomain: "default",
  attributes: {
    displayAsDropdown: {
      type: "boolean",
      "default": false
    },
    showHierarchy: {
      type: "boolean",
      "default": false
    },
    showPostCounts: {
      type: "boolean",
      "default": false
    },
    showOnlyTopLevel: {
      type: "boolean",
      "default": false
    }
  },
  supports: {
    align: true,
    html: false
  },
  editorStyle: "gc-block-categories-editor",
  style: "gc-block-categories"
};

const {
  name: categories_name
} = categories_metadata;

const categories_settings = {
  icon: library_category,
  example: {},
  edit: CategoriesEdit
};

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/classic.js


/**
 * GeChiUI dependencies
 */

const classic = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  viewBox: "0 0 24 24",
  xmlns: "http://www.w3.org/2000/svg"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M20 6H4c-1.1 0-2 .9-2 2v9c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2zm.5 11c0 .3-.2.5-.5.5H4c-.3 0-.5-.2-.5-.5V8c0-.3.2-.5.5-.5h16c.3 0 .5.2.5.5v9zM10 10H8v2h2v-2zm-5 2h2v-2H5v2zm8-2h-2v2h2v-2zm-5 6h8v-2H8v2zm6-4h2v-2h-2v2zm3 0h2v-2h-2v2zm0 4h2v-2h-2v2zM5 16h2v-2H5v2z"
}));
/* harmony default export */ var library_classic = (classic);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/freeform/convert-to-blocks-button.js


/**
 * GeChiUI dependencies
 */






const ConvertToBlocksButton = _ref => {
  let {
    clientId
  } = _ref;
  const {
    replaceBlocks
  } = Object(external_gc_data_["useDispatch"])(external_gc_blockEditor_["store"]);
  const block = Object(external_gc_data_["useSelect"])(select => {
    return select(external_gc_blockEditor_["store"]).getBlock(clientId);
  }, [clientId]);
  return Object(external_gc_element_["createElement"])(external_gc_components_["ToolbarButton"], {
    onClick: () => replaceBlocks(block.clientId, Object(external_gc_blocks_["rawHandler"])({
      HTML: Object(external_gc_blocks_["serialize"])(block)
    }))
  }, Object(external_gc_i18n_["__"])('转换为区块'));
};

/* harmony default export */ var convert_to_blocks_button = (ConvertToBlocksButton);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/freeform/edit.js


/**
 * External dependencies
 */

/**
 * GeChiUI dependencies
 */







/**
 * Internal dependencies
 */


const {
  gc: edit_gc
} = window;

function isTmceEmpty(editor) {
  // When tinyMce is empty the content seems to be:
  // <p><br data-mce-bogus="1"></p>
  // avoid expensive checks for large documents
  const body = editor.getBody();

  if (body.childNodes.length > 1) {
    return false;
  } else if (body.childNodes.length === 0) {
    return true;
  }

  if (body.childNodes[0].childNodes.length > 1) {
    return false;
  }

  return /^\n?$/.test(body.innerText || body.textContent);
}

function ClassicEdit(_ref) {
  let {
    clientId,
    attributes: {
      content
    },
    setAttributes,
    onReplace
  } = _ref;
  const {
    getMultiSelectedBlockClientIds
  } = Object(external_gc_data_["useSelect"])(external_gc_blockEditor_["store"]);
  const didMount = Object(external_gc_element_["useRef"])(false);
  Object(external_gc_element_["useEffect"])(() => {
    if (!didMount.current) {
      return;
    }

    const editor = window.tinymce.get(`editor-${clientId}`);
    const currentContent = editor === null || editor === void 0 ? void 0 : editor.getContent();

    if (currentContent !== content) {
      editor.setContent(content || '');
    }
  }, [content]);
  Object(external_gc_element_["useEffect"])(() => {
    const {
      baseURL,
      suffix
    } = window.gcEditorL10n.tinymce;
    didMount.current = true;
    window.tinymce.EditorManager.overrideDefaults({
      base_url: baseURL,
      suffix
    });

    function onSetup(editor) {
      let bookmark;

      if (content) {
        editor.on('loadContent', () => editor.setContent(content));
      }

      editor.on('blur', () => {
        var _getMultiSelectedBloc;

        bookmark = editor.selection.getBookmark(2, true); // There is an issue with Chrome and the editor.focus call in core at https://core.trac.gechiui.com/browser/trunk/src/js/_enqueues/lib/link.js#L451.
        // This causes a scroll to the top of editor content on return from some content updating dialogs so tracking
        // scroll position until this is fixed in core.

        const scrollContainer = document.querySelector('.interface-interface-skeleton__content');
        const scrollPosition = scrollContainer.scrollTop; // Only update attributes if we aren't multi-selecting blocks.
        // Updating during multi-selection can overwrite attributes of other blocks.

        if (!((_getMultiSelectedBloc = getMultiSelectedBlockClientIds()) !== null && _getMultiSelectedBloc !== void 0 && _getMultiSelectedBloc.length)) {
          setAttributes({
            content: editor.getContent()
          });
        }

        editor.once('focus', () => {
          if (bookmark) {
            editor.selection.moveToBookmark(bookmark);

            if (scrollContainer.scrollTop !== scrollPosition) {
              scrollContainer.scrollTop = scrollPosition;
            }
          }
        });
        return false;
      });
      editor.on('mousedown touchstart', () => {
        bookmark = null;
      });
      const debouncedOnChange = Object(external_lodash_["debounce"])(() => {
        const value = editor.getContent();

        if (value !== editor._lastChange) {
          editor._lastChange = value;
          setAttributes({
            content: value
          });
        }
      }, 250);
      editor.on('Paste Change input Undo Redo', debouncedOnChange); // We need to cancel the debounce call because when we remove
      // the editor (onUnmount) this callback is executed in
      // another tick. This results in setting the content to empty.

      editor.on('remove', debouncedOnChange.cancel);
      editor.on('keydown', event => {
        if (external_gc_keycodes_["isKeyboardEvent"].primary(event, 'z')) {
          // Prevent the gutenberg undo kicking in so TinyMCE undo stack works as expected
          event.stopPropagation();
        }

        if ((event.keyCode === external_gc_keycodes_["BACKSPACE"] || event.keyCode === external_gc_keycodes_["DELETE"]) && isTmceEmpty(editor)) {
          // delete the block
          onReplace([]);
          event.preventDefault();
          event.stopImmediatePropagation();
        }

        const {
          altKey
        } = event;
        /*
         * Prevent Mousetrap from kicking in: TinyMCE already uses its own
         * `alt+f10` shortcut to focus its toolbar.
         */

        if (altKey && event.keyCode === external_gc_keycodes_["F10"]) {
          event.stopPropagation();
        }
      });
      editor.on('init', () => {
        const rootNode = editor.getBody(); // Create the toolbar by refocussing the editor.

        if (rootNode.ownerDocument.activeElement === rootNode) {
          rootNode.blur();
          editor.focus();
        }
      });
    }

    function initialize() {
      const {
        settings
      } = window.gcEditorL10n.tinymce;
      edit_gc.oldEditor.initialize(`editor-${clientId}`, {
        tinymce: { ...settings,
          inline: true,
          content_css: false,
          fixed_toolbar_container: `#toolbar-${clientId}`,
          setup: onSetup
        }
      });
    }

    function onReadyStateChange() {
      if (document.readyState === 'complete') {
        initialize();
      }
    }

    if (document.readyState === 'complete') {
      initialize();
    } else {
      document.addEventListener('readystatechange', onReadyStateChange);
    }

    return () => {
      document.removeEventListener('readystatechange', onReadyStateChange);
      edit_gc.oldEditor.remove(`editor-${clientId}`);
    };
  }, []);

  function focus() {
    const editor = window.tinymce.get(`editor-${clientId}`);

    if (editor) {
      editor.focus();
    }
  }

  function onToolbarKeyDown(event) {
    // Prevent WritingFlow from kicking in and allow arrows navigation on the toolbar.
    event.stopPropagation(); // Prevent Mousetrap from moving focus to the top toolbar when pressing `alt+f10` on this block toolbar.

    event.nativeEvent.stopImmediatePropagation();
  } // Disable reasons:
  //
  // jsx-a11y/no-static-element-interactions
  //  - the toolbar itself is non-interactive, but must capture events
  //    from the KeyboardShortcuts component to stop their propagation.

  /* eslint-disable jsx-a11y/no-static-element-interactions */


  return Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["BlockControls"], null, Object(external_gc_element_["createElement"])(external_gc_components_["ToolbarGroup"], null, Object(external_gc_element_["createElement"])(convert_to_blocks_button, {
    clientId: clientId
  }))), Object(external_gc_element_["createElement"])("div", Object(external_gc_blockEditor_["useBlockProps"])(), Object(external_gc_element_["createElement"])("div", {
    key: "toolbar",
    id: `toolbar-${clientId}`,
    className: "block-library-classic__toolbar",
    onClick: focus,
    "data-placeholder": Object(external_gc_i18n_["__"])('经典'),
    onKeyDown: onToolbarKeyDown
  }), Object(external_gc_element_["createElement"])("div", {
    key: "editor",
    id: `editor-${clientId}`,
    className: "gc-block-freeform block-library-rich-text__tinymce"
  })));
  /* eslint-enable jsx-a11y/no-static-element-interactions */
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/freeform/save.js


/**
 * GeChiUI dependencies
 */

function freeform_save_save(_ref) {
  let {
    attributes
  } = _ref;
  const {
    content
  } = attributes;
  return Object(external_gc_element_["createElement"])(external_gc_element_["RawHTML"], null, content);
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/freeform/index.js
/**
 * GeChiUI dependencies
 */

/**
 * Internal dependencies
 */


const freeform_metadata = {
  apiVersion: 2,
  name: "core/freeform",
  title: "经典",
  category: "text",
  description: "使用经典GeChiUI编辑器。",
  textdomain: "default",
  attributes: {
    content: {
      type: "string",
      source: "html"
    }
  },
  supports: {
    className: false,
    customClassName: false,
    reusable: false
  },
  editorStyle: "gc-block-freeform-editor"
};

const {
  name: freeform_name
} = freeform_metadata;

const freeform_settings = {
  icon: library_classic,
  edit: ClassicEdit,
  save: freeform_save_save
};

// EXTERNAL MODULE: ./node_modules/@gechiui/icons/build-module/library/code.js
var code = __webpack_require__("rl/G");

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/code/edit.js


/**
 * GeChiUI dependencies
 */


function CodeEdit(_ref) {
  let {
    attributes,
    setAttributes,
    onRemove
  } = _ref;
  const blockProps = Object(external_gc_blockEditor_["useBlockProps"])();
  return Object(external_gc_element_["createElement"])("pre", blockProps, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"], {
    tagName: "code",
    value: attributes.content,
    onChange: content => setAttributes({
      content
    }),
    onRemove: onRemove,
    placeholder: Object(external_gc_i18n_["__"])('编写代码…'),
    "aria-label": Object(external_gc_i18n_["__"])('代码'),
    preserveWhiteSpace: true,
    __unstablePastePlainText: true
  }));
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/code/utils.js
/**
 * External dependencies
 */

/**
 * Escapes ampersands, shortcodes, and links.
 *
 * @param {string} content The content of a code block.
 * @return {string} The given content with some characters escaped.
 */

function utils_escape(content) {
  return Object(external_lodash_["flow"])(escapeOpeningSquareBrackets, escapeProtocolInIsolatedUrls)(content || '');
}
/**
 * Returns the given content with all opening shortcode characters converted
 * into their HTML entity counterpart (i.e. [ => &#91;). For instance, a
 * shortcode like [embed] becomes &#91;embed]
 *
 * This function replicates the escaping of HTML tags, where a tag like
 * <strong> becomes &lt;strong>.
 *
 * @param {string} content The content of a code block.
 * @return {string} The given content with its opening shortcode characters
 *                  converted into their HTML entity counterpart
 *                  (i.e. [ => &#91;)
 */

function escapeOpeningSquareBrackets(content) {
  return content.replace(/\[/g, '&#91;');
}
/**
 * Converts the first two forward slashes of any isolated URL into their HTML
 * counterparts (i.e. // => &#47;&#47;). For instance, https://youtube.com/watch?x
 * becomes https:&#47;&#47;youtube.com/watch?x.
 *
 * An isolated URL is a URL that sits in its own line, surrounded only by spacing
 * characters.
 *
 * See https://github.com/GeChiUI/gechiui-develop/blob/5.1.1/src/gc-includes/class-gc-embed.php#L403
 *
 * @param {string} content The content of a code block.
 * @return {string} The given content with its ampersands converted into
 *                  their HTML entity counterpart (i.e. & => &amp;)
 */


function escapeProtocolInIsolatedUrls(content) {
  return content.replace(/^(\s*https?:)\/\/([^\s<>"]+\s*)$/m, '$1&#47;&#47;$2');
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/code/save.js


/**
 * GeChiUI dependencies
 */

/**
 * Internal dependencies
 */


function code_save_save(_ref) {
  let {
    attributes
  } = _ref;
  return Object(external_gc_element_["createElement"])("pre", external_gc_blockEditor_["useBlockProps"].save(), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"].Content, {
    tagName: "code",
    value: utils_escape(attributes.content)
  }));
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/code/transforms.js
/**
 * GeChiUI dependencies
 */

const code_transforms_transforms = {
  from: [{
    type: 'enter',
    regExp: /^```$/,
    transform: () => Object(external_gc_blocks_["createBlock"])('core/code')
  }, {
    type: 'block',
    blocks: ['core/html'],
    transform: _ref => {
      let {
        content
      } = _ref;
      return Object(external_gc_blocks_["createBlock"])('core/code', {
        content
      });
    }
  }, {
    type: 'raw',
    isMatch: node => node.nodeName === 'PRE' && node.children.length === 1 && node.firstChild.nodeName === 'CODE',
    schema: {
      pre: {
        children: {
          code: {
            children: {
              '#text': {}
            }
          }
        }
      }
    }
  }]
};
/* harmony default export */ var code_transforms = (code_transforms_transforms);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/code/index.js
/**
 * GeChiUI dependencies
 */


/**
 * Internal dependencies
 */


const code_metadata = {
  apiVersion: 2,
  name: "core/code",
  title: "代码",
  category: "text",
  description: "显示符合间距和制表符的代码片段。",
  textdomain: "default",
  attributes: {
    content: {
      type: "string",
      source: "html",
      selector: "code"
    }
  },
  supports: {
    anchor: true,
    __experimentalSelector: ".gc-block-code > code",
    typography: {
      fontSize: true,
      lineHeight: true,
      __experimentalFontStyle: true,
      __experimentalFontWeight: true,
      __experimentalLetterSpacing: true,
      __experimentalTextTransform: true,
      __experimentalDefaultControls: {
        fontSize: true
      }
    },
    spacing: {
      margin: ["top", "bottom"],
      padding: true
    },
    __experimentalBorder: {
      radius: true,
      color: true,
      width: true,
      style: true
    },
    color: {
      text: true,
      background: true,
      gradients: true
    }
  },
  style: "gc-block-code"
};


const {
  name: code_name
} = code_metadata;

const code_settings = {
  icon: code["a" /* default */],
  example: {
    attributes: {
      /* eslint-disable @gechiui/i18n-no-collapsible-whitespace */
      // translators: Preserve \n markers for line breaks
      content: Object(external_gc_i18n_["__"])('// A "block" is the abstract term used\n// to describe units of markup that\n// when composed together, form the\n// content or layout of a page.\nregisterBlockType( name, settings );')
      /* eslint-enable @gechiui/i18n-no-collapsible-whitespace */

    }
  },
  transforms: code_transforms,
  edit: CodeEdit,
  save: code_save_save
};

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/column.js


/**
 * GeChiUI dependencies
 */

const column = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M19 6H6c-1.1 0-2 .9-2 2v9c0 1.1.9 2 2 2h13c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2zM6 17.5c-.3 0-.5-.2-.5-.5V8c0-.3.2-.5.5-.5h3v10H6zm13.5-.5c0 .3-.2.5-.5.5h-3v-10h3c.3 0 .5.2.5.5v9z"
}));
/* harmony default export */ var library_column = (column);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/column/deprecated.js


/**
 * External dependencies
 */

/**
 * GeChiUI dependencies
 */


const column_deprecated_deprecated = [{
  attributes: {
    verticalAlignment: {
      type: 'string'
    },
    width: {
      type: 'number',
      min: 0,
      max: 100
    }
  },

  isEligible(_ref) {
    let {
      width
    } = _ref;
    return isFinite(width);
  },

  migrate(attributes) {
    return { ...attributes,
      width: `${attributes.width}%`
    };
  },

  save(_ref2) {
    let {
      attributes
    } = _ref2;
    const {
      verticalAlignment,
      width
    } = attributes;
    const wrapperClasses = classnames_default()({
      [`is-vertically-aligned-${verticalAlignment}`]: verticalAlignment
    });
    const style = {
      flexBasis: width + '%'
    };
    return Object(external_gc_element_["createElement"])("div", {
      className: wrapperClasses,
      style: style
    }, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InnerBlocks"].Content, null));
  }

}];
/* harmony default export */ var column_deprecated = (column_deprecated_deprecated);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/column/edit.js


/**
 * External dependencies
 */

/**
 * GeChiUI dependencies
 */






function ColumnEdit(_ref) {
  let {
    attributes: {
      verticalAlignment,
      width,
      templateLock = false,
      allowedBlocks
    },
    setAttributes,
    clientId
  } = _ref;
  const classes = classnames_default()('block-core-columns', {
    [`is-vertically-aligned-${verticalAlignment}`]: verticalAlignment
  });
  const units = Object(external_gc_components_["__experimentalUseCustomUnits"])({
    availableUnits: Object(external_gc_blockEditor_["useSetting"])('spacing.units') || ['%', 'px', 'em', 'rem', 'vw']
  });
  const {
    columnsIds,
    hasChildBlocks,
    rootClientId
  } = Object(external_gc_data_["useSelect"])(select => {
    const {
      getBlockOrder,
      getBlockRootClientId
    } = select(external_gc_blockEditor_["store"]);
    const rootId = getBlockRootClientId(clientId);
    return {
      hasChildBlocks: getBlockOrder(clientId).length > 0,
      rootClientId: rootId,
      columnsIds: getBlockOrder(rootId)
    };
  }, [clientId]);
  const {
    updateBlockAttributes
  } = Object(external_gc_data_["useDispatch"])(external_gc_blockEditor_["store"]);

  const updateAlignment = value => {
    // Update own alignment.
    setAttributes({
      verticalAlignment: value
    }); // Reset parent Columns block.

    updateBlockAttributes(rootClientId, {
      verticalAlignment: null
    });
  };

  const widthWithUnit = Number.isFinite(width) ? width + '%' : width;
  const blockProps = Object(external_gc_blockEditor_["useBlockProps"])({
    className: classes,
    style: widthWithUnit ? {
      flexBasis: widthWithUnit
    } : undefined
  });
  const columnsCount = columnsIds.length;
  const currentColumnPosition = columnsIds.indexOf(clientId) + 1;
  const label = Object(external_gc_i18n_["sprintf"])(
  /* translators: 1: Block label (i.e. "Block: Column"), 2: Position of the selected block, 3: Total number of sibling blocks of the same type */
  Object(external_gc_i18n_["__"])('%1$s（%2$d，共%3$d）'), blockProps['aria-label'], currentColumnPosition, columnsCount);
  const innerBlocksProps = Object(external_gc_blockEditor_["useInnerBlocksProps"])({ ...blockProps,
    'aria-label': label
  }, {
    templateLock,
    allowedBlocks,
    renderAppender: hasChildBlocks ? undefined : external_gc_blockEditor_["InnerBlocks"].ButtonBlockAppender
  });
  return Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["BlockControls"], null, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["BlockVerticalAlignmentToolbar"], {
    onChange: updateAlignment,
    value: verticalAlignment
  })), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InspectorControls"], null, Object(external_gc_element_["createElement"])(external_gc_components_["PanelBody"], {
    title: Object(external_gc_i18n_["__"])('栏目设置')
  }, Object(external_gc_element_["createElement"])(external_gc_components_["__experimentalUnitControl"], {
    label: Object(external_gc_i18n_["__"])('宽度'),
    labelPosition: "edge",
    __unstableInputWidth: "80px",
    value: width || '',
    onChange: nextWidth => {
      nextWidth = 0 > parseFloat(nextWidth) ? '0' : nextWidth;
      setAttributes({
        width: nextWidth
      });
    },
    units: units
  }))), Object(external_gc_element_["createElement"])("div", innerBlocksProps));
}

/* harmony default export */ var column_edit = (ColumnEdit);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/column/save.js


/**
 * External dependencies
 */

/**
 * GeChiUI dependencies
 */


function column_save_save(_ref) {
  let {
    attributes
  } = _ref;
  const {
    verticalAlignment,
    width
  } = attributes;
  const wrapperClasses = classnames_default()({
    [`is-vertically-aligned-${verticalAlignment}`]: verticalAlignment
  });
  let style;

  if (width && /\d/.test(width)) {
    // Numbers are handled for backward compatibility as they can be still provided with templates.
    let flexBasis = Number.isFinite(width) ? width + '%' : width; // In some cases we need to round the width to a shorter float.

    if (!Number.isFinite(width) && width !== null && width !== void 0 && width.endsWith('%')) {
      const multiplier = 1000000000000; // Shrink the number back to a reasonable float.

      flexBasis = Math.round(Number.parseFloat(width) * multiplier) / multiplier + '%';
    }

    style = {
      flexBasis
    };
  }

  const blockProps = external_gc_blockEditor_["useBlockProps"].save({
    className: wrapperClasses,
    style
  });
  const innerBlocksProps = external_gc_blockEditor_["useInnerBlocksProps"].save(blockProps);
  return Object(external_gc_element_["createElement"])("div", innerBlocksProps);
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/column/index.js
/**
 * GeChiUI dependencies
 */

/**
 * Internal dependencies
 */



const column_metadata = {
  apiVersion: 2,
  name: "core/column",
  title: "单一栏目",
  category: "text",
  parent: ["core/columns"],
  description: "栏目区块中的单一列。",
  textdomain: "default",
  attributes: {
    verticalAlignment: {
      type: "string"
    },
    width: {
      type: "string"
    },
    allowedBlocks: {
      type: "array"
    },
    templateLock: {
      type: ["string", "boolean"],
      "enum": ["all", "insert", false]
    }
  },
  supports: {
    anchor: true,
    reusable: false,
    html: false,
    color: {
      gradients: true,
      link: true
    },
    spacing: {
      padding: true,
      __experimentalDefaultControls: {
        padding: true
      }
    }
  }
};

const {
  name: column_name
} = column_metadata;

const column_settings = {
  icon: library_column,
  edit: column_edit,
  save: column_save_save,
  deprecated: column_deprecated
};

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/columns.js


/**
 * GeChiUI dependencies
 */

const columns_columns = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  viewBox: "0 0 24 24",
  xmlns: "http://www.w3.org/2000/svg"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M19 6H6c-1.1 0-2 .9-2 2v9c0 1.1.9 2 2 2h13c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2zm-4.1 1.5v10H10v-10h4.9zM5.5 17V8c0-.3.2-.5.5-.5h2.5v10H6c-.3 0-.5-.2-.5-.5zm14 0c0 .3-.2.5-.5.5h-2.6v-10H19c.3 0 .5.2.5.5v9z"
}));
/* harmony default export */ var library_columns = (columns_columns);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/columns/deprecated.js


/**
 * External dependencies
 */


/**
 * GeChiUI dependencies
 */



/**
 * Given an HTML string for a deprecated columns inner block, returns the
 * column index to which the migrated inner block should be assigned. Returns
 * undefined if the inner block was not assigned to a column.
 *
 * @param {string} originalContent Deprecated Columns inner block HTML.
 *
 * @return {?number} Column to which inner block is to be assigned.
 */

function getDeprecatedLayoutColumn(originalContent) {
  let {
    doc
  } = getDeprecatedLayoutColumn;

  if (!doc) {
    doc = document.implementation.createHTMLDocument('');
    getDeprecatedLayoutColumn.doc = doc;
  }

  let columnMatch;
  doc.body.innerHTML = originalContent;

  for (const classListItem of doc.body.firstChild.classList) {
    if (columnMatch = classListItem.match(/^layout-column-(\d+)$/)) {
      return Number(columnMatch[1]) - 1;
    }
  }
}

const migrateCustomColors = attributes => {
  if (!attributes.customTextColor && !attributes.customBackgroundColor) {
    return attributes;
  }

  const style = {
    color: {}
  };

  if (attributes.customTextColor) {
    style.color.text = attributes.customTextColor;
  }

  if (attributes.customBackgroundColor) {
    style.color.background = attributes.customBackgroundColor;
  }

  return { ...Object(external_lodash_["omit"])(attributes, ['customTextColor', 'customBackgroundColor']),
    style,
    isStackedOnMobile: true
  };
};

/* harmony default export */ var columns_deprecated = ([{
  attributes: {
    verticalAlignment: {
      type: 'string'
    },
    backgroundColor: {
      type: 'string'
    },
    customBackgroundColor: {
      type: 'string'
    },
    customTextColor: {
      type: 'string'
    },
    textColor: {
      type: 'string'
    }
  },
  migrate: migrateCustomColors,

  save(_ref) {
    let {
      attributes
    } = _ref;
    const {
      verticalAlignment,
      backgroundColor,
      customBackgroundColor,
      textColor,
      customTextColor
    } = attributes;
    const backgroundClass = Object(external_gc_blockEditor_["getColorClassName"])('background-color', backgroundColor);
    const textClass = Object(external_gc_blockEditor_["getColorClassName"])('color', textColor);
    const className = classnames_default()({
      'has-background': backgroundColor || customBackgroundColor,
      'has-text-color': textColor || customTextColor,
      [backgroundClass]: backgroundClass,
      [textClass]: textClass,
      [`are-vertically-aligned-${verticalAlignment}`]: verticalAlignment
    });
    const style = {
      backgroundColor: backgroundClass ? undefined : customBackgroundColor,
      color: textClass ? undefined : customTextColor
    };
    return Object(external_gc_element_["createElement"])("div", {
      className: className ? className : undefined,
      style: style
    }, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InnerBlocks"].Content, null));
  }

}, {
  attributes: {
    columns: {
      type: 'number',
      default: 2
    }
  },

  isEligible(attributes, innerBlocks) {
    // Since isEligible is called on every valid instance of the
    // Columns block and a deprecation is the unlikely case due to
    // its subsequent migration, optimize for the `false` condition
    // by performing a naive, inaccurate pass at inner blocks.
    const isFastPassEligible = innerBlocks.some(innerBlock => /layout-column-\d+/.test(innerBlock.originalContent));

    if (!isFastPassEligible) {
      return false;
    } // Only if the fast pass is considered eligible is the more
    // accurate, durable, slower condition performed.


    return innerBlocks.some(innerBlock => getDeprecatedLayoutColumn(innerBlock.originalContent) !== undefined);
  },

  migrate(attributes, innerBlocks) {
    const columns = innerBlocks.reduce((accumulator, innerBlock) => {
      const {
        originalContent
      } = innerBlock;
      let columnIndex = getDeprecatedLayoutColumn(originalContent);

      if (columnIndex === undefined) {
        columnIndex = 0;
      }

      if (!accumulator[columnIndex]) {
        accumulator[columnIndex] = [];
      }

      accumulator[columnIndex].push(innerBlock);
      return accumulator;
    }, []);
    const migratedInnerBlocks = columns.map(columnBlocks => Object(external_gc_blocks_["createBlock"])('core/column', {}, columnBlocks));
    return [{ ...Object(external_lodash_["omit"])(attributes, ['columns']),
      isStackedOnMobile: true
    }, migratedInnerBlocks];
  },

  save(_ref2) {
    let {
      attributes
    } = _ref2;
    const {
      columns
    } = attributes;
    return Object(external_gc_element_["createElement"])("div", {
      className: `has-${columns}-columns`
    }, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InnerBlocks"].Content, null));
  }

}, {
  attributes: {
    columns: {
      type: 'number',
      default: 2
    }
  },

  migrate(attributes, innerBlocks) {
    attributes = { ...Object(external_lodash_["omit"])(attributes, ['columns']),
      isStackedOnMobile: true
    };
    return [attributes, innerBlocks];
  },

  save(_ref3) {
    let {
      attributes
    } = _ref3;
    const {
      verticalAlignment,
      columns
    } = attributes;
    const wrapperClasses = classnames_default()(`has-${columns}-columns`, {
      [`are-vertically-aligned-${verticalAlignment}`]: verticalAlignment
    });
    return Object(external_gc_element_["createElement"])("div", {
      className: wrapperClasses
    }, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InnerBlocks"].Content, null));
  }

}]);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/columns/utils.js
/**
 * External dependencies
 */

/**
 * Returns a column width attribute value rounded to standard precision.
 * Returns `undefined` if the value is not a valid finite number.
 *
 * @param {?number} value Raw value.
 *
 * @return {number} Value rounded to standard precision.
 */

const toWidthPrecision = value => {
  const unitlessValue = parseFloat(value);
  return Number.isFinite(unitlessValue) ? parseFloat(unitlessValue.toFixed(2)) : undefined;
};
/**
 * Returns an effective width for a given block. An effective width is equal to
 * its attribute value if set, or a computed value assuming equal distribution.
 *
 * @param {GCBlock} block           Block object.
 * @param {number}  totalBlockCount Total number of blocks in Columns.
 *
 * @return {number} Effective column width.
 */

function getEffectiveColumnWidth(block, totalBlockCount) {
  const {
    width = 100 / totalBlockCount
  } = block.attributes;
  return toWidthPrecision(width);
}
/**
 * Returns the total width occupied by the given set of column blocks.
 *
 * @param {GCBlock[]} blocks          Block objects.
 * @param {?number}   totalBlockCount Total number of blocks in Columns.
 *                                    Defaults to number of blocks passed.
 *
 * @return {number} Total width occupied by blocks.
 */

function getTotalColumnsWidth(blocks) {
  let totalBlockCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : blocks.length;
  return Object(external_lodash_["sumBy"])(blocks, block => getEffectiveColumnWidth(block, totalBlockCount));
}
/**
 * Returns an object of `clientId` → `width` of effective column widths.
 *
 * @param {GCBlock[]} blocks          Block objects.
 * @param {?number}   totalBlockCount Total number of blocks in Columns.
 *                                    Defaults to number of blocks passed.
 *
 * @return {Object<string,number>} Column widths.
 */

function getColumnWidths(blocks) {
  let totalBlockCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : blocks.length;
  return blocks.reduce((accumulator, block) => {
    const width = getEffectiveColumnWidth(block, totalBlockCount);
    return Object.assign(accumulator, {
      [block.clientId]: width
    });
  }, {});
}
/**
 * Returns an object of `clientId` → `width` of column widths as redistributed
 * proportional to their current widths, constrained or expanded to fit within
 * the given available width.
 *
 * @param {GCBlock[]} blocks          Block objects.
 * @param {number}    availableWidth  Maximum width to fit within.
 * @param {?number}   totalBlockCount Total number of blocks in Columns.
 *                                    Defaults to number of blocks passed.
 *
 * @return {Object<string,number>} Redistributed column widths.
 */

function getRedistributedColumnWidths(blocks, availableWidth) {
  let totalBlockCount = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : blocks.length;
  const totalWidth = getTotalColumnsWidth(blocks, totalBlockCount);
  return Object(external_lodash_["mapValues"])(getColumnWidths(blocks, totalBlockCount), width => {
    const newWidth = availableWidth * width / totalWidth;
    return toWidthPrecision(newWidth);
  });
}
/**
 * Returns true if column blocks within the provided set are assigned with
 * explicit widths, or false otherwise.
 *
 * @param {GCBlock[]} blocks Block objects.
 *
 * @return {boolean} Whether columns have explicit widths.
 */

function hasExplicitPercentColumnWidths(blocks) {
  return blocks.every(block => {
    var _blockWidth$endsWith;

    const blockWidth = block.attributes.width;
    return Number.isFinite(blockWidth !== null && blockWidth !== void 0 && (_blockWidth$endsWith = blockWidth.endsWith) !== null && _blockWidth$endsWith !== void 0 && _blockWidth$endsWith.call(blockWidth, '%') ? parseFloat(blockWidth) : blockWidth);
  });
}
/**
 * Returns a copy of the given set of blocks with new widths assigned from the
 * provided object of redistributed column widths.
 *
 * @param {GCBlock[]}             blocks Block objects.
 * @param {Object<string,number>} widths Redistributed column widths.
 *
 * @return {GCBlock[]} blocks Mapped block objects.
 */

function getMappedColumnWidths(blocks, widths) {
  return blocks.map(block => Object(external_lodash_["merge"])({}, block, {
    attributes: {
      width: `${widths[block.clientId]}%`
    }
  }));
}
/**
 * Returns an array with columns widths values, parsed or no depends on `withParsing` flag.
 *
 * @param {GCBlock[]} blocks      Block objects.
 * @param {?boolean}  withParsing Whether value has to be parsed.
 *
 * @return {Array<number,string>} Column widths.
 */

function getWidths(blocks) {
  let withParsing = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  return blocks.map(innerColumn => {
    const innerColumnWidth = innerColumn.attributes.width || 100 / blocks.length;
    return withParsing ? parseFloat(innerColumnWidth) : innerColumnWidth;
  });
}
/**
 * Returns a column width with unit.
 *
 * @param {string} width Column width.
 * @param {string} unit  Column width unit.
 *
 * @return {string} Column width with unit.
 */

function getWidthWithUnit(width, unit) {
  width = 0 > parseFloat(width) ? '0' : width;

  if (isPercentageUnit(unit)) {
    width = Math.min(width, 100);
  }

  return `${width}${unit}`;
}
/**
 * Returns a boolean whether passed unit is percentage
 *
 * @param {string} unit Column width unit.
 *
 * @return {boolean} 	Whether unit is '%'.
 */

function isPercentageUnit(unit) {
  return unit === '%';
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/columns/edit.js


/**
 * External dependencies
 */


/**
 * GeChiUI dependencies
 */






/**
 * Internal dependencies
 */


/**
 * Allowed blocks constant is passed to InnerBlocks precisely as specified here.
 * The contents of the array should never change.
 * The array should contain the name of each block that is allowed.
 * In columns block, the only block we allow is 'core/column'.
 *
 * @constant
 * @type {string[]}
 */

const edit_ALLOWED_BLOCKS = ['core/column'];

function ColumnsEditContainer(_ref) {
  let {
    attributes,
    setAttributes,
    updateAlignment,
    updateColumns,
    clientId
  } = _ref;
  const {
    isStackedOnMobile,
    verticalAlignment
  } = attributes;
  const {
    count
  } = Object(external_gc_data_["useSelect"])(select => {
    return {
      count: select(external_gc_blockEditor_["store"]).getBlockCount(clientId)
    };
  }, [clientId]);
  const classes = classnames_default()({
    [`are-vertically-aligned-${verticalAlignment}`]: verticalAlignment,
    [`is-not-stacked-on-mobile`]: !isStackedOnMobile
  });
  const blockProps = Object(external_gc_blockEditor_["useBlockProps"])({
    className: classes
  });
  const innerBlocksProps = Object(external_gc_blockEditor_["useInnerBlocksProps"])(blockProps, {
    allowedBlocks: edit_ALLOWED_BLOCKS,
    orientation: 'horizontal',
    renderAppender: false
  });
  return Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["BlockControls"], null, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["BlockVerticalAlignmentToolbar"], {
    onChange: updateAlignment,
    value: verticalAlignment
  })), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InspectorControls"], null, Object(external_gc_element_["createElement"])(external_gc_components_["PanelBody"], null, Object(external_gc_element_["createElement"])(external_gc_components_["RangeControl"], {
    label: Object(external_gc_i18n_["__"])('栏目'),
    value: count,
    onChange: value => updateColumns(count, value),
    min: 1,
    max: Math.max(6, count)
  }), count > 6 && Object(external_gc_element_["createElement"])(external_gc_components_["Notice"], {
    status: "warning",
    isDismissible: false
  }, Object(external_gc_i18n_["__"])('该栏数超过建议的数量，可能会导致页面无法完整呈现。')), Object(external_gc_element_["createElement"])(external_gc_components_["ToggleControl"], {
    label: Object(external_gc_i18n_["__"])('在移动设备上堆叠显示'),
    checked: isStackedOnMobile,
    onChange: () => setAttributes({
      isStackedOnMobile: !isStackedOnMobile
    })
  }))), Object(external_gc_element_["createElement"])("div", innerBlocksProps));
}

const ColumnsEditContainerWrapper = Object(external_gc_data_["withDispatch"])((dispatch, ownProps, registry) => ({
  /**
   * Update all child Column blocks with a new vertical alignment setting
   * based on whatever alignment is passed in. This allows change to parent
   * to overide anything set on a individual column basis.
   *
   * @param {string} verticalAlignment the vertical alignment setting
   */
  updateAlignment(verticalAlignment) {
    const {
      clientId,
      setAttributes
    } = ownProps;
    const {
      updateBlockAttributes
    } = dispatch(external_gc_blockEditor_["store"]);
    const {
      getBlockOrder
    } = registry.select(external_gc_blockEditor_["store"]); // Update own alignment.

    setAttributes({
      verticalAlignment
    }); // Update all child Column Blocks to match

    const innerBlockClientIds = getBlockOrder(clientId);
    innerBlockClientIds.forEach(innerBlockClientId => {
      updateBlockAttributes(innerBlockClientId, {
        verticalAlignment
      });
    });
  },

  /**
   * Updates the column count, including necessary revisions to child Column
   * blocks to grant required or redistribute available space.
   *
   * @param {number} previousColumns Previous column count.
   * @param {number} newColumns      New column count.
   */
  updateColumns(previousColumns, newColumns) {
    const {
      clientId
    } = ownProps;
    const {
      replaceInnerBlocks
    } = dispatch(external_gc_blockEditor_["store"]);
    const {
      getBlocks
    } = registry.select(external_gc_blockEditor_["store"]);
    let innerBlocks = getBlocks(clientId);
    const hasExplicitWidths = hasExplicitPercentColumnWidths(innerBlocks); // Redistribute available width for existing inner blocks.

    const isAddingColumn = newColumns > previousColumns;

    if (isAddingColumn && hasExplicitWidths) {
      // If adding a new column, assign width to the new column equal to
      // as if it were `1 / columns` of the total available space.
      const newColumnWidth = toWidthPrecision(100 / newColumns); // Redistribute in consideration of pending block insertion as
      // constraining the available working width.

      const widths = getRedistributedColumnWidths(innerBlocks, 100 - newColumnWidth);
      innerBlocks = [...getMappedColumnWidths(innerBlocks, widths), ...Object(external_lodash_["times"])(newColumns - previousColumns, () => {
        return Object(external_gc_blocks_["createBlock"])('core/column', {
          width: `${newColumnWidth}%`
        });
      })];
    } else if (isAddingColumn) {
      innerBlocks = [...innerBlocks, ...Object(external_lodash_["times"])(newColumns - previousColumns, () => {
        return Object(external_gc_blocks_["createBlock"])('core/column');
      })];
    } else {
      // The removed column will be the last of the inner blocks.
      innerBlocks = Object(external_lodash_["dropRight"])(innerBlocks, previousColumns - newColumns);

      if (hasExplicitWidths) {
        // Redistribute as if block is already removed.
        const widths = getRedistributedColumnWidths(innerBlocks, 100);
        innerBlocks = getMappedColumnWidths(innerBlocks, widths);
      }
    }

    replaceInnerBlocks(clientId, innerBlocks);
  }

}))(ColumnsEditContainer);

function Placeholder(_ref2) {
  let {
    clientId,
    name,
    setAttributes
  } = _ref2;
  const {
    blockType,
    defaultVariation,
    variations
  } = Object(external_gc_data_["useSelect"])(select => {
    const {
      getBlockVariations,
      getBlockType,
      getDefaultBlockVariation
    } = select(external_gc_blocks_["store"]);
    return {
      blockType: getBlockType(name),
      defaultVariation: getDefaultBlockVariation(name, 'block'),
      variations: getBlockVariations(name, 'block')
    };
  }, [name]);
  const {
    replaceInnerBlocks
  } = Object(external_gc_data_["useDispatch"])(external_gc_blockEditor_["store"]);
  const blockProps = Object(external_gc_blockEditor_["useBlockProps"])();
  return Object(external_gc_element_["createElement"])("div", blockProps, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["__experimentalBlockVariationPicker"], {
    icon: Object(external_lodash_["get"])(blockType, ['icon', 'src']),
    label: Object(external_lodash_["get"])(blockType, ['title']),
    variations: variations,
    onSelect: function () {
      let nextVariation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultVariation;

      if (nextVariation.attributes) {
        setAttributes(nextVariation.attributes);
      }

      if (nextVariation.innerBlocks) {
        replaceInnerBlocks(clientId, Object(external_gc_blocks_["createBlocksFromInnerBlocksTemplate"])(nextVariation.innerBlocks), true);
      }
    },
    allowSkip: true
  }));
}

const ColumnsEdit = props => {
  const {
    clientId
  } = props;
  const hasInnerBlocks = Object(external_gc_data_["useSelect"])(select => select(external_gc_blockEditor_["store"]).getBlocks(clientId).length > 0, [clientId]);
  const Component = hasInnerBlocks ? ColumnsEditContainerWrapper : Placeholder;
  return Object(external_gc_element_["createElement"])(Component, props);
};

/* harmony default export */ var columns_edit = (ColumnsEdit);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/columns/save.js


/**
 * External dependencies
 */

/**
 * GeChiUI dependencies
 */


function columns_save_save(_ref) {
  let {
    attributes
  } = _ref;
  const {
    isStackedOnMobile,
    verticalAlignment
  } = attributes;
  const className = classnames_default()({
    [`are-vertically-aligned-${verticalAlignment}`]: verticalAlignment,
    [`is-not-stacked-on-mobile`]: !isStackedOnMobile
  });
  const blockProps = external_gc_blockEditor_["useBlockProps"].save({
    className
  });
  const innerBlocksProps = external_gc_blockEditor_["useInnerBlocksProps"].save(blockProps);
  return Object(external_gc_element_["createElement"])("div", innerBlocksProps);
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/columns/variations.js


/**
 * GeChiUI dependencies
 */


/** @typedef {import('@gechiui/blocks').GCBlockVariation} GCBlockVariation */

/**
 * Template option choices for predefined columns layouts.
 *
 * @type {GCBlockVariation[]}
 */

const variations_variations = [{
  name: 'one-column-full',
  title: Object(external_gc_i18n_["__"])('100'),
  description: Object(external_gc_i18n_["__"])('单栏'),
  icon: Object(external_gc_element_["createElement"])(external_gc_components_["SVG"], {
    width: "48",
    height: "48",
    viewBox: "0 0 48 48",
    xmlns: "http://www.w3.org/2000/svg"
  }, Object(external_gc_element_["createElement"])(external_gc_components_["Path"], {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "m39.0625 14h-30.0625v20.0938h30.0625zm-30.0625-2c-1.10457 0-2 .8954-2 2v20.0938c0 1.1045.89543 2 2 2h30.0625c1.1046 0 2-.8955 2-2v-20.0938c0-1.1046-.8954-2-2-2z"
  })),
  innerBlocks: [['core/column']],
  scope: ['block']
}, {
  name: 'two-columns-equal',
  title: Object(external_gc_i18n_["__"])('50 / 50'),
  description: Object(external_gc_i18n_["__"])('两栏：栏宽相等'),
  icon: Object(external_gc_element_["createElement"])(external_gc_components_["SVG"], {
    width: "48",
    height: "48",
    viewBox: "0 0 48 48",
    xmlns: "http://www.w3.org/2000/svg"
  }, Object(external_gc_element_["createElement"])(external_gc_components_["Path"], {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M39 12C40.1046 12 41 12.8954 41 14V34C41 35.1046 40.1046 36 39 36H9C7.89543 36 7 35.1046 7 34V14C7 12.8954 7.89543 12 9 12H39ZM39 34V14H25V34H39ZM23 34H9V14H23V34Z"
  })),
  isDefault: true,
  innerBlocks: [['core/column'], ['core/column']],
  scope: ['block']
}, {
  name: 'two-columns-one-third-two-thirds',
  title: Object(external_gc_i18n_["__"])('30 / 70'),
  description: Object(external_gc_i18n_["__"])('两栏：分别占三分之一及三分之二宽度'),
  icon: Object(external_gc_element_["createElement"])(external_gc_components_["SVG"], {
    width: "48",
    height: "48",
    viewBox: "0 0 48 48",
    xmlns: "http://www.w3.org/2000/svg"
  }, Object(external_gc_element_["createElement"])(external_gc_components_["Path"], {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M39 12C40.1046 12 41 12.8954 41 14V34C41 35.1046 40.1046 36 39 36H9C7.89543 36 7 35.1046 7 34V14C7 12.8954 7.89543 12 9 12H39ZM39 34V14H20V34H39ZM18 34H9V14H18V34Z"
  })),
  innerBlocks: [['core/column', {
    width: '33.33%'
  }], ['core/column', {
    width: '66.66%'
  }]],
  scope: ['block']
}, {
  name: 'two-columns-two-thirds-one-third',
  title: Object(external_gc_i18n_["__"])('70 / 30'),
  description: Object(external_gc_i18n_["__"])('两栏：分别占三分之二及三分之一宽度'),
  icon: Object(external_gc_element_["createElement"])(external_gc_components_["SVG"], {
    width: "48",
    height: "48",
    viewBox: "0 0 48 48",
    xmlns: "http://www.w3.org/2000/svg"
  }, Object(external_gc_element_["createElement"])(external_gc_components_["Path"], {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M39 12C40.1046 12 41 12.8954 41 14V34C41 35.1046 40.1046 36 39 36H9C7.89543 36 7 35.1046 7 34V14C7 12.8954 7.89543 12 9 12H39ZM39 34V14H30V34H39ZM28 34H9V14H28V34Z"
  })),
  innerBlocks: [['core/column', {
    width: '66.66%'
  }], ['core/column', {
    width: '33.33%'
  }]],
  scope: ['block']
}, {
  name: 'three-columns-equal',
  title: Object(external_gc_i18n_["__"])('33 / 33 / 33'),
  description: Object(external_gc_i18n_["__"])('三栏：栏宽相等'),
  icon: Object(external_gc_element_["createElement"])(external_gc_components_["SVG"], {
    width: "48",
    height: "48",
    viewBox: "0 0 48 48",
    xmlns: "http://www.w3.org/2000/svg"
  }, Object(external_gc_element_["createElement"])(external_gc_components_["Path"], {
    fillRule: "evenodd",
    d: "M41 14a2 2 0 0 0-2-2H9a2 2 0 0 0-2 2v20a2 2 0 0 0 2 2h30a2 2 0 0 0 2-2V14zM28.5 34h-9V14h9v20zm2 0V14H39v20h-8.5zm-13 0H9V14h8.5v20z"
  })),
  innerBlocks: [['core/column'], ['core/column'], ['core/column']],
  scope: ['block']
}, {
  name: 'three-columns-wider-center',
  title: Object(external_gc_i18n_["__"])('25 / 50 / 25'),
  description: Object(external_gc_i18n_["__"])('三栏：中间栏位较宽'),
  icon: Object(external_gc_element_["createElement"])(external_gc_components_["SVG"], {
    width: "48",
    height: "48",
    viewBox: "0 0 48 48",
    xmlns: "http://www.w3.org/2000/svg"
  }, Object(external_gc_element_["createElement"])(external_gc_components_["Path"], {
    fillRule: "evenodd",
    d: "M41 14a2 2 0 0 0-2-2H9a2 2 0 0 0-2 2v20a2 2 0 0 0 2 2h30a2 2 0 0 0 2-2V14zM31 34H17V14h14v20zm2 0V14h6v20h-6zm-18 0H9V14h6v20z"
  })),
  innerBlocks: [['core/column', {
    width: '25%'
  }], ['core/column', {
    width: '50%'
  }], ['core/column', {
    width: '25%'
  }]],
  scope: ['block']
}];
/* harmony default export */ var columns_variations = (variations_variations);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/columns/transforms.js
/**
 * GeChiUI dependencies
 */

const MAXIMUM_SELECTED_BLOCKS = 6;
const columns_transforms_transforms = {
  from: [{
    type: 'block',
    isMultiBlock: true,
    blocks: ['*'],
    __experimentalConvert: blocks => {
      const columnWidth = +(100 / blocks.length).toFixed(2);
      const innerBlocksTemplate = blocks.map(_ref => {
        let {
          name,
          attributes,
          innerBlocks
        } = _ref;
        return ['core/column', {
          width: `${columnWidth}%`
        }, [[name, { ...attributes
        }, innerBlocks]]];
      });
      return Object(external_gc_blocks_["createBlock"])('core/columns', {}, Object(external_gc_blocks_["createBlocksFromInnerBlocksTemplate"])(innerBlocksTemplate));
    },
    isMatch: _ref2 => {
      let {
        length: selectedBlocksLength
      } = _ref2;
      return selectedBlocksLength && selectedBlocksLength <= MAXIMUM_SELECTED_BLOCKS;
    }
  }, {
    type: 'block',
    blocks: ['core/media-text'],
    priority: 1,
    transform: (attributes, innerBlocks) => {
      const {
        align,
        backgroundColor,
        textColor,
        style,
        mediaAlt: alt,
        mediaId: id,
        mediaPosition,
        mediaSizeSlug: sizeSlug,
        mediaType,
        mediaUrl: url,
        mediaWidth,
        verticalAlignment
      } = attributes;
      let media;

      if (mediaType === 'image' || !mediaType) {
        const imageAttrs = {
          id,
          alt,
          url,
          sizeSlug
        };
        const linkAttrs = {
          href: attributes.href,
          linkClass: attributes.linkClass,
          linkDestination: attributes.linkDestination,
          linkTarget: attributes.linkTarget,
          rel: attributes.rel
        };
        media = ['core/image', { ...imageAttrs,
          ...linkAttrs
        }];
      } else {
        media = ['core/video', {
          id,
          src: url
        }];
      }

      const innerBlocksTemplate = [['core/column', {
        width: `${mediaWidth}%`
      }, [media]], ['core/column', {
        width: `${100 - mediaWidth}%`
      }, innerBlocks]];

      if (mediaPosition === 'right') {
        innerBlocksTemplate.reverse();
      }

      return Object(external_gc_blocks_["createBlock"])('core/columns', {
        align,
        backgroundColor,
        textColor,
        style,
        verticalAlignment
      }, Object(external_gc_blocks_["createBlocksFromInnerBlocksTemplate"])(innerBlocksTemplate));
    }
  }]
};
/* harmony default export */ var columns_transforms = (columns_transforms_transforms);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/columns/index.js
/**
 * GeChiUI dependencies
 */


/**
 * Internal dependencies
 */



const columns_metadata = {
  apiVersion: 2,
  name: "core/columns",
  title: "栏目",
  category: "design",
  description: "在多列中显示内容，并在每列中添加区块。",
  textdomain: "default",
  attributes: {
    verticalAlignment: {
      type: "string"
    },
    isStackedOnMobile: {
      type: "boolean",
      "default": true
    }
  },
  supports: {
    anchor: true,
    align: ["wide", "full"],
    html: false,
    color: {
      gradients: true,
      link: true
    },
    spacing: {
      margin: ["top", "bottom"],
      padding: true,
      __experimentalDefaultControls: {
        padding: true
      }
    }
  },
  editorStyle: "gc-block-columns-editor",
  style: "gc-block-columns"
};



const {
  name: columns_name
} = columns_metadata;

const columns_settings = {
  icon: library_columns,
  variations: columns_variations,
  example: {
    viewportWidth: 600,
    // Columns collapse "@media (max-width: 599px)".
    innerBlocks: [{
      name: 'core/column',
      innerBlocks: [{
        name: 'core/paragraph',
        attributes: {
          /* translators: example text. */
          content: Object(external_gc_i18n_["__"])('我有两个忠实的助手，一个是我的耐心，另一个就是我的双手。')
        }
      }, {
        name: 'core/image',
        attributes: {
          url: 'https://s.w.org/images/core/5.3/Windbuchencom.jpg'
        }
      }, {
        name: 'core/paragraph',
        attributes: {
          /* translators: example text. */
          content: Object(external_gc_i18n_["__"])('青春的朝气和前进不已的好奇心若消失，人生就没有好处了。')
        }
      }]
    }, {
      name: 'core/column',
      innerBlocks: [{
        name: 'core/paragraph',
        attributes: {
          /* translators: example text. */
          content: Object(external_gc_i18n_["__"])('奋斗这一件事是自有人类以来天天不息的。')
        }
      }, {
        name: 'core/paragraph',
        attributes: {
          /* translators: example text. */
          content: Object(external_gc_i18n_["__"])('人们还往往把真理和错误混在一起去教人，而坚持的却是错误。')
        }
      }]
    }]
  },
  deprecated: columns_deprecated,
  edit: columns_edit,
  save: columns_save_save,
  transforms: columns_transforms
};

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/cover.js


/**
 * GeChiUI dependencies
 */

const cover = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M18.7 3H5.3C4 3 3 4 3 5.3v13.4C3 20 4 21 5.3 21h13.4c1.3 0 2.3-1 2.3-2.3V5.3C21 4 20 3 18.7 3zm.8 15.7c0 .4-.4.8-.8.8H5.3c-.4 0-.8-.4-.8-.8V5.3c0-.4.4-.8.8-.8h6.2v8.9l2.5-3.1 2.5 3.1V4.5h2.2c.4 0 .8.4.8.8v13.4z"
}));
/* harmony default export */ var library_cover = (cover);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/cover/shared.js
/**
 * GeChiUI dependencies
 */

const POSITION_CLASSNAMES = {
  'top left': 'is-position-top-left',
  'top center': 'is-position-top-center',
  'top right': 'is-position-top-right',
  'center left': 'is-position-center-left',
  'center center': 'is-position-center-center',
  center: 'is-position-center-center',
  'center right': 'is-position-center-right',
  'bottom left': 'is-position-bottom-left',
  'bottom center': 'is-position-bottom-center',
  'bottom right': 'is-position-bottom-right'
};
const IMAGE_BACKGROUND_TYPE = 'image';
const VIDEO_BACKGROUND_TYPE = 'video';
const COVER_MIN_HEIGHT = 50;
const COVER_MAX_HEIGHT = 1000;
const COVER_DEFAULT_HEIGHT = 300;
function backgroundImageStyles(url) {
  return url ? {
    backgroundImage: `url(${url})`
  } : {};
}
const shared_ALLOWED_MEDIA_TYPES = ['image', 'video'];
function dimRatioToClass(ratio) {
  return ratio === 50 || !ratio === undefined ? null : 'has-background-dim-' + 10 * Math.round(ratio / 10);
}
function attributesFromMedia(setAttributes, dimRatio) {
  return media => {
    if (!media || !media.url) {
      setAttributes({
        url: undefined,
        id: undefined
      });
      return;
    }

    if (Object(external_gc_blob_["isBlobURL"])(media.url)) {
      media.type = Object(external_gc_blob_["getBlobTypeByURL"])(media.url);
    }

    let mediaType; // for media selections originated from a file upload.

    if (media.media_type) {
      if (media.media_type === IMAGE_BACKGROUND_TYPE) {
        mediaType = IMAGE_BACKGROUND_TYPE;
      } else {
        // only images and videos are accepted so if the media_type is not an image we can assume it is a video.
        // Videos contain the media type of 'file' in the object returned from the rest api.
        mediaType = VIDEO_BACKGROUND_TYPE;
      }
    } else {
      // for media selections originated from existing files in the media library.
      if (media.type !== IMAGE_BACKGROUND_TYPE && media.type !== VIDEO_BACKGROUND_TYPE) {
        return;
      }

      mediaType = media.type;
    }

    setAttributes({
      dimRatio: dimRatio === 100 ? 50 : dimRatio,
      url: media.url,
      id: media.id,
      alt: media === null || media === void 0 ? void 0 : media.alt,
      backgroundType: mediaType,
      ...(mediaType === VIDEO_BACKGROUND_TYPE ? {
        focalPoint: undefined,
        hasParallax: undefined
      } : {})
    });
  };
}
/**
 * Checks of the contentPosition is the center (default) position.
 *
 * @param {string} contentPosition The current content position.
 * @return {boolean} Whether the contentPosition is center.
 */

function isContentPositionCenter(contentPosition) {
  return !contentPosition || contentPosition === 'center center' || contentPosition === 'center';
}
/**
 * Retrieves the className for the current contentPosition.
 * The default position (center) will not have a className.
 *
 * @param {string} contentPosition The current content position.
 * @return {string} The className assigned to the contentPosition.
 */

function getPositionClassName(contentPosition) {
  /*
   * Only render a className if the contentPosition is not center (the default).
   */
  if (isContentPositionCenter(contentPosition)) return '';
  return POSITION_CLASSNAMES[contentPosition];
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/cover/deprecated.js


/**
 * External dependencies
 */


/**
 * GeChiUI dependencies
 */




/**
 * Internal dependencies
 */


/**
 * Original function to determine the background opacity classname
 *
 * Used in deprecations: v1-7.
 *
 * @param {number} ratio ratio to use for opacity.
 * @return {string}       background opacity class   .
 */

function dimRatioToClassV1(ratio) {
  return ratio === 0 || ratio === 50 || !ratio ? null : 'has-background-dim-' + 10 * Math.round(ratio / 10);
}

function migrateDimRatio(attributes) {
  return { ...attributes,
    dimRatio: !attributes.url ? 100 : attributes.dimRatio
  };
}

const cover_deprecated_blockAttributes = {
  url: {
    type: 'string'
  },
  id: {
    type: 'number'
  },
  hasParallax: {
    type: 'boolean',
    default: false
  },
  dimRatio: {
    type: 'number',
    default: 50
  },
  overlayColor: {
    type: 'string'
  },
  customOverlayColor: {
    type: 'string'
  },
  backgroundType: {
    type: 'string',
    default: 'image'
  },
  focalPoint: {
    type: 'object'
  }
};
const v7 = {
  attributes: { ...cover_deprecated_blockAttributes,
    isRepeated: {
      type: 'boolean',
      default: false
    },
    minHeight: {
      type: 'number'
    },
    minHeightUnit: {
      type: 'string'
    },
    gradient: {
      type: 'string'
    },
    customGradient: {
      type: 'string'
    },
    contentPosition: {
      type: 'string'
    },
    alt: {
      type: 'string',
      source: 'attribute',
      selector: 'img',
      attribute: 'alt',
      default: ''
    }
  },
  supports: {
    anchor: true,
    align: true,
    html: false,
    spacing: {
      padding: true,
      __experimentalDefaultControls: {
        padding: true
      }
    },
    color: {
      __experimentalDuotone: '> .gc-block-cover__image-background, > .gc-block-cover__video-background',
      text: false,
      background: false
    }
  },

  save(_ref) {
    let {
      attributes
    } = _ref;
    const {
      backgroundType,
      gradient,
      contentPosition,
      customGradient,
      customOverlayColor,
      dimRatio,
      focalPoint,
      hasParallax,
      isRepeated,
      overlayColor,
      url,
      alt,
      id,
      minHeight: minHeightProp,
      minHeightUnit
    } = attributes;
    const overlayColorClass = Object(external_gc_blockEditor_["getColorClassName"])('background-color', overlayColor);

    const gradientClass = Object(external_gc_blockEditor_["__experimentalGetGradientClass"])(gradient);

    const minHeight = minHeightUnit ? `${minHeightProp}${minHeightUnit}` : minHeightProp;
    const isImageBackground = IMAGE_BACKGROUND_TYPE === backgroundType;
    const isVideoBackground = VIDEO_BACKGROUND_TYPE === backgroundType;
    const isImgElement = !(hasParallax || isRepeated);
    const style = { ...(isImageBackground && !isImgElement ? backgroundImageStyles(url) : {}),
      backgroundColor: !overlayColorClass ? customOverlayColor : undefined,
      background: customGradient && !url ? customGradient : undefined,
      minHeight: minHeight || undefined
    };
    const objectPosition = // prettier-ignore
    focalPoint && isImgElement ? `${Math.round(focalPoint.x * 100)}% ${Math.round(focalPoint.y * 100)}%` : undefined;
    const classes = classnames_default()(dimRatioToClassV1(dimRatio), overlayColorClass, {
      'has-background-dim': dimRatio !== 0,
      'has-parallax': hasParallax,
      'is-repeated': isRepeated,
      'has-background-gradient': gradient || customGradient,
      [gradientClass]: !url && gradientClass,
      'has-custom-content-position': !isContentPositionCenter(contentPosition)
    }, getPositionClassName(contentPosition));
    return Object(external_gc_element_["createElement"])("div", external_gc_blockEditor_["useBlockProps"].save({
      className: classes,
      style
    }), url && (gradient || customGradient) && dimRatio !== 0 && Object(external_gc_element_["createElement"])("span", {
      "aria-hidden": "true",
      className: classnames_default()('gc-block-cover__gradient-background', gradientClass),
      style: customGradient ? {
        background: customGradient
      } : undefined
    }), isImageBackground && isImgElement && url && Object(external_gc_element_["createElement"])("img", {
      className: classnames_default()('gc-block-cover__image-background', id ? `gc-image-${id}` : null),
      alt: alt,
      src: url,
      style: {
        objectPosition
      },
      "data-object-fit": "cover",
      "data-object-position": objectPosition
    }), isVideoBackground && url && Object(external_gc_element_["createElement"])("video", {
      className: classnames_default()('gc-block-cover__video-background', 'intrinsic-ignore'),
      autoPlay: true,
      muted: true,
      loop: true,
      playsInline: true,
      src: url,
      style: {
        objectPosition
      },
      "data-object-fit": "cover",
      "data-object-position": objectPosition
    }), Object(external_gc_element_["createElement"])("div", {
      className: "gc-block-cover__inner-container"
    }, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InnerBlocks"].Content, null)));
  },

  migrate: migrateDimRatio
};
const v6 = {
  attributes: { ...cover_deprecated_blockAttributes,
    isRepeated: {
      type: 'boolean',
      default: false
    },
    minHeight: {
      type: 'number'
    },
    minHeightUnit: {
      type: 'string'
    },
    gradient: {
      type: 'string'
    },
    customGradient: {
      type: 'string'
    },
    contentPosition: {
      type: 'string'
    }
  },
  supports: {
    align: true
  },

  save(_ref2) {
    let {
      attributes
    } = _ref2;
    const {
      backgroundType,
      gradient,
      contentPosition,
      customGradient,
      customOverlayColor,
      dimRatio,
      focalPoint,
      hasParallax,
      isRepeated,
      overlayColor,
      url,
      minHeight: minHeightProp,
      minHeightUnit
    } = attributes;
    const overlayColorClass = Object(external_gc_blockEditor_["getColorClassName"])('background-color', overlayColor);

    const gradientClass = Object(external_gc_blockEditor_["__experimentalGetGradientClass"])(gradient);

    const minHeight = minHeightUnit ? `${minHeightProp}${minHeightUnit}` : minHeightProp;
    const isImageBackground = IMAGE_BACKGROUND_TYPE === backgroundType;
    const isVideoBackground = VIDEO_BACKGROUND_TYPE === backgroundType;
    const style = isImageBackground ? backgroundImageStyles(url) : {};
    const videoStyle = {};

    if (!overlayColorClass) {
      style.backgroundColor = customOverlayColor;
    }

    if (customGradient && !url) {
      style.background = customGradient;
    }

    style.minHeight = minHeight || undefined;
    let positionValue;

    if (focalPoint) {
      positionValue = `${Math.round(focalPoint.x * 100)}% ${Math.round(focalPoint.y * 100)}%`;

      if (isImageBackground && !hasParallax) {
        style.backgroundPosition = positionValue;
      }

      if (isVideoBackground) {
        videoStyle.objectPosition = positionValue;
      }
    }

    const classes = classnames_default()(dimRatioToClassV1(dimRatio), overlayColorClass, {
      'has-background-dim': dimRatio !== 0,
      'has-parallax': hasParallax,
      'is-repeated': isRepeated,
      'has-background-gradient': gradient || customGradient,
      [gradientClass]: !url && gradientClass,
      'has-custom-content-position': !isContentPositionCenter(contentPosition)
    }, getPositionClassName(contentPosition));
    return Object(external_gc_element_["createElement"])("div", external_gc_blockEditor_["useBlockProps"].save({
      className: classes,
      style
    }), url && (gradient || customGradient) && dimRatio !== 0 && Object(external_gc_element_["createElement"])("span", {
      "aria-hidden": "true",
      className: classnames_default()('gc-block-cover__gradient-background', gradientClass),
      style: customGradient ? {
        background: customGradient
      } : undefined
    }), isVideoBackground && url && Object(external_gc_element_["createElement"])("video", {
      className: "gc-block-cover__video-background",
      autoPlay: true,
      muted: true,
      loop: true,
      playsInline: true,
      src: url,
      style: videoStyle
    }), Object(external_gc_element_["createElement"])("div", {
      className: "gc-block-cover__inner-container"
    }, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InnerBlocks"].Content, null)));
  },

  migrate: migrateDimRatio
};
const v5 = {
  attributes: { ...cover_deprecated_blockAttributes,
    minHeight: {
      type: 'number'
    },
    gradient: {
      type: 'string'
    },
    customGradient: {
      type: 'string'
    }
  },
  supports: {
    align: true
  },

  save(_ref3) {
    let {
      attributes
    } = _ref3;
    const {
      backgroundType,
      gradient,
      customGradient,
      customOverlayColor,
      dimRatio,
      focalPoint,
      hasParallax,
      overlayColor,
      url,
      minHeight
    } = attributes;
    const overlayColorClass = Object(external_gc_blockEditor_["getColorClassName"])('background-color', overlayColor);

    const gradientClass = Object(external_gc_blockEditor_["__experimentalGetGradientClass"])(gradient);

    const style = backgroundType === IMAGE_BACKGROUND_TYPE ? backgroundImageStyles(url) : {};

    if (!overlayColorClass) {
      style.backgroundColor = customOverlayColor;
    }

    if (focalPoint && !hasParallax) {
      style.backgroundPosition = `${Math.round(focalPoint.x * 100)}% ${Math.round(focalPoint.y * 100)}%`;
    }

    if (customGradient && !url) {
      style.background = customGradient;
    }

    style.minHeight = minHeight || undefined;
    const classes = classnames_default()(dimRatioToClassV1(dimRatio), overlayColorClass, {
      'has-background-dim': dimRatio !== 0,
      'has-parallax': hasParallax,
      'has-background-gradient': customGradient,
      [gradientClass]: !url && gradientClass
    });
    return Object(external_gc_element_["createElement"])("div", {
      className: classes,
      style: style
    }, url && (gradient || customGradient) && dimRatio !== 0 && Object(external_gc_element_["createElement"])("span", {
      "aria-hidden": "true",
      className: classnames_default()('gc-block-cover__gradient-background', gradientClass),
      style: customGradient ? {
        background: customGradient
      } : undefined
    }), VIDEO_BACKGROUND_TYPE === backgroundType && url && Object(external_gc_element_["createElement"])("video", {
      className: "gc-block-cover__video-background",
      autoPlay: true,
      muted: true,
      loop: true,
      src: url
    }), Object(external_gc_element_["createElement"])("div", {
      className: "gc-block-cover__inner-container"
    }, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InnerBlocks"].Content, null)));
  },

  migrate: migrateDimRatio
};
const v4 = {
  attributes: { ...cover_deprecated_blockAttributes,
    minHeight: {
      type: 'number'
    },
    gradient: {
      type: 'string'
    },
    customGradient: {
      type: 'string'
    }
  },
  supports: {
    align: true
  },

  save(_ref4) {
    let {
      attributes
    } = _ref4;
    const {
      backgroundType,
      gradient,
      customGradient,
      customOverlayColor,
      dimRatio,
      focalPoint,
      hasParallax,
      overlayColor,
      url,
      minHeight
    } = attributes;
    const overlayColorClass = Object(external_gc_blockEditor_["getColorClassName"])('background-color', overlayColor);

    const gradientClass = Object(external_gc_blockEditor_["__experimentalGetGradientClass"])(gradient);

    const style = backgroundType === IMAGE_BACKGROUND_TYPE ? backgroundImageStyles(url) : {};

    if (!overlayColorClass) {
      style.backgroundColor = customOverlayColor;
    }

    if (focalPoint && !hasParallax) {
      style.backgroundPosition = `${focalPoint.x * 100}% ${focalPoint.y * 100}%`;
    }

    if (customGradient && !url) {
      style.background = customGradient;
    }

    style.minHeight = minHeight || undefined;
    const classes = classnames_default()(dimRatioToClassV1(dimRatio), overlayColorClass, {
      'has-background-dim': dimRatio !== 0,
      'has-parallax': hasParallax,
      'has-background-gradient': customGradient,
      [gradientClass]: !url && gradientClass
    });
    return Object(external_gc_element_["createElement"])("div", {
      className: classes,
      style: style
    }, url && (gradient || customGradient) && dimRatio !== 0 && Object(external_gc_element_["createElement"])("span", {
      "aria-hidden": "true",
      className: classnames_default()('gc-block-cover__gradient-background', gradientClass),
      style: customGradient ? {
        background: customGradient
      } : undefined
    }), VIDEO_BACKGROUND_TYPE === backgroundType && url && Object(external_gc_element_["createElement"])("video", {
      className: "gc-block-cover__video-background",
      autoPlay: true,
      muted: true,
      loop: true,
      src: url
    }), Object(external_gc_element_["createElement"])("div", {
      className: "gc-block-cover__inner-container"
    }, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InnerBlocks"].Content, null)));
  },

  migrate: migrateDimRatio
};
const v3 = {
  attributes: { ...cover_deprecated_blockAttributes,
    title: {
      type: 'string',
      source: 'html',
      selector: 'p'
    },
    contentAlign: {
      type: 'string',
      default: 'center'
    }
  },
  supports: {
    align: true
  },

  save(_ref5) {
    let {
      attributes
    } = _ref5;
    const {
      backgroundType,
      contentAlign,
      customOverlayColor,
      dimRatio,
      focalPoint,
      hasParallax,
      overlayColor,
      title,
      url
    } = attributes;
    const overlayColorClass = Object(external_gc_blockEditor_["getColorClassName"])('background-color', overlayColor);
    const style = backgroundType === IMAGE_BACKGROUND_TYPE ? backgroundImageStyles(url) : {};

    if (!overlayColorClass) {
      style.backgroundColor = customOverlayColor;
    }

    if (focalPoint && !hasParallax) {
      style.backgroundPosition = `${focalPoint.x * 100}% ${focalPoint.y * 100}%`;
    }

    const classes = classnames_default()(dimRatioToClassV1(dimRatio), overlayColorClass, {
      'has-background-dim': dimRatio !== 0,
      'has-parallax': hasParallax,
      [`has-${contentAlign}-content`]: contentAlign !== 'center'
    });
    return Object(external_gc_element_["createElement"])("div", {
      className: classes,
      style: style
    }, VIDEO_BACKGROUND_TYPE === backgroundType && url && Object(external_gc_element_["createElement"])("video", {
      className: "gc-block-cover__video-background",
      autoPlay: true,
      muted: true,
      loop: true,
      src: url
    }), !external_gc_blockEditor_["RichText"].isEmpty(title) && Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"].Content, {
      tagName: "p",
      className: "gc-block-cover-text",
      value: title
    }));
  },

  migrate(attributes) {
    const newAttribs = { ...attributes,
      dimRatio: !attributes.url ? 100 : attributes.dimRatio
    };
    return [Object(external_lodash_["omit"])(newAttribs, ['title', 'contentAlign']), [Object(external_gc_blocks_["createBlock"])('core/paragraph', {
      content: attributes.title,
      align: attributes.contentAlign,
      fontSize: 'large',
      placeholder: Object(external_gc_i18n_["__"])('编写标题…')
    })]];
  }

};
const v2 = {
  attributes: { ...cover_deprecated_blockAttributes,
    title: {
      type: 'string',
      source: 'html',
      selector: 'p'
    },
    contentAlign: {
      type: 'string',
      default: 'center'
    },
    align: {
      type: 'string'
    }
  },
  supports: {
    className: false
  },

  save(_ref6) {
    let {
      attributes
    } = _ref6;
    const {
      url,
      title,
      hasParallax,
      dimRatio,
      align,
      contentAlign,
      overlayColor,
      customOverlayColor
    } = attributes;
    const overlayColorClass = Object(external_gc_blockEditor_["getColorClassName"])('background-color', overlayColor);
    const style = backgroundImageStyles(url);

    if (!overlayColorClass) {
      style.backgroundColor = customOverlayColor;
    }

    const classes = classnames_default()('gc-block-cover-image', dimRatioToClassV1(dimRatio), overlayColorClass, {
      'has-background-dim': dimRatio !== 0,
      'has-parallax': hasParallax,
      [`has-${contentAlign}-content`]: contentAlign !== 'center'
    }, align ? `align${align}` : null);
    return Object(external_gc_element_["createElement"])("div", {
      className: classes,
      style: style
    }, !external_gc_blockEditor_["RichText"].isEmpty(title) && Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"].Content, {
      tagName: "p",
      className: "gc-block-cover-image-text",
      value: title
    }));
  },

  migrate(attributes) {
    const newAttribs = { ...attributes,
      dimRatio: !attributes.url ? 100 : attributes.dimRatio
    };
    return [Object(external_lodash_["omit"])(newAttribs, ['title', 'contentAlign', 'align']), [Object(external_gc_blocks_["createBlock"])('core/paragraph', {
      content: attributes.title,
      align: attributes.contentAlign,
      fontSize: 'large',
      placeholder: Object(external_gc_i18n_["__"])('编写标题…')
    })]];
  }

};
const v1 = {
  attributes: { ...cover_deprecated_blockAttributes,
    title: {
      type: 'string',
      source: 'html',
      selector: 'h2'
    },
    align: {
      type: 'string'
    },
    contentAlign: {
      type: 'string',
      default: 'center'
    }
  },
  supports: {
    className: false
  },

  save(_ref7) {
    let {
      attributes
    } = _ref7;
    const {
      url,
      title,
      hasParallax,
      dimRatio,
      align
    } = attributes;
    const style = backgroundImageStyles(url);
    const classes = classnames_default()('gc-block-cover-image', dimRatioToClassV1(dimRatio), {
      'has-background-dim': dimRatio !== 0,
      'has-parallax': hasParallax
    }, align ? `align${align}` : null);
    return Object(external_gc_element_["createElement"])("section", {
      className: classes,
      style: style
    }, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"].Content, {
      tagName: "h2",
      value: title
    }));
  },

  migrate(attributes) {
    const newAttribs = { ...attributes,
      dimRatio: !attributes.url ? 100 : attributes.dimRatio
    };
    return [Object(external_lodash_["omit"])(newAttribs, ['title', 'contentAlign', 'align']), [Object(external_gc_blocks_["createBlock"])('core/paragraph', {
      content: attributes.title,
      align: attributes.contentAlign,
      fontSize: 'large',
      placeholder: Object(external_gc_i18n_["__"])('编写标题…')
    })]];
  }

};
/* harmony default export */ var cover_deprecated = ([v7, v6, v5, v4, v3, v2, v1]);

// EXTERNAL MODULE: ./node_modules/fast-average-color/dist/index.js
var dist = __webpack_require__("FEKF");
var dist_default = /*#__PURE__*/__webpack_require__.n(dist);

// EXTERNAL MODULE: ./node_modules/colord/index.mjs
var colord = __webpack_require__("fHnH");

// EXTERNAL MODULE: ./node_modules/colord/plugins/names.mjs
var names = __webpack_require__("abaT");

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/cover/edit.js



/**
 * External dependencies
 */




/**
 * GeChiUI dependencies
 */









/**
 * Internal dependencies
 */


Object(colord["b" /* extend */])([names["a" /* default */]]);
const {
  __Visualizer: BoxControlVisualizer
} = external_gc_components_["__experimentalBoxControl"];

function getInnerBlocksTemplate(attributes) {
  return [['core/paragraph', {
    align: 'center',
    placeholder: Object(external_gc_i18n_["__"])('编写标题…'),
    ...attributes
  }]];
}

function retrieveFastAverageColor() {
  if (!retrieveFastAverageColor.fastAverageColor) {
    retrieveFastAverageColor.fastAverageColor = new dist_default.a();
  }

  return retrieveFastAverageColor.fastAverageColor;
}

function CoverHeightInput(_ref) {
  let {
    onChange,
    onUnitChange,
    unit = 'px',
    value = ''
  } = _ref;
  const [temporaryInput, setTemporaryInput] = Object(external_gc_element_["useState"])(null);
  const instanceId = Object(external_gc_compose_["useInstanceId"])(external_gc_blockEditor_["__experimentalUnitControl"]);
  const inputId = `block-cover-height-input-${instanceId}`;
  const isPx = unit === 'px';
  const units = Object(external_gc_components_["__experimentalUseCustomUnits"])({
    availableUnits: Object(external_gc_blockEditor_["useSetting"])('spacing.units') || ['px', 'em', 'rem', 'vw', 'vh'],
    defaultValues: {
      px: '430',
      em: '20',
      rem: '20',
      vw: '20',
      vh: '50'
    }
  });

  const handleOnChange = unprocessedValue => {
    const inputValue = unprocessedValue !== '' ? parseFloat(unprocessedValue) : undefined;

    if (isNaN(inputValue) && inputValue !== undefined) {
      setTemporaryInput(unprocessedValue);
      return;
    }

    setTemporaryInput(null);
    onChange(inputValue);

    if (inputValue === undefined) {
      onUnitChange();
    }
  };

  const handleOnBlur = () => {
    if (temporaryInput !== null) {
      setTemporaryInput(null);
    }
  };

  const inputValue = temporaryInput !== null ? temporaryInput : value;
  const min = isPx ? COVER_MIN_HEIGHT : 0;
  return Object(external_gc_element_["createElement"])(external_gc_components_["BaseControl"], {
    label: Object(external_gc_i18n_["__"])('覆盖最小高度'),
    id: inputId
  }, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["__experimentalUnitControl"], {
    id: inputId,
    isResetValueOnUnitChange: true,
    min: min,
    onBlur: handleOnBlur,
    onChange: handleOnChange,
    onUnitChange: onUnitChange,
    style: {
      maxWidth: 80
    },
    unit: unit,
    units: units,
    value: inputValue
  }));
}

const RESIZABLE_BOX_ENABLE_OPTION = {
  top: false,
  right: false,
  bottom: true,
  left: false,
  topRight: false,
  bottomRight: false,
  bottomLeft: false,
  topLeft: false
};

function ResizableCover(_ref2) {
  let {
    className,
    onResizeStart,
    onResize,
    onResizeStop,
    ...props
  } = _ref2;
  const [isResizing, setIsResizing] = Object(external_gc_element_["useState"])(false);
  return Object(external_gc_element_["createElement"])(external_gc_components_["ResizableBox"], Object(esm_extends["a" /* default */])({
    className: classnames_default()(className, {
      'is-resizing': isResizing
    }),
    enable: RESIZABLE_BOX_ENABLE_OPTION,
    onResizeStart: (_event, _direction, elt) => {
      onResizeStart(elt.clientHeight);
      onResize(elt.clientHeight);
    },
    onResize: (_event, _direction, elt) => {
      onResize(elt.clientHeight);

      if (!isResizing) {
        setIsResizing(true);
      }
    },
    onResizeStop: (_event, _direction, elt) => {
      onResizeStop(elt.clientHeight);
      setIsResizing(false);
    }
  }, props));
}
/**
 * useCoverIsDark is a hook that returns a boolean variable specifying if the cover
 * background is dark or not.
 *
 * @param {?string} url          Url of the media background.
 * @param {?number} dimRatio     Transparency of the overlay color. If an image and
 *                               color are set, dimRatio is used to decide what is used
 *                               for background darkness checking purposes.
 * @param {?string} overlayColor String containing the overlay color value if one exists.
 * @param {?Object} elementRef   If a media background is set, elementRef should contain a reference to a
 *                               dom element that renders that media.
 *
 * @return {boolean} True if the cover background is considered "dark" and false otherwise.
 */


function useCoverIsDark(url) {
  let dimRatio = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 50;
  let overlayColor = arguments.length > 2 ? arguments[2] : undefined;
  let elementRef = arguments.length > 3 ? arguments[3] : undefined;
  const [isDark, setIsDark] = Object(external_gc_element_["useState"])(false);
  Object(external_gc_element_["useEffect"])(() => {
    // If opacity is lower than 50 the dominant color is the image or video color,
    // so use that color for the dark mode computation.
    if (url && dimRatio <= 50 && elementRef.current) {
      retrieveFastAverageColor().getColorAsync(elementRef.current, color => {
        setIsDark(color.isDark);
      });
    }
  }, [url, url && dimRatio <= 50 && elementRef.current, setIsDark]);
  Object(external_gc_element_["useEffect"])(() => {
    // If opacity is greater than 50 the dominant color is the overlay color,
    // so use that color for the dark mode computation.
    if (dimRatio > 50 || !url) {
      if (!overlayColor) {
        // If no overlay color exists the overlay color is black (isDark )
        setIsDark(true);
        return;
      }

      setIsDark(Object(colord["a" /* colord */])(overlayColor).isDark());
    }
  }, [overlayColor, dimRatio > 50 || !url, setIsDark]);
  Object(external_gc_element_["useEffect"])(() => {
    if (!url && !overlayColor) {
      // Reset isDark
      setIsDark(false);
    }
  }, [!url && !overlayColor, setIsDark]);
  return isDark;
}

function edit_mediaPosition(_ref3) {
  let {
    x,
    y
  } = _ref3;
  return `${Math.round(x * 100)}% ${Math.round(y * 100)}%`;
}
/**
 * Is the URL a temporary blob URL? A blob URL is one that is used temporarily while
 * the media (image or video) is being uploaded and will not have an id allocated yet.
 *
 * @param {number} id  The id of the media.
 * @param {string} url The url of the media.
 *
 * @return {boolean} Is the URL a Blob URL.
 */


const edit_isTemporaryMedia = (id, url) => !id && Object(external_gc_blob_["isBlobURL"])(url);

function CoverPlaceholder(_ref4) {
  let {
    disableMediaButtons = false,
    children,
    noticeUI,
    noticeOperations,
    onSelectMedia,
    style
  } = _ref4;
  const {
    removeAllNotices,
    createErrorNotice
  } = noticeOperations;
  return Object(external_gc_element_["createElement"])(external_gc_blockEditor_["MediaPlaceholder"], {
    icon: Object(external_gc_element_["createElement"])(external_gc_blockEditor_["BlockIcon"], {
      icon: library_cover
    }),
    labels: {
      title: Object(external_gc_i18n_["__"])('封面'),
      instructions: Object(external_gc_i18n_["__"])('拖放到此块上，上传或从库中选择现有媒体。')
    },
    onSelect: onSelectMedia,
    accept: "image/*,video/*",
    allowedTypes: shared_ALLOWED_MEDIA_TYPES,
    notices: noticeUI,
    disableMediaButtons: disableMediaButtons,
    onError: message => {
      removeAllNotices();
      createErrorNotice(message);
    },
    style: style
  }, children);
}

function CoverEdit(_ref5) {
  var _useSetting, _styleAttribute$spaci, _styleAttribute$visua;

  let {
    attributes,
    clientId,
    isSelected,
    noticeUI,
    noticeOperations,
    overlayColor,
    setAttributes,
    setOverlayColor,
    toggleSelection,
    markNextChangeAsNotPersistent
  } = _ref5;
  const {
    contentPosition,
    id,
    backgroundType,
    dimRatio,
    focalPoint,
    hasParallax,
    isDark,
    isRepeated,
    minHeight,
    minHeightUnit,
    style: styleAttribute,
    url,
    alt,
    allowedBlocks,
    templateLock
  } = attributes;

  const {
    gradientClass,
    gradientValue,
    setGradient
  } = Object(external_gc_blockEditor_["__experimentalUseGradient"])();

  const onSelectMedia = attributesFromMedia(setAttributes, dimRatio);
  const isUploadingMedia = edit_isTemporaryMedia(id, url);
  const [prevMinHeightValue, setPrevMinHeightValue] = Object(external_gc_element_["useState"])(minHeight);
  const [prevMinHeightUnit, setPrevMinHeightUnit] = Object(external_gc_element_["useState"])(minHeightUnit);
  const isMinFullHeight = minHeightUnit === 'vh' && minHeight === 100;

  const toggleMinFullHeight = () => {
    if (isMinFullHeight) {
      // If there aren't previous values, take the default ones.
      if (prevMinHeightUnit === 'vh' && prevMinHeightValue === 100) {
        return setAttributes({
          minHeight: undefined,
          minHeightUnit: undefined
        });
      } // Set the previous values of height.


      return setAttributes({
        minHeight: prevMinHeightValue,
        minHeightUnit: prevMinHeightUnit
      });
    }

    setPrevMinHeightValue(minHeight);
    setPrevMinHeightUnit(minHeightUnit); // Set full height.

    return setAttributes({
      minHeight: 100,
      minHeightUnit: 'vh'
    });
  };

  const toggleParallax = () => {
    setAttributes({
      hasParallax: !hasParallax,
      ...(!hasParallax ? {
        focalPoint: undefined
      } : {})
    });
  };

  const toggleIsRepeated = () => {
    setAttributes({
      isRepeated: !isRepeated
    });
  };

  const isDarkElement = Object(external_gc_element_["useRef"])();
  const isCoverDark = useCoverIsDark(url, dimRatio, overlayColor.color, isDarkElement);
  Object(external_gc_element_["useEffect"])(() => {
    // This side-effect should not create an undo level.
    markNextChangeAsNotPersistent();
    setAttributes({
      isDark: isCoverDark
    });
  }, [isCoverDark]);
  const isImageBackground = IMAGE_BACKGROUND_TYPE === backgroundType;
  const isVideoBackground = VIDEO_BACKGROUND_TYPE === backgroundType;
  const [temporaryMinHeight, setTemporaryMinHeight] = Object(external_gc_element_["useState"])(null);
  const minHeightWithUnit = minHeightUnit ? `${minHeight}${minHeightUnit}` : minHeight;
  const isImgElement = !(hasParallax || isRepeated);
  const style = { ...(isImageBackground && !isImgElement ? backgroundImageStyles(url) : undefined),
    minHeight: temporaryMinHeight || minHeightWithUnit || undefined
  };
  const bgStyle = {
    backgroundColor: overlayColor.color
  };
  const mediaStyle = {
    objectPosition: focalPoint && isImgElement ? edit_mediaPosition(focalPoint) : undefined
  };
  const hasBackground = !!(url || overlayColor.color || gradientValue);
  const showFocalPointPicker = isVideoBackground || isImageBackground && (!hasParallax || isRepeated);

  const imperativeFocalPointPreview = value => {
    const [styleOfRef, property] = isDarkElement.current ? [isDarkElement.current.style, 'objectPosition'] : [ref.current.style, 'backgroundPosition'];
    styleOfRef[property] = edit_mediaPosition(value);
  };

  const hasInnerBlocks = Object(external_gc_data_["useSelect"])(select => select(external_gc_blockEditor_["store"]).getBlock(clientId).innerBlocks.length > 0, [clientId]);
  const controls = Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["BlockControls"], {
    group: "block"
  }, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["__experimentalBlockAlignmentMatrixControl"], {
    label: Object(external_gc_i18n_["__"])('更改内容位置'),
    value: contentPosition,
    onChange: nextPosition => setAttributes({
      contentPosition: nextPosition
    }),
    isDisabled: !hasInnerBlocks
  }), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["__experimentalBlockFullHeightAligmentControl"], {
    isActive: isMinFullHeight,
    onToggle: toggleMinFullHeight,
    isDisabled: !hasInnerBlocks
  })), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["BlockControls"], {
    group: "other"
  }, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["MediaReplaceFlow"], {
    mediaId: id,
    mediaURL: url,
    allowedTypes: shared_ALLOWED_MEDIA_TYPES,
    accept: "image/*,video/*",
    onSelect: onSelectMedia,
    name: !url ? Object(external_gc_i18n_["__"])('添加媒体') : Object(external_gc_i18n_["__"])('替换')
  })), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InspectorControls"], null, !!url && Object(external_gc_element_["createElement"])(external_gc_components_["PanelBody"], {
    title: Object(external_gc_i18n_["__"])('媒体设置')
  }, isImageBackground && Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])(external_gc_components_["ToggleControl"], {
    label: Object(external_gc_i18n_["__"])('固定背景'),
    checked: hasParallax,
    onChange: toggleParallax
  }), Object(external_gc_element_["createElement"])(external_gc_components_["ToggleControl"], {
    label: Object(external_gc_i18n_["__"])('重复背景'),
    checked: isRepeated,
    onChange: toggleIsRepeated
  })), showFocalPointPicker && Object(external_gc_element_["createElement"])(external_gc_components_["FocalPointPicker"], {
    label: Object(external_gc_i18n_["__"])('焦点选择器'),
    url: url,
    value: focalPoint,
    onDragStart: imperativeFocalPointPreview,
    onDrag: imperativeFocalPointPreview,
    onChange: newFocalPoint => setAttributes({
      focalPoint: newFocalPoint
    })
  }), url && isImageBackground && isImgElement && Object(external_gc_element_["createElement"])(external_gc_components_["TextareaControl"], {
    label: Object(external_gc_i18n_["__"])('Alt文本（替换文本）'),
    value: alt,
    onChange: newAlt => setAttributes({
      alt: newAlt
    }),
    help: Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])(external_gc_components_["ExternalLink"], {
      href: "https://www.w3.org/WAI/tutorials/images/decision-tree"
    }, Object(external_gc_i18n_["__"])('说明此图片的用途')), Object(external_gc_i18n_["__"])('如此图片仅作装饰用途，请留空。'))
  }), Object(external_gc_element_["createElement"])(external_gc_components_["PanelRow"], null, Object(external_gc_element_["createElement"])(external_gc_components_["Button"], {
    variant: "secondary",
    isSmall: true,
    className: "block-library-cover__reset-button",
    onClick: () => setAttributes({
      url: undefined,
      id: undefined,
      backgroundType: undefined,
      focalPoint: undefined,
      hasParallax: undefined,
      isRepeated: undefined
    })
  }, Object(external_gc_i18n_["__"])('清除媒体')))), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["__experimentalPanelColorGradientSettings"], {
    __experimentalHasMultipleOrigins: true,
    __experimentalIsRenderedInSidebar: true,
    title: Object(external_gc_i18n_["__"])('覆盖'),
    initialOpen: true,
    settings: [{
      colorValue: overlayColor.color,
      gradientValue,
      onColorChange: setOverlayColor,
      onGradientChange: setGradient,
      label: Object(external_gc_i18n_["__"])('颜色')
    }]
  }, Object(external_gc_element_["createElement"])(external_gc_components_["RangeControl"], {
    label: Object(external_gc_i18n_["__"])('不透明度'),
    value: dimRatio,
    onChange: newDimRation => setAttributes({
      dimRatio: newDimRation
    }),
    min: 0,
    max: 100,
    step: 10,
    required: true
  }))), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InspectorControls"], {
    __experimentalGroup: "dimensions"
  }, Object(external_gc_element_["createElement"])(external_gc_components_["__experimentalToolsPanelItem"], {
    hasValue: () => !!minHeight,
    label: Object(external_gc_i18n_["__"])('最小高度'),
    onDeselect: () => setAttributes({
      minHeight: undefined,
      minHeightUnit: undefined
    }),
    resetAllFilter: () => ({
      minHeight: undefined,
      minHeightUnit: undefined
    }),
    isShownByDefault: true,
    panelId: clientId
  }, Object(external_gc_element_["createElement"])(CoverHeightInput, {
    value: temporaryMinHeight || minHeight,
    unit: minHeightUnit,
    onChange: newMinHeight => setAttributes({
      minHeight: newMinHeight
    }),
    onUnitChange: nextUnit => setAttributes({
      minHeightUnit: nextUnit
    })
  }))));
  const ref = Object(external_gc_element_["useRef"])();
  const blockProps = Object(external_gc_blockEditor_["useBlockProps"])({
    ref
  }); // Check for fontSize support before we pass a fontSize attribute to the innerBlocks.

  const hasFontSizes = !!((_useSetting = Object(external_gc_blockEditor_["useSetting"])('typography.fontSizes')) !== null && _useSetting !== void 0 && _useSetting.length);
  const innerBlocksTemplate = getInnerBlocksTemplate({
    fontSize: hasFontSizes ? 'large' : undefined
  });
  const innerBlocksProps = Object(external_gc_blockEditor_["useInnerBlocksProps"])({
    className: 'gc-block-cover__inner-container'
  }, {
    template: innerBlocksTemplate,
    templateInsertUpdatesSelection: true,
    allowedBlocks,
    templateLock
  });

  if (!hasInnerBlocks && !hasBackground) {
    return Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, controls, Object(external_gc_element_["createElement"])("div", Object(esm_extends["a" /* default */])({}, blockProps, {
      className: classnames_default()('is-placeholder', blockProps.className)
    }), Object(external_gc_element_["createElement"])(CoverPlaceholder, {
      noticeUI: noticeUI,
      onSelectMedia: onSelectMedia,
      noticeOperations: noticeOperations,
      style: {
        minHeight: temporaryMinHeight || minHeightWithUnit || undefined
      }
    }, Object(external_gc_element_["createElement"])("div", {
      className: "gc-block-cover__placeholder-background-options"
    }, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["ColorPalette"], {
      disableCustomColors: true,
      value: overlayColor.color,
      onChange: setOverlayColor,
      clearable: false
    }))), Object(external_gc_element_["createElement"])(ResizableCover, {
      className: "block-library-cover__resize-container",
      onResizeStart: () => {
        setAttributes({
          minHeightUnit: 'px'
        });
        toggleSelection(false);
      },
      onResize: setTemporaryMinHeight,
      onResizeStop: newMinHeight => {
        toggleSelection(true);
        setAttributes({
          minHeight: newMinHeight
        });
        setTemporaryMinHeight(null);
      },
      showHandle: isSelected
    })));
  }

  const classes = classnames_default()({
    'is-dark-theme': isDark,
    'is-light': !isDark,
    'is-transient': isUploadingMedia,
    'has-parallax': hasParallax,
    'is-repeated': isRepeated,
    'has-custom-content-position': !isContentPositionCenter(contentPosition)
  }, getPositionClassName(contentPosition));
  return Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, controls, Object(external_gc_element_["createElement"])("div", Object(esm_extends["a" /* default */])({}, blockProps, {
    className: classnames_default()(classes, blockProps.className),
    style: { ...style,
      ...blockProps.style
    },
    "data-url": url
  }), Object(external_gc_element_["createElement"])(BoxControlVisualizer, {
    values: styleAttribute === null || styleAttribute === void 0 ? void 0 : (_styleAttribute$spaci = styleAttribute.spacing) === null || _styleAttribute$spaci === void 0 ? void 0 : _styleAttribute$spaci.padding,
    showValues: styleAttribute === null || styleAttribute === void 0 ? void 0 : (_styleAttribute$visua = styleAttribute.visualizers) === null || _styleAttribute$visua === void 0 ? void 0 : _styleAttribute$visua.padding
  }), Object(external_gc_element_["createElement"])(ResizableCover, {
    className: "block-library-cover__resize-container",
    onResizeStart: () => {
      setAttributes({
        minHeightUnit: 'px'
      });
      toggleSelection(false);
    },
    onResize: setTemporaryMinHeight,
    onResizeStop: newMinHeight => {
      toggleSelection(true);
      setAttributes({
        minHeight: newMinHeight
      });
      setTemporaryMinHeight(null);
    },
    showHandle: isSelected
  }), Object(external_gc_element_["createElement"])("span", {
    "aria-hidden": "true",
    className: classnames_default()(dimRatioToClass(dimRatio), {
      [overlayColor.class]: overlayColor.class
    }, 'gc-block-cover__gradient-background', gradientClass, {
      'has-background-dim': dimRatio !== undefined,
      'has-background-gradient': gradientValue,
      [gradientClass]: !url && gradientClass
    }),
    style: {
      backgroundImage: gradientValue,
      ...bgStyle
    }
  }), url && isImageBackground && isImgElement && Object(external_gc_element_["createElement"])("img", {
    ref: isDarkElement,
    className: "gc-block-cover__image-background",
    alt: alt,
    src: url,
    style: mediaStyle
  }), url && isVideoBackground && Object(external_gc_element_["createElement"])("video", {
    ref: isDarkElement,
    className: "gc-block-cover__video-background",
    autoPlay: true,
    muted: true,
    loop: true,
    src: url,
    style: mediaStyle
  }), isUploadingMedia && Object(external_gc_element_["createElement"])(external_gc_components_["Spinner"], null), Object(external_gc_element_["createElement"])(CoverPlaceholder, {
    disableMediaButtons: true,
    noticeUI: noticeUI,
    onSelectMedia: onSelectMedia,
    noticeOperations: noticeOperations
  }), Object(external_gc_element_["createElement"])("div", innerBlocksProps)));
}

/* harmony default export */ var cover_edit = (Object(external_gc_compose_["compose"])([Object(external_gc_data_["withDispatch"])(dispatch => {
  const {
    toggleSelection,
    __unstableMarkNextChangeAsNotPersistent
  } = dispatch(external_gc_blockEditor_["store"]);
  return {
    toggleSelection,
    markNextChangeAsNotPersistent: __unstableMarkNextChangeAsNotPersistent
  };
}), Object(external_gc_blockEditor_["withColors"])({
  overlayColor: 'background-color'
}), external_gc_components_["withNotices"], external_gc_compose_["withInstanceId"]])(CoverEdit));

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/cover/save.js


/**
 * External dependencies
 */

/**
 * GeChiUI dependencies
 */


/**
 * Internal dependencies
 */


function cover_save_save(_ref) {
  let {
    attributes
  } = _ref;
  const {
    backgroundType,
    gradient,
    contentPosition,
    customGradient,
    customOverlayColor,
    dimRatio,
    focalPoint,
    hasParallax,
    isDark,
    isRepeated,
    overlayColor,
    url,
    alt,
    id,
    minHeight: minHeightProp,
    minHeightUnit
  } = attributes;
  const overlayColorClass = Object(external_gc_blockEditor_["getColorClassName"])('background-color', overlayColor);

  const gradientClass = Object(external_gc_blockEditor_["__experimentalGetGradientClass"])(gradient);

  const minHeight = minHeightUnit ? `${minHeightProp}${minHeightUnit}` : minHeightProp;
  const isImageBackground = IMAGE_BACKGROUND_TYPE === backgroundType;
  const isVideoBackground = VIDEO_BACKGROUND_TYPE === backgroundType;
  const isImgElement = !(hasParallax || isRepeated);
  const style = { ...(isImageBackground && !isImgElement ? backgroundImageStyles(url) : {}),
    minHeight: minHeight || undefined
  };
  const bgStyle = {
    backgroundColor: !overlayColorClass ? customOverlayColor : undefined,
    background: customGradient ? customGradient : undefined
  };
  const objectPosition = // prettier-ignore
  focalPoint && isImgElement ? `${Math.round(focalPoint.x * 100)}% ${Math.round(focalPoint.y * 100)}%` : undefined;
  const classes = classnames_default()({
    'is-light': !isDark,
    'has-parallax': hasParallax,
    'is-repeated': isRepeated,
    'has-custom-content-position': !isContentPositionCenter(contentPosition)
  }, getPositionClassName(contentPosition));
  return Object(external_gc_element_["createElement"])("div", external_gc_blockEditor_["useBlockProps"].save({
    className: classes,
    style
  }), Object(external_gc_element_["createElement"])("span", {
    "aria-hidden": "true",
    className: classnames_default()(overlayColorClass, dimRatioToClass(dimRatio), 'gc-block-cover__gradient-background', gradientClass, {
      'has-background-dim': dimRatio !== undefined,
      'has-background-gradient': gradient || customGradient,
      [gradientClass]: !url && gradientClass
    }),
    style: bgStyle
  }), isImageBackground && isImgElement && url && Object(external_gc_element_["createElement"])("img", {
    className: classnames_default()('gc-block-cover__image-background', id ? `gc-image-${id}` : null),
    alt: alt,
    src: url,
    style: {
      objectPosition
    },
    "data-object-fit": "cover",
    "data-object-position": objectPosition
  }), isVideoBackground && url && Object(external_gc_element_["createElement"])("video", {
    className: classnames_default()('gc-block-cover__video-background', 'intrinsic-ignore'),
    autoPlay: true,
    muted: true,
    loop: true,
    playsInline: true,
    src: url,
    style: {
      objectPosition
    },
    "data-object-fit": "cover",
    "data-object-position": objectPosition
  }), Object(external_gc_element_["createElement"])("div", external_gc_blockEditor_["useInnerBlocksProps"].save({
    className: 'gc-block-cover__inner-container'
  })));
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/cover/transforms.js
/**
 * GeChiUI dependencies
 */

/**
 * Internal dependencies
 */


const cover_transforms_transforms = {
  from: [{
    type: 'block',
    blocks: ['core/image'],
    transform: _ref => {
      var _style$color;

      let {
        caption,
        url,
        alt,
        align,
        id,
        anchor,
        style
      } = _ref;
      return Object(external_gc_blocks_["createBlock"])('core/cover', {
        dimRatio: 50,
        url,
        alt,
        align,
        id,
        anchor,
        style: {
          color: {
            duotone: style === null || style === void 0 ? void 0 : (_style$color = style.color) === null || _style$color === void 0 ? void 0 : _style$color.duotone
          }
        }
      }, [Object(external_gc_blocks_["createBlock"])('core/paragraph', {
        content: caption,
        fontSize: 'large'
      })]);
    }
  }, {
    type: 'block',
    blocks: ['core/video'],
    transform: _ref2 => {
      let {
        caption,
        src,
        align,
        id,
        anchor
      } = _ref2;
      return Object(external_gc_blocks_["createBlock"])('core/cover', {
        dimRatio: 50,
        url: src,
        align,
        id,
        backgroundType: VIDEO_BACKGROUND_TYPE,
        anchor
      }, [Object(external_gc_blocks_["createBlock"])('core/paragraph', {
        content: caption,
        fontSize: 'large'
      })]);
    }
  }, {
    type: 'block',
    blocks: ['core/group'],
    isMatch: _ref3 => {
      var _style$color2, _style$color3;

      let {
        backgroundColor,
        gradient,
        style
      } = _ref3;

      /*
       * Make this transformation available only if the Group has background
       * or gradient set, because otherwise `Cover` block displays a Placeholder.
       *
       * This helps avoid arbitrary decisions about the Cover block's background
       * and user confusion about the existence of previous content.
       */
      return backgroundColor || (style === null || style === void 0 ? void 0 : (_style$color2 = style.color) === null || _style$color2 === void 0 ? void 0 : _style$color2.background) || (style === null || style === void 0 ? void 0 : (_style$color3 = style.color) === null || _style$color3 === void 0 ? void 0 : _style$color3.gradient) || gradient;
    },
    transform: (_ref4, innerBlocks) => {
      var _style$color4, _style$color5;

      let {
        align,
        anchor,
        backgroundColor,
        gradient,
        style
      } = _ref4;
      return Object(external_gc_blocks_["createBlock"])('core/cover', {
        align,
        anchor,
        overlayColor: backgroundColor,
        customOverlayColor: style === null || style === void 0 ? void 0 : (_style$color4 = style.color) === null || _style$color4 === void 0 ? void 0 : _style$color4.background,
        gradient,
        customGradient: style === null || style === void 0 ? void 0 : (_style$color5 = style.color) === null || _style$color5 === void 0 ? void 0 : _style$color5.gradient
      }, innerBlocks);
    }
  }],
  to: [{
    type: 'block',
    blocks: ['core/image'],
    isMatch: _ref5 => {
      let {
        backgroundType,
        url,
        overlayColor,
        customOverlayColor,
        gradient,
        customGradient
      } = _ref5;

      if (url) {
        // If a url exists the transform could happen if that URL represents an image background.
        return backgroundType === IMAGE_BACKGROUND_TYPE;
      } // If a url is not set the transform could happen if the cover has no background color or gradient;


      return !overlayColor && !customOverlayColor && !gradient && !customGradient;
    },
    transform: _ref6 => {
      var _style$color6;

      let {
        title,
        url,
        alt,
        align,
        id,
        anchor,
        style
      } = _ref6;
      return Object(external_gc_blocks_["createBlock"])('core/image', {
        caption: title,
        url,
        alt,
        align,
        id,
        anchor,
        style: {
          color: {
            duotone: style === null || style === void 0 ? void 0 : (_style$color6 = style.color) === null || _style$color6 === void 0 ? void 0 : _style$color6.duotone
          }
        }
      });
    }
  }, {
    type: 'block',
    blocks: ['core/video'],
    isMatch: _ref7 => {
      let {
        backgroundType,
        url,
        overlayColor,
        customOverlayColor,
        gradient,
        customGradient
      } = _ref7;

      if (url) {
        // If a url exists the transform could happen if that URL represents a video background.
        return backgroundType === VIDEO_BACKGROUND_TYPE;
      } // If a url is not set the transform could happen if the cover has no background color or gradient;


      return !overlayColor && !customOverlayColor && !gradient && !customGradient;
    },
    transform: _ref8 => {
      let {
        title,
        url,
        align,
        id,
        anchor
      } = _ref8;
      return Object(external_gc_blocks_["createBlock"])('core/video', {
        caption: title,
        src: url,
        id,
        align,
        anchor
      });
    }
  }]
};
/* harmony default export */ var cover_transforms = (cover_transforms_transforms);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/cover/index.js
/**
 * GeChiUI dependencies
 */


/**
 * Internal dependencies
 */



const cover_metadata = {
  apiVersion: 2,
  name: "core/cover",
  title: "封面",
  category: "media",
  description: "添加具有文字蒙板的图像或视频-非常适合页头",
  textdomain: "default",
  attributes: {
    url: {
      type: "string"
    },
    id: {
      type: "number"
    },
    alt: {
      type: "string",
      source: "attribute",
      selector: "img",
      attribute: "alt",
      "default": ""
    },
    hasParallax: {
      type: "boolean",
      "default": false
    },
    isRepeated: {
      type: "boolean",
      "default": false
    },
    dimRatio: {
      type: "number",
      "default": 100
    },
    overlayColor: {
      type: "string"
    },
    customOverlayColor: {
      type: "string"
    },
    backgroundType: {
      type: "string",
      "default": "image"
    },
    focalPoint: {
      type: "object"
    },
    minHeight: {
      type: "number"
    },
    minHeightUnit: {
      type: "string"
    },
    gradient: {
      type: "string"
    },
    customGradient: {
      type: "string"
    },
    contentPosition: {
      type: "string"
    },
    isDark: {
      type: "boolean",
      "default": true
    },
    allowedBlocks: {
      type: "array"
    },
    templateLock: {
      type: ["string", "boolean"],
      "enum": ["all", "insert", false]
    }
  },
  supports: {
    anchor: true,
    align: true,
    html: false,
    spacing: {
      padding: true,
      __experimentalDefaultControls: {
        padding: true
      }
    },
    color: {
      __experimentalDuotone: "> .gc-block-cover__image-background, > .gc-block-cover__video-background",
      text: false,
      background: false
    }
  },
  editorStyle: "gc-block-cover-editor",
  style: "gc-block-cover"
};


const {
  name: cover_name
} = cover_metadata;

const cover_settings = {
  icon: library_cover,
  example: {
    attributes: {
      customOverlayColor: '#065174',
      dimRatio: 40,
      url: 'https://s.w.org/images/core/5.3/Windbuchencom.jpg'
    },
    innerBlocks: [{
      name: 'core/paragraph',
      attributes: {
        customFontSize: 48,
        content: Object(external_gc_i18n_["__"])('<strong>雪地巡逻队</strong>'),
        align: 'center'
      }
    }]
  },
  transforms: cover_transforms,
  save: cover_save_save,
  edit: cover_edit,
  deprecated: cover_deprecated
};

// EXTERNAL MODULE: ./node_modules/@gechiui/icons/build-module/library/edit.js + 1 modules
var library_edit = __webpack_require__("7JoZ");

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/embed/embed-controls.js


/**
 * GeChiUI dependencies
 */





function getResponsiveHelp(checked) {
  return checked ? Object(external_gc_i18n_["__"])('在浏览器尺寸变化时，此嵌入会保持其高宽比。') : Object(external_gc_i18n_["__"])('在浏览器尺寸变化时，此嵌入可能不会保持其高宽比。');
}

const EmbedControls = _ref => {
  let {
    blockSupportsResponsive,
    showEditButton,
    themeSupportsResponsive,
    allowResponsive,
    toggleResponsive,
    switchBackToURLInput
  } = _ref;
  return Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["BlockControls"], null, Object(external_gc_element_["createElement"])(external_gc_components_["ToolbarGroup"], null, showEditButton && Object(external_gc_element_["createElement"])(external_gc_components_["ToolbarButton"], {
    className: "components-toolbar__control",
    label: Object(external_gc_i18n_["__"])('编辑URL'),
    icon: library_edit["a" /* default */],
    onClick: switchBackToURLInput
  }))), themeSupportsResponsive && blockSupportsResponsive && Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InspectorControls"], null, Object(external_gc_element_["createElement"])(external_gc_components_["PanelBody"], {
    title: Object(external_gc_i18n_["__"])('媒体设置'),
    className: "blocks-responsive"
  }, Object(external_gc_element_["createElement"])(external_gc_components_["ToggleControl"], {
    label: Object(external_gc_i18n_["__"])('为小设备调整尺寸'),
    checked: allowResponsive,
    help: getResponsiveHelp,
    onChange: toggleResponsive
  }))));
};

/* harmony default export */ var embed_controls = (EmbedControls);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/embed/icons.js


/**
 * GeChiUI dependencies
 */

const embedContentIcon = Object(external_gc_element_["createElement"])(external_gc_components_["SVG"], {
  viewBox: "0 0 24 24",
  xmlns: "http://www.w3.org/2000/svg"
}, Object(external_gc_element_["createElement"])(external_gc_components_["Path"], {
  d: "M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm.5 16c0 .3-.2.5-.5.5H5c-.3 0-.5-.2-.5-.5V9.8l4.7-5.3H19c.3 0 .5.2.5.5v14zm-6-9.5L16 12l-2.5 2.8 1.1 1L18 12l-3.5-3.5-1 1zm-3 0l-1-1L6 12l3.5 3.8 1.1-1L8 12l2.5-2.5z"
}));
const embedAudioIcon = Object(external_gc_element_["createElement"])(external_gc_components_["SVG"], {
  viewBox: "0 0 24 24",
  xmlns: "http://www.w3.org/2000/svg"
}, Object(external_gc_element_["createElement"])(external_gc_components_["Path"], {
  d: "M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm.5 16c0 .3-.2.5-.5.5H5c-.3 0-.5-.2-.5-.5V9.8l4.7-5.3H19c.3 0 .5.2.5.5v14zM13.2 7.7c-.4.4-.7 1.1-.7 1.9v3.7c-.4-.3-.8-.4-1.3-.4-1.2 0-2.2 1-2.2 2.2 0 1.2 1 2.2 2.2 2.2.5 0 1-.2 1.4-.5.9-.6 1.4-1.6 1.4-2.6V9.6c0-.4.1-.6.2-.8.3-.3 1-.3 1.6-.3h.2V7h-.2c-.7 0-1.8 0-2.6.7z"
}));
const embedPhotoIcon = Object(external_gc_element_["createElement"])(external_gc_components_["SVG"], {
  viewBox: "0 0 24 24",
  xmlns: "http://www.w3.org/2000/svg"
}, Object(external_gc_element_["createElement"])(external_gc_components_["Path"], {
  d: "M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9.2 4.5H19c.3 0 .5.2.5.5v8.4l-3-2.9c-.3-.3-.8-.3-1 0L11.9 14 9 12c-.3-.2-.6-.2-.8 0l-3.6 2.6V9.8l4.6-5.3zm9.8 15H5c-.3 0-.5-.2-.5-.5v-2.4l4.1-3 3 1.9c.3.2.7.2.9-.1L16 12l3.5 3.4V19c0 .3-.2.5-.5.5z"
}));
const embedVideoIcon = Object(external_gc_element_["createElement"])(external_gc_components_["SVG"], {
  viewBox: "0 0 24 24",
  xmlns: "http://www.w3.org/2000/svg"
}, Object(external_gc_element_["createElement"])(external_gc_components_["Path"], {
  d: "M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm.5 16c0 .3-.2.5-.5.5H5c-.3 0-.5-.2-.5-.5V9.8l4.7-5.3H19c.3 0 .5.2.5.5v14zM10 15l5-3-5-3v6z"
}));
const embedGeChiUIIcon = {
  foreground: '#0073AA',
  src: Object(external_gc_element_["createElement"])(external_gc_components_["SVG"], {
    viewBox: "0 0 24 24"
  }, Object(external_gc_element_["createElement"])(external_gc_components_["G"], null, Object(external_gc_element_["createElement"])(external_gc_components_["Path"], {
    d: "M14.033 1.195a2.387 2.387 0 0 1-.87 3.235l-6.98 4.04a.602.602 0 0 0-.3.522v6.342a.6.6 0 0 0 .3.521l5.524 3.199a.585.585 0 0 0 .586 0l5.527-3.199a.603.603 0 0 0 .299-.52V11.39l-4.969 2.838a2.326 2.326 0 0 1-3.19-.9 2.388 2.388 0 0 1 .89-3.23l7.108-4.062C20.123 4.8 22.8 6.384 22.8 8.901v6.914a4.524 4.524 0 0 1-2.245 3.919l-6.345 3.672a4.407 4.407 0 0 1-4.422 0l-6.344-3.672A4.524 4.524 0 0 1 1.2 15.816V8.51a4.524 4.524 0 0 1 2.245-3.918l7.393-4.28a2.326 2.326 0 0 1 3.195.883z"
  })))
};

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/embed/embed-loading.js


/**
 * GeChiUI dependencies
 */



const EmbedLoading = () => Object(external_gc_element_["createElement"])("div", {
  className: "gc-block-embed is-loading"
}, Object(external_gc_element_["createElement"])(external_gc_components_["Spinner"], null), Object(external_gc_element_["createElement"])("p", null, Object(external_gc_i18n_["__"])('嵌入中…')));

/* harmony default export */ var embed_loading = (EmbedLoading);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/embed/embed-placeholder.js


/**
 * GeChiUI dependencies
 */




const EmbedPlaceholder = _ref => {
  let {
    icon,
    label,
    value,
    onSubmit,
    onChange,
    cannotEmbed,
    fallback,
    tryAgain
  } = _ref;
  return Object(external_gc_element_["createElement"])(external_gc_components_["Placeholder"], {
    icon: Object(external_gc_element_["createElement"])(external_gc_blockEditor_["BlockIcon"], {
      icon: icon,
      showColors: true
    }),
    label: label,
    className: "gc-block-embed",
    instructions: Object(external_gc_i18n_["__"])('粘贴至您希望显示的站点内容的链接。')
  }, Object(external_gc_element_["createElement"])("form", {
    onSubmit: onSubmit
  }, Object(external_gc_element_["createElement"])("input", {
    type: "url",
    value: value || '',
    className: "components-placeholder__input",
    "aria-label": label,
    placeholder: Object(external_gc_i18n_["__"])('键入要在此嵌入的URL…'),
    onChange: onChange
  }), Object(external_gc_element_["createElement"])(external_gc_components_["Button"], {
    variant: "primary",
    type: "submit"
  }, Object(external_gc_i18n_["_x"])('嵌入', 'button label'))), Object(external_gc_element_["createElement"])("div", {
    className: "components-placeholder__learn-more"
  }, Object(external_gc_element_["createElement"])(external_gc_components_["ExternalLink"], {
    href: Object(external_gc_i18n_["__"])('https://www.gechiui.com/support/article/embeds/')
  }, Object(external_gc_i18n_["__"])('了解关于嵌入的更多内容'))), cannotEmbed && Object(external_gc_element_["createElement"])("div", {
    className: "components-placeholder__error"
  }, Object(external_gc_element_["createElement"])("div", {
    className: "components-placeholder__instructions"
  }, Object(external_gc_i18n_["__"])('抱歉，此内容不能被嵌入。')), Object(external_gc_element_["createElement"])(external_gc_components_["Button"], {
    variant: "secondary",
    onClick: tryAgain
  }, Object(external_gc_i18n_["_x"])('重试', 'button label')), ' ', Object(external_gc_element_["createElement"])(external_gc_components_["Button"], {
    variant: "secondary",
    onClick: fallback
  }, Object(external_gc_i18n_["_x"])('转换为链接', 'button label'))));
};

/* harmony default export */ var embed_placeholder = (EmbedPlaceholder);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/embed/gc-embed-preview.js



/**
 * GeChiUI dependencies
 */


/** @typedef {import('@gechiui/element').GCSyntheticEvent} GCSyntheticEvent */

const attributeMap = {
  class: 'className',
  frameborder: 'frameBorder',
  marginheight: 'marginHeight',
  marginwidth: 'marginWidth'
};
function GcEmbedPreview(_ref) {
  let {
    html
  } = _ref;
  const ref = Object(external_gc_element_["useRef"])();
  const props = Object(external_gc_element_["useMemo"])(() => {
    const doc = new window.DOMParser().parseFromString(html, 'text/html');
    const iframe = doc.querySelector('iframe');
    const iframeProps = {};
    if (!iframe) return iframeProps;
    Array.from(iframe.attributes).forEach(_ref2 => {
      let {
        name,
        value
      } = _ref2;
      if (name === 'style') return;
      iframeProps[attributeMap[name] || name] = value;
    });
    return iframeProps;
  }, [html]);
  Object(external_gc_element_["useEffect"])(() => {
    const {
      ownerDocument
    } = ref.current;
    const {
      defaultView
    } = ownerDocument;
    /**
     * Checks for GeChiUI embed events signaling the height change when
     * iframe content loads or iframe's window is resized.  The event is
     * sent from GeChiUI core via the window.postMessage API.
     *
     * References:
     * window.postMessage:
     * https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage
     * GeChiUI core embed-template on load:
     * https://github.com/GeChiUI/GeChiUI/blob/HEAD/gc-includes/js/gc-embed-template.js#L143
     * GeChiUI core embed-template on resize:
     * https://github.com/GeChiUI/GeChiUI/blob/HEAD/gc-includes/js/gc-embed-template.js#L187
     *
     * @param {MessageEvent} event Message event.
     */

    function resizeWPembeds(_ref3) {
      let {
        data: {
          secret,
          message,
          value
        } = {}
      } = _ref3;

      if (message !== 'height' || secret !== props['data-secret']) {
        return;
      }

      ref.current.height = value;
    }

    defaultView.addEventListener('message', resizeWPembeds);
    return () => {
      defaultView.removeEventListener('message', resizeWPembeds);
    };
  }, []);
  return Object(external_gc_element_["createElement"])("div", {
    className: "gc-block-embed__wrapper"
  }, Object(external_gc_element_["createElement"])("iframe", Object(esm_extends["a" /* default */])({
    ref: Object(external_gc_compose_["useMergeRefs"])([ref, Object(external_gc_compose_["useFocusableIframe"])()]),
    title: props.title
  }, props)));
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/embed/embed-preview.js


/**
 * Internal dependencies
 */

/**
 * External dependencies
 */


/**
 * GeChiUI dependencies
 */






/**
 * Internal dependencies
 */



class embed_preview_EmbedPreview extends external_gc_element_["Component"] {
  constructor() {
    super(...arguments);
    this.hideOverlay = this.hideOverlay.bind(this);
    this.state = {
      interactive: false
    };
  }

  static getDerivedStateFromProps(nextProps, state) {
    if (!nextProps.isSelected && state.interactive) {
      // We only want to change this when the block is not selected, because changing it when
      // the block becomes selected makes the overlap disappear too early. Hiding the overlay
      // happens on mouseup when the overlay is clicked.
      return {
        interactive: false
      };
    }

    return null;
  }

  hideOverlay() {
    // This is called onMouseUp on the overlay. We can't respond to the `isSelected` prop
    // changing, because that happens on mouse down, and the overlay immediately disappears,
    // and the mouse event can end up in the preview content. We can't use onClick on
    // the overlay to hide it either, because then the editor misses the mouseup event, and
    // thinks we're multi-selecting blocks.
    this.setState({
      interactive: true
    });
  }

  render() {
    const {
      preview,
      previewable,
      url,
      type,
      caption,
      onCaptionChange,
      isSelected,
      className,
      icon,
      label,
      insertBlocksAfter
    } = this.props;
    const {
      scripts
    } = preview;
    const {
      interactive
    } = this.state;
    const html = 'photo' === type ? getPhotoHtml(preview) : preview.html;
    const parsedHost = new URL(url).host.split('.');
    const parsedHostBaseUrl = parsedHost.splice(parsedHost.length - 2, parsedHost.length - 1).join('.');
    const iframeTitle = Object(external_gc_i18n_["sprintf"])( // translators: %s: host providing embed content e.g: www.youtube.com
    Object(external_gc_i18n_["__"])('嵌入来自%s的内容'), parsedHostBaseUrl);
    const sandboxClassnames = dedupe_default()(type, className, 'gc-block-embed__wrapper'); // Disabled because the overlay div doesn't actually have a role or functionality
    // as far as the user is concerned. We're just catching the first click so that
    // the block can be selected without interacting with the embed preview that the overlay covers.

    /* eslint-disable jsx-a11y/no-static-element-interactions */

    const embedWrapper = 'gc-embed' === type ? Object(external_gc_element_["createElement"])(GcEmbedPreview, {
      html: html
    }) : Object(external_gc_element_["createElement"])("div", {
      className: "gc-block-embed__wrapper"
    }, Object(external_gc_element_["createElement"])(external_gc_components_["SandBox"], {
      html: html,
      scripts: scripts,
      title: iframeTitle,
      type: sandboxClassnames,
      onFocus: this.hideOverlay
    }), !interactive && Object(external_gc_element_["createElement"])("div", {
      className: "block-library-embed__interactive-overlay",
      onMouseUp: this.hideOverlay
    }));
    /* eslint-enable jsx-a11y/no-static-element-interactions */

    return Object(external_gc_element_["createElement"])("figure", {
      className: dedupe_default()(className, 'gc-block-embed', {
        'is-type-video': 'video' === type
      })
    }, previewable ? embedWrapper : Object(external_gc_element_["createElement"])(external_gc_components_["Placeholder"], {
      icon: Object(external_gc_element_["createElement"])(external_gc_blockEditor_["BlockIcon"], {
        icon: icon,
        showColors: true
      }),
      label: label
    }, Object(external_gc_element_["createElement"])("p", {
      className: "components-placeholder__error"
    }, Object(external_gc_element_["createElement"])("a", {
      href: url
    }, url)), Object(external_gc_element_["createElement"])("p", {
      className: "components-placeholder__error"
    }, Object(external_gc_i18n_["sprintf"])(
    /* translators: %s: host providing embed content e.g: www.youtube.com */
    Object(external_gc_i18n_["__"])("来自%s的嵌入内容不能在编辑器中预览。"), parsedHostBaseUrl))), (!external_gc_blockEditor_["RichText"].isEmpty(caption) || isSelected) && Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"], {
      tagName: "figcaption",
      placeholder: Object(external_gc_i18n_["__"])('添加说明文字'),
      value: caption,
      onChange: onCaptionChange,
      inlineToolbar: true,
      __unstableOnSplitAtEnd: () => insertBlocksAfter(Object(external_gc_blocks_["createBlock"])('core/paragraph'))
    }));
  }

}

/* harmony default export */ var embed_preview = (embed_preview_EmbedPreview);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/embed/edit.js


/**
 * Internal dependencies
 */






/**
 * External dependencies
 */


/**
 * GeChiUI dependencies
 */








const EmbedEdit = props => {
  const {
    attributes: {
      providerNameSlug,
      previewable,
      responsive,
      url: attributesUrl
    },
    attributes,
    isSelected,
    onReplace,
    setAttributes,
    insertBlocksAfter,
    onFocus
  } = props;
  const defaultEmbedInfo = {
    title: Object(external_gc_i18n_["_x"])('嵌入', 'block title'),
    icon: embedContentIcon
  };
  const {
    icon,
    title
  } = getEmbedInfoByProvider(providerNameSlug) || defaultEmbedInfo;
  const [url, setURL] = Object(external_gc_element_["useState"])(attributesUrl);
  const [isEditingURL, setIsEditingURL] = Object(external_gc_element_["useState"])(false);
  const {
    invalidateResolution
  } = Object(external_gc_data_["useDispatch"])(external_gc_coreData_["store"]);
  const {
    preview,
    fetching,
    themeSupportsResponsive,
    cannotEmbed
  } = Object(external_gc_data_["useSelect"])(select => {
    var _embedPreview$data;

    const {
      getEmbedPreview,
      isPreviewEmbedFallback,
      isRequestingEmbedPreview,
      getThemeSupports
    } = select(external_gc_coreData_["store"]);

    if (!attributesUrl) {
      return {
        fetching: false,
        cannotEmbed: false
      };
    }

    const embedPreview = getEmbedPreview(attributesUrl);
    const previewIsFallback = isPreviewEmbedFallback(attributesUrl); // The external oEmbed provider does not exist. We got no type info and no html.

    const badEmbedProvider = (embedPreview === null || embedPreview === void 0 ? void 0 : embedPreview.html) === false && (embedPreview === null || embedPreview === void 0 ? void 0 : embedPreview.type) === undefined; // Some GeChiUI URLs that can't be embedded will cause the API to return
    // a valid JSON response with no HTML and `data.status` set to 404, rather
    // than generating a fallback response as other embeds do.

    const gechiuiCantEmbed = (embedPreview === null || embedPreview === void 0 ? void 0 : (_embedPreview$data = embedPreview.data) === null || _embedPreview$data === void 0 ? void 0 : _embedPreview$data.status) === 404;
    const validPreview = !!embedPreview && !badEmbedProvider && !gechiuiCantEmbed;
    return {
      preview: validPreview ? embedPreview : undefined,
      fetching: isRequestingEmbedPreview(attributesUrl),
      themeSupportsResponsive: getThemeSupports()['responsive-embeds'],
      cannotEmbed: !validPreview || previewIsFallback
    };
  }, [attributesUrl]);
  /**
   * @return {Object} Attributes derived from the preview, merged with the current attributes.
   */

  const getMergedAttributes = () => {
    const {
      allowResponsive,
      className
    } = attributes;
    return { ...attributes,
      ...getAttributesFromPreview(preview, title, className, responsive, allowResponsive)
    };
  };

  const toggleResponsive = () => {
    const {
      allowResponsive,
      className
    } = attributes;
    const {
      html
    } = preview;
    const newAllowResponsive = !allowResponsive;
    setAttributes({
      allowResponsive: newAllowResponsive,
      className: getClassNames(html, className, responsive && newAllowResponsive)
    });
  };

  Object(external_gc_element_["useEffect"])(() => {
    if (!(preview !== null && preview !== void 0 && preview.html) || !cannotEmbed || fetching) {
      return;
    } // At this stage, we're not fetching the preview and know it can't be embedded,
    // so try removing any trailing slash, and resubmit.


    const newURL = attributesUrl.replace(/\/$/, '');
    setURL(newURL);
    setIsEditingURL(false);
    setAttributes({
      url: newURL
    });
  }, [preview === null || preview === void 0 ? void 0 : preview.html, attributesUrl]); // Handle incoming preview

  Object(external_gc_element_["useEffect"])(() => {
    if (preview && !isEditingURL) {
      // Even though we set attributes that get derived from the preview,
      // we don't access them directly because for the initial render,
      // the `setAttributes` call will not have taken effect. If we're
      // rendering responsive content, setting the responsive classes
      // after the preview has been rendered can result in unwanted
      // clipping or scrollbars. The `getAttributesFromPreview` function
      // that `getMergedAttributes` uses is memoized so that we're not
      // calculating them on every render.
      setAttributes(getMergedAttributes());

      if (onReplace) {
        const upgradedBlock = createUpgradedEmbedBlock(props, getMergedAttributes());

        if (upgradedBlock) {
          onReplace(upgradedBlock);
        }
      }
    }
  }, [preview, isEditingURL]);
  const blockProps = Object(external_gc_blockEditor_["useBlockProps"])();

  if (fetching) {
    return Object(external_gc_element_["createElement"])(external_gc_primitives_["View"], blockProps, Object(external_gc_element_["createElement"])(embed_loading, null));
  } // translators: %s: type of embed e.g: "YouTube", "Twitter", etc. "Embed" is used when no specific type exists


  const label = Object(external_gc_i18n_["sprintf"])(Object(external_gc_i18n_["__"])('%sURL'), title); // No preview, or we can't embed the current URL, or we've clicked the edit button.

  const showEmbedPlaceholder = !preview || cannotEmbed || isEditingURL;

  if (showEmbedPlaceholder) {
    return Object(external_gc_element_["createElement"])(external_gc_primitives_["View"], blockProps, Object(external_gc_element_["createElement"])(embed_placeholder, {
      icon: icon,
      label: label,
      onFocus: onFocus,
      onSubmit: event => {
        if (event) {
          event.preventDefault();
        }

        setIsEditingURL(false);
        setAttributes({
          url
        });
      },
      value: url,
      cannotEmbed: cannotEmbed,
      onChange: event => setURL(event.target.value),
      fallback: () => util_fallback(url, onReplace),
      tryAgain: () => {
        invalidateResolution('getEmbedPreview', [url]);
      }
    }));
  } // Even though we set attributes that get derived from the preview,
  // we don't access them directly because for the initial render,
  // the `setAttributes` call will not have taken effect. If we're
  // rendering responsive content, setting the responsive classes
  // after the preview has been rendered can result in unwanted
  // clipping or scrollbars. The `getAttributesFromPreview` function
  // that `getMergedAttributes` uses is memoized so that we're not
  // calculating them on every render.


  const {
    caption,
    type,
    allowResponsive,
    className: classFromPreview
  } = getMergedAttributes();
  const className = classnames_default()(classFromPreview, props.className);
  return Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])(embed_controls, {
    showEditButton: preview && !cannotEmbed,
    themeSupportsResponsive: themeSupportsResponsive,
    blockSupportsResponsive: responsive,
    allowResponsive: allowResponsive,
    toggleResponsive: toggleResponsive,
    switchBackToURLInput: () => setIsEditingURL(true)
  }), Object(external_gc_element_["createElement"])(external_gc_primitives_["View"], blockProps, Object(external_gc_element_["createElement"])(embed_preview, {
    preview: preview,
    previewable: previewable,
    className: className,
    url: url,
    type: type,
    caption: caption,
    onCaptionChange: value => setAttributes({
      caption: value
    }),
    isSelected: isSelected,
    icon: icon,
    label: label,
    insertBlocksAfter: insertBlocksAfter
  })));
};

/* harmony default export */ var embed_edit = (EmbedEdit);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/embed/save.js


/**
 * External dependencies
 */

/**
 * GeChiUI dependencies
 */


function embed_save_save(_ref) {
  let {
    attributes
  } = _ref;
  const {
    url,
    caption,
    type,
    providerNameSlug
  } = attributes;

  if (!url) {
    return null;
  }

  const className = dedupe_default()('gc-block-embed', {
    [`is-type-${type}`]: type,
    [`is-provider-${providerNameSlug}`]: providerNameSlug,
    [`gc-block-embed-${providerNameSlug}`]: providerNameSlug
  });
  return Object(external_gc_element_["createElement"])("figure", external_gc_blockEditor_["useBlockProps"].save({
    className
  }), Object(external_gc_element_["createElement"])("div", {
    className: "gc-block-embed__wrapper"
  }, `\n${url}\n`
  /* URL needs to be on its own line. */
  ), !external_gc_blockEditor_["RichText"].isEmpty(caption) && Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"].Content, {
    tagName: "figcaption",
    value: caption
  }));
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/embed/transforms.js
/**
 * GeChiUI dependencies
 */

/**
 * Internal dependencies
 */

const transforms_metadata = {
  apiVersion: 2,
  name: "core/embed",
  title: "嵌入",
  category: "embed",
  description: "添加可显示 Twitter、YouTube等站点嵌入内容的区块。",
  textdomain: "default",
  attributes: {
    url: {
      type: "string"
    },
    caption: {
      type: "string",
      source: "html",
      selector: "figcaption"
    },
    type: {
      type: "string"
    },
    providerNameSlug: {
      type: "string"
    },
    allowResponsive: {
      type: "boolean",
      "default": true
    },
    responsive: {
      type: "boolean",
      "default": false
    },
    previewable: {
      type: "boolean",
      "default": true
    }
  },
  supports: {
    align: true
  },
  editorStyle: "gc-block-embed-editor",
  style: "gc-block-embed"
};
const {
  name: EMBED_BLOCK
} = transforms_metadata;
/**
 * Default transforms for generic embeds.
 */

const embed_transforms_transforms = {
  from: [{
    type: 'raw',
    isMatch: node => {
      var _node$textContent, _node$textContent$mat;

      return node.nodeName === 'P' && /^\s*(https?:\/\/\S+)\s*$/i.test(node.textContent) && ((_node$textContent = node.textContent) === null || _node$textContent === void 0 ? void 0 : (_node$textContent$mat = _node$textContent.match(/https/gi)) === null || _node$textContent$mat === void 0 ? void 0 : _node$textContent$mat.length) === 1;
    },
    transform: node => {
      return Object(external_gc_blocks_["createBlock"])(EMBED_BLOCK, {
        url: node.textContent.trim()
      });
    }
  }],
  to: [{
    type: 'block',
    blocks: ['core/paragraph'],
    isMatch: _ref => {
      let {
        url
      } = _ref;
      return !!url;
    },
    transform: _ref2 => {
      let {
        url,
        caption
      } = _ref2;
      let value = `<a href="${url}">${url}</a>`;

      if (caption !== null && caption !== void 0 && caption.trim()) {
        value += `<br />${caption}`;
      }

      return Object(external_gc_blocks_["createBlock"])('core/paragraph', {
        content: value
      });
    }
  }]
};
/* harmony default export */ var embed_transforms = (embed_transforms_transforms);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/embed/variations.js
/**
 * GeChiUI dependencies
 */

/**
 * Internal dependencies
 */


/** @typedef {import('@gechiui/blocks').GCBlockVariation} GCBlockVariation */

/**
 * Template option choices for predefined columns layouts.
 *
 * @type {GCBlockVariation[]}
 */

const embed_variations_variations = [ {
  name: 'gechiui',
  title: 'GeChiUI',
  icon: embedGeChiUIIcon,
  keywords: [Object(external_gc_i18n_["__"])('文章'), Object(external_gc_i18n_["__"])('博客')],
  description: Object(external_gc_i18n_["__"])('嵌入GeChiUI文章。'),
  attributes: {
    providerNameSlug: 'gechiui'
  }
}];
/**
 * Add `isActive` function to all `embed` variations, if not defined.
 * `isActive` function is used to find a variation match from a created
 *  Block by providing its attributes.
 */

embed_variations_variations.forEach(variation => {
  if (variation.isActive) return;

  variation.isActive = (blockAttributes, variationAttributes) => blockAttributes.providerNameSlug === variationAttributes.providerNameSlug;
});
/* harmony default export */ var embed_variations = (embed_variations_variations);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/embed/deprecated.js


/**
 * External dependencies
 */

/**
 * Internal dependencies
 */

const deprecated_metadata = {
  apiVersion: 2,
  name: "core/embed",
  title: "嵌入",
  category: "embed",
  description: "添加可显示 Twitter、YouTube等站点嵌入内容的区块。",
  textdomain: "default",
  attributes: {
    url: {
      type: "string"
    },
    caption: {
      type: "string",
      source: "html",
      selector: "figcaption"
    },
    type: {
      type: "string"
    },
    providerNameSlug: {
      type: "string"
    },
    allowResponsive: {
      type: "boolean",
      "default": true
    },
    responsive: {
      type: "boolean",
      "default": false
    },
    previewable: {
      type: "boolean",
      "default": true
    }
  },
  supports: {
    align: true
  },
  editorStyle: "gc-block-embed-editor",
  style: "gc-block-embed"
};
/**
 * GeChiUI dependencies
 */


const {
  attributes: embed_deprecated_blockAttributes
} = deprecated_metadata;
const embed_deprecated_deprecated = [{
  attributes: embed_deprecated_blockAttributes,

  save(_ref) {
    let {
      attributes: {
        url,
        caption,
        type,
        providerNameSlug
      }
    } = _ref;

    if (!url) {
      return null;
    }

    const embedClassName = classnames_default()('gc-block-embed', {
      [`is-type-${type}`]: type,
      [`is-provider-${providerNameSlug}`]: providerNameSlug
    });
    return Object(external_gc_element_["createElement"])("figure", {
      className: embedClassName
    }, `\n${url}\n`
    /* URL needs to be on its own line. */
    , !external_gc_blockEditor_["RichText"].isEmpty(caption) && Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"].Content, {
      tagName: "figcaption",
      value: caption
    }));
  }

}];
/* harmony default export */ var embed_deprecated = (embed_deprecated_deprecated);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/embed/index.js
/**
 * Internal dependencies
 */


const embed_metadata = {
  apiVersion: 2,
  name: "core/embed",
  title: "嵌入",
  category: "embed",
  description: "添加可显示 Twitter、YouTube等站点嵌入内容的区块。",
  textdomain: "default",
  attributes: {
    url: {
      type: "string"
    },
    caption: {
      type: "string",
      source: "html",
      selector: "figcaption"
    },
    type: {
      type: "string"
    },
    providerNameSlug: {
      type: "string"
    },
    allowResponsive: {
      type: "boolean",
      "default": true
    },
    responsive: {
      type: "boolean",
      "default": false
    },
    previewable: {
      type: "boolean",
      "default": true
    }
  },
  supports: {
    align: true
  },
  editorStyle: "gc-block-embed-editor",
  style: "gc-block-embed"
};




const {
  name: embed_name
} = embed_metadata;

const embed_settings = {
  icon: embedContentIcon,
  edit: embed_edit,
  save: embed_save_save,
  transforms: embed_transforms,
  variations: embed_variations,
  deprecated: embed_deprecated
};

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/file.js


/**
 * GeChiUI dependencies
 */

const file_file = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  viewBox: "0 0 24 24",
  xmlns: "http://www.w3.org/2000/svg"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M19 6.2h-5.9l-.6-1.1c-.3-.7-1-1.1-1.8-1.1H5c-1.1 0-2 .9-2 2v11.8c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V8.2c0-1.1-.9-2-2-2zm.5 11.6c0 .3-.2.5-.5.5H5c-.3 0-.5-.2-.5-.5V6c0-.3.2-.5.5-.5h5.8c.2 0 .4.1.4.3l1 2H19c.3 0 .5.2.5.5v9.5z"
}));
/* harmony default export */ var library_file = (file_file);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/file/deprecated.js


/**
 * GeChiUI dependencies
 */

 // Version of the file block without PR#28062 accessibility fix.

const file_deprecated_deprecated = [{
  attributes: {
    id: {
      type: 'number'
    },
    href: {
      type: 'string'
    },
    fileName: {
      type: 'string',
      source: 'html',
      selector: 'a:not([download])'
    },
    textLinkHref: {
      type: 'string',
      source: 'attribute',
      selector: 'a:not([download])',
      attribute: 'href'
    },
    textLinkTarget: {
      type: 'string',
      source: 'attribute',
      selector: 'a:not([download])',
      attribute: 'target'
    },
    showDownloadButton: {
      type: 'boolean',
      default: true
    },
    downloadButtonText: {
      type: 'string',
      source: 'html',
      selector: 'a[download]'
    },
    displayPreview: {
      type: 'boolean'
    },
    previewHeight: {
      type: 'number',
      default: 600
    }
  },
  supports: {
    anchor: true,
    align: true
  },

  save(_ref) {
    let {
      attributes
    } = _ref;
    const {
      href,
      fileName,
      textLinkHref,
      textLinkTarget,
      showDownloadButton,
      downloadButtonText,
      displayPreview,
      previewHeight
    } = attributes;
    const pdfEmbedLabel = external_gc_blockEditor_["RichText"].isEmpty(fileName) ? Object(external_gc_i18n_["__"])('PDF 已嵌入') : Object(external_gc_i18n_["sprintf"])(
    /* translators: %s: filename. */
    Object(external_gc_i18n_["__"])('嵌入 %s'), fileName);
    return href && Object(external_gc_element_["createElement"])("div", external_gc_blockEditor_["useBlockProps"].save(), displayPreview && Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])("object", {
      className: "gc-block-file__embed",
      data: href,
      type: "application/pdf",
      style: {
        width: '100%',
        height: `${previewHeight}px`
      },
      "aria-label": pdfEmbedLabel
    })), !external_gc_blockEditor_["RichText"].isEmpty(fileName) && Object(external_gc_element_["createElement"])("a", {
      href: textLinkHref,
      target: textLinkTarget,
      rel: textLinkTarget ? 'noreferrer noopener' : undefined
    }, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"].Content, {
      value: fileName
    })), showDownloadButton && Object(external_gc_element_["createElement"])("a", {
      href: href,
      className: "gc-block-file__button",
      download: true
    }, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"].Content, {
      value: downloadButtonText
    })));
  }

}];
/* harmony default export */ var file_deprecated = (file_deprecated_deprecated);

// EXTERNAL MODULE: external ["gc","notices"]
var external_gc_notices_ = __webpack_require__("W2Kb");

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/file/inspector.js


/**
 * GeChiUI dependencies
 */



/**
 * Internal dependencies
 */


function FileBlockInspector(_ref) {
  let {
    hrefs,
    openInNewWindow,
    showDownloadButton,
    changeLinkDestinationOption,
    changeOpenInNewWindow,
    changeShowDownloadButton,
    displayPreview,
    changeDisplayPreview,
    previewHeight,
    changePreviewHeight
  } = _ref;
  const {
    href,
    textLinkHref,
    attachmentPage
  } = hrefs;
  let linkDestinationOptions = [{
    value: href,
    label: Object(external_gc_i18n_["__"])('URL')
  }];

  if (attachmentPage) {
    linkDestinationOptions = [{
      value: href,
      label: Object(external_gc_i18n_["__"])('媒体文件')
    }, {
      value: attachmentPage,
      label: Object(external_gc_i18n_["__"])('附件页面')
    }];
  }

  return Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InspectorControls"], null, href.endsWith('.pdf') && Object(external_gc_element_["createElement"])(external_gc_components_["PanelBody"], {
    title: Object(external_gc_i18n_["__"])('PDF 设置')
  }, Object(external_gc_element_["createElement"])(external_gc_components_["ToggleControl"], {
    label: Object(external_gc_i18n_["__"])('显示内联嵌入'),
    help: displayPreview ? Object(external_gc_i18n_["__"])("注意：大多数手机和平板电脑浏览器不会显示嵌入式 PDF。") : null,
    checked: !!displayPreview,
    onChange: changeDisplayPreview
  }), displayPreview && Object(external_gc_element_["createElement"])(external_gc_components_["RangeControl"], {
    label: Object(external_gc_i18n_["__"])('高度（像素）'),
    min: MIN_PREVIEW_HEIGHT,
    max: Math.max(MAX_PREVIEW_HEIGHT, previewHeight),
    value: previewHeight,
    onChange: changePreviewHeight
  })), Object(external_gc_element_["createElement"])(external_gc_components_["PanelBody"], {
    title: Object(external_gc_i18n_["__"])('文字链接设置')
  }, Object(external_gc_element_["createElement"])(external_gc_components_["SelectControl"], {
    label: Object(external_gc_i18n_["__"])('链接至'),
    value: textLinkHref,
    options: linkDestinationOptions,
    onChange: changeLinkDestinationOption
  }), Object(external_gc_element_["createElement"])(external_gc_components_["ToggleControl"], {
    label: Object(external_gc_i18n_["__"])('在新窗口打开'),
    checked: openInNewWindow,
    onChange: changeOpenInNewWindow
  })), Object(external_gc_element_["createElement"])(external_gc_components_["PanelBody"], {
    title: Object(external_gc_i18n_["__"])('下载按钮设置')
  }, Object(external_gc_element_["createElement"])(external_gc_components_["ToggleControl"], {
    label: Object(external_gc_i18n_["__"])('显示下载按钮'),
    checked: showDownloadButton,
    onChange: changeShowDownloadButton
  }))));
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/file/utils.js
/**
 * Uses a combination of user agent matching and feature detection to determine whether
 * the current browser supports rendering PDFs inline.
 *
 * @return {boolean} Whether or not the browser supports inline PDFs.
 */
const browserSupportsPdfs = () => {
  // Most mobile devices include "Mobi" in their UA.
  if (window.navigator.userAgent.indexOf('Mobi') > -1) {
    return false;
  } // Android tablets are the noteable exception.


  if (window.navigator.userAgent.indexOf('Android') > -1) {
    return false;
  } // iPad pretends to be a Mac.


  if (window.navigator.userAgent.indexOf('Macintosh') > -1 && window.navigator.maxTouchPoints && window.navigator.maxTouchPoints > 2) {
    return false;
  } // IE only supports PDFs when there's an ActiveX object available for it.


  if (!!(window.ActiveXObject || 'ActiveXObject' in window) && !(createActiveXObject('AcroPDF.PDF') || createActiveXObject('PDF.PdfCtrl'))) {
    return false;
  }

  return true;
};
/**
 * Helper function for creating ActiveX objects, catching any errors that are thrown
 * when it's generated.
 *
 * @param {string} type The name of the ActiveX object to create.
 * @return {window.ActiveXObject|undefined} The generated ActiveXObject, or null if it failed.
 */

const createActiveXObject = type => {
  let ax;

  try {
    ax = new window.ActiveXObject(type);
  } catch (e) {
    ax = undefined;
  }

  return ax;
};
/**
 * Hides all .gc-block-file__embed elements on the document. This function is only intended
 * to be run on the front-end, it may have weird side effects running in the block editor.
 */


const hidePdfEmbedsOnUnsupportedBrowsers = () => {
  if (!browserSupportsPdfs()) {
    const embeds = document.getElementsByClassName('gc-block-file__embed');
    Array.from(embeds).forEach(embed => {
      embed.style.display = 'none';
    });
  }
};

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/file/edit.js


/**
 * External dependencies
 */

/**
 * GeChiUI dependencies
 */











/**
 * Internal dependencies
 */



const MIN_PREVIEW_HEIGHT = 200;
const MAX_PREVIEW_HEIGHT = 2000;

function ClipboardToolbarButton(_ref) {
  let {
    text,
    disabled
  } = _ref;
  const {
    createNotice
  } = Object(external_gc_data_["useDispatch"])(external_gc_notices_["store"]);
  const ref = Object(external_gc_compose_["useCopyToClipboard"])(text, () => {
    createNotice('info', Object(external_gc_i18n_["__"])('已将 URL 复制到剪贴板。'), {
      isDismissible: true,
      type: 'snackbar'
    });
  });
  return Object(external_gc_element_["createElement"])(external_gc_components_["ToolbarButton"], {
    className: "components-clipboard-toolbar-button",
    ref: ref,
    disabled: disabled
  }, Object(external_gc_i18n_["__"])('复制URL'));
}

function FileEdit(_ref2) {
  let {
    attributes,
    isSelected,
    setAttributes,
    noticeUI,
    noticeOperations,
    clientId
  } = _ref2;
  const {
    id,
    fileName,
    href,
    textLinkHref,
    textLinkTarget,
    showDownloadButton,
    downloadButtonText,
    displayPreview,
    previewHeight
  } = attributes;
  const [hasError, setHasError] = Object(external_gc_element_["useState"])(false);
  const {
    media,
    mediaUpload
  } = Object(external_gc_data_["useSelect"])(select => ({
    media: id === undefined ? undefined : select(external_gc_coreData_["store"]).getMedia(id),
    mediaUpload: select(external_gc_blockEditor_["store"]).getSettings().mediaUpload
  }), [id]);
  const {
    toggleSelection
  } = Object(external_gc_data_["useDispatch"])(external_gc_blockEditor_["store"]);
  Object(external_gc_element_["useEffect"])(() => {
    // Upload a file drag-and-dropped into the editor
    if (Object(external_gc_blob_["isBlobURL"])(href)) {
      const file = Object(external_gc_blob_["getBlobByURL"])(href);
      mediaUpload({
        filesList: [file],
        onFileChange: _ref3 => {
          let [newMedia] = _ref3;
          return onSelectFile(newMedia);
        },
        onError: message => {
          setHasError(true);
          noticeOperations.createErrorNotice(message);
        }
      });
      Object(external_gc_blob_["revokeBlobURL"])(href);
    }

    if (downloadButtonText === undefined) {
      changeDownloadButtonText(Object(external_gc_i18n_["_x"])('下载', 'button label'));
    }
  }, []);
  Object(external_gc_element_["useEffect"])(() => {
    // Add a unique fileId to each file block
    setAttributes({
      fileId: `gc-block-file--media-${clientId}`
    });
  }, [clientId]);

  function onSelectFile(newMedia) {
    if (newMedia && newMedia.url) {
      setHasError(false);
      const isPdf = newMedia.url.endsWith('.pdf');
      setAttributes({
        href: newMedia.url,
        fileName: newMedia.title,
        textLinkHref: newMedia.url,
        id: newMedia.id,
        displayPreview: isPdf ? true : undefined,
        previewHeight: isPdf ? 600 : undefined
      });
    }
  }

  function onUploadError(message) {
    setHasError(true);
    noticeOperations.removeAllNotices();
    noticeOperations.createErrorNotice(message);
  }

  function changeLinkDestinationOption(newHref) {
    // Choose Media File or Attachment Page (when file is in Media Library)
    setAttributes({
      textLinkHref: newHref
    });
  }

  function changeOpenInNewWindow(newValue) {
    setAttributes({
      textLinkTarget: newValue ? '_blank' : false
    });
  }

  function changeShowDownloadButton(newValue) {
    setAttributes({
      showDownloadButton: newValue
    });
  }

  function changeDownloadButtonText(newValue) {
    // Remove anchor tags from button text content.
    setAttributes({
      downloadButtonText: newValue.replace(/<\/?a[^>]*>/g, '')
    });
  }

  function changeDisplayPreview(newValue) {
    setAttributes({
      displayPreview: newValue
    });
  }

  function handleOnResizeStop(event, direction, elt, delta) {
    toggleSelection(true);
    const newHeight = parseInt(previewHeight + delta.height, 10);
    setAttributes({
      previewHeight: newHeight
    });
  }

  function changePreviewHeight(newValue) {
    const newHeight = Math.max(parseInt(newValue, 10), MIN_PREVIEW_HEIGHT);
    setAttributes({
      previewHeight: newHeight
    });
  }

  const attachmentPage = media && media.link;
  const blockProps = Object(external_gc_blockEditor_["useBlockProps"])({
    className: classnames_default()(Object(external_gc_blob_["isBlobURL"])(href) && Object(external_gc_components_["__unstableGetAnimateClassName"])({
      type: 'loading'
    }), {
      'is-transient': Object(external_gc_blob_["isBlobURL"])(href)
    })
  });
  const displayPreviewInEditor = browserSupportsPdfs() && displayPreview;

  if (!href || hasError) {
    return Object(external_gc_element_["createElement"])("div", blockProps, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["MediaPlaceholder"], {
      icon: Object(external_gc_element_["createElement"])(external_gc_blockEditor_["BlockIcon"], {
        icon: library_file
      }),
      labels: {
        title: Object(external_gc_i18n_["__"])('文件'),
        instructions: Object(external_gc_i18n_["__"])('上传文件，或从您的媒体库中选择。')
      },
      onSelect: onSelectFile,
      notices: noticeUI,
      onError: onUploadError,
      accept: "*"
    }));
  }

  return Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])(FileBlockInspector, {
    hrefs: {
      href,
      textLinkHref,
      attachmentPage
    },
    openInNewWindow: !!textLinkTarget,
    showDownloadButton,
    changeLinkDestinationOption,
    changeOpenInNewWindow,
    changeShowDownloadButton,
    displayPreview,
    changeDisplayPreview,
    previewHeight,
    changePreviewHeight
  }), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["BlockControls"], {
    group: "other"
  }, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["MediaReplaceFlow"], {
    mediaId: id,
    mediaURL: href,
    accept: "*",
    onSelect: onSelectFile,
    onError: onUploadError
  }), Object(external_gc_element_["createElement"])(ClipboardToolbarButton, {
    text: href,
    disabled: Object(external_gc_blob_["isBlobURL"])(href)
  })), Object(external_gc_element_["createElement"])("div", blockProps, displayPreviewInEditor && Object(external_gc_element_["createElement"])(external_gc_components_["ResizableBox"], {
    size: {
      height: previewHeight
    },
    minHeight: MIN_PREVIEW_HEIGHT,
    maxHeight: MAX_PREVIEW_HEIGHT,
    minWidth: "100%",
    grid: [10, 10],
    enable: {
      top: false,
      right: false,
      bottom: true,
      left: false,
      topRight: false,
      bottomRight: false,
      bottomLeft: false,
      topLeft: false
    },
    onResizeStart: () => toggleSelection(false),
    onResizeStop: handleOnResizeStop,
    showHandle: isSelected
  }, Object(external_gc_element_["createElement"])("object", {
    className: "gc-block-file__preview",
    data: href,
    type: "application/pdf",
    "aria-label": Object(external_gc_i18n_["__"])('嵌入所选的 PDF 文件。')
  }), !isSelected && Object(external_gc_element_["createElement"])("div", {
    className: "gc-block-file__preview-overlay"
  })), Object(external_gc_element_["createElement"])("div", {
    className: 'gc-block-file__content-wrapper'
  }, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"], {
    tagName: "a",
    value: fileName,
    placeholder: Object(external_gc_i18n_["__"])('编写文件名…'),
    withoutInteractiveFormatting: true,
    onChange: text => setAttributes({
      fileName: text
    }),
    href: textLinkHref
  }), showDownloadButton && Object(external_gc_element_["createElement"])("div", {
    className: 'gc-block-file__button-richtext-wrapper'
  }, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"], {
    tagName: "div" // must be block-level or else cursor disappears
    ,
    "aria-label": Object(external_gc_i18n_["__"])('下载按钮文字'),
    className: 'gc-block-file__button',
    value: downloadButtonText,
    withoutInteractiveFormatting: true,
    placeholder: Object(external_gc_i18n_["__"])('添加文字…'),
    onChange: text => changeDownloadButtonText(text)
  })))));
}

/* harmony default export */ var file_edit = (Object(external_gc_components_["withNotices"])(FileEdit));

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/file/save.js


/**
 * GeChiUI dependencies
 */


function file_save_save(_ref) {
  let {
    attributes
  } = _ref;
  const {
    href,
    fileId,
    fileName,
    textLinkHref,
    textLinkTarget,
    showDownloadButton,
    downloadButtonText,
    displayPreview,
    previewHeight
  } = attributes;
  const pdfEmbedLabel = external_gc_blockEditor_["RichText"].isEmpty(fileName) ? Object(external_gc_i18n_["__"])('PDF 已嵌入') : Object(external_gc_i18n_["sprintf"])(
  /* translators: %s: filename. */
  Object(external_gc_i18n_["__"])('嵌入 %s'), fileName);
  return href && Object(external_gc_element_["createElement"])("div", external_gc_blockEditor_["useBlockProps"].save(), displayPreview && Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])("object", {
    className: "gc-block-file__embed",
    data: href,
    type: "application/pdf",
    style: {
      width: '100%',
      height: `${previewHeight}px`
    },
    "aria-label": pdfEmbedLabel
  })), !external_gc_blockEditor_["RichText"].isEmpty(fileName) && Object(external_gc_element_["createElement"])("a", {
    id: fileId,
    href: textLinkHref,
    target: textLinkTarget,
    rel: textLinkTarget ? 'noreferrer noopener' : undefined
  }, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"].Content, {
    value: fileName
  })), showDownloadButton && Object(external_gc_element_["createElement"])("a", {
    href: href,
    className: "gc-block-file__button",
    download: true,
    "aria-describedby": fileId
  }, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"].Content, {
    value: downloadButtonText
  })));
}

// EXTERNAL MODULE: external ["gc","url"]
var external_gc_url_ = __webpack_require__("zP/e");

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/file/transforms.js
/**
 * External dependencies
 */

/**
 * GeChiUI dependencies
 */






const file_transforms_transforms = {
  from: [{
    type: 'files',

    isMatch(files) {
      return files.length > 0;
    },

    // We define a lower priorty (higher number) than the default of 10. This
    // ensures that the File block is only created as a fallback.
    priority: 15,
    transform: files => {
      const blocks = [];
      files.forEach(file => {
        const blobURL = Object(external_gc_blob_["createBlobURL"])(file); // File will be uploaded in componentDidMount()

        blocks.push(Object(external_gc_blocks_["createBlock"])('core/file', {
          href: blobURL,
          fileName: file.name,
          textLinkHref: blobURL
        }));
      });
      return blocks;
    }
  }, {
    type: 'block',
    blocks: ['core/audio'],
    transform: attributes => {
      return Object(external_gc_blocks_["createBlock"])('core/file', {
        href: attributes.src,
        fileName: attributes.caption,
        textLinkHref: attributes.src,
        id: attributes.id,
        anchor: attributes.anchor
      });
    }
  }, {
    type: 'block',
    blocks: ['core/video'],
    transform: attributes => {
      return Object(external_gc_blocks_["createBlock"])('core/file', {
        href: attributes.src,
        fileName: attributes.caption,
        textLinkHref: attributes.src,
        id: attributes.id,
        anchor: attributes.anchor
      });
    }
  }, {
    type: 'block',
    blocks: ['core/image'],
    transform: attributes => {
      return Object(external_gc_blocks_["createBlock"])('core/file', {
        href: attributes.url,
        fileName: attributes.caption || Object(external_gc_url_["getFilename"])(attributes.url),
        textLinkHref: attributes.url,
        id: attributes.id,
        anchor: attributes.anchor
      });
    }
  }],
  to: [{
    type: 'block',
    blocks: ['core/audio'],
    isMatch: _ref => {
      let {
        id
      } = _ref;

      if (!id) {
        return false;
      }

      const {
        getMedia
      } = Object(external_gc_data_["select"])(external_gc_coreData_["store"]);
      const media = getMedia(id);
      return !!media && Object(external_lodash_["includes"])(media.mime_type, 'audio');
    },
    transform: attributes => {
      return Object(external_gc_blocks_["createBlock"])('core/audio', {
        src: attributes.href,
        caption: attributes.fileName,
        id: attributes.id,
        anchor: attributes.anchor
      });
    }
  }, {
    type: 'block',
    blocks: ['core/video'],
    isMatch: _ref2 => {
      let {
        id
      } = _ref2;

      if (!id) {
        return false;
      }

      const {
        getMedia
      } = Object(external_gc_data_["select"])(external_gc_coreData_["store"]);
      const media = getMedia(id);
      return !!media && Object(external_lodash_["includes"])(media.mime_type, 'video');
    },
    transform: attributes => {
      return Object(external_gc_blocks_["createBlock"])('core/video', {
        src: attributes.href,
        caption: attributes.fileName,
        id: attributes.id,
        anchor: attributes.anchor
      });
    }
  }, {
    type: 'block',
    blocks: ['core/image'],
    isMatch: _ref3 => {
      let {
        id
      } = _ref3;

      if (!id) {
        return false;
      }

      const {
        getMedia
      } = Object(external_gc_data_["select"])(external_gc_coreData_["store"]);
      const media = getMedia(id);
      return !!media && Object(external_lodash_["includes"])(media.mime_type, 'image');
    },
    transform: attributes => {
      return Object(external_gc_blocks_["createBlock"])('core/image', {
        url: attributes.href,
        caption: attributes.fileName,
        id: attributes.id,
        anchor: attributes.anchor
      });
    }
  }]
};
/* harmony default export */ var file_transforms = (file_transforms_transforms);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/file/index.js
/**
 * GeChiUI dependencies
 */


/**
 * Internal dependencies
 */



const file_metadata = {
  apiVersion: 2,
  name: "core/file",
  title: "文件",
  category: "media",
  description: "添加指向可下载文件的链接。",
  keywords: ["document", "pdf", "download"],
  textdomain: "default",
  attributes: {
    id: {
      type: "number"
    },
    href: {
      type: "string"
    },
    fileId: {
      type: "string",
      source: "attribute",
      selector: "a:not([download])",
      attribute: "id"
    },
    fileName: {
      type: "string",
      source: "html",
      selector: "a:not([download])"
    },
    textLinkHref: {
      type: "string",
      source: "attribute",
      selector: "a:not([download])",
      attribute: "href"
    },
    textLinkTarget: {
      type: "string",
      source: "attribute",
      selector: "a:not([download])",
      attribute: "target"
    },
    showDownloadButton: {
      type: "boolean",
      "default": true
    },
    downloadButtonText: {
      type: "string",
      source: "html",
      selector: "a[download]"
    },
    displayPreview: {
      type: "boolean"
    },
    previewHeight: {
      type: "number",
      "default": 600
    }
  },
  supports: {
    anchor: true,
    align: true
  },
  viewScript: "file:./view.min.js",
  editorStyle: "gc-block-file-editor",
  style: "gc-block-file"
};


const {
  name: file_name
} = file_metadata;

const file_settings = {
  icon: library_file,
  example: {
    attributes: {
      href: 'https://upload.wikimedia.org/wikipedia/commons/d/dd/Armstrong_Small_Step.ogg',
      fileName: Object(external_gc_i18n_["_x"])('Armstrong_Small_Step', 'Name of the file')
    }
  },
  transforms: file_transforms,
  deprecated: file_deprecated,
  edit: file_edit,
  save: file_save_save
};

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/gallery.js


/**
 * GeChiUI dependencies
 */

const gallery = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  viewBox: "0 0 24 24",
  xmlns: "http://www.w3.org/2000/svg"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M20.2 8v11c0 .7-.6 1.2-1.2 1.2H6v1.5h13c1.5 0 2.7-1.2 2.7-2.8V8h-1.5zM18 16.4V4.6c0-.9-.7-1.6-1.6-1.6H4.6C3.7 3 3 3.7 3 4.6v11.8c0 .9.7 1.6 1.6 1.6h11.8c.9 0 1.6-.7 1.6-1.6zM4.5 4.6c0-.1.1-.1.1-.1h11.8c.1 0 .1.1.1.1V12l-2.3-1.7c-.3-.2-.6-.2-.9 0l-2.9 2.1L8 11.3c-.2-.1-.5-.1-.7 0l-2.9 1.5V4.6zm0 11.8v-1.8l3.2-1.7 2.4 1.2c.2.1.5.1.8-.1l2.8-2 2.8 2v2.5c0 .1-.1.1-.1.1H4.6c0-.1-.1-.2-.1-.2z"
}));
/* harmony default export */ var library_gallery = (gallery);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/gallery/constants.js
const LINK_DESTINATION_NONE = 'none';
const LINK_DESTINATION_MEDIA = 'media';
const LINK_DESTINATION_ATTACHMENT = 'attachment';
const LINK_DESTINATION_MEDIA_GC_CORE = 'file';
const LINK_DESTINATION_ATTACHMENT_GC_CORE = 'post';

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/gallery/shared.js
/**
 * External dependencies
 */

function defaultColumnsNumber(imageCount) {
  return imageCount ? Math.min(3, imageCount) : 3;
}
const pickRelevantMediaFiles = function (image) {
  let sizeSlug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'large';
  const imageProps = Object(external_lodash_["pick"])(image, ['alt', 'id', 'link', 'caption']);
  imageProps.url = Object(external_lodash_["get"])(image, ['sizes', sizeSlug, 'url']) || Object(external_lodash_["get"])(image, ['media_details', 'sizes', sizeSlug, 'source_url']) || image.url;
  const fullUrl = Object(external_lodash_["get"])(image, ['sizes', 'full', 'url']) || Object(external_lodash_["get"])(image, ['media_details', 'sizes', 'full', 'source_url']);

  if (fullUrl) {
    imageProps.fullUrl = fullUrl;
  }

  return imageProps;
};
/**
 * The new gallery block format is not compatible with the use_BalanceTags option
 * in GC versions <= 5.8 https://core.trac.gechiui.com/ticket/54130. The
 * window.gc.galleryBlockV2Enabled flag is set in lib/compat.php. This method
 * can be removed when minimum supported GC version >=5.9.
 */

function isGalleryV2Enabled() {
  // Only run the Gallery version compat check if the plugin is running, otherwise
  // assume we are in 5.9 core and enable by default.
  if (false) {}

  return true;
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/gallery/deprecated.js


/**
 * External dependencies
 */


/**
 * GeChiUI dependencies
 */



/**
 * Internal dependencies
 */



const DEPRECATED_LINK_DESTINATION_MEDIA = 'file';
const DEPRECATED_LINK_DESTINATION_ATTACHMENT = 'post';
/**
 * Original function to determine default number of columns from a block's
 * attributes.
 *
 * Used in deprecations: v1-6, for versions of the gallery block that didn't use inner blocks.
 *
 * @param {Object} attributes Block attributes.
 * @return {number}           Default number of columns for the gallery.
 */

function defaultColumnsNumberV1(attributes) {
  var _attributes$images;

  return Math.min(3, attributes === null || attributes === void 0 ? void 0 : (_attributes$images = attributes.images) === null || _attributes$images === void 0 ? void 0 : _attributes$images.length);
}
/**
 * Original function to determine new href and linkDestination values for an image block from the
 * supplied Gallery link destination.
 *
 * Used in deprecations: v1-6.
 *
 * @param {Object} image       Gallery image.
 * @param {string} destination Gallery's selected link destination.
 * @return {Object}            New attributes to assign to image block.
 */

function getHrefAndDestination(image, destination) {
  // Need to determine the URL that the selected destination maps to.
  // Gutenberg and GeChiUI use different constants so the new link
  // destination also needs to be tweaked.
  switch (destination) {
    case DEPRECATED_LINK_DESTINATION_MEDIA:
      return {
        href: (image === null || image === void 0 ? void 0 : image.source_url) || (image === null || image === void 0 ? void 0 : image.url),
        // eslint-disable-line camelcase
        linkDestination: LINK_DESTINATION_MEDIA
      };

    case DEPRECATED_LINK_DESTINATION_ATTACHMENT:
      return {
        href: image === null || image === void 0 ? void 0 : image.link,
        linkDestination: LINK_DESTINATION_ATTACHMENT
      };

    case LINK_DESTINATION_MEDIA:
      return {
        href: (image === null || image === void 0 ? void 0 : image.source_url) || (image === null || image === void 0 ? void 0 : image.url),
        // eslint-disable-line camelcase
        linkDestination: LINK_DESTINATION_MEDIA
      };

    case LINK_DESTINATION_ATTACHMENT:
      return {
        href: image === null || image === void 0 ? void 0 : image.link,
        linkDestination: LINK_DESTINATION_ATTACHMENT
      };

    case LINK_DESTINATION_NONE:
      return {
        href: undefined,
        linkDestination: LINK_DESTINATION_NONE
      };
  }

  return {};
}

function runV2Migration(attributes) {
  let linkTo = attributes.linkTo ? attributes.linkTo : 'none';

  if (linkTo === 'post') {
    linkTo = 'attachment';
  } else if (linkTo === 'file') {
    linkTo = 'media';
  }

  const imageBlocks = attributes.images.map(image => {
    return getImageBlock(image, attributes.sizeSlug, linkTo);
  });
  return [{ ...Object(external_lodash_["omit"])(attributes, ['images', 'ids']),
    linkTo,
    allowResize: false
  }, imageBlocks];
}
/**
 * Gets an Image block from gallery image data
 *
 * Used to migrate Galleries to nested Image InnerBlocks.
 *
 * @param {Object} image    Image properties.
 * @param {string} sizeSlug Gallery sizeSlug attribute.
 * @param {string} linkTo   Gallery linkTo attribute.
 * @return {Object}         Image block.
 */


function getImageBlock(image, sizeSlug, linkTo) {
  return Object(external_gc_blocks_["createBlock"])('core/image', { ...(image.id && {
      id: parseInt(image.id)
    }),
    url: image.url,
    alt: image.alt,
    caption: image.caption,
    sizeSlug,
    ...getHrefAndDestination(image, linkTo)
  });
}
const deprecated_v6 = {
  attributes: {
    images: {
      type: 'array',
      default: [],
      source: 'query',
      selector: '.blocks-gallery-item',
      query: {
        url: {
          type: 'string',
          source: 'attribute',
          selector: 'img',
          attribute: 'src'
        },
        fullUrl: {
          type: 'string',
          source: 'attribute',
          selector: 'img',
          attribute: 'data-full-url'
        },
        link: {
          type: 'string',
          source: 'attribute',
          selector: 'img',
          attribute: 'data-link'
        },
        alt: {
          type: 'string',
          source: 'attribute',
          selector: 'img',
          attribute: 'alt',
          default: ''
        },
        id: {
          type: 'string',
          source: 'attribute',
          selector: 'img',
          attribute: 'data-id'
        },
        caption: {
          type: 'string',
          source: 'html',
          selector: '.blocks-gallery-item__caption'
        }
      }
    },
    ids: {
      type: 'array',
      items: {
        type: 'number'
      },
      default: []
    },
    columns: {
      type: 'number',
      minimum: 1,
      maximum: 8
    },
    caption: {
      type: 'string',
      source: 'html',
      selector: '.blocks-gallery-caption'
    },
    imageCrop: {
      type: 'boolean',
      default: true
    },
    linkTo: {
      type: 'string'
    },
    sizeSlug: {
      type: 'string',
      default: 'large'
    }
  },
  supports: {
    anchor: true,
    align: true
  },

  save(_ref) {
    let {
      attributes
    } = _ref;
    const {
      images,
      columns = defaultColumnsNumberV1(attributes),
      imageCrop,
      caption,
      linkTo
    } = attributes;
    const className = `columns-${columns} ${imageCrop ? 'is-cropped' : ''}`;
    return Object(external_gc_element_["createElement"])("figure", external_gc_blockEditor_["useBlockProps"].save({
      className
    }), Object(external_gc_element_["createElement"])("ul", {
      className: "blocks-gallery-grid"
    }, images.map(image => {
      let href;

      switch (linkTo) {
        case DEPRECATED_LINK_DESTINATION_MEDIA:
          href = image.fullUrl || image.url;
          break;

        case DEPRECATED_LINK_DESTINATION_ATTACHMENT:
          href = image.link;
          break;
      }

      const img = Object(external_gc_element_["createElement"])("img", {
        src: image.url,
        alt: image.alt,
        "data-id": image.id,
        "data-full-url": image.fullUrl,
        "data-link": image.link,
        className: image.id ? `gc-image-${image.id}` : null
      });
      return Object(external_gc_element_["createElement"])("li", {
        key: image.id || image.url,
        className: "blocks-gallery-item"
      }, Object(external_gc_element_["createElement"])("figure", null, href ? Object(external_gc_element_["createElement"])("a", {
        href: href
      }, img) : img, !external_gc_blockEditor_["RichText"].isEmpty(image.caption) && Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"].Content, {
        tagName: "figcaption",
        className: "blocks-gallery-item__caption",
        value: image.caption
      })));
    })), !external_gc_blockEditor_["RichText"].isEmpty(caption) && Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"].Content, {
      tagName: "figcaption",
      className: "blocks-gallery-caption",
      value: caption
    }));
  },

  migrate(attributes) {
    if (isGalleryV2Enabled()) {
      return runV2Migration(attributes);
    }

    return attributes;
  }

};
const deprecated_v5 = {
  attributes: {
    images: {
      type: 'array',
      default: [],
      source: 'query',
      selector: '.blocks-gallery-item',
      query: {
        url: {
          type: 'string',
          source: 'attribute',
          selector: 'img',
          attribute: 'src'
        },
        fullUrl: {
          type: 'string',
          source: 'attribute',
          selector: 'img',
          attribute: 'data-full-url'
        },
        link: {
          type: 'string',
          source: 'attribute',
          selector: 'img',
          attribute: 'data-link'
        },
        alt: {
          type: 'string',
          source: 'attribute',
          selector: 'img',
          attribute: 'alt',
          default: ''
        },
        id: {
          type: 'string',
          source: 'attribute',
          selector: 'img',
          attribute: 'data-id'
        },
        caption: {
          type: 'string',
          source: 'html',
          selector: '.blocks-gallery-item__caption'
        }
      }
    },
    ids: {
      type: 'array',
      items: {
        type: 'number'
      },
      default: []
    },
    columns: {
      type: 'number',
      minimum: 1,
      maximum: 8
    },
    caption: {
      type: 'string',
      source: 'html',
      selector: '.blocks-gallery-caption'
    },
    imageCrop: {
      type: 'boolean',
      default: true
    },
    linkTo: {
      type: 'string',
      default: 'none'
    },
    sizeSlug: {
      type: 'string',
      default: 'large'
    }
  },
  supports: {
    align: true
  },

  isEligible(_ref2) {
    let {
      linkTo
    } = _ref2;
    return !linkTo || linkTo === 'attachment' || linkTo === 'media';
  },

  migrate(attributes) {
    if (isGalleryV2Enabled()) {
      return runV2Migration(attributes);
    }

    let linkTo = attributes.linkTo;

    if (!attributes.linkTo) {
      linkTo = 'none';
    } else if (attributes.linkTo === 'attachment') {
      linkTo = 'post';
    } else if (attributes.linkTo === 'media') {
      linkTo = 'file';
    }

    return { ...attributes,
      linkTo
    };
  },

  save(_ref3) {
    let {
      attributes
    } = _ref3;
    const {
      images,
      columns = defaultColumnsNumberV1(attributes),
      imageCrop,
      caption,
      linkTo
    } = attributes;
    return Object(external_gc_element_["createElement"])("figure", {
      className: `columns-${columns} ${imageCrop ? 'is-cropped' : ''}`
    }, Object(external_gc_element_["createElement"])("ul", {
      className: "blocks-gallery-grid"
    }, images.map(image => {
      let href;

      switch (linkTo) {
        case 'media':
          href = image.fullUrl || image.url;
          break;

        case 'attachment':
          href = image.link;
          break;
      }

      const img = Object(external_gc_element_["createElement"])("img", {
        src: image.url,
        alt: image.alt,
        "data-id": image.id,
        "data-full-url": image.fullUrl,
        "data-link": image.link,
        className: image.id ? `gc-image-${image.id}` : null
      });
      return Object(external_gc_element_["createElement"])("li", {
        key: image.id || image.url,
        className: "blocks-gallery-item"
      }, Object(external_gc_element_["createElement"])("figure", null, href ? Object(external_gc_element_["createElement"])("a", {
        href: href
      }, img) : img, !external_gc_blockEditor_["RichText"].isEmpty(image.caption) && Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"].Content, {
        tagName: "figcaption",
        className: "blocks-gallery-item__caption",
        value: image.caption
      })));
    })), !external_gc_blockEditor_["RichText"].isEmpty(caption) && Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"].Content, {
      tagName: "figcaption",
      className: "blocks-gallery-caption",
      value: caption
    }));
  }

};
const deprecated_v4 = {
  attributes: {
    images: {
      type: 'array',
      default: [],
      source: 'query',
      selector: '.blocks-gallery-item',
      query: {
        url: {
          source: 'attribute',
          selector: 'img',
          attribute: 'src'
        },
        fullUrl: {
          source: 'attribute',
          selector: 'img',
          attribute: 'data-full-url'
        },
        link: {
          source: 'attribute',
          selector: 'img',
          attribute: 'data-link'
        },
        alt: {
          source: 'attribute',
          selector: 'img',
          attribute: 'alt',
          default: ''
        },
        id: {
          source: 'attribute',
          selector: 'img',
          attribute: 'data-id'
        },
        caption: {
          type: 'string',
          source: 'html',
          selector: '.blocks-gallery-item__caption'
        }
      }
    },
    ids: {
      type: 'array',
      default: []
    },
    columns: {
      type: 'number'
    },
    caption: {
      type: 'string',
      source: 'html',
      selector: '.blocks-gallery-caption'
    },
    imageCrop: {
      type: 'boolean',
      default: true
    },
    linkTo: {
      type: 'string',
      default: 'none'
    }
  },
  supports: {
    align: true
  },

  isEligible(_ref4) {
    let {
      ids
    } = _ref4;
    return ids && ids.some(id => typeof id === 'string');
  },

  migrate(attributes) {
    if (isGalleryV2Enabled()) {
      return runV2Migration(attributes);
    }

    return { ...attributes,
      ids: Object(external_lodash_["map"])(attributes.ids, id => {
        const parsedId = parseInt(id, 10);
        return Number.isInteger(parsedId) ? parsedId : null;
      })
    };
  },

  save(_ref5) {
    let {
      attributes
    } = _ref5;
    const {
      images,
      columns = defaultColumnsNumberV1(attributes),
      imageCrop,
      caption,
      linkTo
    } = attributes;
    return Object(external_gc_element_["createElement"])("figure", {
      className: `columns-${columns} ${imageCrop ? 'is-cropped' : ''}`
    }, Object(external_gc_element_["createElement"])("ul", {
      className: "blocks-gallery-grid"
    }, images.map(image => {
      let href;

      switch (linkTo) {
        case 'media':
          href = image.fullUrl || image.url;
          break;

        case 'attachment':
          href = image.link;
          break;
      }

      const img = Object(external_gc_element_["createElement"])("img", {
        src: image.url,
        alt: image.alt,
        "data-id": image.id,
        "data-full-url": image.fullUrl,
        "data-link": image.link,
        className: image.id ? `gc-image-${image.id}` : null
      });
      return Object(external_gc_element_["createElement"])("li", {
        key: image.id || image.url,
        className: "blocks-gallery-item"
      }, Object(external_gc_element_["createElement"])("figure", null, href ? Object(external_gc_element_["createElement"])("a", {
        href: href
      }, img) : img, !external_gc_blockEditor_["RichText"].isEmpty(image.caption) && Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"].Content, {
        tagName: "figcaption",
        className: "blocks-gallery-item__caption",
        value: image.caption
      })));
    })), !external_gc_blockEditor_["RichText"].isEmpty(caption) && Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"].Content, {
      tagName: "figcaption",
      className: "blocks-gallery-caption",
      value: caption
    }));
  }

};
const deprecated_v3 = {
  attributes: {
    images: {
      type: 'array',
      default: [],
      source: 'query',
      selector: 'ul.gc-block-gallery .blocks-gallery-item',
      query: {
        url: {
          source: 'attribute',
          selector: 'img',
          attribute: 'src'
        },
        fullUrl: {
          source: 'attribute',
          selector: 'img',
          attribute: 'data-full-url'
        },
        alt: {
          source: 'attribute',
          selector: 'img',
          attribute: 'alt',
          default: ''
        },
        id: {
          source: 'attribute',
          selector: 'img',
          attribute: 'data-id'
        },
        link: {
          source: 'attribute',
          selector: 'img',
          attribute: 'data-link'
        },
        caption: {
          type: 'array',
          source: 'children',
          selector: 'figcaption'
        }
      }
    },
    ids: {
      type: 'array',
      default: []
    },
    columns: {
      type: 'number'
    },
    imageCrop: {
      type: 'boolean',
      default: true
    },
    linkTo: {
      type: 'string',
      default: 'none'
    }
  },
  supports: {
    align: true
  },

  save(_ref6) {
    let {
      attributes
    } = _ref6;
    const {
      images,
      columns = defaultColumnsNumberV1(attributes),
      imageCrop,
      linkTo
    } = attributes;
    return Object(external_gc_element_["createElement"])("ul", {
      className: `columns-${columns} ${imageCrop ? 'is-cropped' : ''}`
    }, images.map(image => {
      let href;

      switch (linkTo) {
        case 'media':
          href = image.fullUrl || image.url;
          break;

        case 'attachment':
          href = image.link;
          break;
      }

      const img = Object(external_gc_element_["createElement"])("img", {
        src: image.url,
        alt: image.alt,
        "data-id": image.id,
        "data-full-url": image.fullUrl,
        "data-link": image.link,
        className: image.id ? `gc-image-${image.id}` : null
      });
      return Object(external_gc_element_["createElement"])("li", {
        key: image.id || image.url,
        className: "blocks-gallery-item"
      }, Object(external_gc_element_["createElement"])("figure", null, href ? Object(external_gc_element_["createElement"])("a", {
        href: href
      }, img) : img, image.caption && image.caption.length > 0 && Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"].Content, {
        tagName: "figcaption",
        value: image.caption
      })));
    }));
  },

  migrate(attributes) {
    if (isGalleryV2Enabled()) {
      return runV2Migration(attributes);
    }

    return attributes;
  }

};
const deprecated_v2 = {
  attributes: {
    images: {
      type: 'array',
      default: [],
      source: 'query',
      selector: 'ul.gc-block-gallery .blocks-gallery-item',
      query: {
        url: {
          source: 'attribute',
          selector: 'img',
          attribute: 'src'
        },
        alt: {
          source: 'attribute',
          selector: 'img',
          attribute: 'alt',
          default: ''
        },
        id: {
          source: 'attribute',
          selector: 'img',
          attribute: 'data-id'
        },
        link: {
          source: 'attribute',
          selector: 'img',
          attribute: 'data-link'
        },
        caption: {
          type: 'array',
          source: 'children',
          selector: 'figcaption'
        }
      }
    },
    columns: {
      type: 'number'
    },
    imageCrop: {
      type: 'boolean',
      default: true
    },
    linkTo: {
      type: 'string',
      default: 'none'
    }
  },

  isEligible(_ref7) {
    let {
      images,
      ids
    } = _ref7;
    return images && images.length > 0 && (!ids && images || ids && images && ids.length !== images.length || Object(external_lodash_["some"])(images, (id, index) => {
      if (!id && ids[index] !== null) {
        return true;
      }

      return parseInt(id, 10) !== ids[index];
    }));
  },

  migrate(attributes) {
    if (isGalleryV2Enabled()) {
      return runV2Migration(attributes);
    }

    return { ...attributes,
      ids: Object(external_lodash_["map"])(attributes.images, _ref8 => {
        let {
          id
        } = _ref8;

        if (!id) {
          return null;
        }

        return parseInt(id, 10);
      })
    };
  },

  supports: {
    align: true
  },

  save(_ref9) {
    let {
      attributes
    } = _ref9;
    const {
      images,
      columns = defaultColumnsNumberV1(attributes),
      imageCrop,
      linkTo
    } = attributes;
    return Object(external_gc_element_["createElement"])("ul", {
      className: `columns-${columns} ${imageCrop ? 'is-cropped' : ''}`
    }, images.map(image => {
      let href;

      switch (linkTo) {
        case 'media':
          href = image.url;
          break;

        case 'attachment':
          href = image.link;
          break;
      }

      const img = Object(external_gc_element_["createElement"])("img", {
        src: image.url,
        alt: image.alt,
        "data-id": image.id,
        "data-link": image.link,
        className: image.id ? `gc-image-${image.id}` : null
      });
      return Object(external_gc_element_["createElement"])("li", {
        key: image.id || image.url,
        className: "blocks-gallery-item"
      }, Object(external_gc_element_["createElement"])("figure", null, href ? Object(external_gc_element_["createElement"])("a", {
        href: href
      }, img) : img, image.caption && image.caption.length > 0 && Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"].Content, {
        tagName: "figcaption",
        value: image.caption
      })));
    }));
  }

};
const deprecated_v1 = {
  attributes: {
    images: {
      type: 'array',
      default: [],
      source: 'query',
      selector: 'div.gc-block-gallery figure.blocks-gallery-image img',
      query: {
        url: {
          source: 'attribute',
          attribute: 'src'
        },
        alt: {
          source: 'attribute',
          attribute: 'alt',
          default: ''
        },
        id: {
          source: 'attribute',
          attribute: 'data-id'
        }
      }
    },
    columns: {
      type: 'number'
    },
    imageCrop: {
      type: 'boolean',
      default: true
    },
    linkTo: {
      type: 'string',
      default: 'none'
    },
    align: {
      type: 'string',
      default: 'none'
    }
  },
  supports: {
    align: true
  },

  save(_ref10) {
    let {
      attributes
    } = _ref10;
    const {
      images,
      columns = defaultColumnsNumberV1(attributes),
      align,
      imageCrop,
      linkTo
    } = attributes;
    const className = classnames_default()(`columns-${columns}`, {
      alignnone: align === 'none',
      'is-cropped': imageCrop
    });
    return Object(external_gc_element_["createElement"])("div", {
      className: className
    }, images.map(image => {
      let href;

      switch (linkTo) {
        case 'media':
          href = image.url;
          break;

        case 'attachment':
          href = image.link;
          break;
      }

      const img = Object(external_gc_element_["createElement"])("img", {
        src: image.url,
        alt: image.alt,
        "data-id": image.id
      });
      return Object(external_gc_element_["createElement"])("figure", {
        key: image.id || image.url,
        className: "blocks-gallery-image"
      }, href ? Object(external_gc_element_["createElement"])("a", {
        href: href
      }, img) : img);
    }));
  },

  migrate(attributes) {
    if (isGalleryV2Enabled()) {
      return runV2Migration(attributes);
    }

    return attributes;
  }

};
/* harmony default export */ var gallery_deprecated = ([deprecated_v6, deprecated_v5, deprecated_v4, deprecated_v3, deprecated_v2, deprecated_v1]);

// EXTERNAL MODULE: external ["gc","viewport"]
var external_gc_viewport_ = __webpack_require__("3BOu");

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/gallery/shared-icon.js


/**
 * GeChiUI dependencies
 */


const sharedIcon = Object(external_gc_element_["createElement"])(external_gc_blockEditor_["BlockIcon"], {
  icon: library_gallery
});

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/image/constants.js
const MIN_SIZE = 20;
const constants_LINK_DESTINATION_NONE = 'none';
const constants_LINK_DESTINATION_MEDIA = 'media';
const constants_LINK_DESTINATION_ATTACHMENT = 'attachment';
const LINK_DESTINATION_CUSTOM = 'custom';
const constants_NEW_TAB_REL = ['noreferrer', 'noopener'];
const constants_ALLOWED_MEDIA_TYPES = ['image'];
const MEDIA_ID_NO_FEATURED_IMAGE_SET = 0;

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/gallery/utils.js
/**
 * Internal dependencies
 */


/**
 * Determines new href and linkDestination values for an image block from the
 * supplied Gallery link destination.
 *
 * @param {Object} image       Gallery image.
 * @param {string} destination Gallery's selected link destination.
 * @return {Object}            New attributes to assign to image block.
 */

function utils_getHrefAndDestination(image, destination) {
  // Gutenberg and GeChiUI use different constants so if image_default_link_type
  // option is set we need to map from the GC Core values.
  switch (destination) {
    case LINK_DESTINATION_MEDIA_GC_CORE:
    case LINK_DESTINATION_MEDIA:
      return {
        href: (image === null || image === void 0 ? void 0 : image.source_url) || (image === null || image === void 0 ? void 0 : image.url),
        // eslint-disable-line camelcase
        linkDestination: constants_LINK_DESTINATION_MEDIA
      };

    case LINK_DESTINATION_ATTACHMENT_GC_CORE:
    case LINK_DESTINATION_ATTACHMENT:
      return {
        href: image === null || image === void 0 ? void 0 : image.link,
        linkDestination: constants_LINK_DESTINATION_ATTACHMENT
      };

    case LINK_DESTINATION_NONE:
      return {
        href: undefined,
        linkDestination: constants_LINK_DESTINATION_NONE
      };
  }

  return {};
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/image/utils.js
/**
 * External dependencies
 */

/**
 * Internal dependencies
 */


function removeNewTabRel(currentRel) {
  let newRel = currentRel;

  if (currentRel !== undefined && !Object(external_lodash_["isEmpty"])(newRel)) {
    if (!Object(external_lodash_["isEmpty"])(newRel)) {
      Object(external_lodash_["each"])(constants_NEW_TAB_REL, relVal => {
        const regExp = new RegExp('\\b' + relVal + '\\b', 'gi');
        newRel = newRel.replace(regExp, '');
      }); // Only trim if NEW_TAB_REL values was replaced.

      if (newRel !== currentRel) {
        newRel = newRel.trim();
      }

      if (Object(external_lodash_["isEmpty"])(newRel)) {
        newRel = undefined;
      }
    }
  }

  return newRel;
}
/**
 * Helper to get the link target settings to be stored.
 *
 * @param {boolean} value          The new link target value.
 * @param {Object}  attributes     Block attributes.
 * @param {Object}  attributes.rel Image block's rel attribute.
 *
 * @return {Object} Updated link target settings.
 */

function getUpdatedLinkTargetSettings(value, _ref) {
  let {
    rel
  } = _ref;
  const linkTarget = value ? '_blank' : undefined;
  let updatedRel;

  if (!linkTarget && !rel) {
    updatedRel = undefined;
  } else {
    updatedRel = removeNewTabRel(rel);
  }

  return {
    linkTarget,
    rel: updatedRel
  };
}
/**
 * Determines new Image block attributes size selection.
 *
 * @param {Object} image Media file object for gallery image.
 * @param {string} size  Selected size slug to apply.
 */

function getImageSizeAttributes(image, size) {
  const url = Object(external_lodash_["get"])(image, ['media_details', 'sizes', size, 'source_url']);

  if (url) {
    return {
      url,
      width: undefined,
      height: undefined,
      sizeSlug: size
    };
  }

  return {};
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/gallery/gallery.js



/**
 * External dependencies
 */

/**
 * GeChiUI dependencies
 */







const gallery_allowedBlocks = ['core/image'];
const Gallery = props => {
  const {
    attributes,
    isSelected,
    setAttributes,
    mediaPlaceholder,
    insertBlocksAfter,
    blockProps
  } = props;
  const {
    align,
    columns,
    caption,
    imageCrop
  } = attributes;
  const {
    children,
    ...innerBlocksProps
  } = Object(external_gc_blockEditor_["useInnerBlocksProps"])(blockProps, {
    allowedBlocks: gallery_allowedBlocks,
    orientation: 'horizontal',
    renderAppender: false,
    __experimentalLayout: {
      type: 'default',
      alignments: []
    }
  });
  const [captionFocused, setCaptionFocused] = Object(external_gc_element_["useState"])(false);

  function onFocusCaption() {
    if (!captionFocused) {
      setCaptionFocused(true);
    }
  }

  function removeCaptionFocus() {
    if (captionFocused) {
      setCaptionFocused(false);
    }
  }

  Object(external_gc_element_["useEffect"])(() => {
    if (!isSelected) {
      setCaptionFocused(false);
    }
  }, [isSelected]);
  return Object(external_gc_element_["createElement"])("figure", Object(esm_extends["a" /* default */])({}, innerBlocksProps, {
    className: classnames_default()(blockProps.className, 'blocks-gallery-grid', {
      [`align${align}`]: align,
      [`columns-${columns}`]: columns !== undefined,
      [`columns-default`]: columns === undefined,
      'is-cropped': imageCrop
    })
  }), children, Object(external_gc_element_["createElement"])(external_gc_primitives_["View"], {
    className: "blocks-gallery-media-placeholder-wrapper",
    onClick: removeCaptionFocus
  }, mediaPlaceholder), Object(external_gc_element_["createElement"])(RichTextVisibilityHelper, {
    isHidden: !isSelected && external_gc_blockEditor_["RichText"].isEmpty(caption),
    captionFocused: captionFocused,
    onFocusCaption: onFocusCaption,
    tagName: "figcaption",
    className: "blocks-gallery-caption",
    "aria-label": Object(external_gc_i18n_["__"])('图库说明文字'),
    placeholder: Object(external_gc_i18n_["__"])('编写画廊说明…'),
    value: caption,
    onChange: value => setAttributes({
      caption: value
    }),
    inlineToolbar: true,
    __unstableOnSplitAtEnd: () => insertBlocksAfter(Object(external_gc_blocks_["createBlock"])('core/paragraph'))
  }));
};

function RichTextVisibilityHelper(_ref) {
  let {
    isHidden,
    captionFocused,
    onFocusCaption,
    className,
    value,
    placeholder,
    tagName,
    captionRef,
    ...richTextProps
  } = _ref;

  if (isHidden) {
    return Object(external_gc_element_["createElement"])(external_gc_components_["VisuallyHidden"], Object(esm_extends["a" /* default */])({
      as: external_gc_blockEditor_["RichText"]
    }, richTextProps));
  }

  return Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"], Object(esm_extends["a" /* default */])({
    ref: captionRef,
    value: value,
    placeholder: placeholder,
    className: className,
    tagName: tagName,
    isSelected: captionFocused,
    onClick: onFocusCaption
  }, richTextProps));
}

/* harmony default export */ var gallery_gallery = (Gallery);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/gallery/use-image-sizes.js
/**
 * External dependencies
 */

/**
 * GeChiUI dependencies
 */


/**
 * Calculates the image sizes that are avaible for the current gallery images in order to
 * populate the 'Image size' selector.
 *
 * @param {Array}    images      Basic image block data taken from current gallery innerBlock
 * @param {boolean}  isSelected  Is the block currently selected in the editor.
 * @param {Function} getSettings Block editor store selector.
 *
 * @return {Array} An array of image size options.
 */

function useImageSizes(images, isSelected, getSettings) {
  return Object(external_gc_element_["useMemo"])(() => getImageSizing(), [images, isSelected]);

  function getImageSizing() {
    if (!images || images.length === 0) {
      return;
    }

    const {
      imageSizes
    } = getSettings();
    let resizedImages = {};

    if (isSelected) {
      resizedImages = images.reduce((currentResizedImages, img) => {
        if (!img.id) {
          return currentResizedImages;
        }

        const sizes = imageSizes.reduce((currentSizes, size) => {
          const defaultUrl = Object(external_lodash_["get"])(img, ['sizes', size.slug, 'url']);
          const mediaDetailsUrl = Object(external_lodash_["get"])(img, ['media_details', 'sizes', size.slug, 'source_url']);
          return { ...currentSizes,
            [size.slug]: defaultUrl || mediaDetailsUrl
          };
        }, {});
        return { ...currentResizedImages,
          [parseInt(img.id, 10)]: sizes
        };
      }, {});
    }

    return imageSizes.filter(_ref => {
      let {
        slug
      } = _ref;
      return Object(external_lodash_["some"])(resizedImages, sizes => sizes[slug]);
    }).map(_ref2 => {
      let {
        name,
        slug
      } = _ref2;
      return {
        value: slug,
        label: name
      };
    });
  }
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/gallery/use-short-code-transform.js
/**
 * External dependencies
 */

/**
 * GeChiUI dependencies
 */



/**
 * Shortcode transforms don't currently have a tranform method and so can't use a selector to
 * retrieve the data for each image being transformer, so this selector handle this post transformation.
 *
 * @param {Array} shortCodeTransforms An array of image data passed from the shortcode transform.
 *
 * @return {Array} An array of extended image data objects for each of the shortcode transform images.
 */

function useShortCodeTransform(shortCodeTransforms) {
  const newImageData = Object(external_gc_data_["useSelect"])(select => {
    if (!shortCodeTransforms || shortCodeTransforms.length === 0) {
      return;
    }

    const getMedia = select(external_gc_coreData_["store"]).getMedia;
    return shortCodeTransforms.map(image => {
      const imageData = getMedia(image.id);

      if (imageData) {
        return {
          id: imageData.id,
          type: 'image',
          url: imageData.source_url,
          mime: imageData.mime_type,
          alt: imageData.alt_text,
          link: imageData.link
        };
      }

      return undefined;
    });
  }, [shortCodeTransforms]);

  if (!newImageData) {
    return;
  }

  if (Object(external_lodash_["every"])(newImageData, img => img && img.url)) {
    return newImageData;
  }
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/gallery/use-get-new-images.js
/**
 * GeChiUI dependencies
 */

/**
 * Keeps track of images already in the gallery to allow new innerBlocks to be identified. This
 * is required so default gallery attributes can be applied without overwriting any custom
 * attributes applied to existing images.
 *
 * @param {Array} images    Basic image block data taken from current gallery innerBlock
 * @param {Array} imageData The related image data for each of the current gallery images.
 *
 * @return {Array} An array of any new images that have been added to the gallery.
 */

function useGetNewImages(images, imageData) {
  const [currentImages, setCurrentImages] = Object(external_gc_element_["useState"])([]);
  return Object(external_gc_element_["useMemo"])(() => getNewImages(), [images, imageData]);

  function getNewImages() {
    let imagesUpdated = false; // First lets check if any images have been deleted.

    const newCurrentImages = currentImages.filter(currentImg => images.find(img => {
      return currentImg.clientId === img.clientId;
    }));

    if (newCurrentImages.length < currentImages.length) {
      imagesUpdated = true;
    } // Now lets see if we have any images hydrated from saved content and if so
    // add them to currentImages state.


    images.forEach(image => {
      if (image.fromSavedContent && !newCurrentImages.find(currentImage => currentImage.id === image.id)) {
        imagesUpdated = true;
        newCurrentImages.push(image);
      }
    }); // Now check for any new images that have been added to InnerBlocks and for which
    // we have the imageData we need for setting default block attributes.

    const newImages = images.filter(image => !newCurrentImages.find(currentImage => image.clientId && currentImage.clientId === image.clientId) && (imageData === null || imageData === void 0 ? void 0 : imageData.find(img => img.id === image.id)) && !image.fromSavedConent);

    if (imagesUpdated || (newImages === null || newImages === void 0 ? void 0 : newImages.length) > 0) {
      setCurrentImages([...newCurrentImages, ...newImages]);
    }

    return newImages.length > 0 ? newImages : null;
  }
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/gallery/use-get-media.js
/**
 * GeChiUI dependencies
 */



/**
 * Retrieves the extended media info for each gallery image from the store. This is used to
 * determine which image size options are available for the current gallery.
 *
 * @param {Array} innerBlockImages An array of the innerBlock images currently in the gallery.
 *
 * @return {Array} An array of media info options for each gallery image.
 */

function useGetMedia(innerBlockImages) {
  const [currentImageMedia, setCurrentImageMedia] = Object(external_gc_element_["useState"])([]);
  const imageMedia = Object(external_gc_data_["useSelect"])(select => {
    if (!(innerBlockImages !== null && innerBlockImages !== void 0 && innerBlockImages.length)) {
      return currentImageMedia;
    }

    const imageIds = innerBlockImages.map(imageBlock => imageBlock.attributes.id).filter(id => id !== undefined);

    if (imageIds.length === 0) {
      return currentImageMedia;
    }

    return select(external_gc_coreData_["store"]).getMediaItems({
      include: imageIds.join(','),
      per_page: -1
    });
  }, [innerBlockImages]);

  if ((imageMedia === null || imageMedia === void 0 ? void 0 : imageMedia.length) !== (currentImageMedia === null || currentImageMedia === void 0 ? void 0 : currentImageMedia.length) || imageMedia !== null && imageMedia !== void 0 && imageMedia.some(newImage => !currentImageMedia.find(currentImage => currentImage.id === newImage.id))) {
    setCurrentImageMedia(imageMedia);
    return imageMedia;
  }

  return currentImageMedia;
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/gallery/edit.js



/**
 * External dependencies
 */


/**
 * GeChiUI dependencies
 */












/**
 * Internal dependencies
 */











const MAX_COLUMNS = 8;
const linkOptions = [{
  value: LINK_DESTINATION_ATTACHMENT,
  label: Object(external_gc_i18n_["__"])('附件页面')
}, {
  value: LINK_DESTINATION_MEDIA,
  label: Object(external_gc_i18n_["__"])('媒体文件')
}, {
  value: LINK_DESTINATION_NONE,
  label: Object(external_gc_i18n_["_x"])('无', 'Media item link option')
}];
const edit_ALLOWED_MEDIA_TYPES = ['image'];
const PLACEHOLDER_TEXT = external_gc_element_["Platform"].isNative ? Object(external_gc_i18n_["__"])('添加媒体') : Object(external_gc_i18n_["__"])('拖动图片，上传新图片或从您的媒体库中选择文件。');
const MOBILE_CONTROL_PROPS_RANGE_CONTROL = external_gc_element_["Platform"].isNative ? {
  type: 'stepper'
} : {};

function GalleryEdit(props) {
  const {
    setAttributes,
    attributes,
    className,
    clientId,
    noticeOperations,
    isSelected,
    noticeUI,
    insertBlocksAfter
  } = props;
  const {
    columns,
    imageCrop,
    linkTarget,
    linkTo,
    shortCodeTransforms,
    sizeSlug
  } = attributes;
  const {
    __unstableMarkNextChangeAsNotPersistent,
    replaceInnerBlocks,
    updateBlockAttributes
  } = Object(external_gc_data_["useDispatch"])(external_gc_blockEditor_["store"]);
  const {
    createSuccessNotice
  } = Object(external_gc_data_["useDispatch"])(external_gc_notices_["store"]);
  const {
    getBlock,
    getSettings,
    preferredStyle
  } = Object(external_gc_data_["useSelect"])(select => {
    var _preferredStyleVariat;

    const settings = select(external_gc_blockEditor_["store"]).getSettings();
    const preferredStyleVariations = settings.__experimentalPreferredStyleVariations;
    return {
      getBlock: select(external_gc_blockEditor_["store"]).getBlock,
      getSettings: select(external_gc_blockEditor_["store"]).getSettings,
      preferredStyle: preferredStyleVariations === null || preferredStyleVariations === void 0 ? void 0 : (_preferredStyleVariat = preferredStyleVariations.value) === null || _preferredStyleVariat === void 0 ? void 0 : _preferredStyleVariat['core/image']
    };
  }, []);
  const innerBlockImages = Object(external_gc_data_["useSelect"])(select => {
    var _select$getBlock;

    return (_select$getBlock = select(external_gc_blockEditor_["store"]).getBlock(clientId)) === null || _select$getBlock === void 0 ? void 0 : _select$getBlock.innerBlocks;
  }, [clientId]);
  const images = Object(external_gc_element_["useMemo"])(() => innerBlockImages === null || innerBlockImages === void 0 ? void 0 : innerBlockImages.map(block => ({
    clientId: block.clientId,
    id: block.attributes.id,
    url: block.attributes.url,
    attributes: block.attributes,
    fromSavedContent: Boolean(block.originalContent)
  })), [innerBlockImages]);
  const imageData = useGetMedia(innerBlockImages);
  const newImages = useGetNewImages(images, imageData);
  Object(external_gc_element_["useEffect"])(() => {
    newImages === null || newImages === void 0 ? void 0 : newImages.forEach(newImage => {
      updateBlockAttributes(newImage.clientId, { ...buildImageAttributes(newImage.attributes),
        id: newImage.id,
        align: undefined
      });
    });
  }, [newImages]);
  const shortCodeImages = useShortCodeTransform(shortCodeTransforms);
  Object(external_gc_element_["useEffect"])(() => {
    if (!shortCodeTransforms || !shortCodeImages) {
      return;
    }

    updateImages(shortCodeImages);
    setAttributes({
      shortCodeTransforms: undefined
    });
  }, [shortCodeTransforms, shortCodeImages]);
  const imageSizeOptions = useImageSizes(imageData, isSelected, getSettings);
  /**
   * Determines the image attributes that should be applied to an image block
   * after the gallery updates.
   *
   * The gallery will receive the full collection of images when a new image
   * is added. As a result we need to reapply the image's original settings if
   * it already existed in the gallery. If the image is in fact new, we need
   * to apply the gallery's current settings to the image.
   *
   * @param {Object} imageAttributes Media object for the actual image.
   * @return {Object}                Attributes to set on the new image block.
   */

  function buildImageAttributes(imageAttributes) {
    const image = imageAttributes.id ? Object(external_lodash_["find"])(imageData, {
      id: imageAttributes.id
    }) : null;
    let newClassName;

    if (imageAttributes.className && imageAttributes.className !== '') {
      newClassName = imageAttributes.className;
    } else {
      newClassName = preferredStyle ? `is-style-${preferredStyle}` : undefined;
    }

    return { ...pickRelevantMediaFiles(imageAttributes, sizeSlug),
      ...utils_getHrefAndDestination(image, linkTo),
      ...getUpdatedLinkTargetSettings(linkTarget, attributes),
      className: newClassName,
      sizeSlug
    };
  }

  function isValidFileType(file) {
    var _file$url;

    return edit_ALLOWED_MEDIA_TYPES.some(mediaType => {
      var _file$type;

      return ((_file$type = file.type) === null || _file$type === void 0 ? void 0 : _file$type.indexOf(mediaType)) === 0;
    }) || ((_file$url = file.url) === null || _file$url === void 0 ? void 0 : _file$url.indexOf('blob:')) === 0;
  }

  function updateImages(selectedImages) {
    const newFileUploads = Object.prototype.toString.call(selectedImages) === '[object FileList]';
    const imageArray = newFileUploads ? Array.from(selectedImages).map(file => {
      if (!file.url) {
        return pickRelevantMediaFiles({
          url: Object(external_gc_blob_["createBlobURL"])(file)
        });
      }

      return file;
    }) : selectedImages;

    if (!imageArray.every(isValidFileType)) {
      noticeOperations.removeAllNotices();
      noticeOperations.createErrorNotice(Object(external_gc_i18n_["__"])('如果上传到画廊所有文件都需要是图像格式'), {
        id: 'gallery-upload-invalid-file'
      });
    }

    const processedImages = imageArray.filter(file => file.url || isValidFileType(file)).map(file => {
      if (!file.url) {
        return pickRelevantMediaFiles({
          url: Object(external_gc_blob_["createBlobURL"])(file)
        });
      }

      return file;
    }); // Because we are reusing existing innerImage blocks any reordering
    // done in the media library will be lost so we need to reapply that ordering
    // once the new image blocks are merged in with existing.

    const newOrderMap = processedImages.reduce((result, image, index) => (result[image.id] = index, result), {});
    const existingImageBlocks = !newFileUploads ? innerBlockImages.filter(block => processedImages.find(img => img.id === block.attributes.id)) : innerBlockImages;
    const newImageList = processedImages.filter(img => !existingImageBlocks.find(existingImg => img.id === existingImg.attributes.id));
    const newBlocks = newImageList.map(image => {
      return Object(external_gc_blocks_["createBlock"])('core/image', {
        id: image.id,
        url: image.url,
        caption: image.caption,
        alt: image.alt
      });
    });
    replaceInnerBlocks(clientId, Object(external_lodash_["concat"])(existingImageBlocks, newBlocks).sort((a, b) => newOrderMap[a.attributes.id] - newOrderMap[b.attributes.id]));
  }

  function onUploadError(message) {
    noticeOperations.removeAllNotices();
    noticeOperations.createErrorNotice(message);
  }

  function setLinkTo(value) {
    setAttributes({
      linkTo: value
    });
    const changedAttributes = {};
    const blocks = [];
    getBlock(clientId).innerBlocks.forEach(block => {
      blocks.push(block.clientId);
      const image = block.attributes.id ? Object(external_lodash_["find"])(imageData, {
        id: block.attributes.id
      }) : null;
      changedAttributes[block.clientId] = utils_getHrefAndDestination(image, value);
    });
    updateBlockAttributes(blocks, changedAttributes, true);
    const linkToText = [...linkOptions].find(linkType => linkType.value === value);
    createSuccessNotice(Object(external_gc_i18n_["sprintf"])(
    /* translators: %s: image size settings */
    Object(external_gc_i18n_["__"])('所有图库图片链接更新为：%s'), linkToText.label), {
      id: 'gallery-attributes-linkTo',
      type: 'snackbar'
    });
  }

  function setColumnsNumber(value) {
    setAttributes({
      columns: value
    });
  }

  function toggleImageCrop() {
    setAttributes({
      imageCrop: !imageCrop
    });
  }

  function getImageCropHelp(checked) {
    return checked ? Object(external_gc_i18n_["__"])('缩略图已被裁切以便对齐。') : Object(external_gc_i18n_["__"])('缩略图未被裁切。');
  }

  function toggleOpenInNewTab(openInNewTab) {
    const newLinkTarget = openInNewTab ? '_blank' : undefined;
    setAttributes({
      linkTarget: newLinkTarget
    });
    const changedAttributes = {};
    const blocks = [];
    getBlock(clientId).innerBlocks.forEach(block => {
      blocks.push(block.clientId);
      changedAttributes[block.clientId] = getUpdatedLinkTargetSettings(newLinkTarget, block.attributes);
    });
    updateBlockAttributes(blocks, changedAttributes, true);
    const noticeText = openInNewTab ? Object(external_gc_i18n_["__"])('所有图库图片都更新为在新标签页中打开') : Object(external_gc_i18n_["__"])('所有图库图片都更新为不在新标签页中打开');
    createSuccessNotice(noticeText, {
      id: 'gallery-attributes-openInNewTab',
      type: 'snackbar'
    });
  }

  function updateImagesSize(newSizeSlug) {
    setAttributes({
      sizeSlug: newSizeSlug
    });
    const changedAttributes = {};
    const blocks = [];
    getBlock(clientId).innerBlocks.forEach(block => {
      blocks.push(block.clientId);
      const image = block.attributes.id ? Object(external_lodash_["find"])(imageData, {
        id: block.attributes.id
      }) : null;
      changedAttributes[block.clientId] = getImageSizeAttributes(image, newSizeSlug);
    });
    updateBlockAttributes(blocks, changedAttributes, true);
    const imageSize = imageSizeOptions.find(size => size.value === newSizeSlug);
    createSuccessNotice(Object(external_gc_i18n_["sprintf"])(
    /* translators: %s: image size settings */
    Object(external_gc_i18n_["__"])('所有画廊图像大小更新为：%s'), imageSize.label), {
      id: 'gallery-attributes-sizeSlug',
      type: 'snackbar'
    });
  }

  Object(external_gc_element_["useEffect"])(() => {
    // linkTo attribute must be saved so blocks don't break when changing image_default_link_type in options.php
    if (!linkTo) {
      var _window, _window$gc, _window$gc$media, _window$gc$media$view, _window$gc$media$view2, _window$gc$media$view3;

      __unstableMarkNextChangeAsNotPersistent();

      setAttributes({
        linkTo: ((_window = window) === null || _window === void 0 ? void 0 : (_window$gc = _window.gc) === null || _window$gc === void 0 ? void 0 : (_window$gc$media = _window$gc.media) === null || _window$gc$media === void 0 ? void 0 : (_window$gc$media$view = _window$gc$media.view) === null || _window$gc$media$view === void 0 ? void 0 : (_window$gc$media$view2 = _window$gc$media$view.settings) === null || _window$gc$media$view2 === void 0 ? void 0 : (_window$gc$media$view3 = _window$gc$media$view2.defaultProps) === null || _window$gc$media$view3 === void 0 ? void 0 : _window$gc$media$view3.link) || LINK_DESTINATION_NONE
      });
    }
  }, [linkTo]);
  const hasImages = !!images.length;
  const hasImageIds = hasImages && images.some(image => !!image.id);
  const imagesUploading = images.some(img => {
    var _img$url;

    return !img.id && ((_img$url = img.url) === null || _img$url === void 0 ? void 0 : _img$url.indexOf('blob:')) === 0;
  });
  const mediaPlaceholder = Object(external_gc_element_["createElement"])(external_gc_blockEditor_["MediaPlaceholder"], {
    addToGallery: hasImageIds,
    handleUpload: false,
    isAppender: hasImages,
    disableMediaButtons: hasImages && !isSelected || imagesUploading,
    icon: !hasImages && sharedIcon,
    labels: {
      title: !hasImages && Object(external_gc_i18n_["__"])('画廊'),
      instructions: !hasImages && PLACEHOLDER_TEXT
    },
    onSelect: updateImages,
    accept: "image/*",
    allowedTypes: edit_ALLOWED_MEDIA_TYPES,
    multiple: true,
    value: hasImageIds ? images : {},
    onError: onUploadError,
    notices: hasImages ? undefined : noticeUI
  });
  const blockProps = Object(external_gc_blockEditor_["useBlockProps"])({
    className: classnames_default()(className, 'has-nested-images')
  });

  if (!hasImages) {
    return Object(external_gc_element_["createElement"])(external_gc_primitives_["View"], blockProps, mediaPlaceholder);
  }

  const hasLinkTo = linkTo && linkTo !== 'none';
  return Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InspectorControls"], null, Object(external_gc_element_["createElement"])(external_gc_components_["PanelBody"], {
    title: Object(external_gc_i18n_["__"])('相册设置')
  }, images.length > 1 && Object(external_gc_element_["createElement"])(external_gc_components_["RangeControl"], Object(esm_extends["a" /* default */])({
    label: Object(external_gc_i18n_["__"])('栏目'),
    value: columns ? columns : defaultColumnsNumber(images.length),
    onChange: setColumnsNumber,
    min: 1,
    max: Math.min(MAX_COLUMNS, images.length)
  }, MOBILE_CONTROL_PROPS_RANGE_CONTROL, {
    required: true
  })), Object(external_gc_element_["createElement"])(external_gc_components_["ToggleControl"], {
    label: Object(external_gc_i18n_["__"])('裁剪图片'),
    checked: !!imageCrop,
    onChange: toggleImageCrop,
    help: getImageCropHelp
  }), Object(external_gc_element_["createElement"])(external_gc_components_["SelectControl"], {
    label: Object(external_gc_i18n_["__"])('链接至'),
    value: linkTo,
    onChange: setLinkTo,
    options: linkOptions,
    hideCancelButton: true
  }), hasLinkTo && Object(external_gc_element_["createElement"])(external_gc_components_["ToggleControl"], {
    label: Object(external_gc_i18n_["__"])('在新窗口打开'),
    checked: linkTarget === '_blank',
    onChange: toggleOpenInNewTab
  }), (imageSizeOptions === null || imageSizeOptions === void 0 ? void 0 : imageSizeOptions.length) > 0 && Object(external_gc_element_["createElement"])(external_gc_components_["SelectControl"], {
    label: Object(external_gc_i18n_["__"])('图片尺寸'),
    value: sizeSlug,
    options: imageSizeOptions,
    onChange: updateImagesSize,
    hideCancelButton: true
  }), external_gc_element_["Platform"].isWeb && !imageSizeOptions && hasImageIds && Object(external_gc_element_["createElement"])(external_gc_components_["BaseControl"], {
    className: 'gallery-image-sizes'
  }, Object(external_gc_element_["createElement"])(external_gc_components_["BaseControl"].VisualLabel, null, Object(external_gc_i18n_["__"])('图片尺寸')), Object(external_gc_element_["createElement"])(external_gc_primitives_["View"], {
    className: 'gallery-image-sizes__loading'
  }, Object(external_gc_element_["createElement"])(external_gc_components_["Spinner"], null), Object(external_gc_i18n_["__"])('正在加载选项...'))))), noticeUI, Object(external_gc_element_["createElement"])(gallery_gallery, Object(esm_extends["a" /* default */])({}, props, {
    images: images,
    mediaPlaceholder: mediaPlaceholder,
    blockProps: blockProps,
    insertBlocksAfter: insertBlocksAfter
  })));
}

/* harmony default export */ var gallery_edit = (Object(external_gc_compose_["compose"])([external_gc_components_["withNotices"], Object(external_gc_viewport_["withViewportMatch"])({
  isNarrow: '< small'
})])(GalleryEdit));

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/gallery/v1/shared.js
/**
 * External dependencies
 */

const shared_pickRelevantMediaFiles = function (image) {
  let sizeSlug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'large';
  const imageProps = Object(external_lodash_["pick"])(image, ['alt', 'id', 'link', 'caption']);
  imageProps.url = Object(external_lodash_["get"])(image, ['sizes', sizeSlug, 'url']) || Object(external_lodash_["get"])(image, ['media_details', 'sizes', sizeSlug, 'source_url']) || image.url;
  const fullUrl = Object(external_lodash_["get"])(image, ['sizes', 'full', 'url']) || Object(external_lodash_["get"])(image, ['media_details', 'sizes', 'full', 'source_url']);

  if (fullUrl) {
    imageProps.fullUrl = fullUrl;
  }

  return imageProps;
};

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/image.js


/**
 * GeChiUI dependencies
 */

const image_image = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  viewBox: "0 0 24 24",
  xmlns: "http://www.w3.org/2000/svg"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM5 4.5h14c.3 0 .5.2.5.5v8.4l-3-2.9c-.3-.3-.8-.3-1 0L11.9 14 9 12c-.3-.2-.6-.2-.8 0l-3.6 2.6V5c-.1-.3.1-.5.4-.5zm14 15H5c-.3 0-.5-.2-.5-.5v-2.4l4.1-3 3 1.9c.3.2.7.2.9-.1L16 12l3.5 3.4V19c0 .3-.2.5-.5.5z"
}));
/* harmony default export */ var library_image = (image_image);

// EXTERNAL MODULE: ./node_modules/@gechiui/icons/build-module/library/chevron-left.js
var chevron_left = __webpack_require__("KvVw");

// EXTERNAL MODULE: ./node_modules/@gechiui/icons/build-module/library/chevron-right.js
var chevron_right = __webpack_require__("ZUv1");

// EXTERNAL MODULE: ./node_modules/@gechiui/icons/build-module/library/close-small.js
var close_small = __webpack_require__("Mg0k");

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/gallery/v1/constants.js
const v1_constants_LINK_DESTINATION_NONE = 'none';
const v1_constants_LINK_DESTINATION_MEDIA = 'file';
const v1_constants_LINK_DESTINATION_ATTACHMENT = 'post';

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/gallery/v1/gallery-image.js


/**
 * External dependencies
 */


/**
 * GeChiUI dependencies
 */











/**
 * Internal dependencies
 */




const isTemporaryImage = (id, url) => !id && Object(external_gc_blob_["isBlobURL"])(url);

class gallery_image_GalleryImage extends external_gc_element_["Component"] {
  constructor() {
    super(...arguments);
    this.onSelectImage = this.onSelectImage.bind(this);
    this.onRemoveImage = this.onRemoveImage.bind(this);
    this.bindContainer = this.bindContainer.bind(this);
    this.onEdit = this.onEdit.bind(this);
    this.onSelectImageFromLibrary = this.onSelectImageFromLibrary.bind(this);
    this.onSelectCustomURL = this.onSelectCustomURL.bind(this);
    this.state = {
      isEditing: false
    };
  }

  bindContainer(ref) {
    this.container = ref;
  }

  onSelectImage() {
    if (!this.props.isSelected) {
      this.props.onSelect();
    }
  }

  onRemoveImage(event) {
    if (this.container === this.container.ownerDocument.activeElement && this.props.isSelected && [external_gc_keycodes_["BACKSPACE"], external_gc_keycodes_["DELETE"]].indexOf(event.keyCode) !== -1) {
      event.preventDefault();
      this.props.onRemove();
    }
  }

  onEdit() {
    this.setState({
      isEditing: true
    });
  }

  componentDidUpdate() {
    const {
      image,
      url,
      __unstableMarkNextChangeAsNotPersistent
    } = this.props;

    if (image && !url) {
      __unstableMarkNextChangeAsNotPersistent();

      this.props.setAttributes({
        url: image.source_url,
        alt: image.alt_text
      });
    }
  }

  deselectOnBlur() {
    this.props.onDeselect();
  }

  onSelectImageFromLibrary(media) {
    const {
      setAttributes,
      id,
      url,
      alt,
      caption,
      sizeSlug
    } = this.props;

    if (!media || !media.url) {
      return;
    }

    let mediaAttributes = shared_pickRelevantMediaFiles(media, sizeSlug); // If the current image is temporary but an alt text was meanwhile
    // written by the user, make sure the text is not overwritten.

    if (isTemporaryImage(id, url)) {
      if (alt) {
        mediaAttributes = Object(external_lodash_["omit"])(mediaAttributes, ['alt']);
      }
    } // If a caption text was meanwhile written by the user,
    // make sure the text is not overwritten by empty captions.


    if (caption && !Object(external_lodash_["get"])(mediaAttributes, ['caption'])) {
      mediaAttributes = Object(external_lodash_["omit"])(mediaAttributes, ['caption']);
    }

    setAttributes(mediaAttributes);
    this.setState({
      isEditing: false
    });
  }

  onSelectCustomURL(newURL) {
    const {
      setAttributes,
      url
    } = this.props;

    if (newURL !== url) {
      setAttributes({
        url: newURL,
        id: undefined
      });
      this.setState({
        isEditing: false
      });
    }
  }

  render() {
    const {
      url,
      alt,
      id,
      linkTo,
      link,
      isFirstItem,
      isLastItem,
      isSelected,
      caption,
      onRemove,
      onMoveForward,
      onMoveBackward,
      setAttributes,
      'aria-label': ariaLabel
    } = this.props;
    const {
      isEditing
    } = this.state;
    let href;

    switch (linkTo) {
      case v1_constants_LINK_DESTINATION_MEDIA:
        href = url;
        break;

      case v1_constants_LINK_DESTINATION_ATTACHMENT:
        href = link;
        break;
    }

    const img = // Disable reason: Image itself is not meant to be interactive, but should
    // direct image selection and unfocus caption fields.

    /* eslint-disable jsx-a11y/no-noninteractive-element-interactions */
    Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])("img", {
      src: url,
      alt: alt,
      "data-id": id,
      onKeyDown: this.onRemoveImage,
      tabIndex: "0",
      "aria-label": ariaLabel,
      ref: this.bindContainer
    }), Object(external_gc_blob_["isBlobURL"])(url) && Object(external_gc_element_["createElement"])(external_gc_components_["Spinner"], null))
    /* eslint-enable jsx-a11y/no-noninteractive-element-interactions */
    ;
    const className = classnames_default()({
      'is-selected': isSelected,
      'is-transient': Object(external_gc_blob_["isBlobURL"])(url)
    });
    return (// eslint-disable-next-line jsx-a11y/click-events-have-key-events, jsx-a11y/no-noninteractive-element-interactions
      Object(external_gc_element_["createElement"])("figure", {
        className: className,
        onClick: this.onSelectImage,
        onFocus: this.onSelectImage
      }, !isEditing && (href ? Object(external_gc_element_["createElement"])("a", {
        href: href
      }, img) : img), isEditing && Object(external_gc_element_["createElement"])(external_gc_blockEditor_["MediaPlaceholder"], {
        labels: {
          title: Object(external_gc_i18n_["__"])('编辑库图片')
        },
        icon: library_image,
        onSelect: this.onSelectImageFromLibrary,
        onSelectURL: this.onSelectCustomURL,
        accept: "image/*",
        allowedTypes: ['image'],
        value: {
          id,
          src: url
        }
      }), Object(external_gc_element_["createElement"])(external_gc_components_["ButtonGroup"], {
        className: "block-library-gallery-item__inline-menu is-left"
      }, Object(external_gc_element_["createElement"])(external_gc_components_["Button"], {
        icon: chevron_left["a" /* default */],
        onClick: isFirstItem ? undefined : onMoveBackward,
        label: Object(external_gc_i18n_["__"])('后移图片'),
        "aria-disabled": isFirstItem,
        disabled: !isSelected
      }), Object(external_gc_element_["createElement"])(external_gc_components_["Button"], {
        icon: chevron_right["a" /* default */],
        onClick: isLastItem ? undefined : onMoveForward,
        label: Object(external_gc_i18n_["__"])('前移图片'),
        "aria-disabled": isLastItem,
        disabled: !isSelected
      })), Object(external_gc_element_["createElement"])(external_gc_components_["ButtonGroup"], {
        className: "block-library-gallery-item__inline-menu is-right"
      }, Object(external_gc_element_["createElement"])(external_gc_components_["Button"], {
        icon: library_edit["a" /* default */],
        onClick: this.onEdit,
        label: Object(external_gc_i18n_["__"])('更换图片'),
        disabled: !isSelected
      }), Object(external_gc_element_["createElement"])(external_gc_components_["Button"], {
        icon: close_small["a" /* default */],
        onClick: onRemove,
        label: Object(external_gc_i18n_["__"])('移除图片'),
        disabled: !isSelected
      })), !isEditing && (isSelected || caption) && Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"], {
        tagName: "figcaption",
        "aria-label": Object(external_gc_i18n_["__"])('图片说明文字'),
        placeholder: isSelected ? Object(external_gc_i18n_["__"])('添加说明文字') : null,
        value: caption,
        onChange: newCaption => setAttributes({
          caption: newCaption
        }),
        inlineToolbar: true
      }))
    );
  }

}

/* harmony default export */ var gallery_image = (Object(external_gc_compose_["compose"])([Object(external_gc_data_["withSelect"])((select, ownProps) => {
  const {
    getMedia
  } = select(external_gc_coreData_["store"]);
  const {
    id
  } = ownProps;
  return {
    image: id ? getMedia(parseInt(id, 10)) : null
  };
}), Object(external_gc_data_["withDispatch"])(dispatch => {
  const {
    __unstableMarkNextChangeAsNotPersistent
  } = dispatch(external_gc_blockEditor_["store"]);
  return {
    __unstableMarkNextChangeAsNotPersistent
  };
})])(gallery_image_GalleryImage));

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/gallery/v1/gallery.js



/**
 * External dependencies
 */

/**
 * GeChiUI dependencies
 */





/**
 * Internal dependencies
 */



const gallery_Gallery = props => {
  const {
    attributes,
    isSelected,
    setAttributes,
    selectedImage,
    mediaPlaceholder,
    onMoveBackward,
    onMoveForward,
    onRemoveImage,
    onSelectImage,
    onDeselectImage,
    onSetImageAttributes,
    insertBlocksAfter,
    blockProps
  } = props;
  const {
    align,
    columns = defaultColumnsNumberV1(attributes),
    caption,
    imageCrop,
    images
  } = attributes;
  return Object(external_gc_element_["createElement"])("figure", Object(esm_extends["a" /* default */])({}, blockProps, {
    className: classnames_default()(blockProps.className, {
      [`align${align}`]: align,
      [`columns-${columns}`]: columns,
      'is-cropped': imageCrop
    })
  }), Object(external_gc_element_["createElement"])("ul", {
    className: "blocks-gallery-grid"
  }, images.map((img, index) => {
    const ariaLabel = Object(external_gc_i18n_["sprintf"])(
    /* translators: 1: the order number of the image. 2: the total number of images. */
    Object(external_gc_i18n_["__"])('相册中的%1$d/%2$d个图片'), index + 1, images.length);
    return Object(external_gc_element_["createElement"])("li", {
      className: "blocks-gallery-item",
      key: img.id ? `${img.id}-${index}` : img.url
    }, Object(external_gc_element_["createElement"])(gallery_image, {
      url: img.url,
      alt: img.alt,
      id: img.id,
      isFirstItem: index === 0,
      isLastItem: index + 1 === images.length,
      isSelected: isSelected && selectedImage === index,
      onMoveBackward: onMoveBackward(index),
      onMoveForward: onMoveForward(index),
      onRemove: onRemoveImage(index),
      onSelect: onSelectImage(index),
      onDeselect: onDeselectImage(index),
      setAttributes: attrs => onSetImageAttributes(index, attrs),
      caption: img.caption,
      "aria-label": ariaLabel,
      sizeSlug: attributes.sizeSlug
    }));
  })), mediaPlaceholder, Object(external_gc_element_["createElement"])(gallery_RichTextVisibilityHelper, {
    isHidden: !isSelected && external_gc_blockEditor_["RichText"].isEmpty(caption),
    tagName: "figcaption",
    className: "blocks-gallery-caption",
    "aria-label": Object(external_gc_i18n_["__"])('图库说明文字'),
    placeholder: Object(external_gc_i18n_["__"])('编写画廊说明…'),
    value: caption,
    onChange: value => setAttributes({
      caption: value
    }),
    inlineToolbar: true,
    __unstableOnSplitAtEnd: () => insertBlocksAfter(Object(external_gc_blocks_["createBlock"])('core/paragraph'))
  }));
};

function gallery_RichTextVisibilityHelper(_ref) {
  let {
    isHidden,
    ...richTextProps
  } = _ref;
  return isHidden ? Object(external_gc_element_["createElement"])(external_gc_components_["VisuallyHidden"], Object(esm_extends["a" /* default */])({
    as: external_gc_blockEditor_["RichText"]
  }, richTextProps)) : Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"], richTextProps);
}

/* harmony default export */ var v1_gallery = (gallery_Gallery);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/gallery/v1/edit.js



/**
 * External dependencies
 */

/**
 * GeChiUI dependencies
 */











/**
 * Internal dependencies
 */






const edit_MAX_COLUMNS = 8;
const edit_linkOptions = [{
  value: v1_constants_LINK_DESTINATION_ATTACHMENT,
  label: Object(external_gc_i18n_["__"])('附件页面')
}, {
  value: v1_constants_LINK_DESTINATION_MEDIA,
  label: Object(external_gc_i18n_["__"])('媒体文件')
}, {
  value: v1_constants_LINK_DESTINATION_NONE,
  label: Object(external_gc_i18n_["__"])('无')
}];
const v1_edit_ALLOWED_MEDIA_TYPES = ['image'];
const edit_PLACEHOLDER_TEXT = external_gc_element_["Platform"].select({
  web: Object(external_gc_i18n_["__"])('拖动图片，上传新图片或从您的媒体库中选择文件。'),
  native: Object(external_gc_i18n_["__"])('添加媒体')
});
const edit_MOBILE_CONTROL_PROPS_RANGE_CONTROL = external_gc_element_["Platform"].select({
  web: {},
  native: {
    type: 'stepper'
  }
});

function edit_GalleryEdit(props) {
  const {
    attributes,
    clientId,
    isSelected,
    noticeUI,
    noticeOperations,
    onFocus
  } = props;
  const {
    columns = defaultColumnsNumberV1(attributes),
    imageCrop,
    images,
    linkTo,
    sizeSlug
  } = attributes;
  const [selectedImage, setSelectedImage] = Object(external_gc_element_["useState"])();
  const [attachmentCaptions, setAttachmentCaptions] = Object(external_gc_element_["useState"])();
  const {
    __unstableMarkNextChangeAsNotPersistent
  } = Object(external_gc_data_["useDispatch"])(external_gc_blockEditor_["store"]);
  const {
    imageSizes,
    mediaUpload,
    getMedia,
    wasBlockJustInserted
  } = Object(external_gc_data_["useSelect"])(select => {
    const settings = select(external_gc_blockEditor_["store"]).getSettings();
    return {
      imageSizes: settings.imageSizes,
      mediaUpload: settings.mediaUpload,
      getMedia: select(external_gc_coreData_["store"]).getMedia,
      wasBlockJustInserted: select(external_gc_blockEditor_["store"]).wasBlockJustInserted(clientId, 'inserter_menu')
    };
  });
  const resizedImages = Object(external_gc_element_["useMemo"])(() => {
    if (isSelected) {
      return Object(external_lodash_["reduce"])(attributes.ids, (currentResizedImages, id) => {
        if (!id) {
          return currentResizedImages;
        }

        const image = getMedia(id);
        const sizes = Object(external_lodash_["reduce"])(imageSizes, (currentSizes, size) => {
          const defaultUrl = Object(external_lodash_["get"])(image, ['sizes', size.slug, 'url']);
          const mediaDetailsUrl = Object(external_lodash_["get"])(image, ['media_details', 'sizes', size.slug, 'source_url']);
          return { ...currentSizes,
            [size.slug]: defaultUrl || mediaDetailsUrl
          };
        }, {});
        return { ...currentResizedImages,
          [parseInt(id, 10)]: sizes
        };
      }, {});
    }

    return {};
  }, [isSelected, attributes.ids, imageSizes]);

  function onFocusGalleryCaption() {
    setSelectedImage();
  }

  function setAttributes(newAttrs) {
    if (newAttrs.ids) {
      throw new Error('The "ids" attribute should not be changed directly. It is managed automatically when "images" attribute changes');
    }

    if (newAttrs.images) {
      newAttrs = { ...newAttrs,
        // Unlike images[ n ].id which is a string, always ensure the
        // ids array contains numbers as per its attribute type.
        ids: Object(external_lodash_["map"])(newAttrs.images, _ref => {
          let {
            id
          } = _ref;
          return parseInt(id, 10);
        })
      };
    }

    props.setAttributes(newAttrs);
  }

  function onSelectImage(index) {
    return () => {
      setSelectedImage(index);
    };
  }

  function onDeselectImage() {
    return () => {
      setSelectedImage();
    };
  }

  function onMove(oldIndex, newIndex) {
    const newImages = [...images];
    newImages.splice(newIndex, 1, images[oldIndex]);
    newImages.splice(oldIndex, 1, images[newIndex]);
    setSelectedImage(newIndex);
    setAttributes({
      images: newImages
    });
  }

  function onMoveForward(oldIndex) {
    return () => {
      if (oldIndex === images.length - 1) {
        return;
      }

      onMove(oldIndex, oldIndex + 1);
    };
  }

  function onMoveBackward(oldIndex) {
    return () => {
      if (oldIndex === 0) {
        return;
      }

      onMove(oldIndex, oldIndex - 1);
    };
  }

  function onRemoveImage(index) {
    return () => {
      const newImages = Object(external_lodash_["filter"])(images, (img, i) => index !== i);
      setSelectedImage();
      setAttributes({
        images: newImages,
        columns: attributes.columns ? Math.min(newImages.length, attributes.columns) : attributes.columns
      });
    };
  }

  function selectCaption(newImage) {
    // The image id in both the images and attachmentCaptions arrays is a
    // string, so ensure comparison works correctly by converting the
    // newImage.id to a string.
    const newImageId = Object(external_lodash_["toString"])(newImage.id);
    const currentImage = Object(external_lodash_["find"])(images, {
      id: newImageId
    });
    const currentImageCaption = currentImage ? currentImage.caption : newImage.caption;

    if (!attachmentCaptions) {
      return currentImageCaption;
    }

    const attachment = Object(external_lodash_["find"])(attachmentCaptions, {
      id: newImageId
    }); // if the attachment caption is updated

    if (attachment && attachment.caption !== newImage.caption) {
      return newImage.caption;
    }

    return currentImageCaption;
  }

  function onSelectImages(newImages) {
    setAttachmentCaptions(newImages.map(newImage => ({
      // Store the attachmentCaption id as a string for consistency
      // with the type of the id in the images attribute.
      id: Object(external_lodash_["toString"])(newImage.id),
      caption: newImage.caption
    })));
    setAttributes({
      images: newImages.map(newImage => ({ ...shared_pickRelevantMediaFiles(newImage, sizeSlug),
        caption: selectCaption(newImage, images, attachmentCaptions),
        // The id value is stored in a data attribute, so when the
        // block is parsed it's converted to a string. Converting
        // to a string here ensures it's type is consistent.
        id: Object(external_lodash_["toString"])(newImage.id)
      })),
      columns: attributes.columns ? Math.min(newImages.length, attributes.columns) : attributes.columns
    });
  }

  function onUploadError(message) {
    noticeOperations.removeAllNotices();
    noticeOperations.createErrorNotice(message);
  }

  function setLinkTo(value) {
    setAttributes({
      linkTo: value
    });
  }

  function setColumnsNumber(value) {
    setAttributes({
      columns: value
    });
  }

  function toggleImageCrop() {
    setAttributes({
      imageCrop: !imageCrop
    });
  }

  function getImageCropHelp(checked) {
    return checked ? Object(external_gc_i18n_["__"])('缩略图已被裁切以便对齐。') : Object(external_gc_i18n_["__"])('缩略图未被裁切。');
  }

  function setImageAttributes(index, newAttributes) {
    if (!images[index]) {
      return;
    }

    setAttributes({
      images: [...images.slice(0, index), { ...images[index],
        ...newAttributes
      }, ...images.slice(index + 1)]
    });
  }

  function getImagesSizeOptions() {
    return Object(external_lodash_["map"])(Object(external_lodash_["filter"])(imageSizes, _ref2 => {
      let {
        slug
      } = _ref2;
      return Object(external_lodash_["some"])(resizedImages, sizes => sizes[slug]);
    }), _ref3 => {
      let {
        name,
        slug
      } = _ref3;
      return {
        value: slug,
        label: name
      };
    });
  }

  function updateImagesSize(newSizeSlug) {
    const updatedImages = Object(external_lodash_["map"])(images, image => {
      if (!image.id) {
        return image;
      }

      const url = Object(external_lodash_["get"])(resizedImages, [parseInt(image.id, 10), newSizeSlug]);
      return { ...image,
        ...(url && {
          url
        })
      };
    });
    setAttributes({
      images: updatedImages,
      sizeSlug: newSizeSlug
    });
  }

  Object(external_gc_element_["useEffect"])(() => {
    if (external_gc_element_["Platform"].OS === 'web' && images && images.length > 0 && Object(external_lodash_["every"])(images, _ref4 => {
      let {
        url
      } = _ref4;
      return Object(external_gc_blob_["isBlobURL"])(url);
    })) {
      const filesList = Object(external_lodash_["map"])(images, _ref5 => {
        let {
          url
        } = _ref5;
        return Object(external_gc_blob_["getBlobByURL"])(url);
      });
      Object(external_lodash_["forEach"])(images, _ref6 => {
        let {
          url
        } = _ref6;
        return Object(external_gc_blob_["revokeBlobURL"])(url);
      });
      mediaUpload({
        filesList,
        onFileChange: onSelectImages,
        allowedTypes: ['image']
      });
    }
  }, []);
  Object(external_gc_element_["useEffect"])(() => {
    // Deselect images when deselecting the block
    if (!isSelected) {
      setSelectedImage();
    }
  }, [isSelected]);
  Object(external_gc_element_["useEffect"])(() => {
    // linkTo attribute must be saved so blocks don't break when changing
    // image_default_link_type in options.php
    if (!linkTo) {
      var _window, _window$gc, _window$gc$media, _window$gc$media$view, _window$gc$media$view2, _window$gc$media$view3;

      __unstableMarkNextChangeAsNotPersistent();

      setAttributes({
        linkTo: ((_window = window) === null || _window === void 0 ? void 0 : (_window$gc = _window.gc) === null || _window$gc === void 0 ? void 0 : (_window$gc$media = _window$gc.media) === null || _window$gc$media === void 0 ? void 0 : (_window$gc$media$view = _window$gc$media.view) === null || _window$gc$media$view === void 0 ? void 0 : (_window$gc$media$view2 = _window$gc$media$view.settings) === null || _window$gc$media$view2 === void 0 ? void 0 : (_window$gc$media$view3 = _window$gc$media$view2.defaultProps) === null || _window$gc$media$view3 === void 0 ? void 0 : _window$gc$media$view3.link) || v1_constants_LINK_DESTINATION_NONE
      });
    }
  }, [linkTo]);
  const hasImages = !!images.length;
  const hasImageIds = hasImages && images.some(image => !!image.id);
  const mediaPlaceholder = Object(external_gc_element_["createElement"])(external_gc_blockEditor_["MediaPlaceholder"], {
    addToGallery: hasImageIds,
    isAppender: hasImages,
    disableMediaButtons: hasImages && !isSelected,
    icon: !hasImages && sharedIcon,
    labels: {
      title: !hasImages && Object(external_gc_i18n_["__"])('画廊'),
      instructions: !hasImages && edit_PLACEHOLDER_TEXT
    },
    onSelect: onSelectImages,
    accept: "image/*",
    allowedTypes: v1_edit_ALLOWED_MEDIA_TYPES,
    multiple: true,
    value: hasImageIds ? images : {},
    onError: onUploadError,
    notices: hasImages ? undefined : noticeUI,
    onFocus: onFocus,
    autoOpenMediaUpload: !hasImages && isSelected && wasBlockJustInserted
  });
  const blockProps = Object(external_gc_blockEditor_["useBlockProps"])();

  if (!hasImages) {
    return Object(external_gc_element_["createElement"])(external_gc_primitives_["View"], blockProps, mediaPlaceholder);
  }

  const imageSizeOptions = getImagesSizeOptions();
  const shouldShowSizeOptions = hasImages && !Object(external_lodash_["isEmpty"])(imageSizeOptions);
  return Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InspectorControls"], null, Object(external_gc_element_["createElement"])(external_gc_components_["PanelBody"], {
    title: Object(external_gc_i18n_["__"])('相册设置')
  }, images.length > 1 && Object(external_gc_element_["createElement"])(external_gc_components_["RangeControl"], Object(esm_extends["a" /* default */])({
    label: Object(external_gc_i18n_["__"])('栏目'),
    value: columns,
    onChange: setColumnsNumber,
    min: 1,
    max: Math.min(edit_MAX_COLUMNS, images.length)
  }, edit_MOBILE_CONTROL_PROPS_RANGE_CONTROL, {
    required: true
  })), Object(external_gc_element_["createElement"])(external_gc_components_["ToggleControl"], {
    label: Object(external_gc_i18n_["__"])('裁剪图片'),
    checked: !!imageCrop,
    onChange: toggleImageCrop,
    help: getImageCropHelp
  }), Object(external_gc_element_["createElement"])(external_gc_components_["SelectControl"], {
    label: Object(external_gc_i18n_["__"])('链接至'),
    value: linkTo,
    onChange: setLinkTo,
    options: edit_linkOptions,
    hideCancelButton: true
  }), shouldShowSizeOptions && Object(external_gc_element_["createElement"])(external_gc_components_["SelectControl"], {
    label: Object(external_gc_i18n_["__"])('图片尺寸'),
    value: sizeSlug,
    options: imageSizeOptions,
    onChange: updateImagesSize,
    hideCancelButton: true
  }))), noticeUI, Object(external_gc_element_["createElement"])(v1_gallery, Object(esm_extends["a" /* default */])({}, props, {
    selectedImage: selectedImage,
    mediaPlaceholder: mediaPlaceholder,
    onMoveBackward: onMoveBackward,
    onMoveForward: onMoveForward,
    onRemoveImage: onRemoveImage,
    onSelectImage: onSelectImage,
    onDeselectImage: onDeselectImage,
    onSetImageAttributes: setImageAttributes,
    blockProps: blockProps // This prop is used by gallery.native.js.
    ,
    onFocusGalleryCaption: onFocusGalleryCaption
  })));
}

/* harmony default export */ var v1_edit = (Object(external_gc_compose_["compose"])([external_gc_components_["withNotices"], Object(external_gc_viewport_["withViewportMatch"])({
  isNarrow: '< small'
})])(edit_GalleryEdit));

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/gallery/edit-wrapper.js


/**
 * GeChiUI dependencies
 */


/**
 * Internal dependencies
 */




/*
 * Using a wrapper around the logic to load the edit for v1 of Gallery block
 * or the refactored version with InnerBlocks. This is to prevent conditional
 * use of hooks lint errors if adding this logic to the top of the edit component.
 */

function GalleryEditWrapper(props) {
  if (!isGalleryV2Enabled()) {
    return Object(external_gc_element_["createElement"])(v1_edit, props);
  }

  return Object(external_gc_element_["createElement"])(gallery_edit, props);
}

/* harmony default export */ var edit_wrapper = (Object(external_gc_compose_["compose"])([external_gc_components_["withNotices"]])(GalleryEditWrapper));

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/gallery/v1/save.js


/**
 * GeChiUI dependencies
 */

/**
 * Internal dependencies
 */



function saveV1(_ref) {
  let {
    attributes
  } = _ref;
  const {
    images,
    columns = defaultColumnsNumberV1(attributes),
    imageCrop,
    caption,
    linkTo
  } = attributes;
  const className = `columns-${columns} ${imageCrop ? 'is-cropped' : ''}`;
  return Object(external_gc_element_["createElement"])("figure", external_gc_blockEditor_["useBlockProps"].save({
    className
  }), Object(external_gc_element_["createElement"])("ul", {
    className: "blocks-gallery-grid"
  }, images.map(image => {
    let href;

    switch (linkTo) {
      case v1_constants_LINK_DESTINATION_MEDIA:
        href = image.fullUrl || image.url;
        break;

      case v1_constants_LINK_DESTINATION_ATTACHMENT:
        href = image.link;
        break;
    }

    const img = Object(external_gc_element_["createElement"])("img", {
      src: image.url,
      alt: image.alt,
      "data-id": image.id,
      "data-full-url": image.fullUrl,
      "data-link": image.link,
      className: image.id ? `gc-image-${image.id}` : null
    });
    return Object(external_gc_element_["createElement"])("li", {
      key: image.id || image.url,
      className: "blocks-gallery-item"
    }, Object(external_gc_element_["createElement"])("figure", null, href ? Object(external_gc_element_["createElement"])("a", {
      href: href
    }, img) : img, !external_gc_blockEditor_["RichText"].isEmpty(image.caption) && Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"].Content, {
      tagName: "figcaption",
      className: "blocks-gallery-item__caption",
      value: image.caption
    })));
  })), !external_gc_blockEditor_["RichText"].isEmpty(caption) && Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"].Content, {
    tagName: "figcaption",
    className: "blocks-gallery-caption",
    value: caption
  }));
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/gallery/save.js


/**
 * External dependencies
 */

/**
 * GeChiUI dependencies
 */


/**
 * Internal dependencies
 */



function saveWithInnerBlocks(_ref) {
  let {
    attributes
  } = _ref;

  if (!isGalleryV2Enabled()) {
    return saveV1({
      attributes
    });
  }

  const {
    caption,
    columns,
    imageCrop
  } = attributes;
  const className = classnames_default()('has-nested-images', {
    [`columns-${columns}`]: columns !== undefined,
    [`columns-default`]: columns === undefined,
    'is-cropped': imageCrop
  });
  const blockProps = external_gc_blockEditor_["useBlockProps"].save({
    className
  });
  const innerBlocksProps = external_gc_blockEditor_["useInnerBlocksProps"].save(blockProps);
  return Object(external_gc_element_["createElement"])("figure", innerBlocksProps, innerBlocksProps.children, !external_gc_blockEditor_["RichText"].isEmpty(caption) && Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"].Content, {
    tagName: "figcaption",
    className: "blocks-gallery-caption",
    value: caption
  }));
}

// EXTERNAL MODULE: external ["gc","hooks"]
var external_gc_hooks_ = __webpack_require__("kZIl");

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/gallery/transforms.js
/**
 * External dependencies
 */

/**
 * GeChiUI dependencies
 */




/**
 * Internal dependencies
 */





const parseShortcodeIds = ids => {
  if (!ids) {
    return [];
  }

  return ids.split(',').map(id => parseInt(id, 10));
};
/**
 * Third party block plugins don't have an easy way to detect if the
 * innerBlocks version of the Gallery is running when they run a
 * 3rdPartyBlock -> GalleryBlock transform so this tranform filter
 * will handle this. Once the innerBlocks version is the default
 * in a core release, this could be deprecated and removed after
 * plugin authors have been given time to update transforms.
 *
 * @typedef  {Object} Attributes
 * @typedef  {Object} Block
 * @property {Attributes} attributes The attributes of the block.
 * @param    {Block}      block      The transformed block.
 * @return   {Block}                 The transformed block.
 */


function updateThirdPartyTransformToGallery(block) {
  var _block$attributes;

  if (isGalleryV2Enabled() && block.name === 'core/gallery' && ((_block$attributes = block.attributes) === null || _block$attributes === void 0 ? void 0 : _block$attributes.images.length) > 0) {
    const innerBlocks = block.attributes.images.map(_ref => {
      let {
        url,
        id,
        alt
      } = _ref;
      return Object(external_gc_blocks_["createBlock"])('core/image', {
        url,
        id: id ? parseInt(id, 10) : null,
        alt,
        sizeSlug: block.attributes.sizeSlug,
        linkDestination: block.attributes.linkDestination
      });
    });
    delete block.attributes.ids;
    delete block.attributes.images;
    block.innerBlocks = innerBlocks;
  }

  return block;
}

Object(external_gc_hooks_["addFilter"])('blocks.switchToBlockType.transformedBlock', 'core/gallery/update-third-party-transform-to', updateThirdPartyTransformToGallery);
/**
 * Third party block plugins don't have an easy way to detect if the
 * innerBlocks version of the Gallery is running when they run a
 * GalleryBlock -> 3rdPartyBlock transform so this transform filter
 * will handle this. Once the innerBlocks version is the default
 * in a core release, this could be deprecated and removed after
 * plugin authors have been given time to update transforms.
 *
 * @typedef  {Object} Attributes
 * @typedef  {Object} Block
 * @property {Attributes} attributes The attributes of the block.
 * @param    {Block}      toBlock    The block to transform to.
 * @param    {Block[]}    fromBlocks The blocks to transform from.
 * @return   {Block}                 The transformed block.
 */

function updateThirdPartyTransformFromGallery(toBlock, fromBlocks) {
  const from = Array.isArray(fromBlocks) ? fromBlocks : [fromBlocks];
  const galleryBlock = from.find(transformedBlock => {
    var _transformedBlock$att;

    return transformedBlock.name === 'core/gallery' && transformedBlock.innerBlocks.length > 0 && !((_transformedBlock$att = transformedBlock.attributes.images) !== null && _transformedBlock$att !== void 0 && _transformedBlock$att.length) > 0 && !toBlock.name.includes('core/');
  });

  if (galleryBlock) {
    const images = galleryBlock.innerBlocks.map(_ref2 => {
      let {
        attributes: {
          url,
          id,
          alt
        }
      } = _ref2;
      return {
        url,
        id: id ? parseInt(id, 10) : null,
        alt
      };
    });
    const ids = images.map(_ref3 => {
      let {
        id
      } = _ref3;
      return id;
    });
    galleryBlock.attributes.images = images;
    galleryBlock.attributes.ids = ids;
  }

  return toBlock;
}

Object(external_gc_hooks_["addFilter"])('blocks.switchToBlockType.transformedBlock', 'core/gallery/update-third-party-transform-from', updateThirdPartyTransformFromGallery);
const gallery_transforms_transforms = {
  from: [{
    type: 'block',
    isMultiBlock: true,
    blocks: ['core/image'],
    transform: attributes => {
      // Init the align and size from the first item which may be either the placeholder or an image.
      let {
        align,
        sizeSlug
      } = attributes[0]; // Loop through all the images and check if they have the same align and size.

      align = Object(external_lodash_["every"])(attributes, ['align', align]) ? align : undefined;
      sizeSlug = Object(external_lodash_["every"])(attributes, ['sizeSlug', sizeSlug]) ? sizeSlug : undefined;
      const validImages = Object(external_lodash_["filter"])(attributes, _ref4 => {
        let {
          url
        } = _ref4;
        return url;
      });

      if (isGalleryV2Enabled()) {
        const innerBlocks = validImages.map(image => {
          return Object(external_gc_blocks_["createBlock"])('core/image', image);
        });
        return Object(external_gc_blocks_["createBlock"])('core/gallery', {
          align,
          sizeSlug
        }, innerBlocks);
      }

      return Object(external_gc_blocks_["createBlock"])('core/gallery', {
        images: validImages.map(_ref5 => {
          let {
            id,
            url,
            alt,
            caption
          } = _ref5;
          return {
            id: Object(external_lodash_["toString"])(id),
            url,
            alt,
            caption
          };
        }),
        ids: validImages.map(_ref6 => {
          let {
            id
          } = _ref6;
          return parseInt(id, 10);
        }),
        align,
        sizeSlug
      });
    }
  }, {
    type: 'shortcode',
    tag: 'gallery',
    attributes: {
      images: {
        type: 'array',
        shortcode: _ref7 => {
          let {
            named: {
              ids
            }
          } = _ref7;

          if (!isGalleryV2Enabled()) {
            return parseShortcodeIds(ids).map(id => ({
              id: Object(external_lodash_["toString"])(id)
            }));
          }
        }
      },
      ids: {
        type: 'array',
        shortcode: _ref8 => {
          let {
            named: {
              ids
            }
          } = _ref8;

          if (!isGalleryV2Enabled()) {
            return parseShortcodeIds(ids);
          }
        }
      },
      shortCodeTransforms: {
        type: 'array',
        shortcode: _ref9 => {
          let {
            named: {
              ids
            }
          } = _ref9;

          if (isGalleryV2Enabled()) {
            return parseShortcodeIds(ids).map(id => ({
              id: parseInt(id)
            }));
          }
        }
      },
      columns: {
        type: 'number',
        shortcode: _ref10 => {
          let {
            named: {
              columns = '3'
            }
          } = _ref10;
          return parseInt(columns, 10);
        }
      },
      linkTo: {
        type: 'string',
        shortcode: _ref11 => {
          let {
            named: {
              link
            }
          } = _ref11;

          if (!isGalleryV2Enabled()) {
            switch (link) {
              case 'post':
                return v1_constants_LINK_DESTINATION_ATTACHMENT;

              case 'file':
                return v1_constants_LINK_DESTINATION_MEDIA;

              default:
                return v1_constants_LINK_DESTINATION_ATTACHMENT;
            }
          }

          switch (link) {
            case 'post':
              return LINK_DESTINATION_ATTACHMENT;

            case 'file':
              return LINK_DESTINATION_MEDIA;

            default:
              return LINK_DESTINATION_NONE;
          }
        }
      }
    },

    isMatch(_ref12) {
      let {
        named
      } = _ref12;
      return undefined !== named.ids;
    }

  }, {
    // When created by drag and dropping multiple files on an insertion point. Because multiple
    // files must not be transformed to a gallery when dropped within a gallery there is another transform
    // within the image block to handle that case. Therefore this transform has to have priority 1
    // set so that it overrrides the image block transformation when mulitple images are dropped outside
    // of a gallery block.
    type: 'files',
    priority: 1,

    isMatch(files) {
      return files.length !== 1 && Object(external_lodash_["every"])(files, file => file.type.indexOf('image/') === 0);
    },

    transform(files) {
      if (isGalleryV2Enabled()) {
        const innerBlocks = files.map(file => Object(external_gc_blocks_["createBlock"])('core/image', {
          url: Object(external_gc_blob_["createBlobURL"])(file)
        }));
        return Object(external_gc_blocks_["createBlock"])('core/gallery', {}, innerBlocks);
      }

      const block = Object(external_gc_blocks_["createBlock"])('core/gallery', {
        images: files.map(file => pickRelevantMediaFiles({
          url: Object(external_gc_blob_["createBlobURL"])(file)
        }))
      });
      return block;
    }

  }],
  to: [{
    type: 'block',
    blocks: ['core/image'],
    transform: (_ref13, innerBlocks) => {
      let {
        align,
        images,
        ids,
        sizeSlug
      } = _ref13;

      if (isGalleryV2Enabled()) {
        if (innerBlocks.length > 0) {
          return innerBlocks.map(_ref14 => {
            let {
              attributes: {
                id,
                url,
                alt,
                caption,
                sizeSlug: imageSizeSlug,
                linkDestination,
                href,
                linkTarget
              }
            } = _ref14;
            return Object(external_gc_blocks_["createBlock"])('core/image', {
              id,
              url,
              alt,
              caption,
              sizeSlug: imageSizeSlug,
              align,
              linkDestination,
              href,
              linkTarget
            });
          });
        }

        return Object(external_gc_blocks_["createBlock"])('core/image', {
          align
        });
      }

      if (images.length > 0) {
        return images.map((_ref15, index) => {
          let {
            url,
            alt,
            caption
          } = _ref15;
          return Object(external_gc_blocks_["createBlock"])('core/image', {
            id: ids[index],
            url,
            alt,
            caption,
            align,
            sizeSlug
          });
        });
      }

      return Object(external_gc_blocks_["createBlock"])('core/image', {
        align
      });
    }
  }]
};
/* harmony default export */ var gallery_transforms = (gallery_transforms_transforms);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/gallery/index.js
/**
 * GeChiUI dependencies
 */

/**
 * Internal dependencies
 */



const gallery_metadata = {
  apiVersion: 2,
  name: "core/gallery",
  title: "画廊",
  category: "media",
  description: "在相册中展示多张图片。",
  keywords: ["images", "photos"],
  textdomain: "default",
  attributes: {
    images: {
      type: "array",
      "default": [],
      source: "query",
      selector: ".blocks-gallery-item",
      query: {
        url: {
          type: "string",
          source: "attribute",
          selector: "img",
          attribute: "src"
        },
        fullUrl: {
          type: "string",
          source: "attribute",
          selector: "img",
          attribute: "data-full-url"
        },
        link: {
          type: "string",
          source: "attribute",
          selector: "img",
          attribute: "data-link"
        },
        alt: {
          type: "string",
          source: "attribute",
          selector: "img",
          attribute: "alt",
          "default": ""
        },
        id: {
          type: "string",
          source: "attribute",
          selector: "img",
          attribute: "data-id"
        },
        caption: {
          type: "string",
          source: "html",
          selector: ".blocks-gallery-item__caption"
        }
      }
    },
    ids: {
      type: "array",
      items: {
        type: "number"
      },
      "default": []
    },
    shortCodeTransforms: {
      type: "array",
      "default": [],
      items: {
        type: "object"
      }
    },
    columns: {
      type: "number",
      minimum: 1,
      maximum: 8
    },
    caption: {
      type: "string",
      source: "html",
      selector: ".blocks-gallery-caption"
    },
    imageCrop: {
      type: "boolean",
      "default": true
    },
    fixedHeight: {
      type: "boolean",
      "default": true
    },
    linkTarget: {
      type: "string"
    },
    linkTo: {
      type: "string"
    },
    sizeSlug: {
      type: "string",
      "default": "large"
    },
    allowResize: {
      type: "boolean",
      "default": false
    }
  },
  providesContext: {
    allowResize: "allowResize",
    imageCrop: "imageCrop",
    fixedHeight: "fixedHeight"
  },
  supports: {
    anchor: true,
    align: true
  },
  editorStyle: "gc-block-gallery-editor",
  style: "gc-block-gallery"
};


const {
  name: gallery_name
} = gallery_metadata;

const gallery_settings = {
  icon: library_gallery,
  example: {
    attributes: {
      columns: 2
    },
    innerBlocks: [{
      name: 'core/image',
      attributes: {
        url: 'https://s.w.org/images/core/5.3/Glacial_lakes%2C_Bhutan.jpg'
      }
    }, {
      name: 'core/image',
      attributes: {
        url: 'https://s.w.org/images/core/5.3/Sediment_off_the_Yucatan_Peninsula.jpg'
      }
    }]
  },
  transforms: gallery_transforms,
  edit: edit_wrapper,
  save: saveWithInnerBlocks,
  deprecated: gallery_deprecated
};

// EXTERNAL MODULE: ./node_modules/@gechiui/icons/build-module/library/group.js
var library_group = __webpack_require__("CBCh");

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/group/deprecated.js


/**
 * External dependencies
 */


/**
 * GeChiUI dependencies
 */



const migrateAttributes = attributes => {
  if (!attributes.tagName) {
    attributes = { ...attributes,
      tagName: 'div'
    };
  }

  if (!attributes.customTextColor && !attributes.customBackgroundColor) {
    return attributes;
  }

  const style = {
    color: {}
  };

  if (attributes.customTextColor) {
    style.color.text = attributes.customTextColor;
  }

  if (attributes.customBackgroundColor) {
    style.color.background = attributes.customBackgroundColor;
  }

  return { ...Object(external_lodash_["omit"])(attributes, ['customTextColor', 'customBackgroundColor']),
    style
  };
};

const group_deprecated_deprecated = [// Version of the block with the double div.
{
  attributes: {
    tagName: {
      type: 'string',
      default: 'div'
    },
    templateLock: {
      type: 'string'
    }
  },
  supports: {
    align: ['wide', 'full'],
    anchor: true,
    color: {
      gradients: true,
      link: true
    },
    spacing: {
      padding: true
    },
    __experimentalBorder: {
      radius: true
    }
  },

  save(_ref) {
    let {
      attributes
    } = _ref;
    const {
      tagName: Tag
    } = attributes;
    return Object(external_gc_element_["createElement"])(Tag, external_gc_blockEditor_["useBlockProps"].save(), Object(external_gc_element_["createElement"])("div", {
      className: "gc-block-group__inner-container"
    }, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InnerBlocks"].Content, null)));
  }

}, // Version of the block without global styles support
{
  attributes: {
    backgroundColor: {
      type: 'string'
    },
    customBackgroundColor: {
      type: 'string'
    },
    textColor: {
      type: 'string'
    },
    customTextColor: {
      type: 'string'
    }
  },
  supports: {
    align: ['wide', 'full'],
    anchor: true,
    html: false
  },
  migrate: migrateAttributes,

  save(_ref2) {
    let {
      attributes
    } = _ref2;
    const {
      backgroundColor,
      customBackgroundColor,
      textColor,
      customTextColor
    } = attributes;
    const backgroundClass = Object(external_gc_blockEditor_["getColorClassName"])('background-color', backgroundColor);
    const textClass = Object(external_gc_blockEditor_["getColorClassName"])('color', textColor);
    const className = classnames_default()(backgroundClass, textClass, {
      'has-text-color': textColor || customTextColor,
      'has-background': backgroundColor || customBackgroundColor
    });
    const styles = {
      backgroundColor: backgroundClass ? undefined : customBackgroundColor,
      color: textClass ? undefined : customTextColor
    };
    return Object(external_gc_element_["createElement"])("div", {
      className: className,
      style: styles
    }, Object(external_gc_element_["createElement"])("div", {
      className: "gc-block-group__inner-container"
    }, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InnerBlocks"].Content, null)));
  }

}, // Version of the group block with a bug that made text color class not applied.
{
  attributes: {
    backgroundColor: {
      type: 'string'
    },
    customBackgroundColor: {
      type: 'string'
    },
    textColor: {
      type: 'string'
    },
    customTextColor: {
      type: 'string'
    }
  },
  migrate: migrateAttributes,
  supports: {
    align: ['wide', 'full'],
    anchor: true,
    html: false
  },

  save(_ref3) {
    let {
      attributes
    } = _ref3;
    const {
      backgroundColor,
      customBackgroundColor,
      textColor,
      customTextColor
    } = attributes;
    const backgroundClass = Object(external_gc_blockEditor_["getColorClassName"])('background-color', backgroundColor);
    const textClass = Object(external_gc_blockEditor_["getColorClassName"])('color', textColor);
    const className = classnames_default()(backgroundClass, {
      'has-text-color': textColor || customTextColor,
      'has-background': backgroundColor || customBackgroundColor
    });
    const styles = {
      backgroundColor: backgroundClass ? undefined : customBackgroundColor,
      color: textClass ? undefined : customTextColor
    };
    return Object(external_gc_element_["createElement"])("div", {
      className: className,
      style: styles
    }, Object(external_gc_element_["createElement"])("div", {
      className: "gc-block-group__inner-container"
    }, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InnerBlocks"].Content, null)));
  }

}, // v1 of group block. Deprecated to add an inner-container div around `InnerBlocks.Content`.
{
  attributes: {
    backgroundColor: {
      type: 'string'
    },
    customBackgroundColor: {
      type: 'string'
    }
  },
  supports: {
    align: ['wide', 'full'],
    anchor: true,
    html: false
  },
  migrate: migrateAttributes,

  save(_ref4) {
    let {
      attributes
    } = _ref4;
    const {
      backgroundColor,
      customBackgroundColor
    } = attributes;
    const backgroundClass = Object(external_gc_blockEditor_["getColorClassName"])('background-color', backgroundColor);
    const className = classnames_default()(backgroundClass, {
      'has-background': backgroundColor || customBackgroundColor
    });
    const styles = {
      backgroundColor: backgroundClass ? undefined : customBackgroundColor
    };
    return Object(external_gc_element_["createElement"])("div", {
      className: className,
      style: styles
    }, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InnerBlocks"].Content, null));
  }

}];
/* harmony default export */ var group_deprecated = (group_deprecated_deprecated);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/group/edit.js


/**
 * GeChiUI dependencies
 */




const htmlElementMessages = {
  header: Object(external_gc_i18n_["__"])('<header>元素应表示介绍性内容，通常是一组介绍性或导航辅助工具。'),
  main: Object(external_gc_i18n_["__"])('<main>元素应仅用于文档的主要内容。'),
  section: Object(external_gc_i18n_["__"])("<section>元素应该代表文档的一个独立部分，不能用另一个元素更好地表示。"),
  article: Object(external_gc_i18n_["__"])('<article>元素应该代表文档的一个自包含的、可联合的部分。'),
  aside: Object(external_gc_i18n_["__"])("<aside>元素应代表文档的一部分，其内容仅与文档的主要内容间接相关。"),
  footer: Object(external_gc_i18n_["__"])('<footer>元素应表示其最近的分段元素的页脚（例如：<section>、<article>、<main>等）。')
};

function GroupEdit(_ref) {
  let {
    attributes,
    setAttributes,
    clientId
  } = _ref;
  const {
    hasInnerBlocks,
    themeSupportsLayout
  } = Object(external_gc_data_["useSelect"])(select => {
    var _getSettings;

    const {
      getBlock,
      getSettings
    } = select(external_gc_blockEditor_["store"]);
    const block = getBlock(clientId);
    return {
      hasInnerBlocks: !!(block && block.innerBlocks.length),
      themeSupportsLayout: (_getSettings = getSettings()) === null || _getSettings === void 0 ? void 0 : _getSettings.supportsLayout
    };
  }, [clientId]);
  const defaultLayout = Object(external_gc_blockEditor_["useSetting"])('layout') || {};
  const {
    tagName: TagName = 'div',
    templateLock,
    layout = {}
  } = attributes;
  const usedLayout = !!layout && layout.inherit ? defaultLayout : layout;
  const {
    type = 'default'
  } = usedLayout;
  const layoutSupportEnabled = themeSupportsLayout || type !== 'default';
  const blockProps = Object(external_gc_blockEditor_["useBlockProps"])();
  const innerBlocksProps = Object(external_gc_blockEditor_["useInnerBlocksProps"])(layoutSupportEnabled ? blockProps : {
    className: 'gc-block-group__inner-container'
  }, {
    templateLock,
    renderAppender: hasInnerBlocks ? undefined : external_gc_blockEditor_["InnerBlocks"].ButtonBlockAppender,
    __experimentalLayout: layoutSupportEnabled ? usedLayout : undefined
  });
  return Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InspectorControls"], {
    __experimentalGroup: "advanced"
  }, Object(external_gc_element_["createElement"])(external_gc_components_["SelectControl"], {
    label: Object(external_gc_i18n_["__"])('HTML 元素'),
    options: [{
      label: Object(external_gc_i18n_["__"])('默认（<div>）'),
      value: 'div'
    }, {
      label: '<header>',
      value: 'header'
    }, {
      label: '<main>',
      value: 'main'
    }, {
      label: '<section>',
      value: 'section'
    }, {
      label: '<article>',
      value: 'article'
    }, {
      label: '<aside>',
      value: 'aside'
    }, {
      label: '<footer>',
      value: 'footer'
    }],
    value: TagName,
    onChange: value => setAttributes({
      tagName: value
    }),
    help: htmlElementMessages[TagName]
  })), layoutSupportEnabled && Object(external_gc_element_["createElement"])(TagName, innerBlocksProps), !layoutSupportEnabled && Object(external_gc_element_["createElement"])(TagName, blockProps, Object(external_gc_element_["createElement"])("div", innerBlocksProps)));
}

/* harmony default export */ var group_edit = (GroupEdit);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/group/save.js


/**
 * GeChiUI dependencies
 */

function group_save_save(_ref) {
  let {
    attributes: {
      tagName: Tag
    }
  } = _ref;
  return Object(external_gc_element_["createElement"])(Tag, external_gc_blockEditor_["useInnerBlocksProps"].save(external_gc_blockEditor_["useBlockProps"].save()));
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/group/variations.js
/**
 * GeChiUI dependencies
 */

const group_variations_variations = [{
  name: 'group-row',
  title: Object(external_gc_i18n_["__"])('行'),
  description: Object(external_gc_i18n_["__"])('显示在一行中的块。'),
  attributes: {
    layout: {
      type: 'flex',
      allowOrientation: false
    }
  },
  scope: ['inserter'],
  isActive: blockAttributes => {
    var _blockAttributes$layo;

    return ((_blockAttributes$layo = blockAttributes.layout) === null || _blockAttributes$layo === void 0 ? void 0 : _blockAttributes$layo.type) === 'flex';
  }
}];
/* harmony default export */ var group_variations = (group_variations_variations);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/group/index.js
/**
 * GeChiUI dependencies
 */



/**
 * Internal dependencies
 */



const group_metadata = {
  apiVersion: 2,
  name: "core/group",
  title: "组",
  category: "design",
  description: "将多个区块组合成一组。",
  keywords: ["container", "wrapper", "row", "section"],
  textdomain: "default",
  attributes: {
    tagName: {
      type: "string",
      "default": "div"
    },
    templateLock: {
      type: ["string", "boolean"],
      "enum": ["all", "insert", false]
    }
  },
  supports: {
    align: ["wide", "full"],
    anchor: true,
    html: false,
    color: {
      gradients: true,
      link: true
    },
    spacing: {
      padding: true,
      blockGap: true,
      __experimentalDefaultControls: {
        padding: true,
        blockGap: true
      }
    },
    __experimentalBorder: {
      color: true,
      radius: true,
      style: true,
      width: true
    },
    __experimentalLayout: true
  },
  editorStyle: "gc-block-group-editor",
  style: "gc-block-group"
};


const {
  name: group_name
} = group_metadata;

const group_settings = {
  icon: library_group["a" /* default */],
  example: {
    attributes: {
      style: {
        color: {
          text: '#000000',
          background: '#ffffff'
        }
      }
    },
    innerBlocks: [{
      name: 'core/paragraph',
      attributes: {
        customTextColor: '#cf2e2e',
        fontSize: 'large',
        content: Object(external_gc_i18n_["__"])('一、')
      }
    }, {
      name: 'core/paragraph',
      attributes: {
        customTextColor: '#ff6900',
        fontSize: 'large',
        content: Object(external_gc_i18n_["__"])('二、')
      }
    }, {
      name: 'core/paragraph',
      attributes: {
        customTextColor: '#fcb900',
        fontSize: 'large',
        content: Object(external_gc_i18n_["__"])('三、')
      }
    }, {
      name: 'core/paragraph',
      attributes: {
        customTextColor: '#00d084',
        fontSize: 'large',
        content: Object(external_gc_i18n_["__"])('四、')
      }
    }, {
      name: 'core/paragraph',
      attributes: {
        customTextColor: '#0693e3',
        fontSize: 'large',
        content: Object(external_gc_i18n_["__"])('五、')
      }
    }, {
      name: 'core/paragraph',
      attributes: {
        customTextColor: '#9b51e0',
        fontSize: 'large',
        content: Object(external_gc_i18n_["__"])('六、')
      }
    }]
  },
  transforms: {
    from: [{
      type: 'block',
      isMultiBlock: true,
      blocks: ['*'],

      __experimentalConvert(blocks) {
        // Avoid transforming a single `core/group` Block
        if (blocks.length === 1 && blocks[0].name === 'core/group') {
          return;
        }

        const alignments = ['wide', 'full']; // Determine the widest setting of all the blocks to be grouped

        const widestAlignment = blocks.reduce((accumulator, block) => {
          const {
            align
          } = block.attributes;
          return alignments.indexOf(align) > alignments.indexOf(accumulator) ? align : accumulator;
        }, undefined); // Clone the Blocks to be Grouped
        // Failing to create new block references causes the original blocks
        // to be replaced in the switchToBlockType call thereby meaning they
        // are removed both from their original location and within the
        // new group block.

        const groupInnerBlocks = blocks.map(block => {
          return Object(external_gc_blocks_["createBlock"])(block.name, block.attributes, block.innerBlocks);
        });
        return Object(external_gc_blocks_["createBlock"])('core/group', {
          align: widestAlignment
        }, groupInnerBlocks);
      }

    }]
  },
  edit: group_edit,
  save: group_save_save,
  deprecated: group_deprecated,
  variations: group_variations
};

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/heading.js


/**
 * GeChiUI dependencies
 */

const heading = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M6.2 5.2v13.4l5.8-4.8 5.8 4.8V5.2z"
}));
/* harmony default export */ var library_heading = (heading);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/heading/deprecated.js


/**
 * External dependencies
 */


/**
 * GeChiUI dependencies
 */


const blockSupports = {
  className: false,
  anchor: true
};
const heading_deprecated_blockAttributes = {
  align: {
    type: 'string'
  },
  content: {
    type: 'string',
    source: 'html',
    selector: 'h1,h2,h3,h4,h5,h6',
    default: ''
  },
  level: {
    type: 'number',
    default: 2
  },
  placeholder: {
    type: 'string'
  }
};

const deprecated_migrateCustomColors = attributes => {
  if (!attributes.customTextColor) {
    return attributes;
  }

  const style = {
    color: {
      text: attributes.customTextColor
    }
  };
  return { ...Object(external_lodash_["omit"])(attributes, ['customTextColor']),
    style
  };
};

const TEXT_ALIGN_OPTIONS = ['left', 'right', 'center'];

const migrateTextAlign = attributes => {
  const {
    align,
    ...rest
  } = attributes;
  return TEXT_ALIGN_OPTIONS.includes(align) ? { ...rest,
    textAlign: align
  } : attributes;
};

const heading_deprecated_deprecated = [{
  supports: {
    align: ['wide', 'full'],
    anchor: true,
    className: false,
    color: {
      link: true
    },
    fontSize: true,
    lineHeight: true,
    __experimentalSelector: {
      'core/heading/h1': 'h1',
      'core/heading/h2': 'h2',
      'core/heading/h3': 'h3',
      'core/heading/h4': 'h4',
      'core/heading/h5': 'h5',
      'core/heading/h6': 'h6'
    },
    __unstablePasteTextInline: true
  },
  attributes: heading_deprecated_blockAttributes,
  isEligible: _ref => {
    let {
      align
    } = _ref;
    return TEXT_ALIGN_OPTIONS.includes(align);
  },
  migrate: migrateTextAlign,

  save(_ref2) {
    let {
      attributes
    } = _ref2;
    const {
      align,
      content,
      level
    } = attributes;
    const TagName = 'h' + level;
    const className = classnames_default()({
      [`has-text-align-${align}`]: align
    });
    return Object(external_gc_element_["createElement"])(TagName, external_gc_blockEditor_["useBlockProps"].save({
      className
    }), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"].Content, {
      value: content
    }));
  }

}, {
  supports: blockSupports,
  attributes: { ...heading_deprecated_blockAttributes,
    customTextColor: {
      type: 'string'
    },
    textColor: {
      type: 'string'
    }
  },
  migrate: attributes => deprecated_migrateCustomColors(migrateTextAlign(attributes)),

  save(_ref3) {
    let {
      attributes
    } = _ref3;
    const {
      align,
      content,
      customTextColor,
      level,
      textColor
    } = attributes;
    const tagName = 'h' + level;
    const textClass = Object(external_gc_blockEditor_["getColorClassName"])('color', textColor);
    const className = classnames_default()({
      [textClass]: textClass,
      'has-text-color': textColor || customTextColor,
      [`has-text-align-${align}`]: align
    });
    return Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"].Content, {
      className: className ? className : undefined,
      tagName: tagName,
      style: {
        color: textClass ? undefined : customTextColor
      },
      value: content
    });
  }

}, {
  attributes: { ...heading_deprecated_blockAttributes,
    customTextColor: {
      type: 'string'
    },
    textColor: {
      type: 'string'
    }
  },
  migrate: attributes => deprecated_migrateCustomColors(migrateTextAlign(attributes)),

  save(_ref4) {
    let {
      attributes
    } = _ref4;
    const {
      align,
      content,
      customTextColor,
      level,
      textColor
    } = attributes;
    const tagName = 'h' + level;
    const textClass = Object(external_gc_blockEditor_["getColorClassName"])('color', textColor);
    const className = classnames_default()({
      [textClass]: textClass,
      [`has-text-align-${align}`]: align
    });
    return Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"].Content, {
      className: className ? className : undefined,
      tagName: tagName,
      style: {
        color: textClass ? undefined : customTextColor
      },
      value: content
    });
  },

  supports: blockSupports
}, {
  supports: blockSupports,
  attributes: { ...heading_deprecated_blockAttributes,
    customTextColor: {
      type: 'string'
    },
    textColor: {
      type: 'string'
    }
  },
  migrate: attributes => deprecated_migrateCustomColors(migrateTextAlign(attributes)),

  save(_ref5) {
    let {
      attributes
    } = _ref5;
    const {
      align,
      level,
      content,
      textColor,
      customTextColor
    } = attributes;
    const tagName = 'h' + level;
    const textClass = Object(external_gc_blockEditor_["getColorClassName"])('color', textColor);
    const className = classnames_default()({
      [textClass]: textClass
    });
    return Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"].Content, {
      className: className ? className : undefined,
      tagName: tagName,
      style: {
        textAlign: align,
        color: textClass ? undefined : customTextColor
      },
      value: content
    });
  }

}];
/* harmony default export */ var heading_deprecated = (heading_deprecated_deprecated);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/heading/heading-level-icon.js


/**
 * GeChiUI dependencies
 */

/** @typedef {import('@gechiui/element').GCComponent} GCComponent */

/**
 * HeadingLevelIcon props.
 *
 * @typedef GCHeadingLevelIconProps
 *
 * @property {number}   level     The heading level to show an icon for.
 * @property {?boolean} isPressed Whether or not the icon should appear pressed; default: false.
 */

/**
 * Heading level icon.
 *
 * @param {GCHeadingLevelIconProps} props Component props.
 *
 * @return {?GCComponent} The icon.
 */

function HeadingLevelIcon(_ref) {
  let {
    level,
    isPressed = false
  } = _ref;
  const levelToPath = {
    1: 'M9 5h2v10H9v-4H5v4H3V5h2v4h4V5zm6.6 0c-.6.9-1.5 1.7-2.6 2v1h2v7h2V5h-1.4z',
    2: 'M7 5h2v10H7v-4H3v4H1V5h2v4h4V5zm8 8c.5-.4.6-.6 1.1-1.1.4-.4.8-.8 1.2-1.3.3-.4.6-.8.9-1.3.2-.4.3-.8.3-1.3 0-.4-.1-.9-.3-1.3-.2-.4-.4-.7-.8-1-.3-.3-.7-.5-1.2-.6-.5-.2-1-.2-1.5-.2-.4 0-.7 0-1.1.1-.3.1-.7.2-1 .3-.3.1-.6.3-.9.5-.3.2-.6.4-.8.7l1.2 1.2c.3-.3.6-.5 1-.7.4-.2.7-.3 1.2-.3s.9.1 1.3.4c.3.3.5.7.5 1.1 0 .4-.1.8-.4 1.1-.3.5-.6.9-1 1.2-.4.4-1 .9-1.6 1.4-.6.5-1.4 1.1-2.2 1.6V15h8v-2H15z',
    3: 'M12.1 12.2c.4.3.8.5 1.2.7.4.2.9.3 1.4.3.5 0 1-.1 1.4-.3.3-.1.5-.5.5-.8 0-.2 0-.4-.1-.6-.1-.2-.3-.3-.5-.4-.3-.1-.7-.2-1-.3-.5-.1-1-.1-1.5-.1V9.1c.7.1 1.5-.1 2.2-.4.4-.2.6-.5.6-.9 0-.3-.1-.6-.4-.8-.3-.2-.7-.3-1.1-.3-.4 0-.8.1-1.1.3-.4.2-.7.4-1.1.6l-1.2-1.4c.5-.4 1.1-.7 1.6-.9.5-.2 1.2-.3 1.8-.3.5 0 1 .1 1.6.2.4.1.8.3 1.2.5.3.2.6.5.8.8.2.3.3.7.3 1.1 0 .5-.2.9-.5 1.3-.4.4-.9.7-1.5.9v.1c.6.1 1.2.4 1.6.8.4.4.7.9.7 1.5 0 .4-.1.8-.3 1.2-.2.4-.5.7-.9.9-.4.3-.9.4-1.3.5-.5.1-1 .2-1.6.2-.8 0-1.6-.1-2.3-.4-.6-.2-1.1-.6-1.6-1l1.1-1.4zM7 9H3V5H1v10h2v-4h4v4h2V5H7v4z',
    4: 'M9 15H7v-4H3v4H1V5h2v4h4V5h2v10zm10-2h-1v2h-2v-2h-5v-2l4-6h3v6h1v2zm-3-2V7l-2.8 4H16z',
    5: 'M12.1 12.2c.4.3.7.5 1.1.7.4.2.9.3 1.3.3.5 0 1-.1 1.4-.4.4-.3.6-.7.6-1.1 0-.4-.2-.9-.6-1.1-.4-.3-.9-.4-1.4-.4H14c-.1 0-.3 0-.4.1l-.4.1-.5.2-1-.6.3-5h6.4v1.9h-4.3L14 8.8c.2-.1.5-.1.7-.2.2 0 .5-.1.7-.1.5 0 .9.1 1.4.2.4.1.8.3 1.1.6.3.2.6.6.8.9.2.4.3.9.3 1.4 0 .5-.1 1-.3 1.4-.2.4-.5.8-.9 1.1-.4.3-.8.5-1.3.7-.5.2-1 .3-1.5.3-.8 0-1.6-.1-2.3-.4-.6-.2-1.1-.6-1.6-1-.1-.1 1-1.5 1-1.5zM9 15H7v-4H3v4H1V5h2v4h4V5h2v10z',
    6: 'M9 15H7v-4H3v4H1V5h2v4h4V5h2v10zm8.6-7.5c-.2-.2-.5-.4-.8-.5-.6-.2-1.3-.2-1.9 0-.3.1-.6.3-.8.5l-.6.9c-.2.5-.2.9-.2 1.4.4-.3.8-.6 1.2-.8.4-.2.8-.3 1.3-.3.4 0 .8 0 1.2.2.4.1.7.3 1 .6.3.3.5.6.7.9.2.4.3.8.3 1.3s-.1.9-.3 1.4c-.2.4-.5.7-.8 1-.4.3-.8.5-1.2.6-1 .3-2 .3-3 0-.5-.2-1-.5-1.4-.9-.4-.4-.8-.9-1-1.5-.2-.6-.3-1.3-.3-2.1s.1-1.6.4-2.3c.2-.6.6-1.2 1-1.6.4-.4.9-.7 1.4-.9.6-.3 1.1-.4 1.7-.4.7 0 1.4.1 2 .3.5.2 1 .5 1.4.8 0 .1-1.3 1.4-1.3 1.4zm-2.4 5.8c.2 0 .4 0 .6-.1.2 0 .4-.1.5-.2.1-.1.3-.3.4-.5.1-.2.1-.5.1-.7 0-.4-.1-.8-.4-1.1-.3-.2-.7-.3-1.1-.3-.3 0-.7.1-1 .2-.4.2-.7.4-1 .7 0 .3.1.7.3 1 .1.2.3.4.4.6.2.1.3.3.5.3.2.1.5.2.7.1z'
  };

  if (!levelToPath.hasOwnProperty(level)) {
    return null;
  }

  return Object(external_gc_element_["createElement"])(external_gc_components_["SVG"], {
    width: "24",
    height: "24",
    viewBox: "0 0 20 20",
    xmlns: "http://www.w3.org/2000/svg",
    isPressed: isPressed
  }, Object(external_gc_element_["createElement"])(external_gc_components_["Path"], {
    d: levelToPath[level]
  }));
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/heading/heading-level-dropdown.js


/**
 * GeChiUI dependencies
 */


/**
 * Internal dependencies
 */


const HEADING_LEVELS = [1, 2, 3, 4, 5, 6];
const heading_level_dropdown_POPOVER_PROPS = {
  className: 'block-library-heading-level-dropdown'
};
/** @typedef {import('@gechiui/element').GCComponent} GCComponent */

/**
 * HeadingLevelDropdown props.
 *
 * @typedef GCHeadingLevelDropdownProps
 *
 * @property {number}                 selectedLevel The chosen heading level.
 * @property {(newValue:number)=>any} onChange      Callback to run when
 *                                                  toolbar value is changed.
 */

/**
 * Dropdown for selecting a heading level (1 through 6).
 *
 * @param {GCHeadingLevelDropdownProps} props Component props.
 *
 * @return {GCComponent} The toolbar.
 */

function HeadingLevelDropdown(_ref) {
  let {
    selectedLevel,
    onChange
  } = _ref;
  return Object(external_gc_element_["createElement"])(external_gc_components_["ToolbarDropdownMenu"], {
    popoverProps: heading_level_dropdown_POPOVER_PROPS,
    icon: Object(external_gc_element_["createElement"])(HeadingLevelIcon, {
      level: selectedLevel
    }),
    label: Object(external_gc_i18n_["__"])('修改标题级别'),
    controls: HEADING_LEVELS.map(targetLevel => {
      {
        const isActive = targetLevel === selectedLevel;
        return {
          icon: Object(external_gc_element_["createElement"])(HeadingLevelIcon, {
            level: targetLevel,
            isPressed: isActive
          }),
          label: Object(external_gc_i18n_["sprintf"])( // translators: %s: heading level e.g: "1", "2", "3"
          Object(external_gc_i18n_["__"])('标题%d'), targetLevel),
          isActive,

          onClick() {
            onChange(targetLevel);
          }

        };
      }
    })
  });
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/heading/autogenerate-anchors.js
/**
 * External dependencies
 */

/**
 * Object map tracking anchors.
 *
 * @type {Record<string, string | null>}
 */

const autogenerate_anchors_anchors = {};
/**
 * Returns the text without markup.
 *
 * @param {string} text The text.
 *
 * @return {string} The text without markup.
 */

const getTextWithoutMarkup = text => {
  const dummyElement = document.createElement('div');
  dummyElement.innerHTML = text;
  return dummyElement.innerText;
};
/**
 * Get the slug from the content.
 *
 * @param {string} content The block content.
 *
 * @return {string} Returns the slug.
 */


const getSlug = content => {
  // Get the slug.
  return Object(external_lodash_["trim"])(Object(external_lodash_["deburr"])(getTextWithoutMarkup(content)).replace(/[^\p{L}\p{N}]+/gu, '-').toLowerCase(), '-');
};
/**
 * Generate the anchor for a heading.
 *
 * @param {string} clientId The block ID.
 * @param {string} content  The block content.
 *
 * @return {string|null} Return the heading anchor.
 */


const generateAnchor = (clientId, content) => {
  const slug = getSlug(content); // If slug is empty, then return null.
  // Returning null instead of an empty string allows us to check again when the content changes.

  if ('' === slug) {
    return null;
  }

  delete autogenerate_anchors_anchors[clientId];
  let anchor = slug;
  let i = 0; // If the anchor already exists in another heading, append -i.

  while (Object.values(autogenerate_anchors_anchors).includes(anchor)) {
    i += 1;
    anchor = slug + '-' + i;
  }

  return anchor;
};
/**
 * Set the anchor for a heading.
 *
 * @param {string}      clientId The block ID.
 * @param {string|null} anchor   The block anchor.
 */

const setAnchor = (clientId, anchor) => {
  autogenerate_anchors_anchors[clientId] = anchor;
};

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/heading/edit.js



/**
 * External dependencies
 */

/**
 * GeChiUI dependencies
 */






/**
 * Internal dependencies
 */




function HeadingEdit(_ref) {
  let {
    attributes,
    setAttributes,
    mergeBlocks,
    onReplace,
    style,
    clientId
  } = _ref;
  const {
    textAlign,
    content,
    level,
    placeholder,
    anchor
  } = attributes;
  const tagName = 'h' + level;
  const blockProps = Object(external_gc_blockEditor_["useBlockProps"])({
    className: classnames_default()({
      [`has-text-align-${textAlign}`]: textAlign
    }),
    style
  });
  const {
    canGenerateAnchors
  } = Object(external_gc_data_["useSelect"])(select => {
    const settings = select(external_gc_blockEditor_["store"]).getSettings();
    return {
      canGenerateAnchors: !!settings.__experimentalGenerateAnchors
    };
  }, []);
  const {
    __unstableMarkNextChangeAsNotPersistent
  } = Object(external_gc_data_["useDispatch"])(external_gc_blockEditor_["store"]); // Initially set anchor for headings that have content but no anchor set.
  // This is used when transforming a block to heading, or for legacy anchors.

  Object(external_gc_element_["useEffect"])(() => {
    if (!canGenerateAnchors) {
      return;
    }

    if (!anchor && content) {
      // This side-effect should not create an undo level.
      __unstableMarkNextChangeAsNotPersistent();

      setAttributes({
        anchor: generateAnchor(clientId, content)
      });
    }

    setAnchor(clientId, anchor); // Remove anchor map when block unmounts.

    return () => setAnchor(clientId, null);
  }, [anchor, content, clientId, canGenerateAnchors]);

  const onContentChange = value => {
    const newAttrs = {
      content: value
    };

    if (canGenerateAnchors && (!anchor || !value || generateAnchor(clientId, content) === anchor)) {
      newAttrs.anchor = generateAnchor(clientId, value);
    }

    setAttributes(newAttrs);
  };

  return Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["BlockControls"], {
    group: "block"
  }, Object(external_gc_element_["createElement"])(HeadingLevelDropdown, {
    selectedLevel: level,
    onChange: newLevel => setAttributes({
      level: newLevel
    })
  }), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["AlignmentControl"], {
    value: textAlign,
    onChange: nextAlign => {
      setAttributes({
        textAlign: nextAlign
      });
    }
  })), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"], Object(esm_extends["a" /* default */])({
    identifier: "content",
    tagName: tagName,
    value: content,
    onChange: onContentChange,
    onMerge: mergeBlocks,
    onSplit: (value, isOriginal) => {
      let block;

      if (isOriginal || value) {
        block = Object(external_gc_blocks_["createBlock"])('core/heading', { ...attributes,
          content: value
        });
      } else {
        var _getDefaultBlockName;

        block = Object(external_gc_blocks_["createBlock"])((_getDefaultBlockName = Object(external_gc_blocks_["getDefaultBlockName"])()) !== null && _getDefaultBlockName !== void 0 ? _getDefaultBlockName : 'core/heading');
      }

      if (isOriginal) {
        block.clientId = clientId;
      }

      return block;
    },
    onReplace: onReplace,
    onRemove: () => onReplace([]),
    "aria-label": Object(external_gc_i18n_["__"])('标题文字'),
    placeholder: placeholder || Object(external_gc_i18n_["__"])('标题'),
    textAlign: textAlign
  }, blockProps)));
}

/* harmony default export */ var heading_edit = (HeadingEdit);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/heading/save.js


/**
 * External dependencies
 */

/**
 * GeChiUI dependencies
 */


function heading_save_save(_ref) {
  let {
    attributes
  } = _ref;
  const {
    textAlign,
    content,
    level
  } = attributes;
  const TagName = 'h' + level;
  const className = classnames_default()({
    [`has-text-align-${textAlign}`]: textAlign
  });
  return Object(external_gc_element_["createElement"])(TagName, external_gc_blockEditor_["useBlockProps"].save({
    className
  }), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"].Content, {
    value: content
  }));
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/heading/shared.js
/**
 * Given a node name string for a heading node, returns its numeric level.
 *
 * @param {string} nodeName Heading node name.
 *
 * @return {number} Heading level.
 */
function getLevelFromHeadingNodeName(nodeName) {
  return Number(nodeName.substr(1));
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/heading/transforms.js
/**
 * GeChiUI dependencies
 */

/**
 * Internal dependencies
 */


const {
  name: heading_transforms_name
} = {
  apiVersion: 2,
  name: "core/heading",
  title: "标题",
  category: "text",
  description: "介绍新章节并组织内容，以帮助访问者和搜索引擎了解您的内容结构。",
  keywords: ["title", "subtitle"],
  textdomain: "default",
  attributes: {
    textAlign: {
      type: "string"
    },
    content: {
      type: "string",
      source: "html",
      selector: "h1,h2,h3,h4,h5,h6",
      "default": "",
      __experimentalRole: "content"
    },
    level: {
      type: "number",
      "default": 2
    },
    placeholder: {
      type: "string"
    }
  },
  supports: {
    align: ["wide", "full"],
    anchor: true,
    className: false,
    color: {
      link: true
    },
    spacing: {
      margin: true
    },
    typography: {
      fontSize: true,
      lineHeight: true,
      __experimentalFontStyle: true,
      __experimentalFontWeight: true,
      __experimentalLetterSpacing: true,
      __experimentalTextTransform: true,
      __experimentalDefaultControls: {
        fontSize: true,
        fontAppearance: true,
        textTransform: true
      }
    },
    __experimentalSelector: "h1,h2,h3,h4,h5,h6",
    __unstablePasteTextInline: true,
    __experimentalSlashInserter: true
  },
  editorStyle: "gc-block-heading-editor",
  style: "gc-block-heading"
};
const heading_transforms_transforms = {
  from: [{
    type: 'block',
    isMultiBlock: true,
    blocks: ['core/paragraph'],
    transform: attributes => attributes.map(_ref => {
      let {
        content,
        anchor
      } = _ref;
      return Object(external_gc_blocks_["createBlock"])(heading_transforms_name, {
        content,
        anchor
      });
    })
  }, {
    type: 'raw',
    selector: 'h1,h2,h3,h4,h5,h6',
    schema: _ref2 => {
      let {
        phrasingContentSchema,
        isPaste
      } = _ref2;
      const schema = {
        children: phrasingContentSchema,
        attributes: isPaste ? [] : ['style', 'id']
      };
      return {
        h1: schema,
        h2: schema,
        h3: schema,
        h4: schema,
        h5: schema,
        h6: schema
      };
    },

    transform(node) {
      const attributes = Object(external_gc_blocks_["getBlockAttributes"])(heading_transforms_name, node.outerHTML);
      const {
        textAlign
      } = node.style || {};
      attributes.level = getLevelFromHeadingNodeName(node.nodeName);

      if (textAlign === 'left' || textAlign === 'center' || textAlign === 'right') {
        attributes.align = textAlign;
      }

      return Object(external_gc_blocks_["createBlock"])(heading_transforms_name, attributes);
    }

  }, ...[1, 2, 3, 4, 5, 6].map(level => ({
    type: 'prefix',
    prefix: Array(level + 1).join('#'),

    transform(content) {
      return Object(external_gc_blocks_["createBlock"])(heading_transforms_name, {
        level,
        content
      });
    }

  })), ...[1, 2, 3, 4, 5, 6].map(level => ({
    type: 'enter',
    regExp: new RegExp(`^/(h|H)${level}$`),

    transform(content) {
      return Object(external_gc_blocks_["createBlock"])(heading_transforms_name, {
        level,
        content
      });
    }

  }))],
  to: [{
    type: 'block',
    isMultiBlock: true,
    blocks: ['core/paragraph'],
    transform: attributes => attributes.map(_ref3 => {
      let {
        content,
        anchor
      } = _ref3;
      return Object(external_gc_blocks_["createBlock"])('core/paragraph', {
        content,
        anchor
      });
    })
  }]
};
/* harmony default export */ var heading_transforms = (heading_transforms_transforms);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/heading/index.js
/**
 * External dependencies
 */

/**
 * GeChiUI dependencies
 */



/**
 * Internal dependencies
 */



const heading_metadata = {
  apiVersion: 2,
  name: "core/heading",
  title: "标题",
  category: "text",
  description: "介绍新章节并组织内容，以帮助访问者和搜索引擎了解您的内容结构。",
  keywords: ["title", "subtitle"],
  textdomain: "default",
  attributes: {
    textAlign: {
      type: "string"
    },
    content: {
      type: "string",
      source: "html",
      selector: "h1,h2,h3,h4,h5,h6",
      "default": "",
      __experimentalRole: "content"
    },
    level: {
      type: "number",
      "default": 2
    },
    placeholder: {
      type: "string"
    }
  },
  supports: {
    align: ["wide", "full"],
    anchor: true,
    className: false,
    color: {
      link: true
    },
    spacing: {
      margin: true
    },
    typography: {
      fontSize: true,
      lineHeight: true,
      __experimentalFontStyle: true,
      __experimentalFontWeight: true,
      __experimentalLetterSpacing: true,
      __experimentalTextTransform: true,
      __experimentalDefaultControls: {
        fontSize: true,
        fontAppearance: true,
        textTransform: true
      }
    },
    __experimentalSelector: "h1,h2,h3,h4,h5,h6",
    __unstablePasteTextInline: true,
    __experimentalSlashInserter: true
  },
  editorStyle: "gc-block-heading-editor",
  style: "gc-block-heading"
};


const {
  name: heading_name
} = heading_metadata;

const heading_settings = {
  icon: library_heading,
  example: {
    attributes: {
      content: Object(external_gc_i18n_["__"])('代码如诗'),
      level: 2
    }
  },

  __experimentalLabel(attributes, _ref) {
    let {
      context
    } = _ref;

    if (context === 'accessibility') {
      const {
        content,
        level
      } = attributes;
      return Object(external_lodash_["isEmpty"])(content) ? Object(external_gc_i18n_["sprintf"])(
      /* translators: accessibility text. %s: heading level. */
      Object(external_gc_i18n_["__"])('%s级。空白。'), level) : Object(external_gc_i18n_["sprintf"])(
      /* translators: accessibility text. 1: heading level. 2: heading content. */
      Object(external_gc_i18n_["__"])('第%1$s级。%2$s'), level, content);
    }
  },

  transforms: heading_transforms,
  deprecated: heading_deprecated,

  merge(attributes, attributesToMerge) {
    return {
      content: (attributes.content || '') + (attributesToMerge.content || '')
    };
  },

  edit: heading_edit,
  save: heading_save_save
};

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/html.js


/**
 * GeChiUI dependencies
 */

const html_html = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  viewBox: "0 0 24 24",
  xmlns: "http://www.w3.org/2000/svg"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M4.8 11.4H2.1V9H1v6h1.1v-2.6h2.7V15h1.1V9H4.8v2.4zm1.9-1.3h1.7V15h1.1v-4.9h1.7V9H6.7v1.1zM16.2 9l-1.5 2.7L13.3 9h-.9l-.8 6h1.1l.5-4 1.5 2.8 1.5-2.8.5 4h1.1L17 9h-.8zm3.8 5V9h-1.1v6h3.6v-1H20z"
}));
/* harmony default export */ var library_html = (html_html);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/html/edit.js


/**
 * GeChiUI dependencies
 */





function HTMLEdit(_ref) {
  let {
    attributes,
    setAttributes,
    isSelected
  } = _ref;
  const [isPreview, setIsPreview] = Object(external_gc_element_["useState"])();
  const styles = Object(external_gc_data_["useSelect"])(select => {
    // Default styles used to unset some of the styles
    // that might be inherited from the editor style.
    const defaultStyles = `
			html,body,:root {
				margin: 0 !important;
				padding: 0 !important;
				overflow: visible !important;
				min-height: auto !important;
			}
		`;
    return [defaultStyles, ...Object(external_gc_blockEditor_["transformStyles"])(select(external_gc_blockEditor_["store"]).getSettings().styles)];
  }, []);

  function switchToPreview() {
    setIsPreview(true);
  }

  function switchToHTML() {
    setIsPreview(false);
  }

  return Object(external_gc_element_["createElement"])("div", Object(external_gc_blockEditor_["useBlockProps"])({
    className: 'block-library-html__edit'
  }), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["BlockControls"], null, Object(external_gc_element_["createElement"])(external_gc_components_["ToolbarGroup"], null, Object(external_gc_element_["createElement"])(external_gc_components_["ToolbarButton"], {
    className: "components-tab-button",
    isPressed: !isPreview,
    onClick: switchToHTML
  }, Object(external_gc_element_["createElement"])("span", null, "HTML")), Object(external_gc_element_["createElement"])(external_gc_components_["ToolbarButton"], {
    className: "components-tab-button",
    isPressed: isPreview,
    onClick: switchToPreview
  }, Object(external_gc_element_["createElement"])("span", null, Object(external_gc_i18n_["__"])('预览'))))), Object(external_gc_element_["createElement"])(external_gc_components_["Disabled"].Consumer, null, isDisabled => isPreview || isDisabled ? Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])(external_gc_components_["SandBox"], {
    html: attributes.content,
    styles: styles
  }), !isSelected && Object(external_gc_element_["createElement"])("div", {
    className: "block-library-html__preview-overlay"
  })) : Object(external_gc_element_["createElement"])(external_gc_blockEditor_["PlainText"], {
    value: attributes.content,
    onChange: content => setAttributes({
      content
    }),
    placeholder: Object(external_gc_i18n_["__"])('编写HTML…'),
    "aria-label": Object(external_gc_i18n_["__"])('HTML')
  })));
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/html/save.js


/**
 * GeChiUI dependencies
 */

function html_save_save(_ref) {
  let {
    attributes
  } = _ref;
  return Object(external_gc_element_["createElement"])(external_gc_element_["RawHTML"], null, attributes.content);
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/html/transforms.js
/**
 * GeChiUI dependencies
 */

const html_transforms_transforms = {
  from: [{
    type: 'block',
    blocks: ['core/code'],
    transform: _ref => {
      let {
        content
      } = _ref;
      return Object(external_gc_blocks_["createBlock"])('core/html', {
        content
      });
    }
  }]
};
/* harmony default export */ var html_transforms = (html_transforms_transforms);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/html/index.js
/**
 * GeChiUI dependencies
 */


/**
 * Internal dependencies
 */


const html_metadata = {
  apiVersion: 2,
  name: "core/html",
  title: "自定义HTML",
  category: "widgets",
  description: "添加自定义 HTML 代码并在编辑时进行预览。",
  keywords: ["embed"],
  textdomain: "default",
  attributes: {
    content: {
      type: "string",
      source: "html"
    }
  },
  supports: {
    customClassName: false,
    className: false,
    html: false
  },
  editorStyle: "gc-block-html-editor"
};


const {
  name: html_name
} = html_metadata;

const html_settings = {
  icon: library_html,
  example: {
    attributes: {
      content: '<marquee>' + Object(external_gc_i18n_["__"])('欢迎来到区块的多彩世界……') + '</marquee>'
    }
  },
  edit: HTMLEdit,
  save: html_save_save,
  transforms: html_transforms
};

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/image/deprecated.js



/**
 * External dependencies
 */

/**
 * GeChiUI dependencies
 */


const image_deprecated_blockAttributes = {
  align: {
    type: 'string'
  },
  url: {
    type: 'string',
    source: 'attribute',
    selector: 'img',
    attribute: 'src'
  },
  alt: {
    type: 'string',
    source: 'attribute',
    selector: 'img',
    attribute: 'alt',
    default: ''
  },
  caption: {
    type: 'string',
    source: 'html',
    selector: 'figcaption'
  },
  href: {
    type: 'string',
    source: 'attribute',
    selector: 'figure > a',
    attribute: 'href'
  },
  rel: {
    type: 'string',
    source: 'attribute',
    selector: 'figure > a',
    attribute: 'rel'
  },
  linkClass: {
    type: 'string',
    source: 'attribute',
    selector: 'figure > a',
    attribute: 'class'
  },
  id: {
    type: 'number'
  },
  width: {
    type: 'number'
  },
  height: {
    type: 'number'
  },
  linkDestination: {
    type: 'string'
  },
  linkTarget: {
    type: 'string',
    source: 'attribute',
    selector: 'figure > a',
    attribute: 'target'
  }
};
const image_deprecated_deprecated = [{
  attributes: image_deprecated_blockAttributes,

  save(_ref) {
    let {
      attributes
    } = _ref;
    const {
      url,
      alt,
      caption,
      align,
      href,
      width,
      height,
      id
    } = attributes;
    const classes = classnames_default()({
      [`align${align}`]: align,
      'is-resized': width || height
    });
    const image = Object(external_gc_element_["createElement"])("img", {
      src: url,
      alt: alt,
      className: id ? `gc-image-${id}` : null,
      width: width,
      height: height
    });
    return Object(external_gc_element_["createElement"])("figure", {
      className: classes
    }, href ? Object(external_gc_element_["createElement"])("a", {
      href: href
    }, image) : image, !external_gc_blockEditor_["RichText"].isEmpty(caption) && Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"].Content, {
      tagName: "figcaption",
      value: caption
    }));
  }

}, {
  attributes: image_deprecated_blockAttributes,

  save(_ref2) {
    let {
      attributes
    } = _ref2;
    const {
      url,
      alt,
      caption,
      align,
      href,
      width,
      height,
      id
    } = attributes;
    const image = Object(external_gc_element_["createElement"])("img", {
      src: url,
      alt: alt,
      className: id ? `gc-image-${id}` : null,
      width: width,
      height: height
    });
    return Object(external_gc_element_["createElement"])("figure", {
      className: align ? `align${align}` : null
    }, href ? Object(external_gc_element_["createElement"])("a", {
      href: href
    }, image) : image, !external_gc_blockEditor_["RichText"].isEmpty(caption) && Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"].Content, {
      tagName: "figcaption",
      value: caption
    }));
  }

}, {
  attributes: image_deprecated_blockAttributes,

  save(_ref3) {
    let {
      attributes
    } = _ref3;
    const {
      url,
      alt,
      caption,
      align,
      href,
      width,
      height
    } = attributes;
    const extraImageProps = width || height ? {
      width,
      height
    } : {};
    const image = Object(external_gc_element_["createElement"])("img", Object(esm_extends["a" /* default */])({
      src: url,
      alt: alt
    }, extraImageProps));
    let figureStyle = {};

    if (width) {
      figureStyle = {
        width
      };
    } else if (align === 'left' || align === 'right') {
      figureStyle = {
        maxWidth: '50%'
      };
    }

    return Object(external_gc_element_["createElement"])("figure", {
      className: align ? `align${align}` : null,
      style: figureStyle
    }, href ? Object(external_gc_element_["createElement"])("a", {
      href: href
    }, image) : image, !external_gc_blockEditor_["RichText"].isEmpty(caption) && Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"].Content, {
      tagName: "figcaption",
      value: caption
    }));
  }

}];
/* harmony default export */ var image_deprecated = (image_deprecated_deprecated);

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/crop.js


/**
 * GeChiUI dependencies
 */

const crop = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M16.5 7.8v7H18v-7c0-1-.8-1.8-1.8-1.8h-7v1.5h7c.2 0 .3.1.3.3zm-8.7 8.7c-.1 0-.2-.1-.2-.2V2H6v4H2v1.5h4v8.8c0 1 .8 1.8 1.8 1.8h8.8v4H18v-4h4v-1.5H7.8z"
}));
/* harmony default export */ var library_crop = (crop);

// EXTERNAL MODULE: ./node_modules/@gechiui/icons/build-module/library/upload.js
var upload = __webpack_require__("QoGU");

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/overlay-text.js


/**
 * GeChiUI dependencies
 */

const overlayText = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M18 4H6c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h12-9.8c.4 0 .8-.3.9-.7l1.1-3h3.6l.5 1.7h1.9L13 9h-2.2l-3.4 9.5H6c-.3 0-.5-.2-.5-.5V6c0-.3.2-.5.5-.5h12c.3 0 .5.2.5.5v12H20V6c0-1.1-.9-2-2-2zm-6 7l1.4 3.9h-2.7L12 11z"
}));
/* harmony default export */ var overlay_text = (overlayText);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/image/use-client-width.js
/**
 * GeChiUI dependencies
 */

function useClientWidth(ref, dependencies) {
  const [clientWidth, setClientWidth] = Object(external_gc_element_["useState"])();

  function calculateClientWidth() {
    setClientWidth(ref.current.clientWidth);
  }

  Object(external_gc_element_["useEffect"])(calculateClientWidth, dependencies);
  Object(external_gc_element_["useEffect"])(() => {
    const {
      defaultView
    } = ref.current.ownerDocument;
    defaultView.addEventListener('resize', calculateClientWidth);
    return () => {
      defaultView.removeEventListener('resize', calculateClientWidth);
    };
  }, []);
  return clientWidth;
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/image/image.js


/**
 * External dependencies
 */

/**
 * GeChiUI dependencies
 */













/**
 * Internal dependencies
 */




/**
 * Module constants
 */


function Image(_ref) {
  var _imageRef$current3;

  let {
    temporaryURL,
    attributes: {
      url = '',
      alt,
      caption,
      align,
      id,
      href,
      rel,
      linkClass,
      linkDestination,
      title,
      width,
      height,
      linkTarget,
      sizeSlug
    },
    setAttributes,
    isSelected,
    insertBlocksAfter,
    onReplace,
    onSelectImage,
    onSelectURL,
    onUploadError,
    containerRef,
    context,
    clientId
  } = _ref;
  const imageRef = Object(external_gc_element_["useRef"])();
  const captionRef = Object(external_gc_element_["useRef"])();
  const prevUrl = Object(external_gc_compose_["usePrevious"])(url);
  const {
    allowResize = true
  } = context;
  const {
    getBlock
  } = Object(external_gc_data_["useSelect"])(external_gc_blockEditor_["store"]);
  const {
    image,
    multiImageSelection
  } = Object(external_gc_data_["useSelect"])(select => {
    const {
      getMedia
    } = select(external_gc_coreData_["store"]);
    const {
      getMultiSelectedBlockClientIds,
      getBlockName
    } = select(external_gc_blockEditor_["store"]);
    const multiSelectedClientIds = getMultiSelectedBlockClientIds();
    return {
      image: id && isSelected ? getMedia(id) : null,
      multiImageSelection: multiSelectedClientIds.length && multiSelectedClientIds.every(_clientId => getBlockName(_clientId) === 'core/image')
    };
  }, [id, isSelected]);
  const {
    canInsertCover,
    imageEditing,
    imageSizes,
    maxWidth,
    mediaUpload
  } = Object(external_gc_data_["useSelect"])(select => {
    const {
      getBlockRootClientId,
      getSettings,
      canInsertBlockType
    } = select(external_gc_blockEditor_["store"]);
    const rootClientId = getBlockRootClientId(clientId);
    const settings = Object(external_lodash_["pick"])(getSettings(), ['imageEditing', 'imageSizes', 'maxWidth', 'mediaUpload']);
    return { ...settings,
      canInsertCover: canInsertBlockType('core/cover', rootClientId)
    };
  }, [clientId]);
  const {
    replaceBlocks,
    toggleSelection
  } = Object(external_gc_data_["useDispatch"])(external_gc_blockEditor_["store"]);
  const {
    createErrorNotice,
    createSuccessNotice
  } = Object(external_gc_data_["useDispatch"])(external_gc_notices_["store"]);
  const isLargeViewport = Object(external_gc_compose_["useViewportMatch"])('medium');
  const isWideAligned = Object(external_lodash_["includes"])(['wide', 'full'], align);
  const [{
    loadedNaturalWidth,
    loadedNaturalHeight
  }, setLoadedNaturalSize] = Object(external_gc_element_["useState"])({});
  const [isEditingImage, setIsEditingImage] = Object(external_gc_element_["useState"])(false);
  const [externalBlob, setExternalBlob] = Object(external_gc_element_["useState"])();
  const clientWidth = useClientWidth(containerRef, [align]);
  const isResizable = allowResize && !(isWideAligned && isLargeViewport);
  const imageSizeOptions = Object(external_lodash_["map"])(Object(external_lodash_["filter"])(imageSizes, _ref2 => {
    let {
      slug
    } = _ref2;
    return Object(external_lodash_["get"])(image, ['media_details', 'sizes', slug, 'source_url']);
  }), _ref3 => {
    let {
      name,
      slug
    } = _ref3;
    return {
      value: slug,
      label: name
    };
  }); // If an image is externally hosted, try to fetch the image data. This may
  // fail if the image host doesn't allow CORS with the domain. If it works,
  // we can enable a button in the toolbar to upload the image.

  Object(external_gc_element_["useEffect"])(() => {
    if (!isExternalImage(id, url) || !isSelected || externalBlob) {
      return;
    }

    window.fetch(url).then(response => response.blob()).then(blob => setExternalBlob(blob)) // Do nothing, cannot upload.
    .catch(() => {});
  }, [id, url, isSelected, externalBlob]); // Focus the caption after inserting an image from the placeholder. This is
  // done to preserve the behaviour of focussing the first tabbable element
  // when a block is mounted. Previously, the image block would remount when
  // the placeholder is removed. Maybe this behaviour could be removed.

  Object(external_gc_element_["useEffect"])(() => {
    if (url && !prevUrl && isSelected) {
      captionRef.current.focus();
    }
  }, [url, prevUrl]); // Get naturalWidth and naturalHeight from image ref, and fall back to loaded natural
  // width and height. This resolves an issue in Safari where the loaded natural
  // witdth and height is otherwise lost when switching between alignments.
  // See: https://github.com/GeChiUI/gutenberg/pull/37210.

  const {
    naturalWidth,
    naturalHeight
  } = Object(external_gc_element_["useMemo"])(() => {
    var _imageRef$current, _imageRef$current2;

    return {
      naturalWidth: ((_imageRef$current = imageRef.current) === null || _imageRef$current === void 0 ? void 0 : _imageRef$current.naturalWidth) || loadedNaturalWidth || undefined,
      naturalHeight: ((_imageRef$current2 = imageRef.current) === null || _imageRef$current2 === void 0 ? void 0 : _imageRef$current2.naturalHeight) || loadedNaturalHeight || undefined
    };
  }, [loadedNaturalWidth, loadedNaturalHeight, (_imageRef$current3 = imageRef.current) === null || _imageRef$current3 === void 0 ? void 0 : _imageRef$current3.complete]);

  function onResizeStart() {
    toggleSelection(false);
  }

  function onResizeStop() {
    toggleSelection(true);
  }

  function onImageError() {
    // Check if there's an embed block that handles this URL.
    const embedBlock = createUpgradedEmbedBlock({
      attributes: {
        url
      }
    });

    if (undefined !== embedBlock) {
      onReplace(embedBlock);
    }
  }

  function onSetHref(props) {
    setAttributes(props);
  }

  function onSetTitle(value) {
    // This is the HTML title attribute, separate from the media object
    // title.
    setAttributes({
      title: value
    });
  }

  function updateAlt(newAlt) {
    setAttributes({
      alt: newAlt
    });
  }

  function updateImage(newSizeSlug) {
    const newUrl = Object(external_lodash_["get"])(image, ['media_details', 'sizes', newSizeSlug, 'source_url']);

    if (!newUrl) {
      return null;
    }

    setAttributes({
      url: newUrl,
      width: undefined,
      height: undefined,
      sizeSlug: newSizeSlug
    });
  }

  function uploadExternal() {
    mediaUpload({
      filesList: [externalBlob],

      onFileChange(_ref4) {
        let [img] = _ref4;
        onSelectImage(img);

        if (Object(external_gc_blob_["isBlobURL"])(img.url)) {
          return;
        }

        setExternalBlob();
        createSuccessNotice(Object(external_gc_i18n_["__"])('图片已上传。'), {
          type: 'snackbar'
        });
      },

      allowedTypes: constants_ALLOWED_MEDIA_TYPES,

      onError(message) {
        createErrorNotice(message, {
          type: 'snackbar'
        });
      }

    });
  }

  function updateAlignment(nextAlign) {
    const extraUpdatedAttributes = ['wide', 'full'].includes(nextAlign) ? {
      width: undefined,
      height: undefined
    } : {};
    setAttributes({ ...extraUpdatedAttributes,
      align: nextAlign
    });
  }

  Object(external_gc_element_["useEffect"])(() => {
    if (!isSelected) {
      setIsEditingImage(false);
    }
  }, [isSelected]);
  const canEditImage = id && naturalWidth && naturalHeight && imageEditing;
  const allowCrop = !multiImageSelection && canEditImage && !isEditingImage;

  function switchToCover() {
    replaceBlocks(clientId, Object(external_gc_blocks_["switchToBlockType"])(getBlock(clientId), 'core/cover'));
  }

  const controls = Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["BlockControls"], {
    group: "block"
  }, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["BlockAlignmentControl"], {
    value: align,
    onChange: updateAlignment
  }), !multiImageSelection && !isEditingImage && Object(external_gc_element_["createElement"])(external_gc_blockEditor_["__experimentalImageURLInputUI"], {
    url: href || '',
    onChangeUrl: onSetHref,
    linkDestination: linkDestination,
    mediaUrl: image && image.source_url || url,
    mediaLink: image && image.link,
    linkTarget: linkTarget,
    linkClass: linkClass,
    rel: rel
  }), allowCrop && Object(external_gc_element_["createElement"])(external_gc_components_["ToolbarButton"], {
    onClick: () => setIsEditingImage(true),
    icon: library_crop,
    label: Object(external_gc_i18n_["__"])('裁剪')
  }), externalBlob && Object(external_gc_element_["createElement"])(external_gc_components_["ToolbarButton"], {
    onClick: uploadExternal,
    icon: upload["a" /* default */],
    label: Object(external_gc_i18n_["__"])('上传外部图片')
  }), !multiImageSelection && canInsertCover && Object(external_gc_element_["createElement"])(external_gc_components_["ToolbarButton"], {
    icon: overlay_text,
    label: Object(external_gc_i18n_["__"])('在图片上添加文字'),
    onClick: switchToCover
  })), !multiImageSelection && !isEditingImage && Object(external_gc_element_["createElement"])(external_gc_blockEditor_["BlockControls"], {
    group: "other"
  }, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["MediaReplaceFlow"], {
    mediaId: id,
    mediaURL: url,
    allowedTypes: constants_ALLOWED_MEDIA_TYPES,
    accept: "image/*",
    onSelect: onSelectImage,
    onSelectURL: onSelectURL,
    onError: onUploadError
  })), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InspectorControls"], null, Object(external_gc_element_["createElement"])(external_gc_components_["PanelBody"], {
    title: Object(external_gc_i18n_["__"])('图片设置')
  }, !multiImageSelection && Object(external_gc_element_["createElement"])(external_gc_components_["TextareaControl"], {
    label: Object(external_gc_i18n_["__"])('Alt文本（替换文本）'),
    value: alt,
    onChange: updateAlt,
    help: Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])(external_gc_components_["ExternalLink"], {
      href: "https://www.w3.org/WAI/tutorials/images/decision-tree"
    }, Object(external_gc_i18n_["__"])('说明此图片的用途')), Object(external_gc_i18n_["__"])('如此图片仅作装饰用途，请留空。'))
  }), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["__experimentalImageSizeControl"], {
    onChangeImage: updateImage,
    onChange: value => setAttributes(value),
    slug: sizeSlug,
    width: width,
    height: height,
    imageSizeOptions: imageSizeOptions,
    isResizable: isResizable,
    imageWidth: naturalWidth,
    imageHeight: naturalHeight
  }))), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InspectorControls"], {
    __experimentalGroup: "advanced"
  }, Object(external_gc_element_["createElement"])(external_gc_components_["TextControl"], {
    label: Object(external_gc_i18n_["__"])('title属性'),
    value: title || '',
    onChange: onSetTitle,
    help: Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_i18n_["__"])('描述此图片在本页的用途。'), Object(external_gc_element_["createElement"])(external_gc_components_["ExternalLink"], {
      href: "https://www.w3.org/TR/html52/dom.html#the-title-attribute"
    }, Object(external_gc_i18n_["__"])('（注：很多设备及浏览器都不显示此文本。）')))
  })));
  const filename = Object(external_gc_url_["getFilename"])(url);
  let defaultedAlt;

  if (alt) {
    defaultedAlt = alt;
  } else if (filename) {
    defaultedAlt = Object(external_gc_i18n_["sprintf"])(
    /* translators: %s: file name */
    Object(external_gc_i18n_["__"])('此图片的alt属性为空；文件名为%s'), filename);
  } else {
    defaultedAlt = Object(external_gc_i18n_["__"])('此图片的alt属性为空');
  }

  let img = // Disable reason: Image itself is not meant to be interactive, but
  // should direct focus to block.

  /* eslint-disable jsx-a11y/no-noninteractive-element-interactions, jsx-a11y/click-events-have-key-events */
  Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])("img", {
    src: temporaryURL || url,
    alt: defaultedAlt,
    onError: () => onImageError(),
    onLoad: event => {
      var _event$target, _event$target2;

      setLoadedNaturalSize({
        loadedNaturalWidth: (_event$target = event.target) === null || _event$target === void 0 ? void 0 : _event$target.naturalWidth,
        loadedNaturalHeight: (_event$target2 = event.target) === null || _event$target2 === void 0 ? void 0 : _event$target2.naturalHeight
      });
    },
    ref: imageRef
  }), temporaryURL && Object(external_gc_element_["createElement"])(external_gc_components_["Spinner"], null))
  /* eslint-enable jsx-a11y/no-noninteractive-element-interactions, jsx-a11y/click-events-have-key-events */
  ;
  let imageWidthWithinContainer;
  let imageHeightWithinContainer;

  if (clientWidth && naturalWidth && naturalHeight) {
    const exceedMaxWidth = naturalWidth > clientWidth;
    const ratio = naturalHeight / naturalWidth;
    imageWidthWithinContainer = exceedMaxWidth ? clientWidth : naturalWidth;
    imageHeightWithinContainer = exceedMaxWidth ? clientWidth * ratio : naturalHeight;
  }

  if (canEditImage && isEditingImage) {
    img = Object(external_gc_element_["createElement"])(external_gc_blockEditor_["__experimentalImageEditor"], {
      url: url,
      width: width,
      height: height,
      clientWidth: clientWidth,
      naturalHeight: naturalHeight,
      naturalWidth: naturalWidth
    });
  } else if (!isResizable || !imageWidthWithinContainer) {
    img = Object(external_gc_element_["createElement"])("div", {
      style: {
        width,
        height
      }
    }, img);
  } else {
    const currentWidth = width || imageWidthWithinContainer;
    const currentHeight = height || imageHeightWithinContainer;
    const ratio = naturalWidth / naturalHeight;
    const minWidth = naturalWidth < naturalHeight ? MIN_SIZE : MIN_SIZE * ratio;
    const minHeight = naturalHeight < naturalWidth ? MIN_SIZE : MIN_SIZE / ratio; // With the current implementation of ResizableBox, an image needs an
    // explicit pixel value for the max-width. In absence of being able to
    // set the content-width, this max-width is currently dictated by the
    // vanilla editor style. The following variable adds a buffer to this
    // vanilla style, so 3rd party themes have some wiggleroom. This does,
    // in most cases, allow you to scale the image beyond the width of the
    // main column, though not infinitely.
    // @todo It would be good to revisit this once a content-width variable
    // becomes available.

    const maxWidthBuffer = maxWidth * 2.5;
    let showRightHandle = false;
    let showLeftHandle = false;
    /* eslint-disable no-lonely-if */
    // See https://github.com/GeChiUI/gutenberg/issues/7584.

    if (align === 'center') {
      // When the image is centered, show both handles.
      showRightHandle = true;
      showLeftHandle = true;
    } else if (Object(external_gc_i18n_["isRTL"])()) {
      // In RTL mode the image is on the right by default.
      // Show the right handle and hide the left handle only when it is
      // aligned left. Otherwise always show the left handle.
      if (align === 'left') {
        showRightHandle = true;
      } else {
        showLeftHandle = true;
      }
    } else {
      // Show the left handle and hide the right handle only when the
      // image is aligned right. Otherwise always show the right handle.
      if (align === 'right') {
        showLeftHandle = true;
      } else {
        showRightHandle = true;
      }
    }
    /* eslint-enable no-lonely-if */


    img = Object(external_gc_element_["createElement"])(external_gc_components_["ResizableBox"], {
      size: {
        width: width !== null && width !== void 0 ? width : 'auto',
        height: height !== null && height !== void 0 ? height : 'auto'
      },
      showHandle: isSelected,
      minWidth: minWidth,
      maxWidth: maxWidthBuffer,
      minHeight: minHeight,
      maxHeight: maxWidthBuffer / ratio,
      lockAspectRatio: true,
      enable: {
        top: false,
        right: showRightHandle,
        bottom: true,
        left: showLeftHandle
      },
      onResizeStart: onResizeStart,
      onResizeStop: (event, direction, elt, delta) => {
        onResizeStop();
        setAttributes({
          width: parseInt(currentWidth + delta.width, 10),
          height: parseInt(currentHeight + delta.height, 10)
        });
      }
    }, img);
  }

  return Object(external_gc_element_["createElement"])(external_gc_blockEditor_["__experimentalImageEditingProvider"], {
    id: id,
    url: url,
    naturalWidth: naturalWidth,
    naturalHeight: naturalHeight,
    clientWidth: clientWidth,
    onSaveImage: imageAttributes => setAttributes(imageAttributes),
    isEditing: isEditingImage,
    onFinishEditing: () => setIsEditingImage(false)
  }, !temporaryURL && controls, img, (!external_gc_blockEditor_["RichText"].isEmpty(caption) || isSelected) && Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"], {
    ref: captionRef,
    tagName: "figcaption",
    "aria-label": Object(external_gc_i18n_["__"])('图片说明文字'),
    placeholder: Object(external_gc_i18n_["__"])('添加说明文字'),
    value: caption,
    onChange: value => setAttributes({
      caption: value
    }),
    inlineToolbar: true,
    __unstableOnSplitAtEnd: () => insertBlocksAfter(Object(external_gc_blocks_["createBlock"])('core/paragraph'))
  }));
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/image/edit.js


/**
 * External dependencies
 */


/**
 * GeChiUI dependencies
 */








/* global gc */

/**
 * Internal dependencies
 */


/**
 * Module constants
 */


const edit_pickRelevantMediaFiles = (image, size) => {
  const imageProps = Object(external_lodash_["pick"])(image, ['alt', 'id', 'link', 'caption']);
  imageProps.url = Object(external_lodash_["get"])(image, ['sizes', size, 'url']) || Object(external_lodash_["get"])(image, ['media_details', 'sizes', size, 'source_url']) || image.url;
  return imageProps;
};
/**
 * Is the URL a temporary blob URL? A blob URL is one that is used temporarily
 * while the image is being uploaded and will not have an id yet allocated.
 *
 * @param {number=} id  The id of the image.
 * @param {string=} url The url of the image.
 *
 * @return {boolean} Is the URL a Blob URL
 */

const edit_isTemporaryImage = (id, url) => !id && Object(external_gc_blob_["isBlobURL"])(url);
/**
 * Is the url for the image hosted externally. An externally hosted image has no
 * id and is not a blob url.
 *
 * @param {number=} id  The id of the image.
 * @param {string=} url The url of the image.
 *
 * @return {boolean} Is the url an externally hosted url?
 */


const isExternalImage = (id, url) => url && !id && !Object(external_gc_blob_["isBlobURL"])(url);
/**
 * Checks if GC generated default image size. Size generation is skipped
 * when the image is smaller than the said size.
 *
 * @param {Object} image
 * @param {string} defaultSize
 *
 * @return {boolean} Whether or not it has default image size.
 */

function hasDefaultSize(image, defaultSize) {
  return Object(external_lodash_["has"])(image, ['sizes', defaultSize, 'url']) || Object(external_lodash_["has"])(image, ['media_details', 'sizes', defaultSize, 'source_url']);
}

function ImageEdit(_ref) {
  let {
    attributes,
    setAttributes,
    isSelected,
    className,
    noticeUI,
    insertBlocksAfter,
    noticeOperations,
    onReplace,
    context,
    clientId
  } = _ref;
  const {
    url = '',
    alt,
    caption,
    align,
    id,
    width,
    height,
    sizeSlug
  } = attributes;
  const [temporaryURL, setTemporaryURL] = Object(external_gc_element_["useState"])();
  const altRef = Object(external_gc_element_["useRef"])();
  Object(external_gc_element_["useEffect"])(() => {
    altRef.current = alt;
  }, [alt]);
  const captionRef = Object(external_gc_element_["useRef"])();
  Object(external_gc_element_["useEffect"])(() => {
    captionRef.current = caption;
  }, [caption]);
  const ref = Object(external_gc_element_["useRef"])();
  const {
    imageDefaultSize,
    mediaUpload
  } = Object(external_gc_data_["useSelect"])(select => {
    const {
      getSettings
    } = select(external_gc_blockEditor_["store"]);
    return Object(external_lodash_["pick"])(getSettings(), ['imageDefaultSize', 'mediaUpload']);
  }, []);

  function onUploadError(message) {
    noticeOperations.removeAllNotices();
    noticeOperations.createErrorNotice(message);
  }

  function onSelectImage(media) {
    var _gc, _gc$media, _gc$media$view, _gc$media$view$settin, _gc$media$view$settin2;

    if (!media || !media.url) {
      setAttributes({
        url: undefined,
        alt: undefined,
        id: undefined,
        title: undefined,
        caption: undefined
      });
      return;
    }

    if (Object(external_gc_blob_["isBlobURL"])(media.url)) {
      setTemporaryURL(media.url);
      return;
    }

    setTemporaryURL();
    let mediaAttributes = edit_pickRelevantMediaFiles(media, imageDefaultSize); // If a caption text was meanwhile written by the user,
    // make sure the text is not overwritten by empty captions.

    if (captionRef.current && !Object(external_lodash_["get"])(mediaAttributes, ['caption'])) {
      mediaAttributes = Object(external_lodash_["omit"])(mediaAttributes, ['caption']);
    }

    let additionalAttributes; // Reset the dimension attributes if changing to a different image.

    if (!media.id || media.id !== id) {
      additionalAttributes = {
        width: undefined,
        height: undefined,
        // Fallback to size "full" if there's no default image size.
        // It means the image is smaller, and the block will use a full-size URL.
        sizeSlug: hasDefaultSize(media, imageDefaultSize) ? imageDefaultSize : 'full'
      };
    } else {
      // Keep the same url when selecting the same file, so "Image Size"
      // option is not changed.
      additionalAttributes = {
        url
      };
    } // Check if default link setting should be used.


    let linkDestination = attributes.linkDestination;

    if (!linkDestination) {
      // Use the GeChiUI option to determine the proper default.
      // The constants used in Gutenberg do not match GC options so a little more complicated than ideal.
      // TODO: fix this in a follow up PR, requires updating media-text and ui component.
      switch (((_gc = gc) === null || _gc === void 0 ? void 0 : (_gc$media = _gc.media) === null || _gc$media === void 0 ? void 0 : (_gc$media$view = _gc$media.view) === null || _gc$media$view === void 0 ? void 0 : (_gc$media$view$settin = _gc$media$view.settings) === null || _gc$media$view$settin === void 0 ? void 0 : (_gc$media$view$settin2 = _gc$media$view$settin.defaultProps) === null || _gc$media$view$settin2 === void 0 ? void 0 : _gc$media$view$settin2.link) || constants_LINK_DESTINATION_NONE) {
        case 'file':
        case constants_LINK_DESTINATION_MEDIA:
          linkDestination = constants_LINK_DESTINATION_MEDIA;
          break;

        case 'post':
        case constants_LINK_DESTINATION_ATTACHMENT:
          linkDestination = constants_LINK_DESTINATION_ATTACHMENT;
          break;

        case LINK_DESTINATION_CUSTOM:
          linkDestination = LINK_DESTINATION_CUSTOM;
          break;

        case constants_LINK_DESTINATION_NONE:
          linkDestination = constants_LINK_DESTINATION_NONE;
          break;
      }
    } // Check if the image is linked to it's media.


    let href;

    switch (linkDestination) {
      case constants_LINK_DESTINATION_MEDIA:
        href = media.url;
        break;

      case constants_LINK_DESTINATION_ATTACHMENT:
        href = media.link;
        break;
    }

    mediaAttributes.href = href;
    setAttributes({ ...mediaAttributes,
      ...additionalAttributes,
      linkDestination
    });
  }

  function onSelectURL(newURL) {
    if (newURL !== url) {
      setAttributes({
        url: newURL,
        id: undefined,
        width: undefined,
        height: undefined,
        sizeSlug: imageDefaultSize
      });
    }
  }

  function updateAlignment(nextAlign) {
    const extraUpdatedAttributes = ['wide', 'full'].includes(nextAlign) ? {
      width: undefined,
      height: undefined
    } : {};
    setAttributes({ ...extraUpdatedAttributes,
      align: nextAlign
    });
  }

  let isTemp = edit_isTemporaryImage(id, url); // Upload a temporary image on mount.

  Object(external_gc_element_["useEffect"])(() => {
    if (!isTemp) {
      return;
    }

    const file = Object(external_gc_blob_["getBlobByURL"])(url);

    if (file) {
      mediaUpload({
        filesList: [file],
        onFileChange: _ref2 => {
          let [img] = _ref2;
          onSelectImage(img);
        },
        allowedTypes: constants_ALLOWED_MEDIA_TYPES,
        onError: message => {
          isTemp = false;
          noticeOperations.createErrorNotice(message);
          setAttributes({
            src: undefined,
            id: undefined,
            url: undefined
          });
        }
      });
    }
  }, []); // If an image is temporary, revoke the Blob url when it is uploaded (and is
  // no longer temporary).

  Object(external_gc_element_["useEffect"])(() => {
    if (isTemp) {
      setTemporaryURL(url);
      return;
    }

    Object(external_gc_blob_["revokeBlobURL"])(temporaryURL);
  }, [isTemp, url]);
  const isExternal = isExternalImage(id, url);
  const src = isExternal ? url : undefined;
  const mediaPreview = !!url && Object(external_gc_element_["createElement"])("img", {
    alt: Object(external_gc_i18n_["__"])('编辑图片'),
    title: Object(external_gc_i18n_["__"])('编辑图片'),
    className: 'edit-image-preview',
    src: url
  });
  const classes = classnames_default()(className, {
    'is-transient': temporaryURL,
    'is-resized': !!width || !!height,
    [`size-${sizeSlug}`]: sizeSlug
  });
  const blockProps = Object(external_gc_blockEditor_["useBlockProps"])({
    ref,
    className: classes
  });
  return Object(external_gc_element_["createElement"])("figure", blockProps, (temporaryURL || url) && Object(external_gc_element_["createElement"])(Image, {
    temporaryURL: temporaryURL,
    attributes: attributes,
    setAttributes: setAttributes,
    isSelected: isSelected,
    insertBlocksAfter: insertBlocksAfter,
    onReplace: onReplace,
    onSelectImage: onSelectImage,
    onSelectURL: onSelectURL,
    onUploadError: onUploadError,
    containerRef: ref,
    context: context,
    clientId: clientId
  }), !url && Object(external_gc_element_["createElement"])(external_gc_blockEditor_["BlockControls"], {
    group: "block"
  }, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["BlockAlignmentControl"], {
    value: align,
    onChange: updateAlignment
  })), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["MediaPlaceholder"], {
    icon: Object(external_gc_element_["createElement"])(external_gc_blockEditor_["BlockIcon"], {
      icon: library_image
    }),
    onSelect: onSelectImage,
    onSelectURL: onSelectURL,
    notices: noticeUI,
    onError: onUploadError,
    accept: "image/*",
    allowedTypes: constants_ALLOWED_MEDIA_TYPES,
    value: {
      id,
      src
    },
    mediaPreview: mediaPreview,
    disableMediaButtons: temporaryURL || url
  }));
}
/* harmony default export */ var image_edit = (Object(external_gc_components_["withNotices"])(ImageEdit));

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/image/save.js


/**
 * External dependencies
 */


/**
 * GeChiUI dependencies
 */


function image_save_save(_ref) {
  let {
    attributes
  } = _ref;
  const {
    url,
    alt,
    caption,
    align,
    href,
    rel,
    linkClass,
    width,
    height,
    id,
    linkTarget,
    sizeSlug,
    title
  } = attributes;
  const newRel = Object(external_lodash_["isEmpty"])(rel) ? undefined : rel;
  const classes = classnames_default()({
    [`align${align}`]: align,
    [`size-${sizeSlug}`]: sizeSlug,
    'is-resized': width || height
  });
  const image = Object(external_gc_element_["createElement"])("img", {
    src: url,
    alt: alt,
    className: id ? `gc-image-${id}` : null,
    width: width,
    height: height,
    title: title
  });
  const figure = Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, href ? Object(external_gc_element_["createElement"])("a", {
    className: linkClass,
    href: href,
    target: linkTarget,
    rel: newRel
  }, image) : image, !external_gc_blockEditor_["RichText"].isEmpty(caption) && Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"].Content, {
    tagName: "figcaption",
    value: caption
  }));

  if ('left' === align || 'right' === align || 'center' === align) {
    return Object(external_gc_element_["createElement"])("div", external_gc_blockEditor_["useBlockProps"].save(), Object(external_gc_element_["createElement"])("figure", {
      className: classes
    }, figure));
  }

  return Object(external_gc_element_["createElement"])("figure", external_gc_blockEditor_["useBlockProps"].save({
    className: classes
  }), figure);
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/image/transforms.js
/**
 * External dependencies
 */

/**
 * GeChiUI dependencies
 */






function stripFirstImage(attributes, _ref) {
  let {
    shortcode
  } = _ref;
  const {
    body
  } = document.implementation.createHTMLDocument('');
  body.innerHTML = shortcode.content;
  let nodeToRemove = body.querySelector('img'); // if an image has parents, find the topmost node to remove

  while (nodeToRemove && nodeToRemove.parentNode && nodeToRemove.parentNode !== body) {
    nodeToRemove = nodeToRemove.parentNode;
  }

  if (nodeToRemove) {
    nodeToRemove.parentNode.removeChild(nodeToRemove);
  }

  return body.innerHTML.trim();
}

function getFirstAnchorAttributeFormHTML(html, attributeName) {
  const {
    body
  } = document.implementation.createHTMLDocument('');
  body.innerHTML = html;
  const {
    firstElementChild
  } = body;

  if (firstElementChild && firstElementChild.nodeName === 'A') {
    return firstElementChild.getAttribute(attributeName) || undefined;
  }
}

const imageSchema = {
  img: {
    attributes: ['src', 'alt', 'title'],
    classes: ['alignleft', 'aligncenter', 'alignright', 'alignnone', /^gc-image-\d+$/]
  }
};

const schema = _ref2 => {
  let {
    phrasingContentSchema
  } = _ref2;
  return {
    figure: {
      require: ['img'],
      children: { ...imageSchema,
        a: {
          attributes: ['href', 'rel', 'target'],
          children: imageSchema
        },
        figcaption: {
          children: phrasingContentSchema
        }
      }
    }
  };
};

const image_transforms_transforms = {
  from: [{
    type: 'raw',
    isMatch: node => node.nodeName === 'FIGURE' && !!node.querySelector('img'),
    schema,
    transform: node => {
      // Search both figure and image classes. Alignment could be
      // set on either. ID is set on the image.
      const className = node.className + ' ' + node.querySelector('img').className;
      const alignMatches = /(?:^|\s)align(left|center|right)(?:$|\s)/.exec(className);
      const anchor = node.id === '' ? undefined : node.id;
      const align = alignMatches ? alignMatches[1] : undefined;
      const idMatches = /(?:^|\s)gc-image-(\d+)(?:$|\s)/.exec(className);
      const id = idMatches ? Number(idMatches[1]) : undefined;
      const anchorElement = node.querySelector('a');
      const linkDestination = anchorElement && anchorElement.href ? 'custom' : undefined;
      const href = anchorElement && anchorElement.href ? anchorElement.href : undefined;
      const rel = anchorElement && anchorElement.rel ? anchorElement.rel : undefined;
      const linkClass = anchorElement && anchorElement.className ? anchorElement.className : undefined;
      const attributes = Object(external_gc_blocks_["getBlockAttributes"])('core/image', node.outerHTML, {
        align,
        id,
        linkDestination,
        href,
        rel,
        linkClass,
        anchor
      });
      return Object(external_gc_blocks_["createBlock"])('core/image', attributes);
    }
  }, {
    // Note: when dragging and dropping multiple files onto a gallery this overrides the
    // gallery transform in order to add new images to the gallery instead of
    // creating a new gallery.
    type: 'files',

    isMatch(files) {
      // The following check is intended to catch non-image files when dropped together with images.
      if (files.some(file => file.type.indexOf('image/') === 0) && files.some(file => file.type.indexOf('image/') !== 0)) {
        const {
          createErrorNotice
        } = Object(external_gc_data_["dispatch"])(external_gc_notices_["store"]);
        createErrorNotice(Object(external_gc_i18n_["__"])('如果上传到画廊所有文件都需要是图像格式'), {
          id: 'gallery-transform-invalid-file'
        });
      }

      return Object(external_lodash_["every"])(files, file => file.type.indexOf('image/') === 0);
    },

    transform(files) {
      const blocks = files.map(file => {
        return Object(external_gc_blocks_["createBlock"])('core/image', {
          url: Object(external_gc_blob_["createBlobURL"])(file)
        });
      });
      return blocks;
    }

  }, {
    type: 'shortcode',
    tag: 'caption',
    attributes: {
      url: {
        type: 'string',
        source: 'attribute',
        attribute: 'src',
        selector: 'img'
      },
      alt: {
        type: 'string',
        source: 'attribute',
        attribute: 'alt',
        selector: 'img'
      },
      caption: {
        shortcode: stripFirstImage
      },
      href: {
        shortcode: (attributes, _ref3) => {
          let {
            shortcode
          } = _ref3;
          return getFirstAnchorAttributeFormHTML(shortcode.content, 'href');
        }
      },
      rel: {
        shortcode: (attributes, _ref4) => {
          let {
            shortcode
          } = _ref4;
          return getFirstAnchorAttributeFormHTML(shortcode.content, 'rel');
        }
      },
      linkClass: {
        shortcode: (attributes, _ref5) => {
          let {
            shortcode
          } = _ref5;
          return getFirstAnchorAttributeFormHTML(shortcode.content, 'class');
        }
      },
      id: {
        type: 'number',
        shortcode: _ref6 => {
          let {
            named: {
              id
            }
          } = _ref6;

          if (!id) {
            return;
          }

          return parseInt(id.replace('attachment_', ''), 10);
        }
      },
      align: {
        type: 'string',
        shortcode: _ref7 => {
          let {
            named: {
              align = 'alignnone'
            }
          } = _ref7;
          return align.replace('align', '');
        }
      }
    }
  }]
};
/* harmony default export */ var image_transforms = (image_transforms_transforms);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/image/index.js
/**
 * GeChiUI dependencies
 */


/**
 * Internal dependencies
 */



const image_metadata = {
  apiVersion: 2,
  name: "core/image",
  title: "图片",
  category: "media",
  usesContext: ["allowResize", "imageCrop", "fixedHeight"],
  description: "插入图片用于视觉说明。",
  keywords: ["img", "photo", "picture"],
  textdomain: "default",
  attributes: {
    align: {
      type: "string"
    },
    url: {
      type: "string",
      source: "attribute",
      selector: "img",
      attribute: "src"
    },
    alt: {
      type: "string",
      source: "attribute",
      selector: "img",
      attribute: "alt",
      "default": ""
    },
    caption: {
      type: "string",
      source: "html",
      selector: "figcaption"
    },
    title: {
      type: "string",
      source: "attribute",
      selector: "img",
      attribute: "title"
    },
    href: {
      type: "string",
      source: "attribute",
      selector: "figure > a",
      attribute: "href"
    },
    rel: {
      type: "string",
      source: "attribute",
      selector: "figure > a",
      attribute: "rel"
    },
    linkClass: {
      type: "string",
      source: "attribute",
      selector: "figure > a",
      attribute: "class"
    },
    id: {
      type: "number"
    },
    width: {
      type: "number"
    },
    height: {
      type: "number"
    },
    sizeSlug: {
      type: "string"
    },
    linkDestination: {
      type: "string"
    },
    linkTarget: {
      type: "string",
      source: "attribute",
      selector: "figure > a",
      attribute: "target"
    }
  },
  supports: {
    anchor: true,
    color: {
      __experimentalDuotone: "img",
      text: false,
      background: false
    },
    __experimentalBorder: {
      radius: true
    }
  },
  styles: [{
    name: "default",
    label: "默认",
    isDefault: true
  }, {
    name: "rounded",
    label: "圆角"
  }],
  editorStyle: "gc-block-image-editor",
  style: "gc-block-image"
};


const {
  name: image_name
} = image_metadata;

const image_settings = {
  icon: library_image,
  example: {
    attributes: {
      sizeSlug: 'large',
      url: 'https://s.w.org/images/core/5.3/MtBlanc1.jpg',
      // translators: Caption accompanying an image of the Mont Blanc, which serves as an example for the Image block.
      caption: Object(external_gc_i18n_["__"])('勃朗峰高耸：积雪、宁静、安恬。')
    }
  },

  __experimentalLabel(attributes, _ref) {
    let {
      context
    } = _ref;

    if (context === 'accessibility') {
      const {
        caption,
        alt,
        url
      } = attributes;

      if (!url) {
        return Object(external_gc_i18n_["__"])('空');
      }

      if (!alt) {
        return caption || '';
      } // This is intended to be read by a screen reader.
      // A period simply means a pause, no need to translate it.


      return alt + (caption ? '. ' + caption : '');
    }
  },

  getEditWrapperProps(attributes) {
    return {
      'data-align': attributes.align
    };
  },

  transforms: image_transforms,
  edit: image_edit,
  save: image_save_save,
  deprecated: image_deprecated
};

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/comment.js


/**
 * GeChiUI dependencies
 */

const comment_comment = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  viewBox: "0 0 24 24",
  xmlns: "http://www.w3.org/2000/svg"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M18 4H6c-1.1 0-2 .9-2 2v12.9c0 .6.5 1.1 1.1 1.1.3 0 .5-.1.8-.3L8.5 17H18c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm.5 11c0 .3-.2.5-.5.5H7.9l-2.4 2.4V6c0-.3.2-.5.5-.5h12c.3 0 .5.2.5.5v9z"
}));
/* harmony default export */ var library_comment = (comment_comment);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/latest-comments/edit.js


/**
 * GeChiUI dependencies
 */




/**
 * Minimum number of comments a user can show using this block.
 *
 * @type {number}
 */

const MIN_COMMENTS = 1;
/**
 * Maximum number of comments a user can show using this block.
 *
 * @type {number}
 */

const MAX_COMMENTS = 100;
function LatestComments(_ref) {
  let {
    attributes,
    setAttributes
  } = _ref;
  const {
    commentsToShow,
    displayAvatar,
    displayDate,
    displayExcerpt
  } = attributes;
  return Object(external_gc_element_["createElement"])("div", Object(external_gc_blockEditor_["useBlockProps"])(), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InspectorControls"], null, Object(external_gc_element_["createElement"])(external_gc_components_["PanelBody"], {
    title: Object(external_gc_i18n_["__"])('最新评论设置')
  }, Object(external_gc_element_["createElement"])(external_gc_components_["ToggleControl"], {
    label: Object(external_gc_i18n_["__"])('显示头像'),
    checked: displayAvatar,
    onChange: () => setAttributes({
      displayAvatar: !displayAvatar
    })
  }), Object(external_gc_element_["createElement"])(external_gc_components_["ToggleControl"], {
    label: Object(external_gc_i18n_["__"])('显示日期'),
    checked: displayDate,
    onChange: () => setAttributes({
      displayDate: !displayDate
    })
  }), Object(external_gc_element_["createElement"])(external_gc_components_["ToggleControl"], {
    label: Object(external_gc_i18n_["__"])('显示摘要'),
    checked: displayExcerpt,
    onChange: () => setAttributes({
      displayExcerpt: !displayExcerpt
    })
  }), Object(external_gc_element_["createElement"])(external_gc_components_["RangeControl"], {
    label: Object(external_gc_i18n_["__"])('评论数量'),
    value: commentsToShow,
    onChange: value => setAttributes({
      commentsToShow: value
    }),
    min: MIN_COMMENTS,
    max: MAX_COMMENTS,
    required: true
  }))), Object(external_gc_element_["createElement"])(external_gc_components_["Disabled"], null, Object(external_gc_element_["createElement"])(external_gc_serverSideRender_default.a, {
    block: "core/latest-comments",
    attributes: attributes // The preview uses the site's locale to make it more true to how
    // the block appears on the frontend. Setting the locale
    // explicitly prevents any middleware from setting it to 'user'.
    ,
    urlQueryArgs: {
      _locale: 'site'
    }
  })));
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/latest-comments/index.js
/**
 * GeChiUI dependencies
 */

/**
 * Internal dependencies
 */

const latest_comments_metadata = {
  apiVersion: 2,
  name: "core/latest-comments",
  title: "最新评论",
  category: "widgets",
  description: "显示您的最近评论的列表。",
  keywords: ["recent comments"],
  textdomain: "default",
  attributes: {
    commentsToShow: {
      type: "number",
      "default": 5,
      minimum: 1,
      maximum: 100
    },
    displayAvatar: {
      type: "boolean",
      "default": true
    },
    displayDate: {
      type: "boolean",
      "default": true
    },
    displayExcerpt: {
      type: "boolean",
      "default": true
    }
  },
  supports: {
    align: true,
    html: false
  },
  editorStyle: "gc-block-latest-comments-editor",
  style: "gc-block-latest-comments"
};

const {
  name: latest_comments_name
} = latest_comments_metadata;

const latest_comments_settings = {
  icon: library_comment,
  example: {},
  edit: LatestComments
};

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/post-list.js


/**
 * GeChiUI dependencies
 */

const postList = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  viewBox: "0 0 24 24",
  xmlns: "http://www.w3.org/2000/svg"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M18 4H6c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm.5 14c0 .3-.2.5-.5.5H6c-.3 0-.5-.2-.5-.5V6c0-.3.2-.5.5-.5h12c.3 0 .5.2.5.5v12zM7 11h2V9H7v2zm0 4h2v-2H7v2zm3-4h7V9h-7v2zm0 4h7v-2h-7v2z"
}));
/* harmony default export */ var post_list = (postList);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/latest-posts/deprecated.js
/**
 * Internal dependencies
 */
const latest_posts_deprecated_metadata = {
  apiVersion: 2,
  name: "core/latest-posts",
  title: "最新文章",
  category: "widgets",
  description: "显示您的近期文章的列表。",
  keywords: ["recent posts"],
  textdomain: "default",
  attributes: {
    categories: {
      type: "array",
      items: {
        type: "object"
      }
    },
    selectedAuthor: {
      type: "number"
    },
    postsToShow: {
      type: "number",
      "default": 5
    },
    displayPostContent: {
      type: "boolean",
      "default": false
    },
    displayPostContentRadio: {
      type: "string",
      "default": "excerpt"
    },
    excerptLength: {
      type: "number",
      "default": 55
    },
    displayAuthor: {
      type: "boolean",
      "default": false
    },
    displayPostDate: {
      type: "boolean",
      "default": false
    },
    postLayout: {
      type: "string",
      "default": "list"
    },
    columns: {
      type: "number",
      "default": 3
    },
    order: {
      type: "string",
      "default": "desc"
    },
    orderBy: {
      type: "string",
      "default": "date"
    },
    displayFeaturedImage: {
      type: "boolean",
      "default": false
    },
    featuredImageAlign: {
      type: "string",
      "enum": ["left", "center", "right"]
    },
    featuredImageSizeSlug: {
      type: "string",
      "default": "thumbnail"
    },
    featuredImageSizeWidth: {
      type: "number",
      "default": null
    },
    featuredImageSizeHeight: {
      type: "number",
      "default": null
    },
    addLinkToFeaturedImage: {
      type: "boolean",
      "default": false
    }
  },
  supports: {
    align: true,
    html: false
  },
  editorStyle: "gc-block-latest-posts-editor",
  style: "gc-block-latest-posts"
};
const {
  attributes: deprecated_attributes
} = latest_posts_deprecated_metadata;
/* harmony default export */ var latest_posts_deprecated = ([{
  attributes: { ...deprecated_attributes,
    categories: {
      type: 'string'
    }
  },
  supports: {
    align: true,
    html: false
  },
  migrate: oldAttributes => {
    // This needs the full category object, not just the ID.
    return { ...oldAttributes,
      categories: [{
        id: Number(oldAttributes.categories)
      }]
    };
  },
  isEligible: _ref => {
    let {
      categories
    } = _ref;
    return categories && 'string' === typeof categories;
  },
  save: () => null
}]);

// EXTERNAL MODULE: external ["gc","date"]
var external_gc_date_ = __webpack_require__("Bimd");

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/list.js


/**
 * GeChiUI dependencies
 */

const list = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  viewBox: "0 0 24 24",
  xmlns: "http://www.w3.org/2000/svg"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M4 4v1.5h16V4H4zm8 8.5h8V11h-8v1.5zM4 20h16v-1.5H4V20zm4-8c0-1.1-.9-2-2-2s-2 .9-2 2 .9 2 2 2 2-.9 2-2z"
}));
/* harmony default export */ var library_list = (list);

// EXTERNAL MODULE: ./node_modules/@gechiui/icons/build-module/library/grid.js
var grid = __webpack_require__("FFw/");

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/latest-posts/constants.js
const MIN_EXCERPT_LENGTH = 10;
const MAX_EXCERPT_LENGTH = 100;
const MAX_POSTS_COLUMNS = 6;

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/latest-posts/edit.js


/**
 * External dependencies
 */


/**
 * GeChiUI dependencies
 */









/**
 * Internal dependencies
 */


/**
 * Module Constants
 */

const CATEGORIES_LIST_QUERY = {
  per_page: -1,
  context: 'view'
};
const USERS_LIST_QUERY = {
  per_page: -1,
  has_published_posts: ['post'],
  context: 'view'
};
function LatestPostsEdit(_ref) {
  var _categoriesList$reduc;

  let {
    attributes,
    setAttributes
  } = _ref;
  const {
    postsToShow,
    order,
    orderBy,
    categories,
    selectedAuthor,
    displayFeaturedImage,
    displayPostContentRadio,
    displayPostContent,
    displayPostDate,
    displayAuthor,
    postLayout,
    columns,
    excerptLength,
    featuredImageAlign,
    featuredImageSizeSlug,
    featuredImageSizeWidth,
    featuredImageSizeHeight,
    addLinkToFeaturedImage
  } = attributes;
  const {
    imageSizeOptions,
    latestPosts,
    defaultImageWidth,
    defaultImageHeight,
    categoriesList,
    authorList
  } = Object(external_gc_data_["useSelect"])(select => {
    const {
      getEntityRecords,
      getMedia,
      getUsers
    } = select(external_gc_coreData_["store"]);
    const {
      getSettings
    } = select(external_gc_blockEditor_["store"]);
    const {
      imageSizes,
      imageDimensions
    } = getSettings();
    const catIds = categories && categories.length > 0 ? categories.map(cat => cat.id) : [];
    const latestPostsQuery = Object(external_lodash_["pickBy"])({
      categories: catIds,
      author: selectedAuthor,
      order,
      orderby: orderBy,
      per_page: postsToShow
    }, value => !Object(external_lodash_["isUndefined"])(value));
    const posts = getEntityRecords('postType', 'post', latestPostsQuery);
    return {
      defaultImageWidth: Object(external_lodash_["get"])(imageDimensions, [featuredImageSizeSlug, 'width'], 0),
      defaultImageHeight: Object(external_lodash_["get"])(imageDimensions, [featuredImageSizeSlug, 'height'], 0),
      imageSizeOptions: imageSizes.filter(_ref2 => {
        let {
          slug
        } = _ref2;
        return slug !== 'full';
      }).map(_ref3 => {
        let {
          name,
          slug
        } = _ref3;
        return {
          value: slug,
          label: name
        };
      }),
      latestPosts: !Array.isArray(posts) ? posts : posts.map(post => {
        if (!post.featured_media) return post;
        const image = getMedia(post.featured_media);
        let url = Object(external_lodash_["get"])(image, ['media_details', 'sizes', featuredImageSizeSlug, 'source_url'], null);

        if (!url) {
          url = Object(external_lodash_["get"])(image, 'source_url', null);
        }

        const featuredImageInfo = {
          url,
          // eslint-disable-next-line camelcase
          alt: image === null || image === void 0 ? void 0 : image.alt_text
        };
        return { ...post,
          featuredImageInfo
        };
      }),
      categoriesList: getEntityRecords('taxonomy', 'category', CATEGORIES_LIST_QUERY),
      authorList: getUsers(USERS_LIST_QUERY)
    };
  }, [featuredImageSizeSlug, postsToShow, order, orderBy, categories, selectedAuthor]);
  const categorySuggestions = (_categoriesList$reduc = categoriesList === null || categoriesList === void 0 ? void 0 : categoriesList.reduce((accumulator, category) => ({ ...accumulator,
    [category.name]: category
  }), {})) !== null && _categoriesList$reduc !== void 0 ? _categoriesList$reduc : {};

  const selectCategories = tokens => {
    const hasNoSuggestion = tokens.some(token => typeof token === 'string' && !categorySuggestions[token]);

    if (hasNoSuggestion) {
      return;
    } // Categories that are already will be objects, while new additions will be strings (the name).
    // allCategories nomalizes the array so that they are all objects.


    const allCategories = tokens.map(token => {
      return typeof token === 'string' ? categorySuggestions[token] : token;
    }); // We do nothing if the category is not selected
    // from suggestions.

    if (Object(external_lodash_["includes"])(allCategories, null)) {
      return false;
    }

    setAttributes({
      categories: allCategories
    });
  };

  const hasPosts = !!(latestPosts !== null && latestPosts !== void 0 && latestPosts.length);
  const inspectorControls = Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InspectorControls"], null, Object(external_gc_element_["createElement"])(external_gc_components_["PanelBody"], {
    title: Object(external_gc_i18n_["__"])('文章内容设置')
  }, Object(external_gc_element_["createElement"])(external_gc_components_["ToggleControl"], {
    label: Object(external_gc_i18n_["__"])('文章内容'),
    checked: displayPostContent,
    onChange: value => setAttributes({
      displayPostContent: value
    })
  }), displayPostContent && Object(external_gc_element_["createElement"])(external_gc_components_["RadioControl"], {
    label: Object(external_gc_i18n_["__"])('显示：'),
    selected: displayPostContentRadio,
    options: [{
      label: Object(external_gc_i18n_["__"])('摘要'),
      value: 'excerpt'
    }, {
      label: Object(external_gc_i18n_["__"])('整个文章'),
      value: 'full_post'
    }],
    onChange: value => setAttributes({
      displayPostContentRadio: value
    })
  }), displayPostContent && displayPostContentRadio === 'excerpt' && Object(external_gc_element_["createElement"])(external_gc_components_["RangeControl"], {
    label: Object(external_gc_i18n_["__"])('摘要的最大字数'),
    value: excerptLength,
    onChange: value => setAttributes({
      excerptLength: value
    }),
    min: MIN_EXCERPT_LENGTH,
    max: MAX_EXCERPT_LENGTH
  })), Object(external_gc_element_["createElement"])(external_gc_components_["PanelBody"], {
    title: Object(external_gc_i18n_["__"])('文章元数据设置')
  }, Object(external_gc_element_["createElement"])(external_gc_components_["ToggleControl"], {
    label: Object(external_gc_i18n_["__"])('显示作者名'),
    checked: displayAuthor,
    onChange: value => setAttributes({
      displayAuthor: value
    })
  }), Object(external_gc_element_["createElement"])(external_gc_components_["ToggleControl"], {
    label: Object(external_gc_i18n_["__"])('显示文章日期'),
    checked: displayPostDate,
    onChange: value => setAttributes({
      displayPostDate: value
    })
  })), Object(external_gc_element_["createElement"])(external_gc_components_["PanelBody"], {
    title: Object(external_gc_i18n_["__"])('特色图片设置')
  }, Object(external_gc_element_["createElement"])(external_gc_components_["ToggleControl"], {
    label: Object(external_gc_i18n_["__"])('显示特色图片'),
    checked: displayFeaturedImage,
    onChange: value => setAttributes({
      displayFeaturedImage: value
    })
  }), displayFeaturedImage && Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["__experimentalImageSizeControl"], {
    onChange: value => {
      const newAttrs = {};

      if (value.hasOwnProperty('width')) {
        newAttrs.featuredImageSizeWidth = value.width;
      }

      if (value.hasOwnProperty('height')) {
        newAttrs.featuredImageSizeHeight = value.height;
      }

      setAttributes(newAttrs);
    },
    slug: featuredImageSizeSlug,
    width: featuredImageSizeWidth,
    height: featuredImageSizeHeight,
    imageWidth: defaultImageWidth,
    imageHeight: defaultImageHeight,
    imageSizeOptions: imageSizeOptions,
    onChangeImage: value => setAttributes({
      featuredImageSizeSlug: value,
      featuredImageSizeWidth: undefined,
      featuredImageSizeHeight: undefined
    })
  }), Object(external_gc_element_["createElement"])(external_gc_components_["BaseControl"], {
    className: "block-editor-image-alignment-control__row"
  }, Object(external_gc_element_["createElement"])(external_gc_components_["BaseControl"].VisualLabel, null, Object(external_gc_i18n_["__"])('图片对齐方式')), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["BlockAlignmentToolbar"], {
    value: featuredImageAlign,
    onChange: value => setAttributes({
      featuredImageAlign: value
    }),
    controls: ['left', 'center', 'right'],
    isCollapsed: false
  })), Object(external_gc_element_["createElement"])(external_gc_components_["ToggleControl"], {
    label: Object(external_gc_i18n_["__"])('加入指向特色图片的链接'),
    checked: addLinkToFeaturedImage,
    onChange: value => setAttributes({
      addLinkToFeaturedImage: value
    })
  }))), Object(external_gc_element_["createElement"])(external_gc_components_["PanelBody"], {
    title: Object(external_gc_i18n_["__"])('排序和筛选')
  }, Object(external_gc_element_["createElement"])(external_gc_components_["QueryControls"], {
    order,
    orderBy,
    numberOfItems: postsToShow,
    onOrderChange: value => setAttributes({
      order: value
    }),
    onOrderByChange: value => setAttributes({
      orderBy: value
    }),
    onNumberOfItemsChange: value => setAttributes({
      postsToShow: value
    }),
    categorySuggestions: categorySuggestions,
    onCategoryChange: selectCategories,
    selectedCategories: categories,
    onAuthorChange: value => setAttributes({
      selectedAuthor: '' !== value ? Number(value) : undefined
    }),
    authorList: authorList !== null && authorList !== void 0 ? authorList : [],
    selectedAuthorId: selectedAuthor
  }), postLayout === 'grid' && Object(external_gc_element_["createElement"])(external_gc_components_["RangeControl"], {
    label: Object(external_gc_i18n_["__"])('栏目'),
    value: columns,
    onChange: value => setAttributes({
      columns: value
    }),
    min: 2,
    max: !hasPosts ? MAX_POSTS_COLUMNS : Math.min(MAX_POSTS_COLUMNS, latestPosts.length),
    required: true
  })));
  const blockProps = Object(external_gc_blockEditor_["useBlockProps"])({
    className: classnames_default()({
      'gc-block-latest-posts__list': true,
      'is-grid': postLayout === 'grid',
      'has-dates': displayPostDate,
      'has-author': displayAuthor,
      [`columns-${columns}`]: postLayout === 'grid'
    })
  });

  if (!hasPosts) {
    return Object(external_gc_element_["createElement"])("div", blockProps, inspectorControls, Object(external_gc_element_["createElement"])(external_gc_components_["Placeholder"], {
      icon: library_pin,
      label: Object(external_gc_i18n_["__"])('最新文章')
    }, !Array.isArray(latestPosts) ? Object(external_gc_element_["createElement"])(external_gc_components_["Spinner"], null) : Object(external_gc_i18n_["__"])('未找到文章。')));
  } // Removing posts from display should be instant.


  const displayPosts = latestPosts.length > postsToShow ? latestPosts.slice(0, postsToShow) : latestPosts;
  const layoutControls = [{
    icon: library_list,
    title: Object(external_gc_i18n_["__"])('列表视图'),
    onClick: () => setAttributes({
      postLayout: 'list'
    }),
    isActive: postLayout === 'list'
  }, {
    icon: grid["a" /* default */],
    title: Object(external_gc_i18n_["__"])('网格视图'),
    onClick: () => setAttributes({
      postLayout: 'grid'
    }),
    isActive: postLayout === 'grid'
  }];

  const dateFormat = Object(external_gc_date_["__experimentalGetSettings"])().formats.date;

  return Object(external_gc_element_["createElement"])("div", null, inspectorControls, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["BlockControls"], null, Object(external_gc_element_["createElement"])(external_gc_components_["ToolbarGroup"], {
    controls: layoutControls
  })), Object(external_gc_element_["createElement"])("ul", blockProps, displayPosts.map((post, i) => {
    const titleTrimmed = Object(external_lodash_["invoke"])(post, ['title', 'rendered', 'trim']);
    let excerpt = post.excerpt.rendered;
    const currentAuthor = authorList === null || authorList === void 0 ? void 0 : authorList.find(author => author.id === post.author);
    const excerptElement = document.createElement('div');
    excerptElement.innerHTML = excerpt;
    excerpt = excerptElement.textContent || excerptElement.innerText || '';
    const {
      featuredImageInfo: {
        url: imageSourceUrl,
        alt: featuredImageAlt
      } = {}
    } = post;
    const imageClasses = classnames_default()({
      'gc-block-latest-posts__featured-image': true,
      [`align${featuredImageAlign}`]: !!featuredImageAlign
    });
    const renderFeaturedImage = displayFeaturedImage && imageSourceUrl;
    const featuredImage = renderFeaturedImage && Object(external_gc_element_["createElement"])("img", {
      src: imageSourceUrl,
      alt: featuredImageAlt,
      style: {
        maxWidth: featuredImageSizeWidth,
        maxHeight: featuredImageSizeHeight
      }
    });
    const needsReadMore = excerptLength < excerpt.trim().split(' ').length && post.excerpt.raw === '';
    const postExcerpt = needsReadMore ? Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, excerpt.trim().split(' ', excerptLength).join(' '), Object(external_gc_i18n_["__"])(' … '), Object(external_gc_element_["createElement"])("a", {
      href: post.link,
      rel: "noopener noreferrer"
    }, Object(external_gc_i18n_["__"])('阅读更多'))) : excerpt;
    return Object(external_gc_element_["createElement"])("li", {
      key: i
    }, renderFeaturedImage && Object(external_gc_element_["createElement"])("div", {
      className: imageClasses
    }, addLinkToFeaturedImage ? Object(external_gc_element_["createElement"])("a", {
      href: post.link,
      rel: "noreferrer noopener"
    }, featuredImage) : featuredImage), Object(external_gc_element_["createElement"])("a", {
      href: post.link,
      rel: "noreferrer noopener"
    }, titleTrimmed ? Object(external_gc_element_["createElement"])(external_gc_element_["RawHTML"], null, titleTrimmed) : Object(external_gc_i18n_["__"])('（无标题）')), displayAuthor && currentAuthor && Object(external_gc_element_["createElement"])("div", {
      className: "gc-block-latest-posts__post-author"
    }, Object(external_gc_i18n_["sprintf"])(
    /* translators: byline. %s: current author. */
    Object(external_gc_i18n_["__"])('作者：%s'), currentAuthor.name)), displayPostDate && post.date_gmt && Object(external_gc_element_["createElement"])("time", {
      dateTime: Object(external_gc_date_["format"])('c', post.date_gmt),
      className: "gc-block-latest-posts__post-date"
    }, Object(external_gc_date_["dateI18n"])(dateFormat, post.date_gmt)), displayPostContent && displayPostContentRadio === 'excerpt' && Object(external_gc_element_["createElement"])("div", {
      className: "gc-block-latest-posts__post-excerpt"
    }, postExcerpt), displayPostContent && displayPostContentRadio === 'full_post' && Object(external_gc_element_["createElement"])("div", {
      className: "gc-block-latest-posts__post-full-content"
    }, Object(external_gc_element_["createElement"])(external_gc_element_["RawHTML"], {
      key: "html"
    }, post.content.raw.trim())));
  })));
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/latest-posts/index.js
/**
 * GeChiUI dependencies
 */

/**
 * Internal dependencies
 */



const latest_posts_metadata = {
  apiVersion: 2,
  name: "core/latest-posts",
  title: "最新文章",
  category: "widgets",
  description: "显示您的近期文章的列表。",
  keywords: ["recent posts"],
  textdomain: "default",
  attributes: {
    categories: {
      type: "array",
      items: {
        type: "object"
      }
    },
    selectedAuthor: {
      type: "number"
    },
    postsToShow: {
      type: "number",
      "default": 5
    },
    displayPostContent: {
      type: "boolean",
      "default": false
    },
    displayPostContentRadio: {
      type: "string",
      "default": "excerpt"
    },
    excerptLength: {
      type: "number",
      "default": 55
    },
    displayAuthor: {
      type: "boolean",
      "default": false
    },
    displayPostDate: {
      type: "boolean",
      "default": false
    },
    postLayout: {
      type: "string",
      "default": "list"
    },
    columns: {
      type: "number",
      "default": 3
    },
    order: {
      type: "string",
      "default": "desc"
    },
    orderBy: {
      type: "string",
      "default": "date"
    },
    displayFeaturedImage: {
      type: "boolean",
      "default": false
    },
    featuredImageAlign: {
      type: "string",
      "enum": ["left", "center", "right"]
    },
    featuredImageSizeSlug: {
      type: "string",
      "default": "thumbnail"
    },
    featuredImageSizeWidth: {
      type: "number",
      "default": null
    },
    featuredImageSizeHeight: {
      type: "number",
      "default": null
    },
    addLinkToFeaturedImage: {
      type: "boolean",
      "default": false
    }
  },
  supports: {
    align: true,
    html: false
  },
  editorStyle: "gc-block-latest-posts-editor",
  style: "gc-block-latest-posts"
};
const {
  name: latest_posts_name
} = latest_posts_metadata;

const latest_posts_settings = {
  icon: post_list,
  example: {},
  edit: LatestPostsEdit,
  deprecated: latest_posts_deprecated
};

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/list/deprecated.js


/**
 * GeChiUI dependencies
 */

/**
 * Internal dependencies
 */


const list_deprecated_v1 = {
  attributes: {
    ordered: {
      type: 'boolean',
      default: false,
      __experimentalRole: 'content'
    },
    values: {
      type: 'string',
      source: 'html',
      selector: 'ol,ul',
      multiline: 'li',
      __unstableMultilineWrapperTags: ['ol', 'ul'],
      default: '',
      __experimentalRole: 'content'
    },
    type: {
      type: 'string'
    },
    start: {
      type: 'number'
    },
    reversed: {
      type: 'boolean'
    },
    placeholder: {
      type: 'string'
    }
  },
  supports: {
    anchor: true,
    className: false,
    typography: {
      fontSize: true,
      __experimentalFontFamily: true
    },
    color: {
      gradients: true,
      link: true
    },
    __unstablePasteTextInline: true,
    __experimentalSelector: 'ol,ul',
    __experimentalSlashInserter: true
  },

  save(_ref) {
    let {
      attributes
    } = _ref;
    const {
      ordered,
      values,
      type,
      reversed,
      start
    } = attributes;
    const TagName = ordered ? 'ol' : 'ul';
    return Object(external_gc_element_["createElement"])(TagName, external_gc_blockEditor_["useBlockProps"].save({
      type,
      reversed,
      start
    }), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"].Content, {
      value: values,
      multiline: "li"
    }));
  },

  migrate: migrate_font_family,

  isEligible(_ref2) {
    var _style$typography;

    let {
      style
    } = _ref2;
    return style === null || style === void 0 ? void 0 : (_style$typography = style.typography) === null || _style$typography === void 0 ? void 0 : _style$typography.fontFamily;
  }

};
/**
 * New deprecations need to be placed first
 * for them to have higher priority.
 *
 * Old deprecations may need to be updated as well.
 *
 * See block-deprecation.md
 */

/* harmony default export */ var list_deprecated = ([list_deprecated_v1]);

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/format-list-bullets-rtl.js


/**
 * GeChiUI dependencies
 */

const formatListBulletsRTL = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M4 8.8h8.9V7.2H4v1.6zm0 7h8.9v-1.5H4v1.5zM18 13c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0-3c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2z"
}));
/* harmony default export */ var format_list_bullets_rtl = (formatListBulletsRTL);

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/format-list-bullets.js


/**
 * GeChiUI dependencies
 */

const formatListBullets = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M11.1 15.8H20v-1.5h-8.9v1.5zm0-8.6v1.5H20V7.2h-8.9zM6 13c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0-7c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"
}));
/* harmony default export */ var format_list_bullets = (formatListBullets);

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/format-list-numbered-rtl.js


/**
 * GeChiUI dependencies
 */

const formatListNumberedRTL = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M3.8 15.8h8.9v-1.5H3.8v1.5zm0-7h8.9V7.2H3.8v1.6zm14.7-2.1V10h1V5.3l-2.2.7.3 1 .9-.3zm1.2 6.1c-.5-.6-1.2-.5-1.7-.4-.3.1-.5.2-.7.3l.1 1.1c.2-.2.5-.4.8-.5.3-.1.6 0 .7.1.2.3 0 .8-.2 1.1-.5.8-.9 1.6-1.4 2.5H20v-1h-.9c.3-.6.8-1.4.9-2.1 0-.3 0-.8-.3-1.1z"
}));
/* harmony default export */ var format_list_numbered_rtl = (formatListNumberedRTL);

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/format-list-numbered.js


/**
 * GeChiUI dependencies
 */

const formatListNumbered = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M11.1 15.8H20v-1.5h-8.9v1.5zm0-8.6v1.5H20V7.2h-8.9zM5 6.7V10h1V5.3L3.8 6l.4 1 .8-.3zm-.4 5.7c-.3.1-.5.2-.7.3l.1 1.1c.2-.2.5-.4.8-.5.3-.1.6 0 .7.1.2.3 0 .8-.2 1.1-.5.8-.9 1.6-1.4 2.5h2.7v-1h-1c.3-.6.8-1.4.9-2.1.1-.3 0-.8-.2-1.1-.5-.6-1.3-.5-1.7-.4z"
}));
/* harmony default export */ var format_list_numbered = (formatListNumbered);

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/format-outdent-rtl.js


/**
 * GeChiUI dependencies
 */

const formatOutdentRTL = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M20 5.5H4V4H20V5.5ZM12 12.5H4V11H12V12.5ZM20 20V18.5H4V20H20ZM15.4697 14.9697L18.4393 12L15.4697 9.03033L16.5303 7.96967L20.0303 11.4697L20.5607 12L20.0303 12.5303L16.5303 16.0303L15.4697 14.9697Z"
}));
/* harmony default export */ var format_outdent_rtl = (formatOutdentRTL);

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/format-outdent.js


/**
 * GeChiUI dependencies
 */

const formatOutdent = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M4 7.2v1.5h16V7.2H4zm8 8.6h8v-1.5h-8v1.5zm-4-4.6l-4 4 4 4 1-1-3-3 3-3-1-1z"
}));
/* harmony default export */ var format_outdent = (formatOutdent);

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/format-indent-rtl.js


/**
 * GeChiUI dependencies
 */

const formatIndentRTL = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M20 5.5H4V4H20V5.5ZM12 12.5H4V11H12V12.5ZM20 20V18.5H4V20H20ZM20.0303 9.03033L17.0607 12L20.0303 14.9697L18.9697 16.0303L15.4697 12.5303L14.9393 12L15.4697 11.4697L18.9697 7.96967L20.0303 9.03033Z"
}));
/* harmony default export */ var format_indent_rtl = (formatIndentRTL);

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/format-indent.js


/**
 * GeChiUI dependencies
 */

const formatIndent = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M4 7.2v1.5h16V7.2H4zm8 8.6h8v-1.5h-8v1.5zm-8-3.5l3 3-3 3 1 1 4-4-4-4-1 1z"
}));
/* harmony default export */ var format_indent = (formatIndent);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/list/ordered-list-settings.js


/**
 * GeChiUI dependencies
 */




const OrderedListSettings = _ref => {
  let {
    setAttributes,
    reversed,
    start
  } = _ref;
  return Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InspectorControls"], null, Object(external_gc_element_["createElement"])(external_gc_components_["PanelBody"], {
    title: Object(external_gc_i18n_["__"])('有序列表设置')
  }, Object(external_gc_element_["createElement"])(external_gc_components_["TextControl"], {
    label: Object(external_gc_i18n_["__"])('起始值'),
    type: "number",
    onChange: value => {
      const int = parseInt(value, 10);
      setAttributes({
        // It should be possible to unset the value,
        // e.g. with an empty string.
        start: isNaN(int) ? undefined : int
      });
    },
    value: Number.isInteger(start) ? start.toString(10) : '',
    step: "1"
  }), Object(external_gc_element_["createElement"])(external_gc_components_["ToggleControl"], {
    label: Object(external_gc_i18n_["__"])('倒序列表编号'),
    checked: reversed || false,
    onChange: value => {
      setAttributes({
        // Unset the attribute if not reversed.
        reversed: value || undefined
      });
    }
  })));
};

/* harmony default export */ var ordered_list_settings = (OrderedListSettings);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/list/edit.js



/**
 * GeChiUI dependencies
 */






/**
 * Internal dependencies
 */



function ListEdit(_ref) {
  let {
    attributes,
    setAttributes,
    mergeBlocks,
    onReplace,
    style
  } = _ref;
  const {
    ordered,
    values,
    type,
    reversed,
    start,
    placeholder
  } = attributes;
  const tagName = ordered ? 'ol' : 'ul';

  const controls = _ref2 => {
    let {
      value,
      onChange,
      onFocus
    } = _ref2;
    return Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichTextShortcut"], {
      type: "primary",
      character: "[",
      onUse: () => {
        onChange(Object(external_gc_richText_["__unstableOutdentListItems"])(value));
      }
    }), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichTextShortcut"], {
      type: "primary",
      character: "]",
      onUse: () => {
        onChange(Object(external_gc_richText_["__unstableIndentListItems"])(value, {
          type: tagName
        }));
      }
    }), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichTextShortcut"], {
      type: "primary",
      character: "m",
      onUse: () => {
        onChange(Object(external_gc_richText_["__unstableIndentListItems"])(value, {
          type: tagName
        }));
      }
    }), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichTextShortcut"], {
      type: "primaryShift",
      character: "m",
      onUse: () => {
        onChange(Object(external_gc_richText_["__unstableOutdentListItems"])(value));
      }
    }), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["BlockControls"], {
      group: "block"
    }, Object(external_gc_element_["createElement"])(external_gc_components_["ToolbarButton"], {
      icon: Object(external_gc_i18n_["isRTL"])() ? format_list_bullets_rtl : format_list_bullets,
      title: Object(external_gc_i18n_["__"])('无序'),
      describedBy: Object(external_gc_i18n_["__"])('转换为无序列表'),
      isActive: Object(external_gc_richText_["__unstableIsActiveListType"])(value, 'ul', tagName),
      onClick: () => {
        onChange(Object(external_gc_richText_["__unstableChangeListType"])(value, {
          type: 'ul'
        }));
        onFocus();

        if (Object(external_gc_richText_["__unstableIsListRootSelected"])(value)) {
          setAttributes({
            ordered: false
          });
        }
      }
    }), Object(external_gc_element_["createElement"])(external_gc_components_["ToolbarButton"], {
      icon: Object(external_gc_i18n_["isRTL"])() ? format_list_numbered_rtl : format_list_numbered,
      title: Object(external_gc_i18n_["__"])('顺序'),
      describedBy: Object(external_gc_i18n_["__"])('转换为有序列表'),
      isActive: Object(external_gc_richText_["__unstableIsActiveListType"])(value, 'ol', tagName),
      onClick: () => {
        onChange(Object(external_gc_richText_["__unstableChangeListType"])(value, {
          type: 'ol'
        }));
        onFocus();

        if (Object(external_gc_richText_["__unstableIsListRootSelected"])(value)) {
          setAttributes({
            ordered: true
          });
        }
      }
    }), Object(external_gc_element_["createElement"])(external_gc_components_["ToolbarButton"], {
      icon: Object(external_gc_i18n_["isRTL"])() ? format_outdent_rtl : format_outdent,
      title: Object(external_gc_i18n_["__"])('减少缩进量'),
      describedBy: Object(external_gc_i18n_["__"])('减少列表项目缩进量'),
      shortcut: Object(external_gc_i18n_["_x"])('退格', 'keyboard key'),
      isDisabled: !Object(external_gc_richText_["__unstableCanOutdentListItems"])(value),
      onClick: () => {
        onChange(Object(external_gc_richText_["__unstableOutdentListItems"])(value));
        onFocus();
      }
    }), Object(external_gc_element_["createElement"])(external_gc_components_["ToolbarButton"], {
      icon: Object(external_gc_i18n_["isRTL"])() ? format_indent_rtl : format_indent,
      title: Object(external_gc_i18n_["__"])('增加缩进量'),
      describedBy: Object(external_gc_i18n_["__"])('增加列表项目缩进量'),
      shortcut: Object(external_gc_i18n_["_x"])('空格', 'keyboard key'),
      isDisabled: !Object(external_gc_richText_["__unstableCanIndentListItems"])(value),
      onClick: () => {
        onChange(Object(external_gc_richText_["__unstableIndentListItems"])(value, {
          type: tagName
        }));
        onFocus();
      }
    })));
  };

  const blockProps = Object(external_gc_blockEditor_["useBlockProps"])({
    style
  });
  return Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"], Object(esm_extends["a" /* default */])({
    identifier: "values",
    multiline: "li",
    tagName: tagName,
    onChange: nextValues => setAttributes({
      values: nextValues
    }),
    value: values,
    "aria-label": Object(external_gc_i18n_["__"])('列表文字'),
    placeholder: placeholder || Object(external_gc_i18n_["__"])('列表'),
    onMerge: mergeBlocks,
    onSplit: value => Object(external_gc_blocks_["createBlock"])(list_name, { ...attributes,
      values: value
    }),
    __unstableOnSplitMiddle: () => Object(external_gc_blocks_["createBlock"])('core/paragraph'),
    onReplace: onReplace,
    onRemove: () => onReplace([]),
    start: start,
    reversed: reversed,
    type: type
  }, blockProps), controls), ordered && Object(external_gc_element_["createElement"])(ordered_list_settings, {
    setAttributes: setAttributes,
    ordered: ordered,
    reversed: reversed,
    start: start,
    placeholder: placeholder
  }));
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/list/save.js


/**
 * GeChiUI dependencies
 */

function list_save_save(_ref) {
  let {
    attributes
  } = _ref;
  const {
    ordered,
    values,
    type,
    reversed,
    start
  } = attributes;
  const TagName = ordered ? 'ol' : 'ul';
  return Object(external_gc_element_["createElement"])(TagName, external_gc_blockEditor_["useBlockProps"].save({
    type,
    reversed,
    start
  }), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"].Content, {
    value: values,
    multiline: "li"
  }));
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/list/transforms.js
/**
 * GeChiUI dependencies
 */



function getListContentSchema(_ref) {
  let {
    phrasingContentSchema
  } = _ref;
  const listContentSchema = { ...phrasingContentSchema,
    ul: {},
    ol: {
      attributes: ['type', 'start', 'reversed']
    }
  }; // Recursion is needed.
  // Possible: ul > li > ul.
  // Impossible: ul > ul.

  ['ul', 'ol'].forEach(tag => {
    listContentSchema[tag].children = {
      li: {
        children: listContentSchema
      }
    };
  });
  return listContentSchema;
}

const list_transforms_transforms = {
  from: [{
    type: 'block',
    isMultiBlock: true,
    blocks: ['core/paragraph', 'core/heading'],
    transform: blockAttributes => {
      return Object(external_gc_blocks_["createBlock"])('core/list', {
        values: Object(external_gc_richText_["toHTMLString"])({
          value: Object(external_gc_richText_["join"])(blockAttributes.map(_ref2 => {
            let {
              content
            } = _ref2;
            const value = Object(external_gc_richText_["create"])({
              html: content
            });

            if (blockAttributes.length > 1) {
              return value;
            } // When converting only one block, transform
            // every line to a list item.


            return Object(external_gc_richText_["replace"])(value, /\n/g, external_gc_richText_["__UNSTABLE_LINE_SEPARATOR"]);
          }), external_gc_richText_["__UNSTABLE_LINE_SEPARATOR"]),
          multilineTag: 'li'
        }),
        anchor: blockAttributes.anchor
      });
    }
  }, {
    type: 'block',
    blocks: ['core/quote', 'core/pullquote'],
    transform: _ref3 => {
      let {
        value,
        anchor
      } = _ref3;
      return Object(external_gc_blocks_["createBlock"])('core/list', {
        values: Object(external_gc_richText_["toHTMLString"])({
          value: Object(external_gc_richText_["create"])({
            html: value,
            multilineTag: 'p'
          }),
          multilineTag: 'li'
        }),
        anchor
      });
    }
  }, {
    type: 'raw',
    selector: 'ol,ul',
    schema: args => ({
      ol: getListContentSchema(args).ol,
      ul: getListContentSchema(args).ul
    }),

    transform(node) {
      const attributes = {
        ordered: node.nodeName === 'OL',
        anchor: node.id === '' ? undefined : node.id
      };

      if (attributes.ordered) {
        const type = node.getAttribute('type');

        if (type) {
          attributes.type = type;
        }

        if (node.getAttribute('reversed') !== null) {
          attributes.reversed = true;
        }

        const start = parseInt(node.getAttribute('start'), 10);

        if (!isNaN(start) && ( // start=1 only makes sense if the list is reversed.
        start !== 1 || attributes.reversed)) {
          attributes.start = start;
        }
      }

      return Object(external_gc_blocks_["createBlock"])('core/list', { ...Object(external_gc_blocks_["getBlockAttributes"])('core/list', node.outerHTML),
        ...attributes
      });
    }

  }, ...['*', '-'].map(prefix => ({
    type: 'prefix',
    prefix,

    transform(content) {
      return Object(external_gc_blocks_["createBlock"])('core/list', {
        values: `<li>${content}</li>`
      });
    }

  })), ...['1.', '1)'].map(prefix => ({
    type: 'prefix',
    prefix,

    transform(content) {
      return Object(external_gc_blocks_["createBlock"])('core/list', {
        ordered: true,
        values: `<li>${content}</li>`
      });
    }

  }))],
  to: [{
    type: 'block',
    blocks: ['core/paragraph'],
    transform: _ref4 => {
      let {
        values
      } = _ref4;
      return Object(external_gc_richText_["split"])(Object(external_gc_richText_["create"])({
        html: values,
        multilineTag: 'li',
        multilineWrapperTags: ['ul', 'ol']
      }), external_gc_richText_["__UNSTABLE_LINE_SEPARATOR"]).map(piece => Object(external_gc_blocks_["createBlock"])('core/paragraph', {
        content: Object(external_gc_richText_["toHTMLString"])({
          value: piece
        })
      }));
    }
  }, {
    type: 'block',
    blocks: ['core/heading'],
    transform: _ref5 => {
      let {
        values
      } = _ref5;
      return Object(external_gc_richText_["split"])(Object(external_gc_richText_["create"])({
        html: values,
        multilineTag: 'li',
        multilineWrapperTags: ['ul', 'ol']
      }), external_gc_richText_["__UNSTABLE_LINE_SEPARATOR"]).map(piece => Object(external_gc_blocks_["createBlock"])('core/heading', {
        content: Object(external_gc_richText_["toHTMLString"])({
          value: piece
        })
      }));
    }
  }, {
    type: 'block',
    blocks: ['core/quote'],
    transform: _ref6 => {
      let {
        values,
        anchor
      } = _ref6;
      return Object(external_gc_blocks_["createBlock"])('core/quote', {
        value: Object(external_gc_richText_["toHTMLString"])({
          value: Object(external_gc_richText_["create"])({
            html: values,
            multilineTag: 'li',
            multilineWrapperTags: ['ul', 'ol']
          }),
          multilineTag: 'p'
        }),
        anchor
      });
    }
  }, {
    type: 'block',
    blocks: ['core/pullquote'],
    transform: _ref7 => {
      let {
        values,
        anchor
      } = _ref7;
      return Object(external_gc_blocks_["createBlock"])('core/pullquote', {
        value: Object(external_gc_richText_["toHTMLString"])({
          value: Object(external_gc_richText_["create"])({
            html: values,
            multilineTag: 'li',
            multilineWrapperTags: ['ul', 'ol']
          }),
          multilineTag: 'p'
        }),
        anchor
      });
    }
  }]
};
/* harmony default export */ var list_transforms = (list_transforms_transforms);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/list/index.js
/**
 * GeChiUI dependencies
 */

/**
 * Internal dependencies
 */



const list_metadata = {
  apiVersion: 2,
  name: "core/list",
  title: "列表",
  category: "text",
  description: "创建项目符号或编号列表。",
  keywords: ["bullet list", "ordered list", "numbered list"],
  textdomain: "default",
  attributes: {
    ordered: {
      type: "boolean",
      "default": false,
      __experimentalRole: "content"
    },
    values: {
      type: "string",
      source: "html",
      selector: "ol,ul",
      multiline: "li",
      __unstableMultilineWrapperTags: ["ol", "ul"],
      "default": "",
      __experimentalRole: "content"
    },
    type: {
      type: "string"
    },
    start: {
      type: "number"
    },
    reversed: {
      type: "boolean"
    },
    placeholder: {
      type: "string"
    }
  },
  supports: {
    anchor: true,
    className: false,
    typography: {
      fontSize: true,
      __experimentalFontFamily: true,
      lineHeight: true,
      __experimentalFontStyle: true,
      __experimentalFontWeight: true,
      __experimentalLetterSpacing: true,
      __experimentalTextTransform: true,
      __experimentalDefaultControls: {
        fontSize: true
      }
    },
    color: {
      gradients: true,
      link: true
    },
    __unstablePasteTextInline: true,
    __experimentalSelector: "ol,ul",
    __experimentalSlashInserter: true
  },
  editorStyle: "gc-block-list-editor",
  style: "gc-block-list"
};


const {
  name: list_name
} = list_metadata;

const list_settings = {
  icon: library_list,
  example: {
    attributes: {
      values: '<li>Alice.</li><li>The White Rabbit.</li><li>The Cheshire Cat.</li><li>The Mad Hatter.</li><li>The Queen of Hearts.</li>'
    }
  },
  transforms: list_transforms,

  merge(attributes, attributesToMerge) {
    const {
      values
    } = attributesToMerge;

    if (!values || values === '<li></li>') {
      return attributes;
    }

    return { ...attributes,
      values: attributes.values + values
    };
  },

  edit: ListEdit,
  save: list_save_save,
  deprecated: list_deprecated
};

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/login.js


/**
 * GeChiUI dependencies
 */

const login = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M11 14.5l1.1 1.1 3-3 .5-.5-.6-.6-3-3-1 1 1.7 1.7H5v1.5h7.7L11 14.5zM16.8 5h-7c-1.1 0-2 .9-2 2v1.5h1.5V7c0-.3.2-.5.5-.5h7c.3 0 .5.2.5.5v10c0 .3-.2.5-.5.5h-7c-.3 0-.5-.2-.5-.5v-1.5H7.8V17c0 1.1.9 2 2 2h7c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2z"
}));
/* harmony default export */ var library_login = (login);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/loginout/edit.js


/**
 * GeChiUI dependencies
 */



function LoginOutEdit(_ref) {
  let {
    attributes,
    setAttributes
  } = _ref;
  const {
    displayLoginAsForm,
    redirectToCurrent
  } = attributes;
  return Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InspectorControls"], null, Object(external_gc_element_["createElement"])(external_gc_components_["PanelBody"], {
    title: Object(external_gc_i18n_["__"])('登录/注销设置')
  }, Object(external_gc_element_["createElement"])(external_gc_components_["ToggleControl"], {
    label: Object(external_gc_i18n_["__"])('以表单形式显示登录'),
    checked: displayLoginAsForm,
    onChange: () => setAttributes({
      displayLoginAsForm: !displayLoginAsForm
    })
  }), Object(external_gc_element_["createElement"])(external_gc_components_["ToggleControl"], {
    label: Object(external_gc_i18n_["__"])('重定向到当前 URL'),
    checked: redirectToCurrent,
    onChange: () => setAttributes({
      redirectToCurrent: !redirectToCurrent
    })
  }))), Object(external_gc_element_["createElement"])("div", Object(external_gc_blockEditor_["useBlockProps"])({
    className: 'logged-in'
  }), Object(external_gc_element_["createElement"])("a", {
    href: "#login-pseudo-link"
  }, Object(external_gc_i18n_["__"])('注销'))));
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/loginout/index.js
/**
 * GeChiUI dependencies
 */

/**
 * Internal dependencies
 */


const loginout_metadata = {
  apiVersion: 2,
  name: "core/loginout",
  title: "登录/注销",
  category: "theme",
  description: "显示登录和注销链接。",
  keywords: ["login", "logout", "form"],
  textdomain: "default",
  attributes: {
    displayLoginAsForm: {
      type: "boolean",
      "default": false
    },
    redirectToCurrent: {
      type: "boolean",
      "default": true
    }
  },
  supports: {
    className: true,
    typography: {
      fontSize: false
    }
  }
};
const {
  name: loginout_name
} = loginout_metadata;

const loginout_settings = {
  icon: library_login,
  edit: LoginOutEdit
};

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/media-and-text.js


/**
 * GeChiUI dependencies
 */

const mediaAndText = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M3 18h8V6H3v12zM14 7.5V9h7V7.5h-7zm0 5.3h7v-1.5h-7v1.5zm0 3.7h7V15h-7v1.5z"
}));
/* harmony default export */ var media_and_text = (mediaAndText);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/media-text/media-container-icon.js


/**
 * GeChiUI dependencies
 */

/* harmony default export */ var media_container_icon = (Object(external_gc_element_["createElement"])(external_gc_components_["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, Object(external_gc_element_["createElement"])(external_gc_components_["Path"], {
  d: "M18 2l2 4h-2l-2-4h-3l2 4h-2l-2-4h-1a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V2zm2 12H10V4.4L11.8 8H20z"
}), Object(external_gc_element_["createElement"])(external_gc_components_["Path"], {
  d: "M14 20H4V10h3V8H4a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2v-3h-2z"
}), Object(external_gc_element_["createElement"])(external_gc_components_["Path"], {
  d: "M5 19h8l-1.59-2H9.24l-.84 1.1L7 16.3 5 19z"
})));

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/media-text/media-container.js



/**
 * External dependencies
 */


/**
 * GeChiUI dependencies
 */








/**
 * Internal dependencies
 */


/**
 * Constants
 */

const media_container_ALLOWED_MEDIA_TYPES = ['image', 'video'];
function imageFillStyles(url, focalPoint) {
  return url ? {
    backgroundImage: `url(${url})`,
    backgroundPosition: focalPoint ? `${focalPoint.x * 100}% ${focalPoint.y * 100}%` : `50% 50%`
  } : {};
}
const ResizableBoxContainer = Object(external_gc_element_["forwardRef"])((_ref, ref) => {
  let {
    isSelected,
    isStackedOnMobile,
    ...props
  } = _ref;
  const isMobile = Object(external_gc_compose_["useViewportMatch"])('small', '<');
  return Object(external_gc_element_["createElement"])(external_gc_components_["ResizableBox"], Object(esm_extends["a" /* default */])({
    ref: ref,
    showHandle: isSelected && (!isMobile || !isStackedOnMobile)
  }, props));
});

function ToolbarEditButton(_ref2) {
  let {
    mediaId,
    mediaUrl,
    onSelectMedia
  } = _ref2;
  return Object(external_gc_element_["createElement"])(external_gc_blockEditor_["BlockControls"], {
    group: "other"
  }, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["MediaReplaceFlow"], {
    mediaId: mediaId,
    mediaURL: mediaUrl,
    allowedTypes: media_container_ALLOWED_MEDIA_TYPES,
    accept: "image/*,video/*",
    onSelect: onSelectMedia
  }));
}

function PlaceholderContainer(_ref3) {
  let {
    className,
    noticeOperations,
    noticeUI,
    mediaUrl,
    onSelectMedia
  } = _ref3;

  const onUploadError = message => {
    noticeOperations.removeAllNotices();
    noticeOperations.createErrorNotice(message);
  };

  return Object(external_gc_element_["createElement"])(external_gc_blockEditor_["MediaPlaceholder"], {
    icon: Object(external_gc_element_["createElement"])(external_gc_blockEditor_["BlockIcon"], {
      icon: media_container_icon
    }),
    labels: {
      title: Object(external_gc_i18n_["__"])('媒体区')
    },
    className: className,
    onSelect: onSelectMedia,
    accept: "image/*,video/*",
    allowedTypes: media_container_ALLOWED_MEDIA_TYPES,
    notices: noticeUI,
    onError: onUploadError,
    disableMediaButtons: mediaUrl
  });
}

function MediaContainer(props, ref) {
  const {
    className,
    commitWidthChange,
    focalPoint,
    imageFill,
    isSelected,
    isStackedOnMobile,
    mediaAlt,
    mediaId,
    mediaPosition,
    mediaType,
    mediaUrl,
    mediaWidth,
    onSelectMedia,
    onWidthChange
  } = props;
  const isTemporaryMedia = !mediaId && Object(external_gc_blob_["isBlobURL"])(mediaUrl);
  const {
    toggleSelection
  } = Object(external_gc_data_["useDispatch"])(external_gc_blockEditor_["store"]);

  if (mediaUrl) {
    const onResizeStart = () => {
      toggleSelection(false);
    };

    const onResize = (event, direction, elt) => {
      onWidthChange(parseInt(elt.style.width));
    };

    const onResizeStop = (event, direction, elt) => {
      toggleSelection(true);
      commitWidthChange(parseInt(elt.style.width));
    };

    const enablePositions = {
      right: mediaPosition === 'left',
      left: mediaPosition === 'right'
    };
    const backgroundStyles = mediaType === 'image' && imageFill ? imageFillStyles(mediaUrl, focalPoint) : {};
    const mediaTypeRenderers = {
      image: () => Object(external_gc_element_["createElement"])("img", {
        src: mediaUrl,
        alt: mediaAlt
      }),
      video: () => Object(external_gc_element_["createElement"])("video", {
        controls: true,
        src: mediaUrl
      })
    };
    return Object(external_gc_element_["createElement"])(ResizableBoxContainer, {
      as: "figure",
      className: classnames_default()(className, 'editor-media-container__resizer', {
        'is-transient': isTemporaryMedia
      }),
      style: backgroundStyles,
      size: {
        width: mediaWidth + '%'
      },
      minWidth: "10%",
      maxWidth: "100%",
      enable: enablePositions,
      onResizeStart: onResizeStart,
      onResize: onResize,
      onResizeStop: onResizeStop,
      axis: "x",
      isSelected: isSelected,
      isStackedOnMobile: isStackedOnMobile,
      ref: ref
    }, Object(external_gc_element_["createElement"])(ToolbarEditButton, {
      onSelectMedia: onSelectMedia,
      mediaUrl: mediaUrl,
      mediaId: mediaId
    }), (mediaTypeRenderers[mediaType] || external_lodash_["noop"])(), isTemporaryMedia && Object(external_gc_element_["createElement"])(external_gc_components_["Spinner"], null), Object(external_gc_element_["createElement"])(PlaceholderContainer, props));
  }

  return Object(external_gc_element_["createElement"])(PlaceholderContainer, props);
}

/* harmony default export */ var media_container = (Object(external_gc_components_["withNotices"])(Object(external_gc_element_["forwardRef"])(MediaContainer)));

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/media-text/deprecated.js


/**
 * External dependencies
 */


/**
 * GeChiUI dependencies
 */


/**
 * Internal dependencies
 */


const DEFAULT_MEDIA_WIDTH = 50;

const media_text_deprecated_migrateCustomColors = attributes => {
  if (!attributes.customBackgroundColor) {
    return attributes;
  }

  const style = {
    color: {
      background: attributes.customBackgroundColor
    }
  };
  return { ...Object(external_lodash_["omit"])(attributes, ['customBackgroundColor']),
    style
  };
};

const baseAttributes = {
  align: {
    type: 'string',
    default: 'wide'
  },
  backgroundColor: {
    type: 'string'
  },
  mediaAlt: {
    type: 'string',
    source: 'attribute',
    selector: 'figure img',
    attribute: 'alt',
    default: ''
  },
  mediaPosition: {
    type: 'string',
    default: 'left'
  },
  mediaId: {
    type: 'number'
  },
  mediaType: {
    type: 'string'
  },
  mediaWidth: {
    type: 'number',
    default: 50
  },
  isStackedOnMobile: {
    type: 'boolean',
    default: true
  }
};
/* harmony default export */ var media_text_deprecated = ([{
  attributes: { ...baseAttributes,
    customBackgroundColor: {
      type: 'string'
    },
    mediaLink: {
      type: 'string'
    },
    linkDestination: {
      type: 'string'
    },
    linkTarget: {
      type: 'string',
      source: 'attribute',
      selector: 'figure a',
      attribute: 'target'
    },
    href: {
      type: 'string',
      source: 'attribute',
      selector: 'figure a',
      attribute: 'href'
    },
    rel: {
      type: 'string',
      source: 'attribute',
      selector: 'figure a',
      attribute: 'rel'
    },
    linkClass: {
      type: 'string',
      source: 'attribute',
      selector: 'figure a',
      attribute: 'class'
    },
    verticalAlignment: {
      type: 'string'
    },
    imageFill: {
      type: 'boolean'
    },
    focalPoint: {
      type: 'object'
    }
  },
  migrate: media_text_deprecated_migrateCustomColors,

  save(_ref) {
    let {
      attributes
    } = _ref;
    const {
      backgroundColor,
      customBackgroundColor,
      isStackedOnMobile,
      mediaAlt,
      mediaPosition,
      mediaType,
      mediaUrl,
      mediaWidth,
      mediaId,
      verticalAlignment,
      imageFill,
      focalPoint,
      linkClass,
      href,
      linkTarget,
      rel
    } = attributes;
    const newRel = Object(external_lodash_["isEmpty"])(rel) ? undefined : rel;
    let image = Object(external_gc_element_["createElement"])("img", {
      src: mediaUrl,
      alt: mediaAlt,
      className: mediaId && mediaType === 'image' ? `gc-image-${mediaId}` : null
    });

    if (href) {
      image = Object(external_gc_element_["createElement"])("a", {
        className: linkClass,
        href: href,
        target: linkTarget,
        rel: newRel
      }, image);
    }

    const mediaTypeRenders = {
      image: () => image,
      video: () => Object(external_gc_element_["createElement"])("video", {
        controls: true,
        src: mediaUrl
      })
    };
    const backgroundClass = Object(external_gc_blockEditor_["getColorClassName"])('background-color', backgroundColor);
    const className = classnames_default()({
      'has-media-on-the-right': 'right' === mediaPosition,
      'has-background': backgroundClass || customBackgroundColor,
      [backgroundClass]: backgroundClass,
      'is-stacked-on-mobile': isStackedOnMobile,
      [`is-vertically-aligned-${verticalAlignment}`]: verticalAlignment,
      'is-image-fill': imageFill
    });
    const backgroundStyles = imageFill ? imageFillStyles(mediaUrl, focalPoint) : {};
    let gridTemplateColumns;

    if (mediaWidth !== DEFAULT_MEDIA_WIDTH) {
      gridTemplateColumns = 'right' === mediaPosition ? `auto ${mediaWidth}%` : `${mediaWidth}% auto`;
    }

    const style = {
      backgroundColor: backgroundClass ? undefined : customBackgroundColor,
      gridTemplateColumns
    };
    return Object(external_gc_element_["createElement"])("div", {
      className: className,
      style: style
    }, Object(external_gc_element_["createElement"])("figure", {
      className: "gc-block-media-text__media",
      style: backgroundStyles
    }, (mediaTypeRenders[mediaType] || external_lodash_["noop"])()), Object(external_gc_element_["createElement"])("div", {
      className: "gc-block-media-text__content"
    }, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InnerBlocks"].Content, null)));
  }

}, {
  attributes: { ...baseAttributes,
    customBackgroundColor: {
      type: 'string'
    },
    mediaUrl: {
      type: 'string',
      source: 'attribute',
      selector: 'figure video,figure img',
      attribute: 'src'
    },
    verticalAlignment: {
      type: 'string'
    },
    imageFill: {
      type: 'boolean'
    },
    focalPoint: {
      type: 'object'
    }
  },
  migrate: media_text_deprecated_migrateCustomColors,

  save(_ref2) {
    let {
      attributes
    } = _ref2;
    const {
      backgroundColor,
      customBackgroundColor,
      isStackedOnMobile,
      mediaAlt,
      mediaPosition,
      mediaType,
      mediaUrl,
      mediaWidth,
      mediaId,
      verticalAlignment,
      imageFill,
      focalPoint
    } = attributes;
    const mediaTypeRenders = {
      image: () => Object(external_gc_element_["createElement"])("img", {
        src: mediaUrl,
        alt: mediaAlt,
        className: mediaId && mediaType === 'image' ? `gc-image-${mediaId}` : null
      }),
      video: () => Object(external_gc_element_["createElement"])("video", {
        controls: true,
        src: mediaUrl
      })
    };
    const backgroundClass = Object(external_gc_blockEditor_["getColorClassName"])('background-color', backgroundColor);
    const className = classnames_default()({
      'has-media-on-the-right': 'right' === mediaPosition,
      [backgroundClass]: backgroundClass,
      'is-stacked-on-mobile': isStackedOnMobile,
      [`is-vertically-aligned-${verticalAlignment}`]: verticalAlignment,
      'is-image-fill': imageFill
    });
    const backgroundStyles = imageFill ? imageFillStyles(mediaUrl, focalPoint) : {};
    let gridTemplateColumns;

    if (mediaWidth !== DEFAULT_MEDIA_WIDTH) {
      gridTemplateColumns = 'right' === mediaPosition ? `auto ${mediaWidth}%` : `${mediaWidth}% auto`;
    }

    const style = {
      backgroundColor: backgroundClass ? undefined : customBackgroundColor,
      gridTemplateColumns
    };
    return Object(external_gc_element_["createElement"])("div", {
      className: className,
      style: style
    }, Object(external_gc_element_["createElement"])("figure", {
      className: "gc-block-media-text__media",
      style: backgroundStyles
    }, (mediaTypeRenders[mediaType] || external_lodash_["noop"])()), Object(external_gc_element_["createElement"])("div", {
      className: "gc-block-media-text__content"
    }, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InnerBlocks"].Content, null)));
  }

}, {
  attributes: { ...baseAttributes,
    customBackgroundColor: {
      type: 'string'
    },
    mediaUrl: {
      type: 'string',
      source: 'attribute',
      selector: 'figure video,figure img',
      attribute: 'src'
    }
  },

  save(_ref3) {
    let {
      attributes
    } = _ref3;
    const {
      backgroundColor,
      customBackgroundColor,
      isStackedOnMobile,
      mediaAlt,
      mediaPosition,
      mediaType,
      mediaUrl,
      mediaWidth
    } = attributes;
    const mediaTypeRenders = {
      image: () => Object(external_gc_element_["createElement"])("img", {
        src: mediaUrl,
        alt: mediaAlt
      }),
      video: () => Object(external_gc_element_["createElement"])("video", {
        controls: true,
        src: mediaUrl
      })
    };
    const backgroundClass = Object(external_gc_blockEditor_["getColorClassName"])('background-color', backgroundColor);
    const className = classnames_default()({
      'has-media-on-the-right': 'right' === mediaPosition,
      [backgroundClass]: backgroundClass,
      'is-stacked-on-mobile': isStackedOnMobile
    });
    let gridTemplateColumns;

    if (mediaWidth !== DEFAULT_MEDIA_WIDTH) {
      gridTemplateColumns = 'right' === mediaPosition ? `auto ${mediaWidth}%` : `${mediaWidth}% auto`;
    }

    const style = {
      backgroundColor: backgroundClass ? undefined : customBackgroundColor,
      gridTemplateColumns
    };
    return Object(external_gc_element_["createElement"])("div", {
      className: className,
      style: style
    }, Object(external_gc_element_["createElement"])("figure", {
      className: "gc-block-media-text__media"
    }, (mediaTypeRenders[mediaType] || external_lodash_["noop"])()), Object(external_gc_element_["createElement"])("div", {
      className: "gc-block-media-text__content"
    }, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InnerBlocks"].Content, null)));
  }

}]);

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/pull-left.js


/**
 * GeChiUI dependencies
 */

const pullLeft = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M4 18h6V6H4v12zm9-9.5V10h7V8.5h-7zm0 7h7V14h-7v1.5z"
}));
/* harmony default export */ var pull_left = (pullLeft);

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/pull-right.js


/**
 * GeChiUI dependencies
 */

const pullRight = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M14 6v12h6V6h-6zM4 10h7V8.5H4V10zm0 5.5h7V14H4v1.5z"
}));
/* harmony default export */ var pull_right = (pullRight);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/media-text/constants.js
const DEFAULT_MEDIA_SIZE_SLUG = 'full';

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/media-text/edit.js


/**
 * External dependencies
 */


/**
 * GeChiUI dependencies
 */








/**
 * Internal dependencies
 */



/**
 * Constants
 */

const TEMPLATE = [['core/paragraph', {
  fontSize: 'large',
  placeholder: Object(external_gc_i18n_["_x"])('内容…', 'content placeholder')
}]]; // this limits the resize to a safe zone to avoid making broken layouts

const WIDTH_CONSTRAINT_PERCENTAGE = 15;

const applyWidthConstraints = width => Math.max(WIDTH_CONSTRAINT_PERCENTAGE, Math.min(width, 100 - WIDTH_CONSTRAINT_PERCENTAGE));

const edit_LINK_DESTINATION_MEDIA = 'media';
const edit_LINK_DESTINATION_ATTACHMENT = 'attachment';

function getImageSourceUrlBySizeSlug(image, slug) {
  var _image$media_details, _image$media_details$, _image$media_details$2;

  // eslint-disable-next-line camelcase
  return image === null || image === void 0 ? void 0 : (_image$media_details = image.media_details) === null || _image$media_details === void 0 ? void 0 : (_image$media_details$ = _image$media_details.sizes) === null || _image$media_details$ === void 0 ? void 0 : (_image$media_details$2 = _image$media_details$[slug]) === null || _image$media_details$2 === void 0 ? void 0 : _image$media_details$2.source_url;
}

function edit_attributesFromMedia(_ref) {
  let {
    attributes: {
      linkDestination,
      href
    },
    setAttributes
  } = _ref;
  return media => {
    let mediaType;
    let src; // for media selections originated from a file upload.

    if (media.media_type) {
      if (media.media_type === 'image') {
        mediaType = 'image';
      } else {
        // only images and videos are accepted so if the media_type is not an image we can assume it is a video.
        // video contain the media type of 'file' in the object returned from the rest api.
        mediaType = 'video';
      }
    } else {
      // for media selections originated from existing files in the media library.
      mediaType = media.type;
    }

    if (mediaType === 'image') {
      var _media$sizes, _media$sizes$large, _media$media_details, _media$media_details$, _media$media_details$2;

      // Try the "large" size URL, falling back to the "full" size URL below.
      src = ((_media$sizes = media.sizes) === null || _media$sizes === void 0 ? void 0 : (_media$sizes$large = _media$sizes.large) === null || _media$sizes$large === void 0 ? void 0 : _media$sizes$large.url) || ( // eslint-disable-next-line camelcase
      (_media$media_details = media.media_details) === null || _media$media_details === void 0 ? void 0 : (_media$media_details$ = _media$media_details.sizes) === null || _media$media_details$ === void 0 ? void 0 : (_media$media_details$2 = _media$media_details$.large) === null || _media$media_details$2 === void 0 ? void 0 : _media$media_details$2.source_url);
    }

    let newHref = href;

    if (linkDestination === edit_LINK_DESTINATION_MEDIA) {
      // Update the media link.
      newHref = media.url;
    } // Check if the image is linked to the attachment page.


    if (linkDestination === edit_LINK_DESTINATION_ATTACHMENT) {
      // Update the media link.
      newHref = media.link;
    }

    setAttributes({
      mediaAlt: media.alt,
      mediaId: media.id,
      mediaType,
      mediaUrl: src || media.url,
      mediaLink: media.link || undefined,
      href: newHref,
      focalPoint: undefined
    });
  };
}

function MediaTextEdit(_ref2) {
  let {
    attributes,
    isSelected,
    setAttributes
  } = _ref2;
  const {
    focalPoint,
    href,
    imageFill,
    isStackedOnMobile,
    linkClass,
    linkDestination,
    linkTarget,
    mediaAlt,
    mediaId,
    mediaPosition,
    mediaType,
    mediaUrl,
    mediaWidth,
    rel,
    verticalAlignment
  } = attributes;
  const mediaSizeSlug = attributes.mediaSizeSlug || DEFAULT_MEDIA_SIZE_SLUG;
  const image = Object(external_gc_data_["useSelect"])(select => mediaId && isSelected ? select(external_gc_coreData_["store"]).getMedia(mediaId) : null, [isSelected, mediaId]);
  const refMediaContainer = Object(external_gc_element_["useRef"])();

  const imperativeFocalPointPreview = value => {
    const {
      style
    } = refMediaContainer.current.resizable;
    const {
      x,
      y
    } = value;
    style.backgroundPosition = `${x * 100}% ${y * 100}%`;
  };

  const [temporaryMediaWidth, setTemporaryMediaWidth] = Object(external_gc_element_["useState"])(null);
  const onSelectMedia = edit_attributesFromMedia({
    attributes,
    setAttributes
  });

  const onSetHref = props => {
    setAttributes(props);
  };

  const onWidthChange = width => {
    setTemporaryMediaWidth(applyWidthConstraints(width));
  };

  const commitWidthChange = width => {
    setAttributes({
      mediaWidth: applyWidthConstraints(width)
    });
    setTemporaryMediaWidth(applyWidthConstraints(width));
  };

  const classNames = classnames_default()({
    'has-media-on-the-right': 'right' === mediaPosition,
    'is-selected': isSelected,
    'is-stacked-on-mobile': isStackedOnMobile,
    [`is-vertically-aligned-${verticalAlignment}`]: verticalAlignment,
    'is-image-fill': imageFill
  });
  const widthString = `${temporaryMediaWidth || mediaWidth}%`;
  const gridTemplateColumns = 'right' === mediaPosition ? `1fr ${widthString}` : `${widthString} 1fr`;
  const style = {
    gridTemplateColumns,
    msGridColumns: gridTemplateColumns
  };

  const onMediaAltChange = newMediaAlt => {
    setAttributes({
      mediaAlt: newMediaAlt
    });
  };

  const onVerticalAlignmentChange = alignment => {
    setAttributes({
      verticalAlignment: alignment
    });
  };

  const imageSizes = Object(external_gc_data_["useSelect"])(select => {
    const settings = select(external_gc_blockEditor_["store"]).getSettings();
    return settings === null || settings === void 0 ? void 0 : settings.imageSizes;
  }, []);
  const imageSizeOptions = Object(external_lodash_["map"])(Object(external_lodash_["filter"])(imageSizes, _ref3 => {
    let {
      slug
    } = _ref3;
    return getImageSourceUrlBySizeSlug(image, slug);
  }), _ref4 => {
    let {
      name,
      slug
    } = _ref4;
    return {
      value: slug,
      label: name
    };
  });

  const updateImage = newMediaSizeSlug => {
    const newUrl = getImageSourceUrlBySizeSlug(image, newMediaSizeSlug);

    if (!newUrl) {
      return null;
    }

    setAttributes({
      mediaUrl: newUrl,
      mediaSizeSlug: newMediaSizeSlug
    });
  };

  const mediaTextGeneralSettings = Object(external_gc_element_["createElement"])(external_gc_components_["PanelBody"], {
    title: Object(external_gc_i18n_["__"])('媒体和文本设置')
  }, Object(external_gc_element_["createElement"])(external_gc_components_["ToggleControl"], {
    label: Object(external_gc_i18n_["__"])('在移动设备上堆叠显示'),
    checked: isStackedOnMobile,
    onChange: () => setAttributes({
      isStackedOnMobile: !isStackedOnMobile
    })
  }), mediaType === 'image' && Object(external_gc_element_["createElement"])(external_gc_components_["ToggleControl"], {
    label: Object(external_gc_i18n_["__"])('裁剪图片以填满整个栏位'),
    checked: imageFill,
    onChange: () => setAttributes({
      imageFill: !imageFill
    })
  }), imageFill && mediaUrl && mediaType === 'image' && Object(external_gc_element_["createElement"])(external_gc_components_["FocalPointPicker"], {
    label: Object(external_gc_i18n_["__"])('焦点选择器'),
    url: mediaUrl,
    value: focalPoint,
    onChange: value => setAttributes({
      focalPoint: value
    }),
    onDragStart: imperativeFocalPointPreview,
    onDrag: imperativeFocalPointPreview
  }), mediaType === 'image' && Object(external_gc_element_["createElement"])(external_gc_components_["TextareaControl"], {
    label: Object(external_gc_i18n_["__"])('Alt文本（替换文本）'),
    value: mediaAlt,
    onChange: onMediaAltChange,
    help: Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])(external_gc_components_["ExternalLink"], {
      href: "https://www.w3.org/WAI/tutorials/images/decision-tree"
    }, Object(external_gc_i18n_["__"])('说明此图片的用途')), Object(external_gc_i18n_["__"])('如此图片仅作装饰用途，请留空。'))
  }), mediaType === 'image' && Object(external_gc_element_["createElement"])(external_gc_blockEditor_["__experimentalImageSizeControl"], {
    onChangeImage: updateImage,
    slug: mediaSizeSlug,
    imageSizeOptions: imageSizeOptions,
    isResizable: false
  }), mediaUrl && Object(external_gc_element_["createElement"])(external_gc_components_["RangeControl"], {
    label: Object(external_gc_i18n_["__"])('媒体宽度'),
    value: temporaryMediaWidth || mediaWidth,
    onChange: commitWidthChange,
    min: WIDTH_CONSTRAINT_PERCENTAGE,
    max: 100 - WIDTH_CONSTRAINT_PERCENTAGE
  }));
  const blockProps = Object(external_gc_blockEditor_["useBlockProps"])({
    className: classNames,
    style
  });
  const innerBlocksProps = Object(external_gc_blockEditor_["useInnerBlocksProps"])({
    className: 'gc-block-media-text__content'
  }, {
    template: TEMPLATE
  });
  return Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InspectorControls"], null, mediaTextGeneralSettings), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["BlockControls"], {
    group: "block"
  }, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["BlockVerticalAlignmentControl"], {
    onChange: onVerticalAlignmentChange,
    value: verticalAlignment
  }), Object(external_gc_element_["createElement"])(external_gc_components_["ToolbarButton"], {
    icon: pull_left,
    title: Object(external_gc_i18n_["__"])('在左侧显示媒体'),
    isActive: mediaPosition === 'left',
    onClick: () => setAttributes({
      mediaPosition: 'left'
    })
  }), Object(external_gc_element_["createElement"])(external_gc_components_["ToolbarButton"], {
    icon: pull_right,
    title: Object(external_gc_i18n_["__"])('在右侧显示媒体'),
    isActive: mediaPosition === 'right',
    onClick: () => setAttributes({
      mediaPosition: 'right'
    })
  }), mediaType === 'image' && Object(external_gc_element_["createElement"])(external_gc_blockEditor_["__experimentalImageURLInputUI"], {
    url: href || '',
    onChangeUrl: onSetHref,
    linkDestination: linkDestination,
    mediaType: mediaType,
    mediaUrl: image && image.source_url,
    mediaLink: image && image.link,
    linkTarget: linkTarget,
    linkClass: linkClass,
    rel: rel
  })), Object(external_gc_element_["createElement"])("div", blockProps, Object(external_gc_element_["createElement"])(media_container, {
    className: "gc-block-media-text__media",
    onSelectMedia: onSelectMedia,
    onWidthChange: onWidthChange,
    commitWidthChange: commitWidthChange,
    ref: refMediaContainer,
    focalPoint,
    imageFill,
    isSelected,
    isStackedOnMobile,
    mediaAlt,
    mediaId,
    mediaPosition,
    mediaType,
    mediaUrl,
    mediaWidth
  }), Object(external_gc_element_["createElement"])("div", innerBlocksProps)));
}

/* harmony default export */ var media_text_edit = (MediaTextEdit);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/media-text/save.js


/**
 * External dependencies
 */


/**
 * GeChiUI dependencies
 */


/**
 * Internal dependencies
 */



const save_DEFAULT_MEDIA_WIDTH = 50;
function media_text_save_save(_ref) {
  let {
    attributes
  } = _ref;
  const {
    isStackedOnMobile,
    mediaAlt,
    mediaPosition,
    mediaType,
    mediaUrl,
    mediaWidth,
    mediaId,
    verticalAlignment,
    imageFill,
    focalPoint,
    linkClass,
    href,
    linkTarget,
    rel
  } = attributes;
  const mediaSizeSlug = attributes.mediaSizeSlug || DEFAULT_MEDIA_SIZE_SLUG;
  const newRel = Object(external_lodash_["isEmpty"])(rel) ? undefined : rel;
  const imageClasses = classnames_default()({
    [`gc-image-${mediaId}`]: mediaId && mediaType === 'image',
    [`size-${mediaSizeSlug}`]: mediaId && mediaType === 'image'
  });
  let image = Object(external_gc_element_["createElement"])("img", {
    src: mediaUrl,
    alt: mediaAlt,
    className: imageClasses || null
  });

  if (href) {
    image = Object(external_gc_element_["createElement"])("a", {
      className: linkClass,
      href: href,
      target: linkTarget,
      rel: newRel
    }, image);
  }

  const mediaTypeRenders = {
    image: () => image,
    video: () => Object(external_gc_element_["createElement"])("video", {
      controls: true,
      src: mediaUrl
    })
  };
  const className = classnames_default()({
    'has-media-on-the-right': 'right' === mediaPosition,
    'is-stacked-on-mobile': isStackedOnMobile,
    [`is-vertically-aligned-${verticalAlignment}`]: verticalAlignment,
    'is-image-fill': imageFill
  });
  const backgroundStyles = imageFill ? imageFillStyles(mediaUrl, focalPoint) : {};
  let gridTemplateColumns;

  if (mediaWidth !== save_DEFAULT_MEDIA_WIDTH) {
    gridTemplateColumns = 'right' === mediaPosition ? `auto ${mediaWidth}%` : `${mediaWidth}% auto`;
  }

  const style = {
    gridTemplateColumns
  };
  return Object(external_gc_element_["createElement"])("div", external_gc_blockEditor_["useBlockProps"].save({
    className,
    style
  }), Object(external_gc_element_["createElement"])("figure", {
    className: "gc-block-media-text__media",
    style: backgroundStyles
  }, (mediaTypeRenders[mediaType] || external_lodash_["noop"])()), Object(external_gc_element_["createElement"])("div", external_gc_blockEditor_["useInnerBlocksProps"].save({
    className: 'gc-block-media-text__content'
  })));
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/media-text/transforms.js
/**
 * GeChiUI dependencies
 */

const media_text_transforms_transforms = {
  from: [{
    type: 'block',
    blocks: ['core/image'],
    transform: _ref => {
      let {
        alt,
        url,
        id,
        anchor
      } = _ref;
      return Object(external_gc_blocks_["createBlock"])('core/media-text', {
        mediaAlt: alt,
        mediaId: id,
        mediaUrl: url,
        mediaType: 'image',
        anchor
      });
    }
  }, {
    type: 'block',
    blocks: ['core/video'],
    transform: _ref2 => {
      let {
        src,
        id,
        anchor
      } = _ref2;
      return Object(external_gc_blocks_["createBlock"])('core/media-text', {
        mediaId: id,
        mediaUrl: src,
        mediaType: 'video',
        anchor
      });
    }
  }],
  to: [{
    type: 'block',
    blocks: ['core/image'],
    isMatch: _ref3 => {
      let {
        mediaType,
        mediaUrl
      } = _ref3;
      return !mediaUrl || mediaType === 'image';
    },
    transform: _ref4 => {
      let {
        mediaAlt,
        mediaId,
        mediaUrl,
        anchor
      } = _ref4;
      return Object(external_gc_blocks_["createBlock"])('core/image', {
        alt: mediaAlt,
        id: mediaId,
        url: mediaUrl,
        anchor
      });
    }
  }, {
    type: 'block',
    blocks: ['core/video'],
    isMatch: _ref5 => {
      let {
        mediaType,
        mediaUrl
      } = _ref5;
      return !mediaUrl || mediaType === 'video';
    },
    transform: _ref6 => {
      let {
        mediaId,
        mediaUrl,
        anchor
      } = _ref6;
      return Object(external_gc_blocks_["createBlock"])('core/video', {
        id: mediaId,
        src: mediaUrl,
        anchor
      });
    }
  }]
};
/* harmony default export */ var media_text_transforms = (media_text_transforms_transforms);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/media-text/index.js
/**
 * GeChiUI dependencies
 */


/**
 * Internal dependencies
 */



const media_text_metadata = {
  apiVersion: 2,
  name: "core/media-text",
  title: "媒体和文本",
  category: "media",
  description: "将媒体和文字并排设置来丰富布局。",
  keywords: ["image", "video"],
  textdomain: "default",
  attributes: {
    align: {
      type: "string",
      "default": "wide"
    },
    mediaAlt: {
      type: "string",
      source: "attribute",
      selector: "figure img",
      attribute: "alt",
      "default": ""
    },
    mediaPosition: {
      type: "string",
      "default": "left"
    },
    mediaId: {
      type: "number"
    },
    mediaUrl: {
      type: "string",
      source: "attribute",
      selector: "figure video,figure img",
      attribute: "src"
    },
    mediaLink: {
      type: "string"
    },
    linkDestination: {
      type: "string"
    },
    linkTarget: {
      type: "string",
      source: "attribute",
      selector: "figure a",
      attribute: "target"
    },
    href: {
      type: "string",
      source: "attribute",
      selector: "figure a",
      attribute: "href"
    },
    rel: {
      type: "string",
      source: "attribute",
      selector: "figure a",
      attribute: "rel"
    },
    linkClass: {
      type: "string",
      source: "attribute",
      selector: "figure a",
      attribute: "class"
    },
    mediaType: {
      type: "string"
    },
    mediaWidth: {
      type: "number",
      "default": 50
    },
    mediaSizeSlug: {
      type: "string"
    },
    isStackedOnMobile: {
      type: "boolean",
      "default": true
    },
    verticalAlignment: {
      type: "string"
    },
    imageFill: {
      type: "boolean"
    },
    focalPoint: {
      type: "object"
    }
  },
  supports: {
    anchor: true,
    align: ["wide", "full"],
    html: false,
    color: {
      gradients: true,
      link: true
    }
  },
  editorStyle: "gc-block-media-text-editor",
  style: "gc-block-media-text"
};


const {
  name: media_text_name
} = media_text_metadata;

const media_text_settings = {
  icon: media_and_text,
  example: {
    viewportWidth: 601,
    // Columns collapse "@media (max-width: 600px)".
    attributes: {
      mediaType: 'image',
      mediaUrl: 'https://s.w.org/images/core/5.3/Biologia_Centrali-Americana_-_Cantorchilus_semibadius_1902.jpg'
    },
    innerBlocks: [{
      name: 'core/paragraph',
      attributes: {
        content: Object(external_gc_i18n_["__"])('那鹪鹩<br>找找这儿，翻翻那儿<br>你丢了什么吗？')
      }
    }, {
      name: 'core/paragraph',
      attributes: {
        content: Object(external_gc_i18n_["__"])('——小林一茶')
      }
    }]
  },
  transforms: media_text_transforms,
  edit: media_text_edit,
  save: media_text_save_save,
  deprecated: media_text_deprecated
};

// EXTERNAL MODULE: external ["gc","dom"]
var external_gc_dom_ = __webpack_require__("EXvS");

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/missing/edit.js


/**
 * GeChiUI dependencies
 */








function MissingBlockWarning(_ref) {
  let {
    attributes,
    convertToHTML
  } = _ref;
  const {
    originalName,
    originalUndelimitedContent
  } = attributes;
  const hasContent = !!originalUndelimitedContent;
  const hasHTMLBlock = Object(external_gc_blocks_["getBlockType"])('core/html');
  const actions = [];
  let messageHTML;

  if (hasContent && hasHTMLBlock) {
    messageHTML = Object(external_gc_i18n_["sprintf"])(
    /* translators: %s: block name */
    Object(external_gc_i18n_["__"])('您的站点不支持“%s”区块。您可以原样保留此区块，将内容转换为自定义HTML区块，或移除此区块。'), originalName);
    actions.push(Object(external_gc_element_["createElement"])(external_gc_components_["Button"], {
      key: "convert",
      onClick: convertToHTML,
      variant: "primary"
    }, Object(external_gc_i18n_["__"])('留作HTML')));
  } else {
    messageHTML = Object(external_gc_i18n_["sprintf"])(
    /* translators: %s: block name */
    Object(external_gc_i18n_["__"])('您的站点不支持“%s”区块。您可以原样保留此区块或移除此区块。'), originalName);
  }

  return Object(external_gc_element_["createElement"])("div", Object(external_gc_blockEditor_["useBlockProps"])({
    className: 'has-warning'
  }), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["Warning"], {
    actions: actions
  }, messageHTML), Object(external_gc_element_["createElement"])(external_gc_element_["RawHTML"], null, Object(external_gc_dom_["safeHTML"])(originalUndelimitedContent)));
}

const MissingEdit = Object(external_gc_data_["withDispatch"])((dispatch, _ref2) => {
  let {
    clientId,
    attributes
  } = _ref2;
  const {
    replaceBlock
  } = dispatch(external_gc_blockEditor_["store"]);
  return {
    convertToHTML() {
      replaceBlock(clientId, Object(external_gc_blocks_["createBlock"])('core/html', {
        content: attributes.originalUndelimitedContent
      }));
    }

  };
})(MissingBlockWarning);
/* harmony default export */ var missing_edit = (MissingEdit);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/missing/save.js


/**
 * GeChiUI dependencies
 */

function missing_save_save(_ref) {
  let {
    attributes
  } = _ref;
  // Preserve the missing block's content.
  return Object(external_gc_element_["createElement"])(external_gc_element_["RawHTML"], null, attributes.originalContent);
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/missing/index.js
/**
 * GeChiUI dependencies
 */

/**
 * Internal dependencies
 */


const missing_metadata = {
  apiVersion: 2,
  name: "core/missing",
  title: "不支持",
  category: "text",
  description: "您的站点不支持此区块。",
  textdomain: "default",
  attributes: {
    originalName: {
      type: "string"
    },
    originalUndelimitedContent: {
      type: "string"
    },
    originalContent: {
      type: "string",
      source: "html"
    }
  },
  supports: {
    className: false,
    customClassName: false,
    inserter: false,
    html: false,
    reusable: false
  }
};

const {
  name: missing_name
} = missing_metadata;

const missing_settings = {
  name: missing_name,

  __experimentalLabel(attributes, _ref) {
    let {
      context
    } = _ref;

    if (context === 'accessibility') {
      const {
        originalName
      } = attributes;
      const originalBlockType = originalName ? Object(external_gc_blocks_["getBlockType"])(originalName) : undefined;

      if (originalBlockType) {
        return originalBlockType.settings.title || originalName;
      }

      return '';
    }
  },

  edit: missing_edit,
  save: missing_save_save
};

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/more.js


/**
 * GeChiUI dependencies
 */

const more = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  viewBox: "0 0 24 24",
  xmlns: "http://www.w3.org/2000/svg"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M4 9v1.5h16V9H4zm12 5.5h4V13h-4v1.5zm-6 0h4V13h-4v1.5zm-6 0h4V13H4v1.5z"
}));
/* harmony default export */ var library_more = (more);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/more/edit.js


/**
 * GeChiUI dependencies
 */






const DEFAULT_TEXT = Object(external_gc_i18n_["__"])('阅读更多');

function MoreEdit(_ref) {
  let {
    attributes: {
      customText,
      noTeaser
    },
    insertBlocksAfter,
    setAttributes
  } = _ref;

  const onChangeInput = event => {
    setAttributes({
      customText: event.target.value !== '' ? event.target.value : undefined
    });
  };

  const onKeyDown = _ref2 => {
    let {
      keyCode
    } = _ref2;

    if (keyCode === external_gc_keycodes_["ENTER"]) {
      insertBlocksAfter([Object(external_gc_blocks_["createBlock"])(Object(external_gc_blocks_["getDefaultBlockName"])())]);
    }
  };

  const getHideExcerptHelp = checked => checked ? Object(external_gc_i18n_["__"])('此摘要已隐藏。') : Object(external_gc_i18n_["__"])('此摘要可见。');

  const toggleHideExcerpt = () => setAttributes({
    noTeaser: !noTeaser
  });

  const style = {
    width: `${(customText ? customText : DEFAULT_TEXT).length + 1.2}em`
  };
  return Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InspectorControls"], null, Object(external_gc_element_["createElement"])(external_gc_components_["PanelBody"], null, Object(external_gc_element_["createElement"])(external_gc_components_["ToggleControl"], {
    label: Object(external_gc_i18n_["__"])('在完整内容页上隐藏摘要'),
    checked: !!noTeaser,
    onChange: toggleHideExcerpt,
    help: getHideExcerptHelp
  }))), Object(external_gc_element_["createElement"])("div", Object(external_gc_blockEditor_["useBlockProps"])(), Object(external_gc_element_["createElement"])("div", {
    className: "gc-block-more"
  }, Object(external_gc_element_["createElement"])("input", {
    "aria-label": Object(external_gc_i18n_["__"])('阅读更多链接文字'),
    type: "text",
    value: customText,
    placeholder: DEFAULT_TEXT,
    onChange: onChangeInput,
    onKeyDown: onKeyDown,
    style: style
  }))));
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/more/save.js


/**
 * External dependencies
 */

/**
 * GeChiUI dependencies
 */


function more_save_save(_ref) {
  let {
    attributes: {
      customText,
      noTeaser
    }
  } = _ref;
  const moreTag = customText ? `<!--more ${customText}-->` : '<!--more-->';
  const noTeaserTag = noTeaser ? '<!--noteaser-->' : '';
  return Object(external_gc_element_["createElement"])(external_gc_element_["RawHTML"], null, Object(external_lodash_["compact"])([moreTag, noTeaserTag]).join('\n'));
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/more/transforms.js
/**
 * GeChiUI dependencies
 */

const more_transforms_transforms = {
  from: [{
    type: 'raw',
    schema: {
      'gc-block': {
        attributes: ['data-block']
      }
    },
    isMatch: node => node.dataset && node.dataset.block === 'core/more',

    transform(node) {
      const {
        customText,
        noTeaser
      } = node.dataset;
      const attrs = {}; // Don't copy unless defined and not an empty string

      if (customText) {
        attrs.customText = customText;
      } // Special handling for boolean


      if (noTeaser === '') {
        attrs.noTeaser = true;
      }

      return Object(external_gc_blocks_["createBlock"])('core/more', attrs);
    }

  }]
};
/* harmony default export */ var more_transforms = (more_transforms_transforms);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/more/index.js
/**
 * GeChiUI dependencies
 */

/**
 * Internal dependencies
 */


const more_metadata = {
  apiVersion: 2,
  name: "core/more",
  title: "更多",
  category: "design",
  description: "此区块前的内容将显示在您归档页的摘要中。",
  keywords: ["read more"],
  textdomain: "default",
  attributes: {
    customText: {
      type: "string"
    },
    noTeaser: {
      type: "boolean",
      "default": false
    }
  },
  supports: {
    customClassName: false,
    className: false,
    html: false,
    multiple: false
  },
  editorStyle: "gc-block-more-editor"
};


const {
  name: more_name
} = more_metadata;

const more_settings = {
  icon: library_more,
  example: {},

  __experimentalLabel(attributes, _ref) {
    let {
      context
    } = _ref;

    if (context === 'accessibility') {
      return attributes.customText;
    }
  },

  transforms: more_transforms,
  edit: MoreEdit,
  save: more_save_save
};

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/navigation.js


/**
 * GeChiUI dependencies
 */

const navigation = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  viewBox: "0 0 24 24",
  xmlns: "http://www.w3.org/2000/svg"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M12 4c-4.4 0-8 3.6-8 8s3.6 8 8 8 8-3.6 8-8-3.6-8-8-8zm0 14.5c-3.6 0-6.5-2.9-6.5-6.5S8.4 5.5 12 5.5s6.5 2.9 6.5 6.5-2.9 6.5-6.5 6.5zM9 16l4.5-3L15 8.4l-4.5 3L9 16z"
}));
/* harmony default export */ var library_navigation = (navigation);

// EXTERNAL MODULE: ./node_modules/@gechiui/icons/build-module/library/list-view.js
var list_view = __webpack_require__("2BQN");

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/navigation/edit/use-list-view-modal.js


/**
 * GeChiUI dependencies
 */







function NavigationBlockListView(_ref) {
  let {
    clientId,
    __experimentalFeatures
  } = _ref;
  const blocks = Object(external_gc_data_["useSelect"])(select => select(external_gc_blockEditor_["store"]).__unstableGetClientIdsTree(clientId), [clientId]);
  const listViewRef = Object(external_gc_element_["useRef"])();
  const [minHeight, setMinHeight] = Object(external_gc_element_["useState"])(300);
  Object(external_gc_element_["useEffect"])(() => {
    var _listViewRef$current$, _listViewRef$current;

    setMinHeight((_listViewRef$current$ = listViewRef === null || listViewRef === void 0 ? void 0 : (_listViewRef$current = listViewRef.current) === null || _listViewRef$current === void 0 ? void 0 : _listViewRef$current.clientHeight) !== null && _listViewRef$current$ !== void 0 ? _listViewRef$current$ : 300);
  }, []);
  return Object(external_gc_element_["createElement"])("div", {
    style: {
      minHeight
    }
  }, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["__experimentalListView"], {
    ref: listViewRef,
    blocks: blocks,
    showBlockMovers: true,
    showNestedBlocks: true,
    __experimentalFeatures: __experimentalFeatures
  }));
}

function useListViewModal(clientId, __experimentalFeatures) {
  const [isModalOpen, setIsModalOpen] = Object(external_gc_element_["useState"])(false);
  const listViewToolbarButton = Object(external_gc_element_["createElement"])(external_gc_components_["ToolbarButton"], {
    className: "components-toolbar__control",
    label: Object(external_gc_i18n_["__"])('打开列表视图'),
    onClick: () => setIsModalOpen(true),
    icon: list_view["a" /* default */]
  });
  const listViewModal = isModalOpen && Object(external_gc_element_["createElement"])(external_gc_components_["Modal"], {
    title: Object(external_gc_i18n_["__"])('列表视图'),
    closeLabel: Object(external_gc_i18n_["__"])('关闭'),
    onRequestClose: () => {
      setIsModalOpen(false);
    },
    shouldCloseOnClickOutside: false
  }, Object(external_gc_element_["createElement"])(NavigationBlockListView, {
    clientId: clientId,
    __experimentalFeatures: __experimentalFeatures
  }));
  return {
    listViewToolbarButton,
    listViewModal
  };
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/navigation/use-navigation-menu.js
/**
 * GeChiUI dependencies
 */


function useNavigationMenu(ref) {
  return Object(external_gc_data_["useSelect"])(select => {
    var _navigationMenu;

    const {
      getEntityRecord,
      getEditedEntityRecord,
      getEntityRecords,
      hasFinishedResolution,
      canUser
    } = select(external_gc_coreData_["store"]);
    const navigationMenuSingleArgs = ['postType', 'gc_navigation', ref];
    const rawNavigationMenu = ref ? getEntityRecord(...navigationMenuSingleArgs) : null;
    let navigationMenu = ref ? getEditedEntityRecord(...navigationMenuSingleArgs) : null; // getEditedEntityRecord will return the post regardless of status.
    // Therefore if the found post is not published then we should ignore it.

    if (((_navigationMenu = navigationMenu) === null || _navigationMenu === void 0 ? void 0 : _navigationMenu.status) !== 'publish') {
      navigationMenu = null;
    }

    const hasResolvedNavigationMenu = ref ? hasFinishedResolution('getEditedEntityRecord', navigationMenuSingleArgs) : false;
    const navigationMenuMultipleArgs = ['postType', 'gc_navigation', {
      per_page: -1,
      status: 'publish'
    }];
    const navigationMenus = getEntityRecords(...navigationMenuMultipleArgs);
    const canSwitchNavigationMenu = ref ? (navigationMenus === null || navigationMenus === void 0 ? void 0 : navigationMenus.length) > 1 : (navigationMenus === null || navigationMenus === void 0 ? void 0 : navigationMenus.length) > 0;
    return {
      isNavigationMenuResolved: hasResolvedNavigationMenu,
      isNavigationMenuMissing: !ref || hasResolvedNavigationMenu && !rawNavigationMenu,
      canSwitchNavigationMenu,
      hasResolvedNavigationMenus: hasFinishedResolution('getEntityRecords', navigationMenuMultipleArgs),
      navigationMenu,
      navigationMenus,
      canUserUpdateNavigationEntity: ref ? canUser('update', 'navigation', ref) : undefined,
      hasResolvedCanUserUpdateNavigationEntity: hasFinishedResolution('canUser', ['update', 'navigation', ref]),
      canUserDeleteNavigationEntity: ref ? canUser('delete', 'navigation', ref) : undefined,
      hasResolvedCanUserDeleteNavigationEntity: hasFinishedResolution('canUser', ['delete', 'navigation', ref]),
      canUserCreateNavigation: canUser('create', 'navigation'),
      hasResolvedCanUserCreateNavigation: hasFinishedResolution('canUser', ['create', 'navigation'])
    };
  }, [ref]);
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/navigation/use-navigation-entities.js
/**
 * GeChiUI dependencies
 */


/**
 * @typedef {Object} NavigationEntitiesData
 * @property {Array|undefined} pages                - a collection of GC Post entity objects of post type "Page".
 * @property {boolean}         isResolvingPages     - indicates whether the request to fetch pages is currently resolving.
 * @property {boolean}         hasResolvedPages     - indicates whether the request to fetch pages has finished resolving.
 * @property {Array|undefined} menus                - a collection of Menu entity objects.
 * @property {boolean}         isResolvingMenus     - indicates whether the request to fetch menus is currently resolving.
 * @property {boolean}         hasResolvedMenus     - indicates whether the request to fetch menus has finished resolving.
 * @property {Array|undefined} menusItems           - a collection of Menu Item entity objects for the current menuId.
 * @property {boolean}         hasResolvedMenuItems - indicates whether the request to fetch menuItems has finished resolving.
 * @property {boolean}         hasPages             - indicates whether there is currently any data for pages.
 * @property {boolean}         hasMenus             - indicates whether there is currently any data for menus.
 */

/**
 * Manages fetching and resolution state for all entities required
 * for the Navigation block.
 *
 * @param {number} menuId the menu for which to retrieve menuItem data.
 * @return { NavigationEntitiesData } the entity data.
 */

function useNavigationEntities(menuId) {
  return { ...usePageEntities(),
    ...useMenuEntities(),
    ...useMenuItemEntities(menuId)
  };
}

function useMenuEntities() {
  const {
    menus,
    isResolvingMenus,
    hasResolvedMenus
  } = Object(external_gc_data_["useSelect"])(select => {
    const {
      getMenus,
      isResolving,
      hasFinishedResolution
    } = select(external_gc_coreData_["store"]);
    const menusParameters = [{
      per_page: -1
    }];
    return {
      menus: getMenus(...menusParameters),
      isResolvingMenus: isResolving('getMenus', menusParameters),
      hasResolvedMenus: hasFinishedResolution('getMenus', menusParameters)
    };
  }, []);
  return {
    menus,
    isResolvingMenus,
    hasResolvedMenus,
    hasMenus: !!(hasResolvedMenus && menus !== null && menus !== void 0 && menus.length)
  };
}

function useMenuItemEntities(menuId) {
  const {
    menuItems,
    hasResolvedMenuItems
  } = Object(external_gc_data_["useSelect"])(select => {
    const {
      getMenuItems,
      hasFinishedResolution
    } = select(external_gc_coreData_["store"]);
    const hasSelectedMenu = menuId !== undefined;
    const menuItemsParameters = hasSelectedMenu ? [{
      menus: menuId,
      per_page: -1
    }] : undefined;
    return {
      menuItems: hasSelectedMenu ? getMenuItems(...menuItemsParameters) : undefined,
      hasResolvedMenuItems: hasSelectedMenu ? hasFinishedResolution('getMenuItems', menuItemsParameters) : false
    };
  }, [menuId]);
  return {
    menuItems,
    hasResolvedMenuItems
  };
}

function usePageEntities() {
  const {
    pages,
    isResolvingPages,
    hasResolvedPages
  } = Object(external_gc_data_["useSelect"])(select => {
    const {
      getEntityRecords,
      isResolving,
      hasFinishedResolution
    } = select(external_gc_coreData_["store"]);
    const pagesParameters = ['postType', 'page', {
      parent: 0,
      order: 'asc',
      orderby: 'id',
      per_page: -1
    }];
    return {
      pages: getEntityRecords(...pagesParameters) || null,
      isResolvingPages: isResolving('getEntityRecords', pagesParameters),
      hasResolvedPages: hasFinishedResolution('getEntityRecords', pagesParameters)
    };
  }, []);
  return {
    pages,
    isResolvingPages,
    hasResolvedPages,
    hasPages: !!(hasResolvedPages && pages !== null && pages !== void 0 && pages.length)
  };
}

// EXTERNAL MODULE: ./node_modules/@gechiui/icons/build-module/icon/index.js
var build_module_icon = __webpack_require__("txjq");

// EXTERNAL MODULE: external ["gc","htmlEntities"]
var external_gc_htmlEntities_ = __webpack_require__("0+Iy");

// EXTERNAL MODULE: ./node_modules/@gechiui/icons/build-module/library/search.js
var library_search = __webpack_require__("6cHw");

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/navigation/edit/placeholder/placeholder-preview.js


/**
 * External dependencies
 */

/**
 * GeChiUI dependencies
 */



const PlaceholderPreview = _ref => {
  let {
    isLoading
  } = _ref;
  return Object(external_gc_element_["createElement"])("ul", {
    className: classnames_default()('gc-block-navigation-placeholder__preview', 'gc-block-navigation__container', {
      'is-loading': isLoading
    })
  }, Object(external_gc_element_["createElement"])("li", {
    className: "gc-block-navigation-item"
  }, "\u200B"), Object(external_gc_element_["createElement"])("li", {
    className: "gc-block-navigation-item"
  }, "\u200B"), Object(external_gc_element_["createElement"])("li", {
    className: "gc-block-navigation-item"
  }, "\u200B"), Object(external_gc_element_["createElement"])("li", {
    className: "gc-block-navigation-placeholder__preview-search-icon"
  }, Object(external_gc_element_["createElement"])(build_module_icon["a" /* default */], {
    icon: library_search["a" /* default */]
  })));
};

/* harmony default export */ var placeholder_preview = (PlaceholderPreview);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/template-part/edit/utils/create-template-part-id.js
/**
 * Generates a template part Id based on slug and theme inputs.
 *
 * @param {string} theme the template part's theme.
 * @param {string} slug  the template part's slug
 * @return {string|null} the template part's Id.
 */
function createTemplatePartId(theme, slug) {
  return theme && slug ? theme + '//' + slug : null;
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/navigation/use-template-part-area-label.js
/**
 * GeChiUI dependencies
 */



/**
 * Internal dependencies
 */
// TODO: this util should perhaps be refactored somewhere like core-data.


function useTemplatePartAreaLabel(clientId) {
  return Object(external_gc_data_["useSelect"])(select => {
    // Use the lack of a clientId as an opportunity to bypass the rest
    // of this hook.
    if (!clientId) {
      return;
    }

    const {
      getBlock,
      getBlockParentsByBlockName
    } = select(external_gc_blockEditor_["store"]);
    const withAscendingResults = true;
    const parentTemplatePartClientIds = getBlockParentsByBlockName(clientId, 'core/template-part', withAscendingResults);

    if (!(parentTemplatePartClientIds !== null && parentTemplatePartClientIds !== void 0 && parentTemplatePartClientIds.length)) {
      return;
    } // FIXME: @gechiui/block-library should not depend on @gechiui/editor.
    // Blocks can be loaded into a *non-post* block editor.
    // This code is lifted from this file:
    // packages/block-library/src/template-part/edit/advanced-controls.js
    // eslint-disable-next-line @gechiui/data-no-store-string-literals


    const definedAreas = select('core/editor').__experimentalGetDefaultTemplatePartAreas();

    const {
      getEditedEntityRecord
    } = select(external_gc_coreData_["store"]);

    for (const templatePartClientId of parentTemplatePartClientIds) {
      const templatePartBlock = getBlock(templatePartClientId); // The 'area' usually isn't stored on the block, but instead
      // on the entity.

      const {
        theme,
        slug
      } = templatePartBlock.attributes;
      const templatePartEntityId = createTemplatePartId(theme, slug);
      const templatePartEntity = getEditedEntityRecord('postType', 'gc_template_part', templatePartEntityId); // Look up the `label` for the area in the defined areas so
      // that an internationalized label can be used.

      if (templatePartEntity !== null && templatePartEntity !== void 0 && templatePartEntity.area) {
        var _definedAreas$find;

        return (_definedAreas$find = definedAreas.find(definedArea => definedArea.area !== 'uncategorized' && definedArea.area === templatePartEntity.area)) === null || _definedAreas$find === void 0 ? void 0 : _definedAreas$find.label;
      }
    }
  }, [clientId]);
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/navigation/edit/use-generate-default-navigation-title.js
/**
 * GeChiUI dependencies
 */





/**
 * Internal dependencies
 */


const DRAFT_MENU_PARAMS = ['postType', 'gc_navigation', {
  status: 'draft',
  per_page: -1
}];
const PUBLISHED_MENU_PARAMS = ['postType', 'gc_navigation', {
  per_page: -1,
  status: 'publish'
}];
function useGenerateDefaultNavigationTitle(clientId) {
  // The block will be disabled in a block preview, use this as a way of
  // avoiding the side-effects of this component for block previews.
  const isDisabled = Object(external_gc_element_["useContext"])(external_gc_components_["Disabled"].Context); // Because we can't conditionally call hooks, pass an undefined client id
  // arg to bypass the expensive `useTemplateArea` code. The hook will return
  // early.

  const area = useTemplatePartAreaLabel(isDisabled ? undefined : clientId);
  const registry = Object(external_gc_data_["useRegistry"])();
  return Object(external_gc_element_["useCallback"])(async () => {
    // Ensure other navigation menus have loaded so an
    // accurate name can be created.
    if (isDisabled) {
      return '';
    }

    const {
      getEntityRecords
    } = registry.resolveSelect(external_gc_coreData_["store"]);
    const [draftNavigationMenus, navigationMenus] = await Promise.all([getEntityRecords(...DRAFT_MENU_PARAMS), getEntityRecords(...PUBLISHED_MENU_PARAMS)]);
    const title = area ? Object(external_gc_i18n_["sprintf"])( // translators: %s: the name of a menu (e.g. Header navigation).
    Object(external_gc_i18n_["__"])('%s 导航'), area) : // translators: 'navigation' as in website navigation.
    Object(external_gc_i18n_["__"])('导航'); // Determine how many menus start with the automatic title.

    const matchingMenuTitleCount = [...draftNavigationMenus, ...navigationMenus].reduce((count, menu) => {
      var _menu$title, _menu$title$raw;

      return menu !== null && menu !== void 0 && (_menu$title = menu.title) !== null && _menu$title !== void 0 && (_menu$title$raw = _menu$title.raw) !== null && _menu$title$raw !== void 0 && _menu$title$raw.startsWith(title) ? count + 1 : count;
    }, 0); // Append a number to the end of the title if a menu with
    // the same name exists.

    const titleWithCount = matchingMenuTitleCount > 0 ? `${title} ${matchingMenuTitleCount + 1}` : title;
    return titleWithCount || '';
  }, [isDisabled, area]);
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/navigation/edit/use-create-navigation-menu.js
/**
 * GeChiUI dependencies
 */




/**
 * Internal dependencies
 */


function useCreateNavigationMenu(clientId) {
  const {
    saveEntityRecord
  } = Object(external_gc_data_["useDispatch"])(external_gc_coreData_["store"]);
  const generateDefaultTitle = useGenerateDefaultNavigationTitle(clientId); // This callback uses data from the two placeholder steps and only creates
  // a new navigation menu when the user completes the final step.

  return Object(external_gc_element_["useCallback"])(async function () {
    let title = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    let blocks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

    if (!title) {
      title = await generateDefaultTitle();
    }

    const record = {
      title,
      content: Object(external_gc_blocks_["serialize"])(blocks),
      status: 'publish'
    };
    return await saveEntityRecord('postType', 'gc_navigation', record);
  }, [external_gc_blocks_["serialize"], saveEntityRecord]);
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/navigation/menu-items-to-blocks.js
/**
 * External dependencies
 */

/**
 * GeChiUI dependencies
 */



/**
 * Convert a flat menu item structure to a nested blocks structure.
 *
 * @param {Object[]} menuItems An array of menu items.
 *
 * @return {GCBlock[]} An array of blocks.
 */

function menuItemsToBlocks(menuItems) {
  if (!menuItems) {
    return null;
  }

  const menuTree = createDataTree(menuItems);
  const blocks = mapMenuItemsToBlocks(menuTree);
  return Object(external_gc_hooks_["applyFilters"])('blocks.navigation.__unstableMenuItemsToBlocks', blocks, menuItems);
}
/**
 * A recursive function that maps menu item nodes to blocks.
 *
 * @param {GCNavMenuItem[]} menuItems An array of GCNavMenuItem items.
 * @return {Object} Object containing innerBlocks and mapping.
 */

function mapMenuItemsToBlocks(menuItems) {
  let mapping = {}; // The menuItem should be in menu_order sort order.

  const sortedItems = Object(external_lodash_["sortBy"])(menuItems, 'menu_order');
  const innerBlocks = sortedItems.map(menuItem => {
    var _menuItem$children, _menuItem$children2;

    if (menuItem.type === 'block') {
      const [block] = Object(external_gc_blocks_["parse"])(menuItem.content.raw);

      if (!block) {
        return Object(external_gc_blocks_["createBlock"])('core/freeform', {
          content: menuItem.content
        });
      }

      return block;
    }

    const attributes = menuItemToBlockAttributes(menuItem); // If there are children recurse to build those nested blocks.

    const {
      innerBlocks: nestedBlocks = [],
      // alias to avoid shadowing
      mapping: nestedMapping = {} // alias to avoid shadowing

    } = (_menuItem$children = menuItem.children) !== null && _menuItem$children !== void 0 && _menuItem$children.length ? mapMenuItemsToBlocks(menuItem.children) : {}; // Update parent mapping with nested mapping.

    mapping = { ...mapping,
      ...nestedMapping
    };
    const blockType = (_menuItem$children2 = menuItem.children) !== null && _menuItem$children2 !== void 0 && _menuItem$children2.length ? 'core/navigation-submenu' : 'core/navigation-link'; // Create block with nested "innerBlocks".

    const block = Object(external_gc_blocks_["createBlock"])(blockType, attributes, nestedBlocks); // Create mapping for menuItem -> block

    mapping[menuItem.id] = block.clientId;
    return block;
  });
  return {
    innerBlocks,
    mapping
  };
}
/**
 * A GC nav_menu_item object.
 * For more documentation on the individual fields present on a menu item please see:
 * https://core.trac.gechiui.com/browser/tags/5.7.1/src/gc-includes/nav-menu.php#L789
 *
 * Changes made here should also be mirrored in packages/edit-navigation/src/store/utils.js.
 *
 * @typedef GCNavMenuItem
 *
 * @property {Object} title       stores the raw and rendered versions of the title/label for this menu item.
 * @property {Array}  xfn         the XFN relationships expressed in the link of this menu item.
 * @property {Array}  classes     the HTML class attributes for this menu item.
 * @property {string} attr_title  the HTML title attribute for this menu item.
 * @property {string} object      The type of object originally represented, such as 'category', 'post', or 'attachment'.
 * @property {string} object_id   The DB ID of the original object this menu item represents, e.g. ID for posts and term_id for categories.
 * @property {string} description The description of this menu item.
 * @property {string} url         The URL to which this menu item points.
 * @property {string} type        The family of objects originally represented, such as 'post_type' or 'taxonomy'.
 * @property {string} target      The target attribute of the link element for this menu item.
 */

/**
 * Convert block attributes to menu item.
 *
 * @param {GCNavMenuItem} menuItem the menu item to be converted to block attributes.
 * @return {Object} the block attributes converted from the GCNavMenuItem item.
 */


function menuItemToBlockAttributes(_ref) {
  var _object;

  let {
    title: menuItemTitleField,
    xfn,
    classes,
    // eslint-disable-next-line camelcase
    attr_title,
    object,
    // eslint-disable-next-line camelcase
    object_id,
    description,
    url,
    type: menuItemTypeField,
    target
  } = _ref;

  // For historical reasons, the `core/navigation-link` variation type is `tag`
  // whereas GC Core expects `post_tag` as the `object` type.
  // To avoid writing a block migration we perform a conversion here.
  // See also inverse equivalent in `blockAttributesToMenuItem`.
  if (object && object === 'post_tag') {
    object = 'tag';
  }

  return {
    label: (menuItemTitleField === null || menuItemTitleField === void 0 ? void 0 : menuItemTitleField.rendered) || '',
    ...(((_object = object) === null || _object === void 0 ? void 0 : _object.length) && {
      type: object
    }),
    kind: (menuItemTypeField === null || menuItemTypeField === void 0 ? void 0 : menuItemTypeField.replace('_', '-')) || 'custom',
    url: url || '',
    ...((xfn === null || xfn === void 0 ? void 0 : xfn.length) && xfn.join(' ').trim() && {
      rel: xfn.join(' ').trim()
    }),
    ...((classes === null || classes === void 0 ? void 0 : classes.length) && classes.join(' ').trim() && {
      className: classes.join(' ').trim()
    }),
    ...((attr_title === null || attr_title === void 0 ? void 0 : attr_title.length) && {
      title: attr_title
    }),
    // eslint-disable-next-line camelcase
    ...(object_id && 'custom' !== object && {
      id: object_id
    }),
    ...((description === null || description === void 0 ? void 0 : description.length) && {
      description
    }),
    ...(target === '_blank' && {
      opensInNewTab: true
    })
  };
}
/**
 * Creates a nested, hierarchical tree representation from unstructured data that
 * has an inherent relationship defined between individual items.
 *
 * For example, by default, each element in the dataset should have an `id` and
 * `parent` property where the `parent` property indicates a relationship between
 * the current item and another item with a matching `id` properties.
 *
 * This is useful for building linked lists of data from flat data structures.
 *
 * @param {Array}  dataset  linked data to be rearranged into a hierarchical tree based on relational fields.
 * @param {string} id       the property which uniquely identifies each entry within the array.
 * @param {*}      relation the property which identifies how the current item is related to other items in the data (if at all).
 * @return {Array} a nested array of parent/child relationships
 */


function createDataTree(dataset) {
  let id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'id';
  let relation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'parent';
  const hashTable = Object.create(null);
  const dataTree = [];

  for (const data of dataset) {
    hashTable[data[id]] = { ...data,
      children: []
    };

    if (data[relation]) {
      hashTable[data[relation]] = hashTable[data[relation]] || {};
      hashTable[data[relation]].children = hashTable[data[relation]].children || [];
      hashTable[data[relation]].children.push(hashTable[data[id]]);
    } else {
      dataTree.push(hashTable[data[id]]);
    }
  }

  return dataTree;
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/navigation/use-convert-classic-menu.js
/**
 * GeChiUI dependencies
 */

/**
 * Internal dependencies
 */



function useConvertClassicMenu(onFinish) {
  const [selectedMenu, setSelectedMenu] = Object(external_gc_element_["useState"])();
  const [isAwaitingMenuItemResolution, setIsAwaitingMenuItemResolution] = Object(external_gc_element_["useState"])(false);
  const [menuName, setMenuName] = Object(external_gc_element_["useState"])('');
  const {
    menuItems,
    hasResolvedMenuItems
  } = useNavigationEntities(selectedMenu);
  const createFromMenu = Object(external_gc_element_["useCallback"])(name => {
    const {
      innerBlocks: blocks
    } = menuItemsToBlocks(menuItems);
    onFinish(blocks, name);
  }, [menuItems, menuItemsToBlocks, onFinish]);
  Object(external_gc_element_["useEffect"])(() => {
    // If the user selected a menu but we had to wait for menu items to
    // finish resolving, then create the block once resolution finishes.
    if (isAwaitingMenuItemResolution && hasResolvedMenuItems) {
      createFromMenu(menuName);
      setIsAwaitingMenuItemResolution(false);
    }
  }, [isAwaitingMenuItemResolution, hasResolvedMenuItems, menuName]);
  return Object(external_gc_element_["useCallback"])((id, name) => {
    setSelectedMenu(id); // If we have menu items, create the block right away.

    if (hasResolvedMenuItems) {
      createFromMenu(name);
      return;
    } // Otherwise, create the block when resolution finishes.


    setIsAwaitingMenuItemResolution(true); // Store the name to use later.

    setMenuName(name);
  }, [hasResolvedMenuItems, createFromMenu]);
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/navigation/edit/placeholder/index.js


/**
 * GeChiUI dependencies
 */





/**
 * Internal dependencies
 */







const ExistingMenusDropdown = _ref => {
  let {
    canSwitchNavigationMenu,
    navigationMenus,
    onFinish,
    menus,
    onCreateFromMenu,
    showClassicMenus = false
  } = _ref;
  const toggleProps = {
    variant: 'tertiary',
    iconPosition: 'right',
    className: 'gc-block-navigation-placeholder__actions__dropdown'
  };
  return Object(external_gc_element_["createElement"])(external_gc_components_["DropdownMenu"], {
    text: Object(external_gc_i18n_["__"])('选择菜单'),
    icon: null,
    toggleProps: toggleProps,
    popoverProps: {
      isAlternate: true
    }
  }, _ref2 => {
    let {
      onClose
    } = _ref2;
    return Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])(external_gc_components_["MenuGroup"], {
      label: Object(external_gc_i18n_["__"])('菜单')
    }, canSwitchNavigationMenu && (navigationMenus === null || navigationMenus === void 0 ? void 0 : navigationMenus.map(menu => {
      return Object(external_gc_element_["createElement"])(external_gc_components_["MenuItem"], {
        onClick: () => {
          onFinish(menu);
        },
        onClose: onClose,
        key: menu.id
      }, Object(external_gc_htmlEntities_["decodeEntities"])(menu.title.rendered));
    }))), showClassicMenus && Object(external_gc_element_["createElement"])(external_gc_components_["MenuGroup"], {
      label: Object(external_gc_i18n_["__"])('经典菜单')
    }, menus === null || menus === void 0 ? void 0 : menus.map(menu => {
      return Object(external_gc_element_["createElement"])(external_gc_components_["MenuItem"], {
        onClick: () => {
          onCreateFromMenu(menu.id, menu.name);
        },
        onClose: onClose,
        key: menu.id
      }, Object(external_gc_htmlEntities_["decodeEntities"])(menu.name));
    })));
  });
};

function NavigationPlaceholder(_ref3) {
  let {
    clientId,
    onFinish,
    canSwitchNavigationMenu,
    hasResolvedNavigationMenus,
    canUserCreateNavigation = false
  } = _ref3;
  const createNavigationMenu = useCreateNavigationMenu(clientId);

  const onFinishMenuCreation = async function (blocks) {
    let navigationMenuTitle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    if (!canUserCreateNavigation) {
      return;
    }

    const navigationMenu = await createNavigationMenu(navigationMenuTitle, blocks);
    onFinish(navigationMenu, blocks);
  };

  const convertClassicMenu = useConvertClassicMenu(onFinishMenuCreation);
  const {
    isResolvingPages,
    menus,
    isResolvingMenus,
    hasPages,
    hasMenus
  } = useNavigationEntities();
  const isStillLoading = isResolvingPages || isResolvingMenus;

  const onCreateEmptyMenu = () => {
    onFinishMenuCreation([]);
  };

  const onCreateAllPages = () => {
    const block = [Object(external_gc_blocks_["createBlock"])('core/page-list')];
    onFinishMenuCreation(block);
  };

  const {
    navigationMenus
  } = useNavigationMenu();
  return Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, (!hasResolvedNavigationMenus || isStillLoading) && Object(external_gc_element_["createElement"])(placeholder_preview, {
    isLoading: true
  }), hasResolvedNavigationMenus && !isStillLoading && Object(external_gc_element_["createElement"])(external_gc_components_["Placeholder"], {
    className: "gc-block-navigation-placeholder"
  }, Object(external_gc_element_["createElement"])(placeholder_preview, null), Object(external_gc_element_["createElement"])("div", {
    className: "gc-block-navigation-placeholder__controls"
  }, Object(external_gc_element_["createElement"])("div", {
    className: "gc-block-navigation-placeholder__actions"
  }, Object(external_gc_element_["createElement"])("div", {
    className: "gc-block-navigation-placeholder__actions__indicator"
  }, Object(external_gc_element_["createElement"])(build_module_icon["a" /* default */], {
    icon: library_navigation
  }), ' ', Object(external_gc_i18n_["__"])('导航')), Object(external_gc_element_["createElement"])("hr", null), hasMenus || navigationMenus !== null && navigationMenus !== void 0 && navigationMenus.length ? Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])(ExistingMenusDropdown, {
    canSwitchNavigationMenu: canSwitchNavigationMenu,
    navigationMenus: navigationMenus,
    onFinish: onFinish,
    menus: menus,
    onCreateFromMenu: convertClassicMenu,
    showClassicMenus: canUserCreateNavigation
  }), Object(external_gc_element_["createElement"])("hr", null)) : undefined, canUserCreateNavigation && hasPages ? Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])(external_gc_components_["Button"], {
    variant: "tertiary",
    onClick: onCreateAllPages
  }, Object(external_gc_i18n_["__"])('添加所有页面')), Object(external_gc_element_["createElement"])("hr", null)) : undefined, canUserCreateNavigation && Object(external_gc_element_["createElement"])(external_gc_components_["Button"], {
    variant: "tertiary",
    onClick: onCreateEmptyMenu
  }, Object(external_gc_i18n_["__"])('开始为空'))))));
}

// EXTERNAL MODULE: ./node_modules/@gechiui/icons/build-module/library/close.js
var library_close = __webpack_require__("ajyK");

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/navigation/edit/responsive-wrapper.js


/**
 * External dependencies
 */

/**
 * GeChiUI dependencies
 */





function ResponsiveWrapper(_ref) {
  let {
    children,
    id,
    isOpen,
    isResponsive,
    onToggle,
    isHiddenByDefault,
    classNames,
    styles
  } = _ref;

  if (!isResponsive) {
    return children;
  }

  const responsiveContainerClasses = classnames_default()('gc-block-navigation__responsive-container', classNames, {
    'is-menu-open': isOpen,
    'hidden-by-default': isHiddenByDefault
  });
  const openButtonClasses = classnames_default()('gc-block-navigation__responsive-container-open', {
    'always-shown': isHiddenByDefault
  });
  const modalId = `${id}-modal`;
  const dialogProps = {
    className: 'gc-block-navigation__responsive-dialog',
    ...(isOpen && {
      role: 'dialog',
      'aria-modal': true,
      'aria-label': Object(external_gc_i18n_["__"])('菜单')
    })
  };
  return Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, !isOpen && Object(external_gc_element_["createElement"])(external_gc_components_["Button"], {
    "aria-haspopup": "true",
    "aria-label": Object(external_gc_i18n_["__"])('打开菜单'),
    className: openButtonClasses,
    onClick: () => onToggle(true)
  }, Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 24 24",
    width: "24",
    height: "24",
    role: "img",
    "aria-hidden": "true",
    focusable: "false"
  }, Object(external_gc_element_["createElement"])(external_gc_primitives_["Rect"], {
    x: "4",
    y: "7.5",
    width: "16",
    height: "1.5"
  }), Object(external_gc_element_["createElement"])(external_gc_primitives_["Rect"], {
    x: "4",
    y: "15",
    width: "16",
    height: "1.5"
  }))), Object(external_gc_element_["createElement"])("div", {
    className: responsiveContainerClasses,
    style: styles,
    id: modalId
  }, Object(external_gc_element_["createElement"])("div", {
    className: "gc-block-navigation__responsive-close",
    tabIndex: "-1"
  }, Object(external_gc_element_["createElement"])("div", dialogProps, Object(external_gc_element_["createElement"])(external_gc_components_["Button"], {
    className: "gc-block-navigation__responsive-container-close",
    "aria-label": Object(external_gc_i18n_["__"])('关闭菜单'),
    onClick: () => onToggle(false)
  }, Object(external_gc_element_["createElement"])(build_module_icon["a" /* default */], {
    icon: library_close["a" /* default */]
  })), Object(external_gc_element_["createElement"])("div", {
    className: "gc-block-navigation__responsive-container-content",
    id: `${modalId}-content`
  }, children)))));
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/navigation/edit/inner-blocks.js


/**
 * GeChiUI dependencies
 */




/**
 * Internal dependencies
 */


const inner_blocks_ALLOWED_BLOCKS = ['core/navigation-link', 'core/search', 'core/social-links', 'core/page-list', 'core/spacer', 'core/home-link', 'core/site-title', 'core/site-logo', 'core/navigation-submenu'];
const DEFAULT_BLOCK = ['core/navigation-link'];
const LAYOUT = {
  type: 'default',
  alignments: []
};
function NavigationInnerBlocks(_ref) {
  let {
    isVisible,
    clientId,
    appender: CustomAppender,
    hasCustomPlaceholder,
    orientation
  } = _ref;
  const {
    isImmediateParentOfSelectedBlock,
    selectedBlockHasDescendants,
    isSelected
  } = Object(external_gc_data_["useSelect"])(select => {
    var _getClientIdsOfDescen;

    const {
      getClientIdsOfDescendants,
      hasSelectedInnerBlock,
      getSelectedBlockClientId
    } = select(external_gc_blockEditor_["store"]);
    const selectedBlockId = getSelectedBlockClientId();
    return {
      isImmediateParentOfSelectedBlock: hasSelectedInnerBlock(clientId, false),
      selectedBlockHasDescendants: !!((_getClientIdsOfDescen = getClientIdsOfDescendants([selectedBlockId])) !== null && _getClientIdsOfDescen !== void 0 && _getClientIdsOfDescen.length),
      // This prop is already available but computing it here ensures it's
      // fresh compared to isImmediateParentOfSelectedBlock
      isSelected: selectedBlockId === clientId
    };
  }, [clientId]);
  const [blocks, onInput, onChange] = Object(external_gc_coreData_["useEntityBlockEditor"])('postType', 'gc_navigation');
  const shouldDirectInsert = Object(external_gc_element_["useMemo"])(() => blocks.every(_ref2 => {
    let {
      name
    } = _ref2;
    return name === 'core/navigation-link' || name === 'core/navigation-submenu' || name === 'core/page-list';
  }), [blocks]); // When the block is selected itself or has a top level item selected that
  // doesn't itself have children, show the standard appender. Else show no
  // appender.

  const parentOrChildHasSelection = isSelected || isImmediateParentOfSelectedBlock && !selectedBlockHasDescendants;
  const appender = isVisible && parentOrChildHasSelection ? undefined : false;
  const placeholder = Object(external_gc_element_["useMemo"])(() => Object(external_gc_element_["createElement"])(placeholder_preview, null), []);
  const innerBlocksProps = Object(external_gc_blockEditor_["useInnerBlocksProps"])({
    className: 'gc-block-navigation__container'
  }, {
    value: blocks,
    onInput,
    onChange,
    allowedBlocks: inner_blocks_ALLOWED_BLOCKS,
    __experimentalDefaultBlock: DEFAULT_BLOCK,
    __experimentalDirectInsert: shouldDirectInsert,
    orientation,
    renderAppender: CustomAppender || appender,
    // Template lock set to false here so that the Nav
    // Block on the experimental menus screen does not
    // inherit templateLock={ 'all' }.
    templateLock: false,
    __experimentalLayout: LAYOUT,
    placeholder: !isVisible || hasCustomPlaceholder ? undefined : placeholder
  });
  return Object(external_gc_element_["createElement"])(external_gc_blockEditor_["__experimentalBlockContentOverlay"], {
    clientId: clientId,
    tagName: 'div',
    wrapperProps: innerBlocksProps
  });
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/navigation/edit/navigation-menu-selector.js


/**
 * GeChiUI dependencies
 */





/**
 * Internal dependencies
 */





function NavigationMenuSelector(_ref) {
  let {
    clientId,
    onSelect,
    onCreateNew,
    canUserCreateNavigation = false
  } = _ref;
  const {
    menus: classicMenus,
    hasMenus: hasClassicMenus
  } = useNavigationEntities();
  const {
    navigationMenus
  } = useNavigationMenu();
  const ref = Object(external_gc_coreData_["useEntityId"])('postType', 'gc_navigation');
  const createNavigationMenu = useCreateNavigationMenu(clientId);

  const onFinishMenuCreation = async function (blocks) {
    let navigationMenuTitle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    if (!canUserCreateNavigation) {
      return;
    }

    const navigationMenu = await createNavigationMenu(navigationMenuTitle, blocks);
    onSelect(navigationMenu);
  };

  const convertClassicMenuToBlocks = useConvertClassicMenu(onFinishMenuCreation);
  return Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])(external_gc_components_["MenuGroup"], {
    label: Object(external_gc_i18n_["__"])('菜单')
  }, Object(external_gc_element_["createElement"])(external_gc_components_["MenuItemsChoice"], {
    value: ref,
    onSelect: selectedId => onSelect(navigationMenus.find(post => post.id === selectedId)),
    choices: navigationMenus.map(_ref2 => {
      let {
        id,
        title
      } = _ref2;
      const label = Object(external_gc_htmlEntities_["decodeEntities"])(title.rendered);
      return {
        value: id,
        label,
        'aria-label': Object(external_gc_i18n_["sprintf"])(
        /* translators: %s: The name of a menu. */
        Object(external_gc_i18n_["__"])("切换到'%s'"), label)
      };
    })
  })), canUserCreateNavigation && Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, hasClassicMenus && Object(external_gc_element_["createElement"])(external_gc_components_["MenuGroup"], {
    label: Object(external_gc_i18n_["__"])('经典菜单')
  }, classicMenus.map(menu => {
    return Object(external_gc_element_["createElement"])(external_gc_components_["MenuItem"], {
      onClick: () => {
        convertClassicMenuToBlocks(menu.id, menu.name);
      },
      key: menu.id
    }, Object(external_gc_htmlEntities_["decodeEntities"])(menu.name));
  })), Object(external_gc_element_["createElement"])(external_gc_components_["MenuGroup"], {
    label: Object(external_gc_i18n_["__"])('工具')
  }, Object(external_gc_element_["createElement"])(external_gc_components_["MenuItem"], {
    onClick: onCreateNew
  }, Object(external_gc_i18n_["__"])('创建新菜单')), Object(external_gc_element_["createElement"])(external_gc_components_["MenuItem"], {
    href: Object(external_gc_url_["addQueryArgs"])('edit.php', {
      post_type: 'gc_navigation'
    })
  }, Object(external_gc_i18n_["__"])('管理菜单')))));
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/navigation/edit/navigation-menu-name-control.js


/**
 * GeChiUI dependencies
 */



function NavigationMenuNameControl() {
  const [title, updateTitle] = Object(external_gc_coreData_["useEntityProp"])('postType', 'gc_navigation', 'title');
  return Object(external_gc_element_["createElement"])(external_gc_components_["TextControl"], {
    label: Object(external_gc_i18n_["__"])('菜单名称'),
    value: title,
    onChange: updateTitle
  });
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/navigation/edit/unsaved-inner-blocks.js


/**
 * External dependencies
 */

/**
 * GeChiUI dependencies
 */






/**
 * Internal dependencies
 */



const EMPTY_OBJECT = {};
const unsaved_inner_blocks_DRAFT_MENU_PARAMS = ['postType', 'gc_navigation', {
  status: 'draft',
  per_page: -1
}];
function UnsavedInnerBlocks(_ref) {
  let {
    blockProps,
    blocks,
    clientId,
    hasSavedUnsavedInnerBlocks,
    onSave,
    hasSelection
  } = _ref;
  // The block will be disabled in a block preview, use this as a way of
  // avoiding the side-effects of this component for block previews.
  const isDisabled = Object(external_gc_element_["useContext"])(external_gc_components_["Disabled"].Context);
  const savingLock = Object(external_gc_element_["useRef"])(false);
  const innerBlocksProps = Object(external_gc_blockEditor_["useInnerBlocksProps"])(blockProps, {
    renderAppender: hasSelection ? undefined : false
  });
  const {
    isSaving,
    draftNavigationMenus,
    hasResolvedDraftNavigationMenus
  } = Object(external_gc_data_["useSelect"])(select => {
    if (isDisabled) {
      return EMPTY_OBJECT;
    }

    const {
      getEntityRecords,
      hasFinishedResolution,
      isSavingEntityRecord
    } = select(external_gc_coreData_["store"]);
    return {
      isSaving: isSavingEntityRecord('postType', 'gc_navigation'),
      draftNavigationMenus: getEntityRecords(...unsaved_inner_blocks_DRAFT_MENU_PARAMS),
      hasResolvedDraftNavigationMenus: hasFinishedResolution('getEntityRecords', unsaved_inner_blocks_DRAFT_MENU_PARAMS)
    };
  }, [isDisabled]);
  const {
    hasResolvedNavigationMenus,
    navigationMenus
  } = useNavigationMenu();
  const createNavigationMenu = useCreateNavigationMenu(clientId); // Automatically save the uncontrolled blocks.

  Object(external_gc_element_["useEffect"])(async () => {
    // The block will be disabled when used in a BlockPreview.
    // In this case avoid automatic creation of a gc_navigation post.
    // Otherwise the user will be spammed with lots of menus!
    //
    // Also ensure other navigation menus have loaded so an
    // accurate name can be created.
    //
    // Don't try saving when another save is already
    // in progress.
    //
    // And finally only create the menu when the block is selected,
    // which is an indication they want to start editing.
    if (isDisabled || hasSavedUnsavedInnerBlocks || isSaving || savingLock.current || !hasResolvedDraftNavigationMenus || !hasResolvedNavigationMenus || !hasSelection) {
      return;
    }

    savingLock.current = true;
    const menu = await createNavigationMenu(null, blocks);
    onSave(menu);
    savingLock.current = false;
  }, [isDisabled, isSaving, hasResolvedDraftNavigationMenus, hasResolvedNavigationMenus, draftNavigationMenus, navigationMenus, hasSelection, createNavigationMenu, blocks]);
  return Object(external_gc_element_["createElement"])("div", {
    className: "gc-block-navigation__unsaved-changes"
  }, Object(external_gc_element_["createElement"])(external_gc_components_["Disabled"], {
    className: classnames_default()('gc-block-navigation__unsaved-changes-overlay', {
      'is-saving': hasSelection
    })
  }, Object(external_gc_element_["createElement"])("div", innerBlocksProps)), hasSelection && Object(external_gc_element_["createElement"])(external_gc_components_["Spinner"], null));
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/navigation/edit/navigation-menu-delete-control.js


/**
 * GeChiUI dependencies
 */





function NavigationMenuDeleteControl(_ref) {
  let {
    onDelete
  } = _ref;
  const [isConfirmModalVisible, setIsConfirmModalVisible] = Object(external_gc_element_["useState"])(false);
  const id = Object(external_gc_coreData_["useEntityId"])('postType', 'gc_navigation');
  const [title] = Object(external_gc_coreData_["useEntityProp"])('postType', 'gc_navigation', 'title');
  const {
    deleteEntityRecord
  } = Object(external_gc_data_["useDispatch"])(external_gc_coreData_["store"]);
  return Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])(external_gc_components_["Button"], {
    className: "gc-block-navigation-delete-menu-button",
    variant: "secondary",
    isDestructive: true,
    onClick: () => {
      setIsConfirmModalVisible(true);
    }
  }, Object(external_gc_i18n_["__"])('删除菜单')), isConfirmModalVisible && Object(external_gc_element_["createElement"])(external_gc_components_["Modal"], {
    title: Object(external_gc_i18n_["sprintf"])(
    /* translators: %s: the name of a menu to delete */
    Object(external_gc_i18n_["__"])('删除 %s'), title),
    closeLabel: Object(external_gc_i18n_["__"])('取消'),
    onRequestClose: () => setIsConfirmModalVisible(false)
  }, Object(external_gc_element_["createElement"])("p", null, Object(external_gc_i18n_["__"])('您确定要删除此导航菜单吗？')), Object(external_gc_element_["createElement"])(external_gc_components_["Flex"], {
    justify: "flex-end"
  }, Object(external_gc_element_["createElement"])(external_gc_components_["FlexItem"], null, Object(external_gc_element_["createElement"])(external_gc_components_["Button"], {
    variant: "secondary",
    onClick: () => {
      setIsConfirmModalVisible(false);
    }
  }, Object(external_gc_i18n_["__"])('取消'))), Object(external_gc_element_["createElement"])(external_gc_components_["FlexItem"], null, Object(external_gc_element_["createElement"])(external_gc_components_["Button"], {
    variant: "primary",
    onClick: () => {
      deleteEntityRecord('postType', 'gc_navigation', id, {
        force: true
      });
      onDelete();
    }
  }, Object(external_gc_i18n_["__"])('确认'))))));
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/navigation/edit/use-navigation-notice.js
/**
 * GeChiUI dependencies
 */




function useNavigationNotice() {
  let {
    name,
    message
  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  const noticeRef = Object(external_gc_element_["useRef"])();
  const {
    createWarningNotice,
    removeNotice
  } = Object(external_gc_data_["useDispatch"])(external_gc_notices_["store"]);

  const showNotice = () => {
    if (noticeRef.current) {
      return;
    }

    noticeRef.current = name;
    createWarningNotice(message, {
      id: noticeRef.current,
      type: 'snackbar'
    });
  };

  const hideNotice = () => {
    if (!noticeRef.current) {
      return;
    }

    removeNotice(noticeRef.current);
    noticeRef.current = null;
  };

  return [showNotice, hideNotice];
}

/* harmony default export */ var use_navigation_notice = (useNavigationNotice);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/navigation/edit/index.js


/**
 * External dependencies
 */


/**
 * GeChiUI dependencies
 */







/**
 * Internal dependencies
 */













const EMPTY_ARRAY = [];

function getComputedStyle(node) {
  return node.ownerDocument.defaultView.getComputedStyle(node);
}

function detectColors(colorsDetectionElement, setColor, setBackground) {
  if (!colorsDetectionElement) {
    return;
  }

  setColor(getComputedStyle(colorsDetectionElement).color);
  let backgroundColorNode = colorsDetectionElement;
  let backgroundColor = getComputedStyle(backgroundColorNode).backgroundColor;

  while (backgroundColor === 'rgba(0, 0, 0, 0)' && backgroundColorNode.parentNode && backgroundColorNode.parentNode.nodeType === backgroundColorNode.parentNode.ELEMENT_NODE) {
    backgroundColorNode = backgroundColorNode.parentNode;
    backgroundColor = getComputedStyle(backgroundColorNode).backgroundColor;
  }

  setBackground(backgroundColor);
}

function Navigation(_ref) {
  let {
    attributes,
    setAttributes,
    clientId,
    isSelected,
    className,
    backgroundColor,
    setBackgroundColor,
    textColor,
    setTextColor,
    overlayBackgroundColor,
    setOverlayBackgroundColor,
    overlayTextColor,
    setOverlayTextColor,
    context: {
      navigationArea
    },
    // These props are used by the navigation editor to override specific
    // navigation block settings.
    hasSubmenuIndicatorSetting = true,
    hasColorSettings = true,
    customPlaceholder: CustomPlaceholder = null,
    customAppender: CustomAppender = null
  } = _ref;
  const {
    openSubmenusOnClick,
    overlayMenu,
    showSubmenuIcon,
    layout: {
      justifyContent,
      orientation = 'horizontal',
      flexWrap = 'wrap'
    } = {}
  } = attributes;
  let areaMenu,
      setAreaMenu = external_lodash_["noop"]; // Navigation areas are deprecated and on their way out. Let's not perform
  // the request unless we're in an environment where the endpoint exists.

  if (false) {}

  const navigationAreaMenu = areaMenu === 0 ? undefined : areaMenu;
  const ref = navigationArea ? navigationAreaMenu : attributes.ref;
  const registry = Object(external_gc_data_["useRegistry"])();
  const setRef = Object(external_gc_element_["useCallback"])(postId => {
    setAttributes({
      ref: postId
    });

    if (navigationArea) {
      setAreaMenu(postId);
    }
  }, [navigationArea]);
  const [hasAlreadyRendered, RecursionProvider] = Object(external_gc_blockEditor_["__experimentalUseNoRecursiveRenders"])(`navigationMenu/${ref}`); // Preload classic menus, so that they don't suddenly pop-in when viewing
  // the Select Menu dropdown.

  useNavigationEntities();
  const {
    hasUncontrolledInnerBlocks,
    uncontrolledInnerBlocks,
    isInnerBlockSelected
  } = Object(external_gc_data_["useSelect"])(select => {
    const {
      getBlock,
      getBlocks,
      hasSelectedInnerBlock
    } = select(external_gc_blockEditor_["store"]); // This relies on the fact that `getBlock` won't return controlled
    // inner blocks, while `getBlocks` does. It might be more stable to
    // introduce a selector like `getUncontrolledInnerBlocks`, just in
    // case `getBlock` is fixed.

    const _uncontrolledInnerBlocks = getBlock(clientId).innerBlocks;

    const _hasUncontrolledInnerBlocks = _uncontrolledInnerBlocks === null || _uncontrolledInnerBlocks === void 0 ? void 0 : _uncontrolledInnerBlocks.length;

    const _controlledInnerBlocks = _hasUncontrolledInnerBlocks ? EMPTY_ARRAY : getBlocks(clientId);

    const innerBlocks = _hasUncontrolledInnerBlocks ? _uncontrolledInnerBlocks : _controlledInnerBlocks;
    return {
      hasSubmenus: !!innerBlocks.find(block => block.name === 'core/navigation-submenu'),
      hasUncontrolledInnerBlocks: _hasUncontrolledInnerBlocks,
      uncontrolledInnerBlocks: _uncontrolledInnerBlocks,
      isInnerBlockSelected: hasSelectedInnerBlock(clientId, true)
    };
  }, [clientId]);
  const {
    replaceInnerBlocks,
    selectBlock,
    __unstableMarkNextChangeAsNotPersistent
  } = Object(external_gc_data_["useDispatch"])(external_gc_blockEditor_["store"]);
  const [hasSavedUnsavedInnerBlocks, setHasSavedUnsavedInnerBlocks] = Object(external_gc_element_["useState"])(false);
  const isWithinUnassignedArea = !!navigationArea && !ref;
  const [isPlaceholderShown, setIsPlaceholderShown] = Object(external_gc_element_["useState"])(!hasUncontrolledInnerBlocks || isWithinUnassignedArea);
  const [isResponsiveMenuOpen, setResponsiveMenuVisibility] = Object(external_gc_element_["useState"])(false);
  const {
    isNavigationMenuResolved,
    isNavigationMenuMissing,
    canSwitchNavigationMenu,
    hasResolvedNavigationMenus,
    navigationMenus,
    navigationMenu,
    canUserUpdateNavigationEntity,
    hasResolvedCanUserUpdateNavigationEntity,
    canUserDeleteNavigationEntity,
    hasResolvedCanUserDeleteNavigationEntity,
    canUserCreateNavigation,
    hasResolvedCanUserCreateNavigation
  } = useNavigationMenu(ref);
  const navRef = Object(external_gc_element_["useRef"])();
  const isDraftNavigationMenu = (navigationMenu === null || navigationMenu === void 0 ? void 0 : navigationMenu.status) === 'draft';
  const {
    listViewToolbarButton,
    listViewModal
  } = useListViewModal(clientId);
  const isEntityAvailable = !isNavigationMenuMissing && isNavigationMenuResolved;
  const blockProps = Object(external_gc_blockEditor_["useBlockProps"])({
    ref: navRef,
    className: classnames_default()(className, {
      'items-justified-right': justifyContent === 'right',
      'items-justified-space-between': justifyContent === 'space-between',
      'items-justified-left': justifyContent === 'left',
      'items-justified-center': justifyContent === 'center',
      'is-vertical': orientation === 'vertical',
      'no-wrap': flexWrap === 'nowrap',
      'is-responsive': 'never' !== overlayMenu,
      'has-text-color': !!textColor.color || !!(textColor !== null && textColor !== void 0 && textColor.class),
      [Object(external_gc_blockEditor_["getColorClassName"])('color', textColor === null || textColor === void 0 ? void 0 : textColor.slug)]: !!(textColor !== null && textColor !== void 0 && textColor.slug),
      'has-background': !!backgroundColor.color || backgroundColor.class,
      [Object(external_gc_blockEditor_["getColorClassName"])('background-color', backgroundColor === null || backgroundColor === void 0 ? void 0 : backgroundColor.slug)]: !!(backgroundColor !== null && backgroundColor !== void 0 && backgroundColor.slug)
    }),
    style: {
      color: !(textColor !== null && textColor !== void 0 && textColor.slug) && (textColor === null || textColor === void 0 ? void 0 : textColor.color),
      backgroundColor: !(backgroundColor !== null && backgroundColor !== void 0 && backgroundColor.slug) && (backgroundColor === null || backgroundColor === void 0 ? void 0 : backgroundColor.color)
    }
  });
  const overlayClassnames = classnames_default()({
    'has-text-color': !!overlayTextColor.color || !!(overlayTextColor !== null && overlayTextColor !== void 0 && overlayTextColor.class),
    [Object(external_gc_blockEditor_["getColorClassName"])('color', overlayTextColor === null || overlayTextColor === void 0 ? void 0 : overlayTextColor.slug)]: !!(overlayTextColor !== null && overlayTextColor !== void 0 && overlayTextColor.slug),
    'has-background': !!overlayBackgroundColor.color || (overlayBackgroundColor === null || overlayBackgroundColor === void 0 ? void 0 : overlayBackgroundColor.class),
    [Object(external_gc_blockEditor_["getColorClassName"])('background-color', overlayBackgroundColor === null || overlayBackgroundColor === void 0 ? void 0 : overlayBackgroundColor.slug)]: !!(overlayBackgroundColor !== null && overlayBackgroundColor !== void 0 && overlayBackgroundColor.slug)
  });
  const overlayStyles = {
    color: !(overlayTextColor !== null && overlayTextColor !== void 0 && overlayTextColor.slug) && (overlayTextColor === null || overlayTextColor === void 0 ? void 0 : overlayTextColor.color),
    backgroundColor: !(overlayBackgroundColor !== null && overlayBackgroundColor !== void 0 && overlayBackgroundColor.slug) && (overlayBackgroundColor === null || overlayBackgroundColor === void 0 ? void 0 : overlayBackgroundColor.color) && overlayBackgroundColor.color
  }; // Turn on contrast checker for web only since it's not supported on mobile yet.

  const enableContrastChecking = external_gc_element_["Platform"].OS === 'web';
  const [detectedBackgroundColor, setDetectedBackgroundColor] = Object(external_gc_element_["useState"])();
  const [detectedColor, setDetectedColor] = Object(external_gc_element_["useState"])();
  const [detectedOverlayBackgroundColor, setDetectedOverlayBackgroundColor] = Object(external_gc_element_["useState"])();
  const [detectedOverlayColor, setDetectedOverlayColor] = Object(external_gc_element_["useState"])(); // Spacer block needs orientation from context. This is a patch until
  // https://github.com/GeChiUI/gutenberg/issues/36197 is addressed.

  Object(external_gc_element_["useEffect"])(() => {
    if (orientation) {
      __unstableMarkNextChangeAsNotPersistent();

      setAttributes({
        orientation
      });
    }
  }, [orientation]);
  Object(external_gc_element_["useEffect"])(() => {
    var _navRef$current;

    if (!enableContrastChecking) {
      return;
    }

    detectColors(navRef.current, setDetectedColor, setDetectedBackgroundColor);
    const subMenuElement = (_navRef$current = navRef.current) === null || _navRef$current === void 0 ? void 0 : _navRef$current.querySelector('[data-type="core/navigation-link"] [data-type="core/navigation-link"]');

    if (subMenuElement) {
      detectColors(subMenuElement, setDetectedOverlayColor, setDetectedOverlayBackgroundColor);
    }
  }); // Hide the placeholder if an navigation menu entity has loaded.

  Object(external_gc_element_["useEffect"])(() => {
    setIsPlaceholderShown(!isEntityAvailable);
  }, [isEntityAvailable]);
  const [showCantEditNotice, hideCantEditNotice] = use_navigation_notice({
    name: 'block-library/core/navigation/permissions/update',
    message: Object(external_gc_i18n_["__"])('您无权编辑此菜单。所做的任何更改将不会被保存。')
  });
  const [showCantCreateNotice, hideCantCreateNotice] = use_navigation_notice({
    name: 'block-library/core/navigation/permissions/create',
    message: Object(external_gc_i18n_["__"])('您无权创建导航菜单。')
  });
  Object(external_gc_element_["useEffect"])(() => {
    if (!isSelected && !isInnerBlockSelected) {
      hideCantEditNotice();
      hideCantCreateNotice();
    }

    if (isSelected || isInnerBlockSelected) {
      if (hasResolvedCanUserUpdateNavigationEntity && !canUserUpdateNavigationEntity) {
        showCantEditNotice();
      }

      if (!ref && hasResolvedCanUserCreateNavigation && !canUserCreateNavigation) {
        showCantCreateNotice();
      }
    }
  }, [isSelected, isInnerBlockSelected, canUserUpdateNavigationEntity, hasResolvedCanUserUpdateNavigationEntity, canUserCreateNavigation, hasResolvedCanUserCreateNavigation, ref]);
  const startWithEmptyMenu = Object(external_gc_element_["useCallback"])(() => {
    registry.batch(() => {
      if (navigationArea) {
        setAreaMenu(0);
      }

      setAttributes({
        ref: undefined
      });

      if (!ref) {
        replaceInnerBlocks(clientId, []);
      }

      setIsPlaceholderShown(true);
    });
  }, [clientId, ref]); // If the block has inner blocks, but no menu id, this was an older
  // navigation block added before the block used a gc_navigation entity.
  // Either this block was saved in the content or inserted by a pattern.
  // Consider this 'unsaved'. Offer an uncontrolled version of inner blocks,
  // that automatically saves the menu.

  const hasUnsavedBlocks = hasUncontrolledInnerBlocks && !isEntityAvailable;

  if (hasUnsavedBlocks) {
    return Object(external_gc_element_["createElement"])("nav", blockProps, Object(external_gc_element_["createElement"])(ResponsiveWrapper, {
      id: clientId,
      onToggle: setResponsiveMenuVisibility,
      isOpen: isResponsiveMenuOpen,
      isResponsive: 'never' !== overlayMenu,
      isHiddenByDefault: 'always' === overlayMenu,
      classNames: overlayClassnames,
      styles: overlayStyles
    }, Object(external_gc_element_["createElement"])(UnsavedInnerBlocks, {
      blockProps: blockProps,
      blocks: uncontrolledInnerBlocks,
      clientId: clientId,
      navigationMenus: navigationMenus,
      hasSelection: isSelected || isInnerBlockSelected,
      hasSavedUnsavedInnerBlocks: hasSavedUnsavedInnerBlocks,
      onSave: post => {
        // Set some state used as a guard to prevent the creation of multiple posts.
        setHasSavedUnsavedInnerBlocks(true); // Switch to using the gc_navigation entity.

        setRef(post.id);
      }
    })));
  } // Show a warning if the selected menu is no longer available.
  // TODO - the user should be able to select a new one?


  if (ref && isNavigationMenuMissing) {
    return Object(external_gc_element_["createElement"])("div", blockProps, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["Warning"], null, Object(external_gc_i18n_["__"])('导航菜单已被删除或不可用。'), Object(external_gc_element_["createElement"])(external_gc_components_["Button"], {
      onClick: startWithEmptyMenu,
      variant: "link"
    }, Object(external_gc_i18n_["__"])('创建一个新菜单？'))));
  }

  if (isEntityAvailable && hasAlreadyRendered) {
    return Object(external_gc_element_["createElement"])("div", blockProps, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["Warning"], null, Object(external_gc_i18n_["__"])('区块不能在其内部渲染。')));
  }

  const PlaceholderComponent = CustomPlaceholder ? CustomPlaceholder : NavigationPlaceholder;
  return Object(external_gc_element_["createElement"])(external_gc_coreData_["EntityProvider"], {
    kind: "postType",
    type: "gc_navigation",
    id: ref
  }, Object(external_gc_element_["createElement"])(RecursionProvider, null, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["BlockControls"], null, !isDraftNavigationMenu && isEntityAvailable && Object(external_gc_element_["createElement"])(external_gc_components_["ToolbarGroup"], null, Object(external_gc_element_["createElement"])(external_gc_components_["ToolbarDropdownMenu"], {
    label: Object(external_gc_i18n_["__"])('选择菜单'),
    text: Object(external_gc_i18n_["__"])('选择菜单'),
    icon: null
  }, _ref2 => {
    let {
      onClose
    } = _ref2;
    return Object(external_gc_element_["createElement"])(NavigationMenuSelector, {
      clientId: clientId,
      onSelect: _ref3 => {
        let {
          id
        } = _ref3;
        setRef(id);
        onClose();
      },
      onCreateNew: startWithEmptyMenu,
      canUserCreateNavigation: canUserCreateNavigation
    });
  })), Object(external_gc_element_["createElement"])(external_gc_components_["ToolbarGroup"], null, listViewToolbarButton)), listViewModal, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InspectorControls"], null, hasSubmenuIndicatorSetting && Object(external_gc_element_["createElement"])(external_gc_components_["PanelBody"], {
    title: Object(external_gc_i18n_["__"])('显示')
  }, Object(external_gc_element_["createElement"])("h3", null, Object(external_gc_i18n_["__"])('叠加菜单')), Object(external_gc_element_["createElement"])(external_gc_components_["__experimentalToggleGroupControl"], {
    label: Object(external_gc_i18n_["__"])('配置叠加菜单'),
    value: overlayMenu,
    help: Object(external_gc_i18n_["__"])('折叠菜单图标中的导航选项并打开覆盖层。'),
    onChange: value => setAttributes({
      overlayMenu: value
    }),
    isBlock: true,
    hideLabelFromVision: true
  }, Object(external_gc_element_["createElement"])(external_gc_components_["__experimentalToggleGroupControlOption"], {
    value: "never",
    label: Object(external_gc_i18n_["__"])('禁用')
  }), Object(external_gc_element_["createElement"])(external_gc_components_["__experimentalToggleGroupControlOption"], {
    value: "mobile",
    label: Object(external_gc_i18n_["__"])('移动端')
  }), Object(external_gc_element_["createElement"])(external_gc_components_["__experimentalToggleGroupControlOption"], {
    value: "always",
    label: Object(external_gc_i18n_["__"])('总是')
  })), Object(external_gc_element_["createElement"])("h3", null, Object(external_gc_i18n_["__"])('子菜单')), Object(external_gc_element_["createElement"])(external_gc_components_["ToggleControl"], {
    checked: openSubmenusOnClick,
    onChange: value => {
      setAttributes({
        openSubmenusOnClick: value
      });
    },
    label: Object(external_gc_i18n_["__"])('点击打开')
  }), !attributes.openSubmenusOnClick && Object(external_gc_element_["createElement"])(external_gc_components_["ToggleControl"], {
    checked: showSubmenuIcon,
    onChange: value => {
      setAttributes({
        showSubmenuIcon: value
      });
    },
    label: Object(external_gc_i18n_["__"])('显示图标')
  })), hasColorSettings && Object(external_gc_element_["createElement"])(external_gc_blockEditor_["PanelColorSettings"], {
    __experimentalHasMultipleOrigins: true,
    __experimentalIsRenderedInSidebar: true,
    title: Object(external_gc_i18n_["__"])('颜色'),
    initialOpen: false,
    colorSettings: [{
      value: textColor.color,
      onChange: setTextColor,
      label: Object(external_gc_i18n_["__"])('文字')
    }, {
      value: backgroundColor.color,
      onChange: setBackgroundColor,
      label: Object(external_gc_i18n_["__"])('背景')
    }, {
      value: overlayTextColor.color,
      onChange: setOverlayTextColor,
      label: Object(external_gc_i18n_["__"])('子菜单和覆盖文字')
    }, {
      value: overlayBackgroundColor.color,
      onChange: setOverlayBackgroundColor,
      label: Object(external_gc_i18n_["__"])('子菜单和覆盖背景')
    }]
  }, enableContrastChecking && Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["ContrastChecker"], {
    backgroundColor: detectedBackgroundColor,
    textColor: detectedColor
  }), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["ContrastChecker"], {
    backgroundColor: detectedOverlayBackgroundColor,
    textColor: detectedOverlayColor
  })))), isEntityAvailable && Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InspectorControls"], {
    __experimentalGroup: "advanced"
  }, hasResolvedCanUserUpdateNavigationEntity && canUserUpdateNavigationEntity && Object(external_gc_element_["createElement"])(NavigationMenuNameControl, null), hasResolvedCanUserDeleteNavigationEntity && canUserDeleteNavigationEntity && Object(external_gc_element_["createElement"])(NavigationMenuDeleteControl, {
    onDelete: startWithEmptyMenu
  })), Object(external_gc_element_["createElement"])("nav", blockProps, isPlaceholderShown && Object(external_gc_element_["createElement"])(PlaceholderComponent, {
    onFinish: post => {
      setIsPlaceholderShown(false);

      if (post) {
        setRef(post.id);
      }

      selectBlock(clientId);
    },
    canSwitchNavigationMenu: canSwitchNavigationMenu,
    hasResolvedNavigationMenus: hasResolvedNavigationMenus,
    clientId: clientId,
    canUserCreateNavigation: canUserCreateNavigation
  }), !hasResolvedCanUserCreateNavigation || !isEntityAvailable && !isPlaceholderShown && Object(external_gc_element_["createElement"])(placeholder_preview, {
    isLoading: true
  }), !isPlaceholderShown && Object(external_gc_element_["createElement"])(ResponsiveWrapper, {
    id: clientId,
    onToggle: setResponsiveMenuVisibility,
    isOpen: isResponsiveMenuOpen,
    isResponsive: 'never' !== overlayMenu,
    isHiddenByDefault: 'always' === overlayMenu,
    classNames: overlayClassnames,
    styles: overlayStyles
  }, isEntityAvailable && Object(external_gc_element_["createElement"])(NavigationInnerBlocks, {
    isVisible: !isPlaceholderShown,
    clientId: clientId,
    appender: CustomAppender,
    hasCustomPlaceholder: !!CustomPlaceholder,
    orientation: orientation
  })))));
}

/* harmony default export */ var navigation_edit = (Object(external_gc_blockEditor_["withColors"])({
  textColor: 'color'
}, {
  backgroundColor: 'color'
}, {
  overlayBackgroundColor: 'color'
}, {
  overlayTextColor: 'color'
})(Navigation));

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/navigation/save.js


/**
 * GeChiUI dependencies
 */

function navigation_save_save(_ref) {
  let {
    attributes
  } = _ref;

  if (attributes.ref) {
    // Avoid rendering inner blocks when a ref is defined.
    // When this id is defined the inner blocks are loaded from the
    // `gc_navigation` entity rather than the hard-coded block html.
    return;
  }

  return Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InnerBlocks"].Content, null);
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/navigation/deprecated.js


/**
 * External dependencies
 */

/**
 * GeChiUI dependencies
 */



/**
 * Internal dependencies
 */


const TYPOGRAPHY_PRESET_DEPRECATION_MAP = {
  fontStyle: 'var:preset|font-style|',
  fontWeight: 'var:preset|font-weight|',
  textDecoration: 'var:preset|text-decoration|',
  textTransform: 'var:preset|text-transform|'
};

const migrateIdToRef = _ref => {
  let {
    navigationMenuId,
    ...attributes
  } = _ref;
  return { ...attributes,
    ref: navigationMenuId
  };
};

const deprecated_migrateWithLayout = attributes => {
  if (!!attributes.layout) {
    return attributes;
  }

  const {
    itemsJustification,
    orientation,
    ...updatedAttributes
  } = attributes;

  if (itemsJustification || orientation) {
    Object.assign(updatedAttributes, {
      layout: {
        type: 'flex',
        ...(itemsJustification && {
          justifyContent: itemsJustification
        }),
        ...(orientation && {
          orientation
        })
      }
    });
  }

  return updatedAttributes;
};

const navigation_deprecated_v6 = {
  attributes: {
    navigationMenuId: {
      type: 'number'
    },
    textColor: {
      type: 'string'
    },
    customTextColor: {
      type: 'string'
    },
    rgbTextColor: {
      type: 'string'
    },
    backgroundColor: {
      type: 'string'
    },
    customBackgroundColor: {
      type: 'string'
    },
    rgbBackgroundColor: {
      type: 'string'
    },
    showSubmenuIcon: {
      type: 'boolean',
      default: true
    },
    openSubmenusOnClick: {
      type: 'boolean',
      default: false
    },
    overlayMenu: {
      type: 'string',
      default: 'mobile'
    },
    __unstableLocation: {
      type: 'string'
    },
    overlayBackgroundColor: {
      type: 'string'
    },
    customOverlayBackgroundColor: {
      type: 'string'
    },
    overlayTextColor: {
      type: 'string'
    },
    customOverlayTextColor: {
      type: 'string'
    }
  },
  supports: {
    align: ['wide', 'full'],
    anchor: true,
    html: false,
    inserter: true,
    typography: {
      fontSize: true,
      lineHeight: true,
      __experimentalFontStyle: true,
      __experimentalFontWeight: true,
      __experimentalTextTransform: true,
      __experimentalFontFamily: true,
      __experimentalTextDecoration: true,
      __experimentalDefaultControls: {
        fontSize: true
      }
    },
    spacing: {
      blockGap: true,
      units: ['px', 'em', 'rem', 'vh', 'vw'],
      __experimentalDefaultControls: {
        blockGap: true
      }
    },
    __experimentalLayout: {
      allowSwitching: false,
      allowInheriting: false,
      default: {
        type: 'flex'
      }
    }
  },

  save() {
    return Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InnerBlocks"].Content, null);
  },

  isEligible: _ref2 => {
    let {
      navigationMenuId
    } = _ref2;
    return !!navigationMenuId;
  },
  migrate: migrateIdToRef
};
const navigation_deprecated_v5 = {
  attributes: {
    navigationMenuId: {
      type: 'number'
    },
    orientation: {
      type: 'string',
      default: 'horizontal'
    },
    textColor: {
      type: 'string'
    },
    customTextColor: {
      type: 'string'
    },
    rgbTextColor: {
      type: 'string'
    },
    backgroundColor: {
      type: 'string'
    },
    customBackgroundColor: {
      type: 'string'
    },
    rgbBackgroundColor: {
      type: 'string'
    },
    itemsJustification: {
      type: 'string'
    },
    showSubmenuIcon: {
      type: 'boolean',
      default: true
    },
    openSubmenusOnClick: {
      type: 'boolean',
      default: false
    },
    overlayMenu: {
      type: 'string',
      default: 'never'
    },
    __unstableLocation: {
      type: 'string'
    },
    overlayBackgroundColor: {
      type: 'string'
    },
    customOverlayBackgroundColor: {
      type: 'string'
    },
    overlayTextColor: {
      type: 'string'
    },
    customOverlayTextColor: {
      type: 'string'
    }
  },
  supports: {
    align: ['wide', 'full'],
    anchor: true,
    html: false,
    inserter: true,
    typography: {
      fontSize: true,
      lineHeight: true,
      __experimentalFontStyle: true,
      __experimentalFontWeight: true,
      __experimentalTextTransform: true,
      __experimentalFontFamily: true,
      __experimentalTextDecoration: true,
      __experimentalDefaultControls: {
        fontSize: true
      }
    },
    spacing: {
      blockGap: true,
      units: ['px', 'em', 'rem', 'vh', 'vw'],
      __experimentalDefaultControls: {
        blockGap: true
      }
    }
  },

  save() {
    return Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InnerBlocks"].Content, null);
  },

  isEligible: _ref3 => {
    let {
      itemsJustification,
      orientation
    } = _ref3;
    return !!itemsJustification || !!orientation;
  },
  migrate: Object(external_gc_compose_["compose"])(migrateIdToRef, deprecated_migrateWithLayout)
};
const navigation_deprecated_v4 = {
  attributes: {
    orientation: {
      type: 'string',
      default: 'horizontal'
    },
    textColor: {
      type: 'string'
    },
    customTextColor: {
      type: 'string'
    },
    rgbTextColor: {
      type: 'string'
    },
    backgroundColor: {
      type: 'string'
    },
    customBackgroundColor: {
      type: 'string'
    },
    rgbBackgroundColor: {
      type: 'string'
    },
    itemsJustification: {
      type: 'string'
    },
    showSubmenuIcon: {
      type: 'boolean',
      default: true
    },
    openSubmenusOnClick: {
      type: 'boolean',
      default: false
    },
    overlayMenu: {
      type: 'string',
      default: 'never'
    },
    __unstableLocation: {
      type: 'string'
    },
    overlayBackgroundColor: {
      type: 'string'
    },
    customOverlayBackgroundColor: {
      type: 'string'
    },
    overlayTextColor: {
      type: 'string'
    },
    customOverlayTextColor: {
      type: 'string'
    }
  },
  supports: {
    align: ['wide', 'full'],
    anchor: true,
    html: false,
    inserter: true,
    typography: {
      fontSize: true,
      lineHeight: true,
      __experimentalFontStyle: true,
      __experimentalFontWeight: true,
      __experimentalTextTransform: true,
      __experimentalFontFamily: true,
      __experimentalTextDecoration: true
    },
    spacing: {
      blockGap: true,
      units: ['px', 'em', 'rem', 'vh', 'vw'],
      __experimentalDefaultControls: {
        blockGap: true
      }
    }
  },

  save() {
    return Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InnerBlocks"].Content, null);
  },

  migrate: Object(external_gc_compose_["compose"])(migrateIdToRef, deprecated_migrateWithLayout, migrate_font_family),

  isEligible(_ref4) {
    var _style$typography;

    let {
      style
    } = _ref4;
    return style === null || style === void 0 ? void 0 : (_style$typography = style.typography) === null || _style$typography === void 0 ? void 0 : _style$typography.fontFamily;
  }

};

const migrateIsResponsive = function (attributes) {
  delete attributes.isResponsive;
  return { ...attributes,
    overlayMenu: 'mobile'
  };
};

const migrateTypographyPresets = function (attributes) {
  return { ...attributes,
    style: { ...attributes.style,
      typography: Object(external_lodash_["mapValues"])(attributes.style.typography, (value, key) => {
        const prefix = TYPOGRAPHY_PRESET_DEPRECATION_MAP[key];

        if (prefix && value.startsWith(prefix)) {
          const newValue = value.slice(prefix.length);

          if ('textDecoration' === key && 'strikethrough' === newValue) {
            return 'line-through';
          }

          return newValue;
        }

        return value;
      })
    }
  };
};

const navigation_deprecated_deprecated = [navigation_deprecated_v6, navigation_deprecated_v5, navigation_deprecated_v4, // Remove `isResponsive` attribute.
{
  attributes: {
    orientation: {
      type: 'string',
      default: 'horizontal'
    },
    textColor: {
      type: 'string'
    },
    customTextColor: {
      type: 'string'
    },
    rgbTextColor: {
      type: 'string'
    },
    backgroundColor: {
      type: 'string'
    },
    customBackgroundColor: {
      type: 'string'
    },
    rgbBackgroundColor: {
      type: 'string'
    },
    itemsJustification: {
      type: 'string'
    },
    showSubmenuIcon: {
      type: 'boolean',
      default: true
    },
    openSubmenusOnClick: {
      type: 'boolean',
      default: false
    },
    isResponsive: {
      type: 'boolean',
      default: 'false'
    },
    __unstableLocation: {
      type: 'string'
    },
    overlayBackgroundColor: {
      type: 'string'
    },
    customOverlayBackgroundColor: {
      type: 'string'
    },
    overlayTextColor: {
      type: 'string'
    },
    customOverlayTextColor: {
      type: 'string'
    }
  },
  supports: {
    align: ['wide', 'full'],
    anchor: true,
    html: false,
    inserter: true,
    typography: {
      fontSize: true,
      lineHeight: true,
      __experimentalFontStyle: true,
      __experimentalFontWeight: true,
      __experimentalTextTransform: true,
      __experimentalFontFamily: true,
      __experimentalTextDecoration: true
    }
  },

  isEligible(attributes) {
    return attributes.isResponsive;
  },

  migrate: Object(external_gc_compose_["compose"])(migrateIdToRef, deprecated_migrateWithLayout, migrate_font_family, migrateIsResponsive),

  save() {
    return Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InnerBlocks"].Content, null);
  }

}, {
  attributes: {
    orientation: {
      type: 'string'
    },
    textColor: {
      type: 'string'
    },
    customTextColor: {
      type: 'string'
    },
    rgbTextColor: {
      type: 'string'
    },
    backgroundColor: {
      type: 'string'
    },
    customBackgroundColor: {
      type: 'string'
    },
    rgbBackgroundColor: {
      type: 'string'
    },
    itemsJustification: {
      type: 'string'
    },
    showSubmenuIcon: {
      type: 'boolean',
      default: true
    }
  },
  supports: {
    align: ['wide', 'full'],
    anchor: true,
    html: false,
    inserter: true,
    fontSize: true,
    __experimentalFontStyle: true,
    __experimentalFontWeight: true,
    __experimentalTextTransform: true,
    color: true,
    __experimentalFontFamily: true,
    __experimentalTextDecoration: true
  },

  save() {
    return Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InnerBlocks"].Content, null);
  },

  isEligible(attributes) {
    if (!attributes.style || !attributes.style.typography) {
      return false;
    }

    for (const styleAttribute in TYPOGRAPHY_PRESET_DEPRECATION_MAP) {
      const attributeValue = attributes.style.typography[styleAttribute];

      if (attributeValue && attributeValue.startsWith(TYPOGRAPHY_PRESET_DEPRECATION_MAP[styleAttribute])) {
        return true;
      }
    }

    return false;
  },

  migrate: Object(external_gc_compose_["compose"])(migrateIdToRef, deprecated_migrateWithLayout, migrate_font_family, migrateTypographyPresets)
}, {
  attributes: {
    className: {
      type: 'string'
    },
    textColor: {
      type: 'string'
    },
    rgbTextColor: {
      type: 'string'
    },
    backgroundColor: {
      type: 'string'
    },
    rgbBackgroundColor: {
      type: 'string'
    },
    fontSize: {
      type: 'string'
    },
    customFontSize: {
      type: 'number'
    },
    itemsJustification: {
      type: 'string'
    },
    showSubmenuIcon: {
      type: 'boolean'
    }
  },

  isEligible(attribute) {
    return attribute.rgbTextColor || attribute.rgbBackgroundColor;
  },

  supports: {
    align: ['wide', 'full'],
    anchor: true,
    html: false,
    inserter: true
  },
  migrate: Object(external_gc_compose_["compose"])(migrateIdToRef, attributes => {
    return { ...Object(external_lodash_["omit"])(attributes, ['rgbTextColor', 'rgbBackgroundColor']),
      customTextColor: attributes.textColor ? undefined : attributes.rgbTextColor,
      customBackgroundColor: attributes.backgroundColor ? undefined : attributes.rgbBackgroundColor
    };
  }),

  save() {
    return Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InnerBlocks"].Content, null);
  }

}];
/* harmony default export */ var navigation_deprecated = (navigation_deprecated_deprecated);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/navigation/index.js
/**
 * GeChiUI dependencies
 */


/**
 * Internal dependencies
 */

const navigation_metadata = {
  apiVersion: 2,
  name: "core/navigation",
  title: "导航",
  category: "theme",
  description: "允许访问者在您的站点内不断浏览的区块集合。",
  keywords: ["menu", "navigation", "links"],
  textdomain: "default",
  attributes: {
    ref: {
      type: "number"
    },
    textColor: {
      type: "string"
    },
    customTextColor: {
      type: "string"
    },
    rgbTextColor: {
      type: "string"
    },
    backgroundColor: {
      type: "string"
    },
    customBackgroundColor: {
      type: "string"
    },
    rgbBackgroundColor: {
      type: "string"
    },
    showSubmenuIcon: {
      type: "boolean",
      "default": true
    },
    openSubmenusOnClick: {
      type: "boolean",
      "default": false
    },
    overlayMenu: {
      type: "string",
      "default": "mobile"
    },
    __unstableLocation: {
      type: "string"
    },
    overlayBackgroundColor: {
      type: "string"
    },
    customOverlayBackgroundColor: {
      type: "string"
    },
    overlayTextColor: {
      type: "string"
    },
    customOverlayTextColor: {
      type: "string"
    }
  },
  usesContext: ["navigationArea"],
  providesContext: {
    textColor: "textColor",
    customTextColor: "customTextColor",
    backgroundColor: "backgroundColor",
    customBackgroundColor: "customBackgroundColor",
    overlayTextColor: "overlayTextColor",
    customOverlayTextColor: "customOverlayTextColor",
    overlayBackgroundColor: "overlayBackgroundColor",
    customOverlayBackgroundColor: "customOverlayBackgroundColor",
    fontSize: "fontSize",
    customFontSize: "customFontSize",
    showSubmenuIcon: "showSubmenuIcon",
    openSubmenusOnClick: "openSubmenusOnClick",
    style: "style",
    orientation: "orientation"
  },
  supports: {
    align: ["wide", "full"],
    anchor: true,
    html: false,
    inserter: true,
    typography: {
      fontSize: true,
      lineHeight: true,
      __experimentalFontStyle: true,
      __experimentalFontWeight: true,
      __experimentalTextTransform: true,
      __experimentalFontFamily: true,
      __experimentalDefaultControls: {
        fontSize: true
      }
    },
    spacing: {
      units: ["px", "em", "rem", "vh", "vw"]
    },
    __experimentalLayout: {
      allowSwitching: false,
      allowInheriting: false,
      "default": {
        type: "flex"
      }
    }
  },
  viewScript: "file:./view.min.js",
  editorStyle: "gc-block-navigation-editor",
  style: "gc-block-navigation"
};



const {
  name: navigation_name
} = navigation_metadata;

const navigation_settings = {
  icon: library_navigation,
  example: {
    innerBlocks: [{
      name: 'core/navigation-link',
      attributes: {
        // translators: 'Home' as in a website's home page.
        label: Object(external_gc_i18n_["__"])('主页'),
        url: 'https://make.gechiui.com/'
      }
    }, {
      name: 'core/navigation-link',
      attributes: {
        // translators: 'About' as in a website's about page.
        label: Object(external_gc_i18n_["__"])('关于'),
        url: 'https://make.gechiui.com/'
      }
    }, {
      name: 'core/navigation-link',
      attributes: {
        // translators: 'Contact' as in a website's contact page.
        label: Object(external_gc_i18n_["__"])('联系'),
        url: 'https://make.gechiui.com/'
      }
    }]
  },
  edit: navigation_edit,
  save: navigation_save_save,
  deprecated: navigation_deprecated
};

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/custom-link.js


/**
 * GeChiUI dependencies
 */

const customLink = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  xmlns: "https://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M12.5 14.5h-1V16h1c2.2 0 4-1.8 4-4s-1.8-4-4-4h-1v1.5h1c1.4 0 2.5 1.1 2.5 2.5s-1.1 2.5-2.5 2.5zm-4 1.5v-1.5h-1C6.1 14.5 5 13.4 5 12s1.1-2.5 2.5-2.5h1V8h-1c-2.2 0-4 1.8-4 4s1.8 4 4 4h1zm-1-3.2h5v-1.5h-5v1.5zM18 4H9c-1.1 0-2 .9-2 2v.5h1.5V6c0-.3.2-.5.5-.5h9c.3 0 .5.2.5.5v12c0 .3-.2.5-.5.5H9c-.3 0-.5-.2-.5-.5v-.5H7v.5c0 1.1.9 2 2 2h9c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2z"
}));
/* harmony default export */ var custom_link = (customLink);

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/add-submenu.js


/**
 * GeChiUI dependencies
 */

const addSubmenu = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M2 12c0 3.6 2.4 5.5 6 5.5h.5V19l3-2.5-3-2.5v2H8c-2.5 0-4.5-1.5-4.5-4s2-4.5 4.5-4.5h3.5V6H8c-3.6 0-6 2.4-6 6zm19.5-1h-8v1.5h8V11zm0 5h-8v1.5h8V16zm0-10h-8v1.5h8V6z"
}));
/* harmony default export */ var add_submenu = (addSubmenu);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/navigation-link/edit.js


/**
 * External dependencies
 */


/**
 * GeChiUI dependencies
 */












/**
 * Internal dependencies
 */

const {
  name: edit_name
} = {
  apiVersion: 2,
  name: "core/navigation-link",
  title: "自定义链接",
  category: "design",
  parent: ["core/navigation"],
  description: "将页面、链接或其他项目添加到导航中。",
  textdomain: "default",
  attributes: {
    label: {
      type: "string"
    },
    type: {
      type: "string"
    },
    description: {
      type: "string"
    },
    rel: {
      type: "string"
    },
    id: {
      type: "number"
    },
    opensInNewTab: {
      type: "boolean",
      "default": false
    },
    url: {
      type: "string"
    },
    title: {
      type: "string"
    },
    kind: {
      type: "string"
    },
    isTopLevelLink: {
      type: "boolean"
    }
  },
  usesContext: ["textColor", "customTextColor", "backgroundColor", "customBackgroundColor", "overlayTextColor", "customOverlayTextColor", "overlayBackgroundColor", "customOverlayBackgroundColor", "fontSize", "customFontSize", "showSubmenuIcon", "style"],
  supports: {
    reusable: false,
    html: false,
    __experimentalSlashInserter: true
  },
  editorStyle: "gc-block-navigation-link-editor",
  style: "gc-block-navigation-link"
};
const MAX_NESTING = 5;
/**
 * A React hook to determine if it's dragging within the target element.
 *
 * @typedef {import('@gechiui/element').RefObject} RefObject
 *
 * @param {RefObject<HTMLElement>} elementRef The target elementRef object.
 *
 * @return {boolean} Is dragging within the target element.
 */

const useIsDraggingWithin = elementRef => {
  const [isDraggingWithin, setIsDraggingWithin] = Object(external_gc_element_["useState"])(false);
  Object(external_gc_element_["useEffect"])(() => {
    const {
      ownerDocument
    } = elementRef.current;

    function handleDragStart(event) {
      // Check the first time when the dragging starts.
      handleDragEnter(event);
    } // Set to false whenever the user cancel the drag event by either releasing the mouse or press Escape.


    function handleDragEnd() {
      setIsDraggingWithin(false);
    }

    function handleDragEnter(event) {
      // Check if the current target is inside the item element.
      if (elementRef.current.contains(event.target)) {
        setIsDraggingWithin(true);
      } else {
        setIsDraggingWithin(false);
      }
    } // Bind these events to the document to catch all drag events.
    // Ideally, we can also use `event.relatedTarget`, but sadly that
    // doesn't work in Safari.


    ownerDocument.addEventListener('dragstart', handleDragStart);
    ownerDocument.addEventListener('dragend', handleDragEnd);
    ownerDocument.addEventListener('dragenter', handleDragEnter);
    return () => {
      ownerDocument.removeEventListener('dragstart', handleDragStart);
      ownerDocument.removeEventListener('dragend', handleDragEnd);
      ownerDocument.removeEventListener('dragenter', handleDragEnter);
    };
  }, []);
  return isDraggingWithin;
};
/**
 * Given the Link block's type attribute, return the query params to give to
 * /gc/v2/search.
 *
 * @param {string} type Link block's type attribute.
 * @param {string} kind Link block's entity of kind (post-type|taxonomy)
 * @return {{ type?: string, subtype?: string }} Search query params.
 */


function getSuggestionsQuery(type, kind) {
  switch (type) {
    case 'post':
    case 'page':
      return {
        type: 'post',
        subtype: type
      };

    case 'category':
      return {
        type: 'term',
        subtype: 'category'
      };

    case 'tag':
      return {
        type: 'term',
        subtype: 'post_tag'
      };

    case 'post_format':
      return {
        type: 'post-format'
      };

    default:
      if (kind === 'taxonomy') {
        return {
          type: 'term',
          subtype: type
        };
      }

      if (kind === 'post-type') {
        return {
          type: 'post',
          subtype: type
        };
      }

      return {};
  }
}
/**
 * Determine the colors for a menu.
 *
 * Order of priority is:
 * 1: Overlay custom colors (if submenu)
 * 2: Overlay theme colors (if submenu)
 * 3: Custom colors
 * 4: Theme colors
 * 5: Global styles
 *
 * @param {Object}  context
 * @param {boolean} isSubMenu
 */


function getColors(context, isSubMenu) {
  var _style$color, _style$color2;

  const {
    textColor,
    customTextColor,
    backgroundColor,
    customBackgroundColor,
    overlayTextColor,
    customOverlayTextColor,
    overlayBackgroundColor,
    customOverlayBackgroundColor,
    style
  } = context;
  const colors = {};

  if (isSubMenu && !!customOverlayTextColor) {
    colors.customTextColor = customOverlayTextColor;
  } else if (isSubMenu && !!overlayTextColor) {
    colors.textColor = overlayTextColor;
  } else if (!!customTextColor) {
    colors.customTextColor = customTextColor;
  } else if (!!textColor) {
    colors.textColor = textColor;
  } else if (!!(style !== null && style !== void 0 && (_style$color = style.color) !== null && _style$color !== void 0 && _style$color.text)) {
    colors.customTextColor = style.color.text;
  }

  if (isSubMenu && !!customOverlayBackgroundColor) {
    colors.customBackgroundColor = customOverlayBackgroundColor;
  } else if (isSubMenu && !!overlayBackgroundColor) {
    colors.backgroundColor = overlayBackgroundColor;
  } else if (!!customBackgroundColor) {
    colors.customBackgroundColor = customBackgroundColor;
  } else if (!!backgroundColor) {
    colors.backgroundColor = backgroundColor;
  } else if (!!(style !== null && style !== void 0 && (_style$color2 = style.color) !== null && _style$color2 !== void 0 && _style$color2.background)) {
    colors.customTextColor = style.color.background;
  }

  return colors;
}
/**
 * @typedef {'post-type'|'custom'|'taxonomy'|'post-type-archive'} GCNavigationLinkKind
 */

/**
 * Navigation Link Block Attributes
 *
 * @typedef {Object} GCNavigationLinkBlockAttributes
 *
 * @property {string}               [label]         Link text.
 * @property {GCNavigationLinkKind} [kind]          Kind is used to differentiate between term and post ids to check post draft status.
 * @property {string}               [type]          The type such as post, page, tag, category and other custom types.
 * @property {string}               [rel]           The relationship of the linked URL.
 * @property {number}               [id]            A post or term id.
 * @property {boolean}              [opensInNewTab] Sets link target to _blank when true.
 * @property {string}               [url]           Link href.
 * @property {string}               [title]         Link title attribute.
 */

/**
 * Link Control onChange handler that updates block attributes when a setting is changed.
 *
 * @param {Object}                          updatedValue    New block attributes to update.
 * @param {Function}                        setAttributes   Block attribute update function.
 * @param {GCNavigationLinkBlockAttributes} blockAttributes Current block attributes.
 *
 */


const updateNavigationLinkBlockAttributes = function () {
  let updatedValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  let setAttributes = arguments.length > 1 ? arguments[1] : undefined;
  let blockAttributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  const {
    label: originalLabel = '',
    kind: originalKind = '',
    type: originalType = ''
  } = blockAttributes;
  const {
    title = '',
    // the title of any provided Post.
    url = '',
    opensInNewTab,
    id,
    kind: newKind = originalKind,
    type: newType = originalType
  } = updatedValue;
  const normalizedTitle = title.replace(/http(s?):\/\//gi, '');
  const normalizedURL = url.replace(/http(s?):\/\//gi, '');
  const escapeTitle = title !== '' && normalizedTitle !== normalizedURL && originalLabel !== title;
  const label = escapeTitle ? Object(external_lodash_["escape"])(title) : originalLabel || Object(external_lodash_["escape"])(normalizedURL); // In https://github.com/GeChiUI/gutenberg/pull/24670 we decided to use "tag" in favor of "post_tag"

  const type = newType === 'post_tag' ? 'tag' : newType.replace('-', '_');
  const isBuiltInType = ['post', 'page', 'tag', 'category'].indexOf(type) > -1;
  const isCustomLink = !newKind && !isBuiltInType || newKind === 'custom';
  const kind = isCustomLink ? 'custom' : newKind;
  setAttributes({ // Passed `url` may already be encoded. To prevent double encoding, decodeURI is executed to revert to the original string.
    ...(url && {
      url: encodeURI(Object(external_gc_url_["safeDecodeURI"])(url))
    }),
    ...(label && {
      label
    }),
    ...(undefined !== opensInNewTab && {
      opensInNewTab
    }),
    ...(id && Number.isInteger(id) && {
      id
    }),
    ...(kind && {
      kind
    }),
    ...(type && type !== 'URL' && {
      type
    })
  });
};
/**
 * Removes HTML from a given string.
 * Note the does not provide XSS protection or otherwise attempt
 * to filter strings with malicious intent.
 *
 * See also: https://github.com/GeChiUI/gutenberg/pull/35539
 *
 * @param {string} html the string from which HTML should be removed.
 * @return {string} the "cleaned" string.
 */

function navStripHTML(html) {
  const doc = document.implementation.createHTMLDocument('');
  doc.body.innerHTML = html;
  return doc.body.textContent || '';
}
/**
 * Add transforms to Link Control
 */


function LinkControlTransforms(_ref) {
  let {
    block,
    transforms,
    replace
  } = _ref;
  return Object(external_gc_element_["createElement"])("div", {
    className: "link-control-transform"
  }, Object(external_gc_element_["createElement"])("h3", {
    className: "link-control-transform__subheading"
  }, Object(external_gc_i18n_["__"])('转换')), Object(external_gc_element_["createElement"])("div", {
    className: "link-control-transform__items"
  }, transforms.map((item, index) => {
    return Object(external_gc_element_["createElement"])(external_gc_components_["Button"], {
      key: `transform-${index}`,
      onClick: () => replace(block.clientId, Object(external_gc_blocks_["switchToBlockType"])(block, item.name)),
      className: "link-control-transform__item"
    }, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["BlockIcon"], {
      icon: item.icon
    }), item.title);
  })));
}

function NavigationLinkEdit(_ref2) {
  let {
    attributes,
    isSelected,
    setAttributes,
    insertBlocksAfter,
    mergeBlocks,
    onReplace,
    context,
    clientId
  } = _ref2;
  const {
    label,
    type,
    opensInNewTab,
    url,
    description,
    rel,
    title,
    kind
  } = attributes;
  const link = {
    url,
    opensInNewTab,
    title: label && navStripHTML(label) // don't allow HTML to display inside the <LinkControl>

  };
  const {
    saveEntityRecord
  } = Object(external_gc_data_["useDispatch"])(external_gc_coreData_["store"]);
  const {
    replaceBlock,
    __unstableMarkNextChangeAsNotPersistent
  } = Object(external_gc_data_["useDispatch"])(external_gc_blockEditor_["store"]);
  const [isLinkOpen, setIsLinkOpen] = Object(external_gc_element_["useState"])(false);
  const listItemRef = Object(external_gc_element_["useRef"])(null);
  const isDraggingWithin = useIsDraggingWithin(listItemRef);

  const itemLabelPlaceholder = Object(external_gc_i18n_["__"])('添加链接…');

  const ref = Object(external_gc_element_["useRef"])();
  const {
    innerBlocks,
    isAtMaxNesting,
    isTopLevelLink,
    isParentOfSelectedBlock,
    hasDescendants,
    userCanCreatePages,
    userCanCreatePosts,
    thisBlock,
    blockTransforms
  } = Object(external_gc_data_["useSelect"])(select => {
    var _getClientIdsOfDescen;

    const {
      getBlock,
      getBlocks,
      getBlockName,
      getBlockRootClientId,
      getClientIdsOfDescendants,
      hasSelectedInnerBlock,
      getSelectedBlockClientId,
      getBlockParentsByBlockName,
      getBlockTransformItems
    } = select(external_gc_blockEditor_["store"]);
    const selectedBlockId = getSelectedBlockClientId();
    const descendants = getClientIdsOfDescendants([clientId]).length;
    return {
      innerBlocks: getBlocks(clientId),
      isAtMaxNesting: getBlockParentsByBlockName(clientId, [edit_name, 'core/navigation-submenu']).length >= MAX_NESTING,
      isTopLevelLink: getBlockName(getBlockRootClientId(clientId)) === 'core/navigation',
      isParentOfSelectedBlock: hasSelectedInnerBlock(clientId, true),
      isImmediateParentOfSelectedBlock: hasSelectedInnerBlock(clientId, false),
      hasDescendants: !!descendants,
      selectedBlockHasDescendants: !!((_getClientIdsOfDescen = getClientIdsOfDescendants([selectedBlockId])) !== null && _getClientIdsOfDescen !== void 0 && _getClientIdsOfDescen.length),
      userCanCreatePages: select(external_gc_coreData_["store"]).canUser('create', 'pages'),
      userCanCreatePosts: select(external_gc_coreData_["store"]).canUser('create', 'posts'),
      thisBlock: getBlock(clientId),
      blockTransforms: getBlockTransformItems([getBlock(clientId)], getBlockRootClientId(clientId))
    };
  }, [clientId]);
  Object(external_gc_element_["useEffect"])(() => {
    // This side-effect should not create an undo level as those should
    // only be created via user interactions. Mark this change as
    // not persistent to avoid undo level creation.
    // See https://github.com/GeChiUI/gutenberg/issues/34564.
    __unstableMarkNextChangeAsNotPersistent();

    setAttributes({
      isTopLevelLink
    });
  }, [isTopLevelLink]);
  /**
   * Transform to submenu block.
   */

  function transformToSubmenu() {
    const newSubmenu = Object(external_gc_blocks_["createBlock"])('core/navigation-submenu', attributes, innerBlocks);
    replaceBlock(clientId, newSubmenu);
  }

  const featuredBlocks = ['core/site-logo', 'core/social-links', 'core/search'];
  const featuredTransforms = blockTransforms.filter(item => {
    return featuredBlocks.includes(item.name);
  });
  Object(external_gc_element_["useEffect"])(() => {
    // Show the LinkControl on mount if the URL is empty
    // ( When adding a new menu item)
    // This can't be done in the useState call because it conflicts
    // with the autofocus behavior of the BlockListBlock component.
    if (!url) {
      setIsLinkOpen(true);
    } // If block has inner blocks, transform to Submenu.


    if (hasDescendants) {
      transformToSubmenu();
    }
  }, []);
  /**
   * The hook shouldn't be necessary but due to a focus loss happening
   * when selecting a suggestion in the link popover, we force close on block unselection.
   */

  Object(external_gc_element_["useEffect"])(() => {
    if (!isSelected) {
      setIsLinkOpen(false);
    }
  }, [isSelected]); // If the LinkControl popover is open and the URL has changed, close the LinkControl and focus the label text.

  Object(external_gc_element_["useEffect"])(() => {
    if (isLinkOpen && url) {
      // Does this look like a URL and have something TLD-ish?
      if (Object(external_gc_url_["isURL"])(Object(external_gc_url_["prependHTTP"])(label)) && /^.+\.[a-z]+/.test(label)) {
        // Focus and select the label text.
        selectLabelText();
      } else {
        // Focus it (but do not select).
        Object(external_gc_dom_["placeCaretAtHorizontalEdge"])(ref.current, true);
      }
    }
  }, [url]);
  /**
   * Focus the Link label text and select it.
   */

  function selectLabelText() {
    ref.current.focus();
    const {
      ownerDocument
    } = ref.current;
    const {
      defaultView
    } = ownerDocument;
    const selection = defaultView.getSelection();
    const range = ownerDocument.createRange(); // Get the range of the current ref contents so we can add this range to the selection.

    range.selectNodeContents(ref.current);
    selection.removeAllRanges();
    selection.addRange(range);
  }
  /**
   * Removes the current link if set.
   */


  function removeLink() {
    // Reset all attributes that comprise the link.
    setAttributes({
      url: '',
      label: '',
      id: '',
      kind: '',
      type: ''
    }); // Close the link editing UI.

    setIsLinkOpen(false);
  }

  let userCanCreate = false;

  if (!type || type === 'page') {
    userCanCreate = userCanCreatePages;
  } else if (type === 'post') {
    userCanCreate = userCanCreatePosts;
  }

  async function handleCreate(pageTitle) {
    const postType = type || 'page';
    const page = await saveEntityRecord('postType', postType, {
      title: pageTitle,
      status: 'draft'
    });
    return {
      id: page.id,
      type: postType,
      title: page.title.rendered,
      url: page.link,
      kind: 'post-type'
    };
  }

  const {
    textColor,
    customTextColor,
    backgroundColor,
    customBackgroundColor
  } = getColors(context, !isTopLevelLink);

  function onKeyDown(event) {
    if (external_gc_keycodes_["isKeyboardEvent"].primary(event, 'k') || !url && event.keyCode === external_gc_keycodes_["ENTER"]) {
      setIsLinkOpen(true);
    }
  }

  const blockProps = Object(external_gc_blockEditor_["useBlockProps"])({
    ref: listItemRef,
    className: classnames_default()('gc-block-navigation-item', {
      'is-editing': isSelected || isParentOfSelectedBlock,
      'is-dragging-within': isDraggingWithin,
      'has-link': !!url,
      'has-child': hasDescendants,
      'has-text-color': !!textColor || !!customTextColor,
      [Object(external_gc_blockEditor_["getColorClassName"])('color', textColor)]: !!textColor,
      'has-background': !!backgroundColor || customBackgroundColor,
      [Object(external_gc_blockEditor_["getColorClassName"])('background-color', backgroundColor)]: !!backgroundColor
    }),
    style: {
      color: !textColor && customTextColor,
      backgroundColor: !backgroundColor && customBackgroundColor
    },
    onKeyDown
  });

  if (!url) {
    blockProps.onClick = () => setIsLinkOpen(true);
  }

  const classes = classnames_default()('gc-block-navigation-item__content', {
    'gc-block-navigation-link__placeholder': !url
  });
  let missingText = '';

  switch (type) {
    case 'post':
      /* translators: label for missing post in navigation link block */
      missingText = Object(external_gc_i18n_["__"])('选择文章');
      break;

    case 'page':
      /* translators: label for missing page in navigation link block */
      missingText = Object(external_gc_i18n_["__"])('选择页面');
      break;

    case 'category':
      /* translators: label for missing category in navigation link block */
      missingText = Object(external_gc_i18n_["__"])('选择分类');
      break;

    case 'tag':
      /* translators: label for missing tag in navigation link block */
      missingText = Object(external_gc_i18n_["__"])('选择标签');
      break;

    default:
      /* translators: label for missing values in navigation link block */
      missingText = Object(external_gc_i18n_["__"])('添加链接…');
  }

  return Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["BlockControls"], null, Object(external_gc_element_["createElement"])(external_gc_components_["ToolbarGroup"], null, Object(external_gc_element_["createElement"])(external_gc_components_["ToolbarButton"], {
    name: "link",
    icon: library_link["a" /* default */],
    title: Object(external_gc_i18n_["__"])('链接'),
    shortcut: external_gc_keycodes_["displayShortcut"].primary('k'),
    onClick: () => setIsLinkOpen(true)
  }), !isAtMaxNesting && Object(external_gc_element_["createElement"])(external_gc_components_["ToolbarButton"], {
    name: "submenu",
    icon: add_submenu,
    title: Object(external_gc_i18n_["__"])('添加子菜单'),
    onClick: transformToSubmenu
  }))), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InspectorControls"], null, Object(external_gc_element_["createElement"])(external_gc_components_["PanelBody"], {
    title: Object(external_gc_i18n_["__"])('链接设置')
  }, Object(external_gc_element_["createElement"])(external_gc_components_["TextareaControl"], {
    value: description || '',
    onChange: descriptionValue => {
      setAttributes({
        description: descriptionValue
      });
    },
    label: Object(external_gc_i18n_["__"])('描述'),
    help: Object(external_gc_i18n_["__"])('如果当前主题支持，此描述将在菜单中显示。')
  }), Object(external_gc_element_["createElement"])(external_gc_components_["TextControl"], {
    value: title || '',
    onChange: titleValue => {
      setAttributes({
        title: titleValue
      });
    },
    label: Object(external_gc_i18n_["__"])('链接标题'),
    autoComplete: "off"
  }), Object(external_gc_element_["createElement"])(external_gc_components_["TextControl"], {
    value: rel || '',
    onChange: relValue => {
      setAttributes({
        rel: relValue
      });
    },
    label: Object(external_gc_i18n_["__"])('链接rel'),
    autoComplete: "off"
  }))), Object(external_gc_element_["createElement"])("div", blockProps, Object(external_gc_element_["createElement"])("a", {
    className: classes
  }, !url ? Object(external_gc_element_["createElement"])("div", {
    className: "gc-block-navigation-link__placeholder-text"
  }, Object(external_gc_element_["createElement"])(external_gc_components_["Tooltip"], {
    position: "top center",
    text: Object(external_gc_i18n_["__"])('此项目缺少链接')
  }, Object(external_gc_element_["createElement"])("span", null, missingText))) : Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"], {
    ref: ref,
    identifier: "label",
    className: "gc-block-navigation-item__label",
    value: label,
    onChange: labelValue => setAttributes({
      label: labelValue
    }),
    onMerge: mergeBlocks,
    onReplace: onReplace,
    __unstableOnSplitAtEnd: () => insertBlocksAfter(Object(external_gc_blocks_["createBlock"])('core/navigation-link')),
    "aria-label": Object(external_gc_i18n_["__"])('导航链接文字'),
    placeholder: itemLabelPlaceholder,
    withoutInteractiveFormatting: true,
    allowedFormats: ['core/bold', 'core/italic', 'core/image', 'core/strikethrough'],
    onClick: () => {
      if (!url) {
        setIsLinkOpen(true);
      }
    }
  }), isLinkOpen && Object(external_gc_element_["createElement"])(external_gc_components_["Popover"], {
    position: "bottom center",
    onClose: () => setIsLinkOpen(false),
    anchorRef: listItemRef.current
  }, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["__experimentalLinkControl"], {
    hasTextControl: true,
    className: "gc-block-navigation-link__inline-link-input",
    value: link,
    showInitialSuggestions: true,
    withCreateSuggestion: userCanCreate,
    createSuggestion: handleCreate,
    createSuggestionButtonText: searchTerm => {
      let format;

      if (type === 'post') {
        /* translators: %s: search term. */
        format = Object(external_gc_i18n_["__"])('创建草稿文章。<mark>%s</mark>');
      } else {
        /* translators: %s: search term. */
        format = Object(external_gc_i18n_["__"])('创建草稿页面。<mark>%s</mark>');
      }

      return Object(external_gc_element_["createInterpolateElement"])(Object(external_gc_i18n_["sprintf"])(format, searchTerm), {
        mark: Object(external_gc_element_["createElement"])("mark", null)
      });
    },
    noDirectEntry: !!type,
    noURLSuggestion: !!type,
    suggestionsQuery: getSuggestionsQuery(type, kind),
    onChange: updatedValue => updateNavigationLinkBlockAttributes(updatedValue, setAttributes, attributes),
    onRemove: removeLink,
    renderControlBottom: !url ? () => Object(external_gc_element_["createElement"])(LinkControlTransforms, {
      block: thisBlock,
      transforms: featuredTransforms,
      replace: replaceBlock
    }) : null
  })))));
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/navigation-link/save.js


/**
 * GeChiUI dependencies
 */

function navigation_link_save_save() {
  return Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InnerBlocks"].Content, null);
}

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/post-title.js


/**
 * GeChiUI dependencies
 */

const postTitle = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  viewBox: "0 0 24 24",
  xmlns: "http://www.w3.org/2000/svg"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M4 14.5h16V16H4zM4 18.5h9V20H4zM4 4h3c2 0 3 .86 3 2.583 0 .891-.253 1.554-.76 1.988-.505.435-1.24.652-2.204.652H5.542V12H4V4zm2.855 4c.53 0 .924-.114 1.18-.343.266-.228.398-.579.398-1.051 0-.473-.132-.82-.397-1.04-.265-.229-.67-.343-1.217-.343H5.542V8h1.313z"
}));
/* harmony default export */ var post_title = (postTitle);

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/page.js


/**
 * GeChiUI dependencies
 */

const page_page = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M7 5.5h10a.5.5 0 01.5.5v12a.5.5 0 01-.5.5H7a.5.5 0 01-.5-.5V6a.5.5 0 01.5-.5zM17 4H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V6a2 2 0 00-2-2zm-1 3.75H8v1.5h8v-1.5zM8 11h8v1.5H8V11zm6 3.25H8v1.5h6v-1.5z"
}));
/* harmony default export */ var library_page = (page_page);

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/tag.js


/**
 * GeChiUI dependencies
 */

const tag_tag = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M20.1 11.2l-6.7-6.7c-.1-.1-.3-.2-.5-.2H5c-.4-.1-.8.3-.8.7v7.8c0 .2.1.4.2.5l6.7 6.7c.2.2.5.4.7.5s.6.2.9.2c.3 0 .6-.1.9-.2.3-.1.5-.3.8-.5l5.6-5.6c.4-.4.7-1 .7-1.6.1-.6-.2-1.2-.6-1.6zM19 13.4L13.4 19c-.1.1-.2.1-.3.2-.2.1-.4.1-.6 0-.1 0-.2-.1-.3-.2l-6.5-6.5V5.8h6.8l6.5 6.5c.2.2.2.4.2.6 0 .1 0 .3-.2.5zM9 8c-.6 0-1 .4-1 1s.4 1 1 1 1-.4 1-1-.4-1-1-1z"
}));
/* harmony default export */ var library_tag = (tag_tag);

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/custom-post-type.js


/**
 * GeChiUI dependencies
 */

const customPostType = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M4 20h9v-1.5H4V20zm0-5.5V16h16v-1.5H4zm.8-4l.7.7 2-2V12h1V9.2l2 2 .7-.7-2-2H12v-1H9.2l2-2-.7-.7-2 2V4h-1v2.8l-2-2-.7.7 2 2H4v1h2.8l-2 2z"
}));
/* harmony default export */ var custom_post_type = (customPostType);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/navigation-link/fallback-variations.js
/**
 * GeChiUI dependencies
 */

 // FALLBACK: this is only used when the server does not understand the variations property in the
// register_block_type call. see navigation-link/index.php.
// Delete this file when supported GC ranges understand the `variations` property when passed to
// register_block_type in index.php

const fallbackVariations = [{
  name: 'link',
  isDefault: true,
  title: Object(external_gc_i18n_["__"])('自定义链接'),
  description: Object(external_gc_i18n_["__"])('指向自定义 URL 的链接。'),
  attributes: {}
}, {
  name: 'post',
  icon: post_title,
  title: Object(external_gc_i18n_["__"])('文章链接'),
  description: Object(external_gc_i18n_["__"])('目标文章的链接。'),
  attributes: {
    type: 'post',
    kind: 'post-type'
  }
}, {
  name: 'page',
  icon: library_page,
  title: Object(external_gc_i18n_["__"])('页面链接'),
  description: Object(external_gc_i18n_["__"])('目标页面的链接。'),
  attributes: {
    type: 'page',
    kind: 'post-type'
  }
}, {
  name: 'category',
  icon: library_category,
  title: Object(external_gc_i18n_["__"])('分类链接'),
  description: Object(external_gc_i18n_["__"])('目标分类的链接。'),
  attributes: {
    type: 'category',
    kind: 'taxonomy'
  }
}, {
  name: 'tag',
  icon: library_tag,
  title: Object(external_gc_i18n_["__"])('标签链接'),
  description: Object(external_gc_i18n_["__"])('目标标签的链接。'),
  attributes: {
    type: 'tag',
    kind: 'taxonomy'
  }
}];
/**
 * Add `isActive` function to all `navigation link` variations, if not defined.
 * `isActive` function is used to find a variation match from a created
 *  Block by providing its attributes.
 */

fallbackVariations.forEach(variation => {
  if (variation.isActive) return;

  variation.isActive = (blockAttributes, variationAttributes) => blockAttributes.type === variationAttributes.type;
});
/* harmony default export */ var fallback_variations = (fallbackVariations);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/navigation-link/hooks.js
/**
 * GeChiUI dependencies
 */

/**
 * Internal dependencies
 */



function getIcon(variationName) {
  switch (variationName) {
    case 'post':
      return post_title;

    case 'page':
      return library_page;

    case 'tag':
      return library_tag;

    case 'category':
      return library_category;

    default:
      return custom_post_type;
  }
}

function enhanceNavigationLinkVariations(settings, name) {
  if (name !== 'core/navigation-link') {
    return settings;
  } // Fallback handling may be deleted after supported GC ranges understand the `variations`
  // property when passed to register_block_type in index.php


  if (!settings.variations) {
    return { ...settings,
      variations: fallback_variations
    };
  } // Otherwise decorate server passed variations with an icon and isActive function


  if (settings.variations) {
    const isActive = (blockAttributes, variationAttributes) => {
      return blockAttributes.type === variationAttributes.type;
    };

    const variations = settings.variations.map(variation => {
      return { ...variation,
        ...(!variation.icon && {
          icon: getIcon(variation.name)
        }),
        ...(!variation.isActive && {
          isActive
        })
      };
    });
    return { ...settings,
      variations
    };
  }

  return settings;
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/navigation-link/transforms.js
/**
 * GeChiUI dependencies
 */

const navigation_link_transforms_transforms = {
  from: [{
    type: 'block',
    blocks: ['core/site-logo'],
    transform: () => {
      return Object(external_gc_blocks_["createBlock"])('core/navigation-link');
    }
  }, {
    type: 'block',
    blocks: ['core/spacer'],
    transform: () => {
      return Object(external_gc_blocks_["createBlock"])('core/navigation-link');
    }
  }, {
    type: 'block',
    blocks: ['core/home-link'],
    transform: () => {
      return Object(external_gc_blocks_["createBlock"])('core/navigation-link');
    }
  }, {
    type: 'block',
    blocks: ['core/social-links'],
    transform: () => {
      return Object(external_gc_blocks_["createBlock"])('core/navigation-link');
    }
  }, {
    type: 'block',
    blocks: ['core/search'],
    transform: () => {
      return Object(external_gc_blocks_["createBlock"])('core/navigation-link');
    }
  }],
  to: [{
    type: 'block',
    blocks: ['core/navigation-submenu'],
    transform: (attributes, innerBlocks) => Object(external_gc_blocks_["createBlock"])('core/navigation-submenu', attributes, innerBlocks)
  }, {
    type: 'block',
    blocks: ['core/spacer'],
    transform: () => {
      return Object(external_gc_blocks_["createBlock"])('core/spacer');
    }
  }, {
    type: 'block',
    blocks: ['core/site-logo'],
    transform: () => {
      return Object(external_gc_blocks_["createBlock"])('core/site-logo');
    }
  }, {
    type: 'block',
    blocks: ['core/home-link'],
    transform: () => {
      return Object(external_gc_blocks_["createBlock"])('core/home-link');
    }
  }, {
    type: 'block',
    blocks: ['core/social-links'],
    transform: () => {
      return Object(external_gc_blocks_["createBlock"])('core/social-links');
    }
  }, {
    type: 'block',
    blocks: ['core/search'],
    transform: () => {
      return Object(external_gc_blocks_["createBlock"])('core/search', {
        showLabel: false,
        buttonUseIcon: true,
        buttonPosition: 'button-inside'
      });
    }
  }]
};
/* harmony default export */ var navigation_link_transforms = (navigation_link_transforms_transforms);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/navigation-link/index.js


/**
 * GeChiUI dependencies
 */




/**
 * Internal dependencies
 */

const navigation_link_metadata = {
  apiVersion: 2,
  name: "core/navigation-link",
  title: "自定义链接",
  category: "design",
  parent: ["core/navigation"],
  description: "将页面、链接或其他项目添加到导航中。",
  textdomain: "default",
  attributes: {
    label: {
      type: "string"
    },
    type: {
      type: "string"
    },
    description: {
      type: "string"
    },
    rel: {
      type: "string"
    },
    id: {
      type: "number"
    },
    opensInNewTab: {
      type: "boolean",
      "default": false
    },
    url: {
      type: "string"
    },
    title: {
      type: "string"
    },
    kind: {
      type: "string"
    },
    isTopLevelLink: {
      type: "boolean"
    }
  },
  usesContext: ["textColor", "customTextColor", "backgroundColor", "customBackgroundColor", "overlayTextColor", "customOverlayTextColor", "overlayBackgroundColor", "customOverlayBackgroundColor", "fontSize", "customFontSize", "showSubmenuIcon", "style"],
  supports: {
    reusable: false,
    html: false,
    __experimentalSlashInserter: true
  },
  editorStyle: "gc-block-navigation-link-editor",
  style: "gc-block-navigation-link"
};




const {
  name: navigation_link_name
} = navigation_link_metadata;

const navigation_link_settings = {
  icon: custom_link,
  __experimentalLabel: _ref => {
    let {
      label
    } = _ref;
    return label;
  },

  merge(leftAttributes, _ref2) {
    let {
      label: rightLabel = ''
    } = _ref2;
    return { ...leftAttributes,
      label: leftAttributes.label + rightLabel
    };
  },

  edit: NavigationLinkEdit,
  save: navigation_link_save_save,
  example: {
    attributes: {
      label: Object(external_gc_i18n_["_x"])('示例链接', 'navigation link preview example'),
      url: 'https://example.com'
    }
  },
  deprecated: [{
    isEligible(attributes) {
      return attributes.nofollow;
    },

    attributes: {
      label: {
        type: 'string'
      },
      type: {
        type: 'string'
      },
      nofollow: {
        type: 'boolean'
      },
      description: {
        type: 'string'
      },
      id: {
        type: 'number'
      },
      opensInNewTab: {
        type: 'boolean',
        default: false
      },
      url: {
        type: 'string'
      }
    },

    migrate(_ref3) {
      let {
        nofollow,
        ...rest
      } = _ref3;
      return {
        rel: nofollow ? 'nofollow' : '',
        ...rest
      };
    },

    save() {
      return Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InnerBlocks"].Content, null);
    }

  }],
  transforms: navigation_link_transforms
}; // importing this file includes side effects. This is whitelisted in block-library/package.json under sideEffects

Object(external_gc_hooks_["addFilter"])('blocks.registerBlockType', 'core/navigation-link', enhanceNavigationLinkVariations);

// EXTERNAL MODULE: external ["gc","a11y"]
var external_gc_a11y_ = __webpack_require__("NQKH");

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/navigation-submenu/icons.js


/**
 * GeChiUI dependencies
 */

const ItemSubmenuIcon = () => Object(external_gc_element_["createElement"])(external_gc_components_["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  width: "12",
  height: "12",
  viewBox: "0 0 12 12",
  fill: "none"
}, Object(external_gc_element_["createElement"])(external_gc_components_["Path"], {
  d: "M1.50002 4L6.00002 8L10.5 4",
  strokeWidth: "1.5"
}));

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/navigation-submenu/edit.js


/**
 * External dependencies
 */


/**
 * GeChiUI dependencies
 */












/**
 * Internal dependencies
 */


const {
  name: navigation_submenu_edit_name
} = {
  apiVersion: 2,
  name: "core/navigation-submenu",
  title: "子菜单",
  category: "design",
  parent: ["core/navigation"],
  description: "将子菜单添加到您的导航中。",
  textdomain: "default",
  attributes: {
    label: {
      type: "string"
    },
    type: {
      type: "string"
    },
    description: {
      type: "string"
    },
    rel: {
      type: "string"
    },
    id: {
      type: "number"
    },
    opensInNewTab: {
      type: "boolean",
      "default": false
    },
    url: {
      type: "string"
    },
    title: {
      type: "string"
    },
    kind: {
      type: "string"
    },
    isTopLevelItem: {
      type: "boolean"
    }
  },
  usesContext: ["textColor", "customTextColor", "backgroundColor", "customBackgroundColor", "overlayTextColor", "customOverlayTextColor", "overlayBackgroundColor", "customOverlayBackgroundColor", "fontSize", "customFontSize", "showSubmenuIcon", "openSubmenusOnClick", "style"],
  supports: {
    reusable: false,
    html: false
  },
  editorStyle: "gc-block-navigation-submenu-editor",
  style: "gc-block-navigation-submenu"
};
const navigation_submenu_edit_ALLOWED_BLOCKS = ['core/navigation-link', 'core/navigation-submenu'];
const edit_DEFAULT_BLOCK = ['core/navigation-link'];
const edit_MAX_NESTING = 5;
/**
 * A React hook to determine if it's dragging within the target element.
 *
 * @typedef {import('@gechiui/element').RefObject} RefObject
 *
 * @param {RefObject<HTMLElement>} elementRef The target elementRef object.
 *
 * @return {boolean} Is dragging within the target element.
 */

const edit_useIsDraggingWithin = elementRef => {
  const [isDraggingWithin, setIsDraggingWithin] = Object(external_gc_element_["useState"])(false);
  Object(external_gc_element_["useEffect"])(() => {
    const {
      ownerDocument
    } = elementRef.current;

    function handleDragStart(event) {
      // Check the first time when the dragging starts.
      handleDragEnter(event);
    } // Set to false whenever the user cancel the drag event by either releasing the mouse or press Escape.


    function handleDragEnd() {
      setIsDraggingWithin(false);
    }

    function handleDragEnter(event) {
      // Check if the current target is inside the item element.
      if (elementRef.current.contains(event.target)) {
        setIsDraggingWithin(true);
      } else {
        setIsDraggingWithin(false);
      }
    } // Bind these events to the document to catch all drag events.
    // Ideally, we can also use `event.relatedTarget`, but sadly that
    // doesn't work in Safari.


    ownerDocument.addEventListener('dragstart', handleDragStart);
    ownerDocument.addEventListener('dragend', handleDragEnd);
    ownerDocument.addEventListener('dragenter', handleDragEnter);
    return () => {
      ownerDocument.removeEventListener('dragstart', handleDragStart);
      ownerDocument.removeEventListener('dragend', handleDragEnd);
      ownerDocument.removeEventListener('dragenter', handleDragEnter);
    };
  }, []);
  return isDraggingWithin;
};
/**
 * Given the Link block's type attribute, return the query params to give to
 * /gc/v2/search.
 *
 * @param {string} type Link block's type attribute.
 * @param {string} kind Link block's entity of kind (post-type|taxonomy)
 * @return {{ type?: string, subtype?: string }} Search query params.
 */


function edit_getSuggestionsQuery(type, kind) {
  switch (type) {
    case 'post':
    case 'page':
      return {
        type: 'post',
        subtype: type
      };

    case 'category':
      return {
        type: 'term',
        subtype: 'category'
      };

    case 'tag':
      return {
        type: 'term',
        subtype: 'post_tag'
      };

    case 'post_format':
      return {
        type: 'post-format'
      };

    default:
      if (kind === 'taxonomy') {
        return {
          type: 'term',
          subtype: type
        };
      }

      if (kind === 'post-type') {
        return {
          type: 'post',
          subtype: type
        };
      }

      return {};
  }
}
/**
 * Determine the colors for a menu.
 *
 * Order of priority is:
 * 1: Overlay custom colors (if submenu)
 * 2: Overlay theme colors (if submenu)
 * 3: Custom colors
 * 4: Theme colors
 * 5: Global styles
 *
 * @param {Object}  context
 * @param {boolean} isSubMenu
 */


function edit_getColors(context, isSubMenu) {
  var _style$color, _style$color2;

  const {
    textColor,
    customTextColor,
    backgroundColor,
    customBackgroundColor,
    overlayTextColor,
    customOverlayTextColor,
    overlayBackgroundColor,
    customOverlayBackgroundColor,
    style
  } = context;
  const colors = {};

  if (isSubMenu && !!customOverlayTextColor) {
    colors.customTextColor = customOverlayTextColor;
  } else if (isSubMenu && !!overlayTextColor) {
    colors.textColor = overlayTextColor;
  } else if (!!customTextColor) {
    colors.customTextColor = customTextColor;
  } else if (!!textColor) {
    colors.textColor = textColor;
  } else if (!!(style !== null && style !== void 0 && (_style$color = style.color) !== null && _style$color !== void 0 && _style$color.text)) {
    colors.customTextColor = style.color.text;
  }

  if (isSubMenu && !!customOverlayBackgroundColor) {
    colors.customBackgroundColor = customOverlayBackgroundColor;
  } else if (isSubMenu && !!overlayBackgroundColor) {
    colors.backgroundColor = overlayBackgroundColor;
  } else if (!!customBackgroundColor) {
    colors.customBackgroundColor = customBackgroundColor;
  } else if (!!backgroundColor) {
    colors.backgroundColor = backgroundColor;
  } else if (!!(style !== null && style !== void 0 && (_style$color2 = style.color) !== null && _style$color2 !== void 0 && _style$color2.background)) {
    colors.customTextColor = style.color.background;
  }

  return colors;
}
/**
 * @typedef {'post-type'|'custom'|'taxonomy'|'post-type-archive'} GCNavigationLinkKind
 */

/**
 * Navigation Link Block Attributes
 *
 * @typedef {Object} GCNavigationLinkBlockAttributes
 *
 * @property {string}               [label]         Link text.
 * @property {GCNavigationLinkKind} [kind]          Kind is used to differentiate between term and post ids to check post draft status.
 * @property {string}               [type]          The type such as post, page, tag, category and other custom types.
 * @property {string}               [rel]           The relationship of the linked URL.
 * @property {number}               [id]            A post or term id.
 * @property {boolean}              [opensInNewTab] Sets link target to _blank when true.
 * @property {string}               [url]           Link href.
 * @property {string}               [title]         Link title attribute.
 */

/**
 * Link Control onChange handler that updates block attributes when a setting is changed.
 *
 * @param {Object}                          updatedValue    New block attributes to update.
 * @param {Function}                        setAttributes   Block attribute update function.
 * @param {GCNavigationLinkBlockAttributes} blockAttributes Current block attributes.
 *
 */


const edit_updateNavigationLinkBlockAttributes = function () {
  let updatedValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  let setAttributes = arguments.length > 1 ? arguments[1] : undefined;
  let blockAttributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  const {
    label: originalLabel = '',
    kind: originalKind = '',
    type: originalType = ''
  } = blockAttributes;
  const {
    title = '',
    url = '',
    opensInNewTab,
    id,
    kind: newKind = originalKind,
    type: newType = originalType
  } = updatedValue;
  const normalizedTitle = title.replace(/http(s?):\/\//gi, '');
  const normalizedURL = url.replace(/http(s?):\/\//gi, '');
  const escapeTitle = title !== '' && normalizedTitle !== normalizedURL && originalLabel !== title;
  const label = escapeTitle ? Object(external_lodash_["escape"])(title) : originalLabel || Object(external_lodash_["escape"])(normalizedURL); // In https://github.com/GeChiUI/gutenberg/pull/24670 we decided to use "tag" in favor of "post_tag"

  const type = newType === 'post_tag' ? 'tag' : newType.replace('-', '_');
  const isBuiltInType = ['post', 'page', 'tag', 'category'].indexOf(type) > -1;
  const isCustomLink = !newKind && !isBuiltInType || newKind === 'custom';
  const kind = isCustomLink ? 'custom' : newKind;
  setAttributes({ // Passed `url` may already be encoded. To prevent double encoding, decodeURI is executed to revert to the original string.
    ...(url && {
      url: encodeURI(Object(external_gc_url_["safeDecodeURI"])(url))
    }),
    ...(label && {
      label
    }),
    ...(undefined !== opensInNewTab && {
      opensInNewTab
    }),
    ...(id && Number.isInteger(id) && {
      id
    }),
    ...(kind && {
      kind
    }),
    ...(type && type !== 'URL' && {
      type
    })
  });
};
function NavigationSubmenuEdit(_ref) {
  let {
    attributes,
    isSelected,
    setAttributes,
    mergeBlocks,
    onReplace,
    context,
    clientId
  } = _ref;
  const {
    label,
    type,
    opensInNewTab,
    url,
    description,
    rel,
    title,
    kind
  } = attributes;
  const link = {
    url,
    opensInNewTab
  };
  const {
    showSubmenuIcon,
    openSubmenusOnClick
  } = context;
  const {
    saveEntityRecord
  } = Object(external_gc_data_["useDispatch"])(external_gc_coreData_["store"]);
  const {
    __unstableMarkNextChangeAsNotPersistent
  } = Object(external_gc_data_["useDispatch"])(external_gc_blockEditor_["store"]);
  const [isLinkOpen, setIsLinkOpen] = Object(external_gc_element_["useState"])(false);
  const listItemRef = Object(external_gc_element_["useRef"])(null);
  const isDraggingWithin = edit_useIsDraggingWithin(listItemRef);

  const itemLabelPlaceholder = Object(external_gc_i18n_["__"])('添加文字…');

  const ref = Object(external_gc_element_["useRef"])();
  const {
    isAtMaxNesting,
    isTopLevelItem,
    isParentOfSelectedBlock,
    isImmediateParentOfSelectedBlock,
    hasDescendants,
    selectedBlockHasDescendants,
    userCanCreatePages,
    userCanCreatePosts
  } = Object(external_gc_data_["useSelect"])(select => {
    var _getClientIdsOfDescen;

    const {
      getClientIdsOfDescendants,
      hasSelectedInnerBlock,
      getSelectedBlockClientId,
      getBlockParentsByBlockName
    } = select(external_gc_blockEditor_["store"]);
    const selectedBlockId = getSelectedBlockClientId();
    const descendants = getClientIdsOfDescendants([clientId]).length;
    return {
      isAtMaxNesting: getBlockParentsByBlockName(clientId, navigation_submenu_edit_name).length >= edit_MAX_NESTING,
      isTopLevelItem: getBlockParentsByBlockName(clientId, navigation_submenu_edit_name).length === 0,
      isParentOfSelectedBlock: hasSelectedInnerBlock(clientId, true),
      isImmediateParentOfSelectedBlock: hasSelectedInnerBlock(clientId, false),
      hasDescendants: !!descendants,
      selectedBlockHasDescendants: !!((_getClientIdsOfDescen = getClientIdsOfDescendants([selectedBlockId])) !== null && _getClientIdsOfDescen !== void 0 && _getClientIdsOfDescen.length),
      userCanCreatePages: select(external_gc_coreData_["store"]).canUser('create', 'pages'),
      userCanCreatePosts: select(external_gc_coreData_["store"]).canUser('create', 'posts')
    };
  }, [clientId]); // Show the LinkControl on mount if the URL is empty
  // ( When adding a new menu item)
  // This can't be done in the useState call because it conflicts
  // with the autofocus behavior of the BlockListBlock component.

  Object(external_gc_element_["useEffect"])(() => {
    if (!openSubmenusOnClick && !url) {
      setIsLinkOpen(true);
    }
  }, []); // Store the colors from context as attributes for rendering

  Object(external_gc_element_["useEffect"])(() => {
    // This side-effect should not create an undo level as those should
    // only be created via user interactions. Mark this change as
    // not persistent to avoid undo level creation.
    // See https://github.com/GeChiUI/gutenberg/issues/34564.
    __unstableMarkNextChangeAsNotPersistent();

    setAttributes({
      isTopLevelItem
    });
  }, [isTopLevelItem]);
  /**
   * The hook shouldn't be necessary but due to a focus loss happening
   * when selecting a suggestion in the link popover, we force close on block unselection.
   */

  Object(external_gc_element_["useEffect"])(() => {
    if (!isSelected) {
      setIsLinkOpen(false);
    }
  }, [isSelected]); // If the LinkControl popover is open and the URL has changed, close the LinkControl and focus the label text.

  Object(external_gc_element_["useEffect"])(() => {
    if (isLinkOpen && url) {
      // Does this look like a URL and have something TLD-ish?
      if (Object(external_gc_url_["isURL"])(Object(external_gc_url_["prependHTTP"])(label)) && /^.+\.[a-z]+/.test(label)) {
        // Focus and select the label text.
        selectLabelText();
      } else {
        // Focus it (but do not select).
        Object(external_gc_dom_["placeCaretAtHorizontalEdge"])(ref.current, true);
      }
    }
  }, [url]);
  /**
   * Focus the Link label text and select it.
   */

  function selectLabelText() {
    ref.current.focus();
    const {
      ownerDocument
    } = ref.current;
    const {
      defaultView
    } = ownerDocument;
    const selection = defaultView.getSelection();
    const range = ownerDocument.createRange(); // Get the range of the current ref contents so we can add this range to the selection.

    range.selectNodeContents(ref.current);
    selection.removeAllRanges();
    selection.addRange(range);
  }

  let userCanCreate = false;

  if (!type || type === 'page') {
    userCanCreate = userCanCreatePages;
  } else if (type === 'post') {
    userCanCreate = userCanCreatePosts;
  }

  async function handleCreate(pageTitle) {
    const postType = type || 'page';
    const page = await saveEntityRecord('postType', postType, {
      title: pageTitle,
      status: 'draft'
    });
    return {
      id: page.id,
      type: postType,
      title: page.title.rendered,
      url: page.link,
      kind: 'post-type'
    };
  }

  const {
    textColor,
    customTextColor,
    backgroundColor,
    customBackgroundColor
  } = edit_getColors(context, !isTopLevelItem);

  function onKeyDown(event) {
    if (external_gc_keycodes_["isKeyboardEvent"].primary(event, 'k')) {
      setIsLinkOpen(true);
    }
  }

  const blockProps = Object(external_gc_blockEditor_["useBlockProps"])({
    ref: listItemRef,
    className: classnames_default()('gc-block-navigation-item', {
      'is-editing': isSelected || isParentOfSelectedBlock,
      'is-dragging-within': isDraggingWithin,
      'has-link': !!url,
      'has-child': hasDescendants,
      'has-text-color': !!textColor || !!customTextColor,
      [Object(external_gc_blockEditor_["getColorClassName"])('color', textColor)]: !!textColor,
      'has-background': !!backgroundColor || customBackgroundColor,
      [Object(external_gc_blockEditor_["getColorClassName"])('background-color', backgroundColor)]: !!backgroundColor,
      'open-on-click': openSubmenusOnClick
    }),
    style: {
      color: !textColor && customTextColor,
      backgroundColor: !backgroundColor && customBackgroundColor
    },
    onKeyDown
  }); // Always use overlay colors for submenus

  const innerBlocksColors = edit_getColors(context, true);

  if (isAtMaxNesting) {
    Object(external_lodash_["pull"])(navigation_submenu_edit_ALLOWED_BLOCKS, 'core/navigation-submenu');
  }

  const innerBlocksProps = Object(external_gc_blockEditor_["useInnerBlocksProps"])({
    className: classnames_default()('gc-block-navigation__submenu-container', {
      'is-parent-of-selected-block': isParentOfSelectedBlock,
      'has-text-color': !!(innerBlocksColors.textColor || innerBlocksColors.customTextColor),
      [`has-${innerBlocksColors.textColor}-color`]: !!innerBlocksColors.textColor,
      'has-background': !!(innerBlocksColors.backgroundColor || innerBlocksColors.customBackgroundColor),
      [`has-${innerBlocksColors.backgroundColor}-background-color`]: !!innerBlocksColors.backgroundColor
    }),
    style: {
      color: innerBlocksColors.customTextColor,
      backgroundColor: innerBlocksColors.customBackgroundColor
    }
  }, {
    allowedBlocks: navigation_submenu_edit_ALLOWED_BLOCKS,
    __experimentalDefaultBlock: edit_DEFAULT_BLOCK,
    __experimentalDirectInsert: true,
    // Ensure block toolbar is not too far removed from item
    // being edited.
    // see: https://github.com/GeChiUI/gutenberg/pull/34615.
    __experimentalCaptureToolbars: true,
    renderAppender: isSelected || isImmediateParentOfSelectedBlock && !selectedBlockHasDescendants || // Show the appender while dragging to allow inserting element between item and the appender.
    hasDescendants ? external_gc_blockEditor_["InnerBlocks"].ButtonBlockAppender : false
  });
  const ParentElement = openSubmenusOnClick ? 'button' : 'a';
  return Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["BlockControls"], null, Object(external_gc_element_["createElement"])(external_gc_components_["ToolbarGroup"], null, !openSubmenusOnClick && Object(external_gc_element_["createElement"])(external_gc_components_["ToolbarButton"], {
    name: "link",
    icon: library_link["a" /* default */],
    title: Object(external_gc_i18n_["__"])('链接'),
    shortcut: external_gc_keycodes_["displayShortcut"].primary('k'),
    onClick: () => setIsLinkOpen(true)
  }))), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InspectorControls"], null, Object(external_gc_element_["createElement"])(external_gc_components_["PanelBody"], {
    title: Object(external_gc_i18n_["__"])('链接设置')
  }, Object(external_gc_element_["createElement"])(external_gc_components_["TextareaControl"], {
    value: description || '',
    onChange: descriptionValue => {
      setAttributes({
        description: descriptionValue
      });
    },
    label: Object(external_gc_i18n_["__"])('描述'),
    help: Object(external_gc_i18n_["__"])('如果当前主题支持，此描述将在菜单中显示。')
  }), Object(external_gc_element_["createElement"])(external_gc_components_["TextControl"], {
    value: title || '',
    onChange: titleValue => {
      setAttributes({
        title: titleValue
      });
    },
    label: Object(external_gc_i18n_["__"])('链接标题'),
    autoComplete: "off"
  }), Object(external_gc_element_["createElement"])(external_gc_components_["TextControl"], {
    value: rel || '',
    onChange: relValue => {
      setAttributes({
        rel: relValue
      });
    },
    label: Object(external_gc_i18n_["__"])('链接rel'),
    autoComplete: "off"
  }))), Object(external_gc_element_["createElement"])("div", blockProps, Object(external_gc_element_["createElement"])(ParentElement, {
    className: "gc-block-navigation-item__content"
  }, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"], {
    ref: ref,
    identifier: "label",
    className: "gc-block-navigation-item__label",
    value: label,
    onChange: labelValue => setAttributes({
      label: labelValue
    }),
    onMerge: mergeBlocks,
    onReplace: onReplace,
    "aria-label": Object(external_gc_i18n_["__"])('导航链接文字'),
    placeholder: itemLabelPlaceholder,
    withoutInteractiveFormatting: true,
    allowedFormats: ['core/bold', 'core/italic', 'core/image', 'core/strikethrough'],
    onClick: () => {
      if (!openSubmenusOnClick && !url) {
        setIsLinkOpen(true);
      }
    }
  }), !openSubmenusOnClick && isLinkOpen && Object(external_gc_element_["createElement"])(external_gc_components_["Popover"], {
    position: "bottom center",
    onClose: () => setIsLinkOpen(false),
    anchorRef: listItemRef.current
  }, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["__experimentalLinkControl"], {
    className: "gc-block-navigation-link__inline-link-input",
    value: link,
    showInitialSuggestions: true,
    withCreateSuggestion: userCanCreate,
    createSuggestion: handleCreate,
    createSuggestionButtonText: searchTerm => {
      let format;

      if (type === 'post') {
        /* translators: %s: search term. */
        format = Object(external_gc_i18n_["__"])('创建草稿文章。<mark>%s</mark>');
      } else {
        /* translators: %s: search term. */
        format = Object(external_gc_i18n_["__"])('创建草稿页面。<mark>%s</mark>');
      }

      return Object(external_gc_element_["createInterpolateElement"])(Object(external_gc_i18n_["sprintf"])(format, searchTerm), {
        mark: Object(external_gc_element_["createElement"])("mark", null)
      });
    },
    noDirectEntry: !!type,
    noURLSuggestion: !!type,
    suggestionsQuery: edit_getSuggestionsQuery(type, kind),
    onChange: updatedValue => edit_updateNavigationLinkBlockAttributes(updatedValue, setAttributes, attributes),
    onRemove: () => {
      setAttributes({
        url: ''
      });
      Object(external_gc_a11y_["speak"])(Object(external_gc_i18n_["__"])('已移除链接。'), 'assertive');
    }
  })), (showSubmenuIcon || openSubmenusOnClick) && Object(external_gc_element_["createElement"])("span", {
    className: "gc-block-navigation__submenu-icon"
  }, Object(external_gc_element_["createElement"])(ItemSubmenuIcon, null))), Object(external_gc_element_["createElement"])("div", innerBlocksProps)));
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/navigation-submenu/save.js


/**
 * GeChiUI dependencies
 */

function navigation_submenu_save_save() {
  return Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InnerBlocks"].Content, null);
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/navigation-submenu/transforms.js
/**
 * GeChiUI dependencies
 */

const navigation_submenu_transforms_transforms = {
  to: [{
    type: 'block',
    blocks: ['core/navigation-link'],
    isMatch: (attributes, block) => {
      var _block$innerBlocks;

      return (block === null || block === void 0 ? void 0 : (_block$innerBlocks = block.innerBlocks) === null || _block$innerBlocks === void 0 ? void 0 : _block$innerBlocks.length) === 0;
    },
    transform: attributes => Object(external_gc_blocks_["createBlock"])('core/navigation-link', attributes)
  }, {
    type: 'block',
    blocks: ['core/spacer'],
    isMatch: (attributes, block) => {
      var _block$innerBlocks2;

      return (block === null || block === void 0 ? void 0 : (_block$innerBlocks2 = block.innerBlocks) === null || _block$innerBlocks2 === void 0 ? void 0 : _block$innerBlocks2.length) === 0;
    },
    transform: () => {
      return Object(external_gc_blocks_["createBlock"])('core/spacer');
    }
  }, {
    type: 'block',
    blocks: ['core/site-logo'],
    isMatch: (attributes, block) => {
      var _block$innerBlocks3;

      return (block === null || block === void 0 ? void 0 : (_block$innerBlocks3 = block.innerBlocks) === null || _block$innerBlocks3 === void 0 ? void 0 : _block$innerBlocks3.length) === 0;
    },
    transform: () => {
      return Object(external_gc_blocks_["createBlock"])('core/site-logo');
    }
  }, {
    type: 'block',
    blocks: ['core/home-link'],
    isMatch: (attributes, block) => {
      var _block$innerBlocks4;

      return (block === null || block === void 0 ? void 0 : (_block$innerBlocks4 = block.innerBlocks) === null || _block$innerBlocks4 === void 0 ? void 0 : _block$innerBlocks4.length) === 0;
    },
    transform: () => {
      return Object(external_gc_blocks_["createBlock"])('core/home-link');
    }
  }, {
    type: 'block',
    blocks: ['core/social-links'],
    isMatch: (attributes, block) => {
      var _block$innerBlocks5;

      return (block === null || block === void 0 ? void 0 : (_block$innerBlocks5 = block.innerBlocks) === null || _block$innerBlocks5 === void 0 ? void 0 : _block$innerBlocks5.length) === 0;
    },
    transform: () => {
      return Object(external_gc_blocks_["createBlock"])('core/social-links');
    }
  }, {
    type: 'block',
    blocks: ['core/search'],
    isMatch: (attributes, block) => {
      var _block$innerBlocks6;

      return (block === null || block === void 0 ? void 0 : (_block$innerBlocks6 = block.innerBlocks) === null || _block$innerBlocks6 === void 0 ? void 0 : _block$innerBlocks6.length) === 0;
    },
    transform: () => {
      return Object(external_gc_blocks_["createBlock"])('core/search');
    }
  }]
};
/* harmony default export */ var navigation_submenu_transforms = (navigation_submenu_transforms_transforms);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/navigation-submenu/index.js
/**
 * GeChiUI dependencies
 */

/**
 * Internal dependencies
 */

const navigation_submenu_metadata = {
  apiVersion: 2,
  name: "core/navigation-submenu",
  title: "子菜单",
  category: "design",
  parent: ["core/navigation"],
  description: "将子菜单添加到您的导航中。",
  textdomain: "default",
  attributes: {
    label: {
      type: "string"
    },
    type: {
      type: "string"
    },
    description: {
      type: "string"
    },
    rel: {
      type: "string"
    },
    id: {
      type: "number"
    },
    opensInNewTab: {
      type: "boolean",
      "default": false
    },
    url: {
      type: "string"
    },
    title: {
      type: "string"
    },
    kind: {
      type: "string"
    },
    isTopLevelItem: {
      type: "boolean"
    }
  },
  usesContext: ["textColor", "customTextColor", "backgroundColor", "customBackgroundColor", "overlayTextColor", "customOverlayTextColor", "overlayBackgroundColor", "customOverlayBackgroundColor", "fontSize", "customFontSize", "showSubmenuIcon", "openSubmenusOnClick", "style"],
  supports: {
    reusable: false,
    html: false
  },
  editorStyle: "gc-block-navigation-submenu-editor",
  style: "gc-block-navigation-submenu"
};



const {
  name: navigation_submenu_name
} = navigation_submenu_metadata;

const navigation_submenu_settings = {
  icon: add_submenu,
  __experimentalLabel: _ref => {
    let {
      label
    } = _ref;
    return label;
  },
  edit: NavigationSubmenuEdit,
  save: navigation_submenu_save_save,
  transforms: navigation_submenu_transforms
};

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/page-break.js


/**
 * GeChiUI dependencies
 */

const pageBreak = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M7.8 6c0-.7.6-1.2 1.2-1.2h6c.7 0 1.2.6 1.2 1.2v3h1.5V6c0-1.5-1.2-2.8-2.8-2.8H9C7.5 3.2 6.2 4.5 6.2 6v3h1.5V6zm8.4 11c0 .7-.6 1.2-1.2 1.2H9c-.7 0-1.2-.6-1.2-1.2v-3H6.2v3c0 1.5 1.2 2.8 2.8 2.8h6c1.5 0 2.8-1.2 2.8-2.8v-3h-1.5v3zM4 11v1h16v-1H4z"
}));
/* harmony default export */ var page_break = (pageBreak);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/nextpage/edit.js


/**
 * GeChiUI dependencies
 */


function NextPageEdit() {
  return Object(external_gc_element_["createElement"])("div", Object(external_gc_blockEditor_["useBlockProps"])(), Object(external_gc_element_["createElement"])("div", {
    className: "gc-block-nextpage"
  }, Object(external_gc_element_["createElement"])("span", null, Object(external_gc_i18n_["__"])('分页符'))));
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/nextpage/save.js


/**
 * GeChiUI dependencies
 */

function nextpage_save_save() {
  return Object(external_gc_element_["createElement"])(external_gc_element_["RawHTML"], null, '<!--nextpage-->');
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/nextpage/transforms.js
/**
 * GeChiUI dependencies
 */

const nextpage_transforms_transforms = {
  from: [{
    type: 'raw',
    schema: {
      'gc-block': {
        attributes: ['data-block']
      }
    },
    isMatch: node => node.dataset && node.dataset.block === 'core/nextpage',

    transform() {
      return Object(external_gc_blocks_["createBlock"])('core/nextpage', {});
    }

  }]
};
/* harmony default export */ var nextpage_transforms = (nextpage_transforms_transforms);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/nextpage/index.js
/**
 * GeChiUI dependencies
 */

/**
 * Internal dependencies
 */


const nextpage_metadata = {
  apiVersion: 2,
  name: "core/nextpage",
  title: "分页符",
  category: "design",
  description: "将您的内容分成多个页面。",
  keywords: ["next page", "pagination"],
  parent: ["core/post-content"],
  textdomain: "default",
  supports: {
    customClassName: false,
    className: false,
    html: false
  },
  editorStyle: "gc-block-nextpage-editor"
};


const {
  name: nextpage_name
} = nextpage_metadata;

const nextpage_settings = {
  icon: page_break,
  example: {},
  transforms: nextpage_transforms,
  edit: NextPageEdit,
  save: nextpage_save_save
};

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/pattern/edit.js


/**
 * GeChiUI dependencies
 */




const PatternEdit = _ref => {
  let {
    attributes,
    clientId
  } = _ref;
  const selectedPattern = Object(external_gc_data_["useSelect"])(select => select(external_gc_blockEditor_["store"]).__experimentalGetParsedPattern(attributes.slug), [attributes.slug]);
  const {
    replaceBlocks,
    __unstableMarkNextChangeAsNotPersistent
  } = Object(external_gc_data_["useDispatch"])(external_gc_blockEditor_["store"]); // Run this effect when the component loads.
  // This adds the Pattern's contents to the post.
  // This change won't be saved.
  // It will continue to pull from the pattern file unless changes are made to its respective template part.

  Object(external_gc_element_["useEffect"])(() => {
    if (selectedPattern !== null && selectedPattern !== void 0 && selectedPattern.blocks) {
      __unstableMarkNextChangeAsNotPersistent();

      replaceBlocks(clientId, selectedPattern.blocks);
    }
  }, [selectedPattern === null || selectedPattern === void 0 ? void 0 : selectedPattern.blocks]);
  const props = Object(external_gc_blockEditor_["useBlockProps"])();
  return Object(external_gc_element_["createElement"])("div", props);
};

/* harmony default export */ var pattern_edit = (PatternEdit);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/pattern/index.js
/**
 * Internal dependencies
 */
const pattern_metadata = {
  apiVersion: 2,
  name: "core/pattern",
  title: "区块样板",
  category: "theme",
  description: "显示一个区块样板。",
  supports: {
    html: false,
    inserter: false
  },
  textdomain: "default",
  attributes: {
    slug: {
      type: "string"
    }
  }
};

const {
  name: pattern_name
} = pattern_metadata;

const pattern_settings = {
  edit: pattern_edit
};

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/pages.js


/**
 * GeChiUI dependencies
 */

const pages_pages = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M7 13.8h6v-1.5H7v1.5zM18 16V4c0-1.1-.9-2-2-2H6c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h10c1.1 0 2-.9 2-2zM5.5 16V4c0-.3.2-.5.5-.5h10c.3 0 .5.2.5.5v12c0 .3-.2.5-.5.5H6c-.3 0-.5-.2-.5-.5zM7 10.5h8V9H7v1.5zm0-3.3h8V5.8H7v1.4zM20.2 6v13c0 .7-.6 1.2-1.2 1.2H8v1.5h11c1.5 0 2.7-1.2 2.7-2.8V6h-1.5z"
}));
/* harmony default export */ var library_pages = (pages_pages);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/page-list/convert-to-links-modal.js


/**
 * GeChiUI dependencies
 */






const PAGE_FIELDS = ['id', 'title', 'link', 'type', 'parent'];
const MAX_PAGE_COUNT = 100;
const convertSelectedBlockToNavigationLinks = _ref => {
  let {
    pages,
    clientId,
    replaceBlock,
    createBlock
  } = _ref;
  return () => {
    if (!pages) {
      return;
    }

    const linkMap = {};
    const navigationLinks = [];
    pages.forEach(_ref2 => {
      var _linkMap$id$innerBloc, _linkMap$id;

      let {
        id,
        title,
        link: url,
        type,
        parent
      } = _ref2;
      // See if a placeholder exists. This is created if children appear before parents in list
      const innerBlocks = (_linkMap$id$innerBloc = (_linkMap$id = linkMap[id]) === null || _linkMap$id === void 0 ? void 0 : _linkMap$id.innerBlocks) !== null && _linkMap$id$innerBloc !== void 0 ? _linkMap$id$innerBloc : [];
      linkMap[id] = createBlock('core/navigation-link', {
        id,
        label: title.rendered,
        url,
        type,
        kind: 'post-type'
      }, innerBlocks);

      if (!parent) {
        navigationLinks.push(linkMap[id]);
      } else {
        if (!linkMap[parent]) {
          // Use a placeholder if the child appears before parent in list
          linkMap[parent] = {
            innerBlocks: []
          };
        }

        const parentLinkInnerBlocks = linkMap[parent].innerBlocks;
        parentLinkInnerBlocks.push(linkMap[id]);
      }
    }); // Transform all links with innerBlocks into Submenus. This can't be done
    // sooner because page objects have no information on their children.

    const transformSubmenus = listOfLinks => {
      listOfLinks.forEach((block, index, listOfLinksArray) => {
        const {
          attributes,
          innerBlocks
        } = block;

        if (innerBlocks.length !== 0) {
          transformSubmenus(innerBlocks);
          const transformedBlock = createBlock('core/navigation-submenu', attributes, innerBlocks);
          listOfLinksArray[index] = transformedBlock;
        }
      });
    };

    transformSubmenus(navigationLinks);
    replaceBlock(clientId, navigationLinks);
  };
};
function ConvertToLinksModal(_ref3) {
  let {
    onClose,
    clientId
  } = _ref3;
  const {
    pages,
    pagesFinished
  } = Object(external_gc_data_["useSelect"])(select => {
    const {
      getEntityRecords,
      hasFinishedResolution
    } = select(external_gc_coreData_["store"]);
    const query = ['postType', 'page', {
      per_page: MAX_PAGE_COUNT,
      _fields: PAGE_FIELDS,
      // TODO: When https://core.trac.gechiui.com/ticket/39037 REST API support for multiple orderby
      // values is resolved, update 'orderby' to [ 'menu_order', 'post_title' ] to provide a consistent
      // sort.
      orderby: 'menu_order',
      order: 'asc'
    }];
    return {
      pages: getEntityRecords(...query),
      pagesFinished: hasFinishedResolution('getEntityRecords', query)
    };
  }, [clientId]);
  const {
    replaceBlock
  } = Object(external_gc_data_["useDispatch"])(external_gc_blockEditor_["store"]);
  return Object(external_gc_element_["createElement"])(external_gc_components_["Modal"], {
    closeLabel: Object(external_gc_i18n_["__"])('关闭'),
    onRequestClose: onClose,
    title: Object(external_gc_i18n_["__"])('转换为链接'),
    className: 'gc-block-page-list-modal',
    aria: {
      describedby: 'gc-block-page-list-modal__description'
    }
  }, Object(external_gc_element_["createElement"])("p", {
    id: 'gc-block-page-list-modal__description'
  }, Object(external_gc_i18n_["__"])('若要编辑此导航菜单，请将其转换为单页链接。这将允许您添加、重排、移除项目或编辑其标签。')), Object(external_gc_element_["createElement"])("p", null, Object(external_gc_i18n_["__"])("注意：如果您要向站点添加新页面，则必须将其添加到导航菜单中。")), Object(external_gc_element_["createElement"])("div", {
    className: "gc-block-page-list-modal-buttons"
  }, Object(external_gc_element_["createElement"])(external_gc_components_["Button"], {
    variant: "tertiary",
    onClick: onClose
  }, Object(external_gc_i18n_["__"])('取消')), Object(external_gc_element_["createElement"])(external_gc_components_["Button"], {
    variant: "primary",
    disabled: !pagesFinished,
    onClick: convertSelectedBlockToNavigationLinks({
      pages,
      replaceBlock,
      clientId,
      createBlock: external_gc_blocks_["createBlock"]
    })
  }, Object(external_gc_i18n_["__"])('转换'))));
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/navigation-link/icons.js


/**
 * GeChiUI dependencies
 */

const icons_ItemSubmenuIcon = () => Object(external_gc_element_["createElement"])(external_gc_components_["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  width: "12",
  height: "12",
  viewBox: "0 0 12 12",
  fill: "none"
}, Object(external_gc_element_["createElement"])(external_gc_components_["Path"], {
  d: "M1.50002 4L6.00002 8L10.5 4",
  strokeWidth: "1.5"
}));

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/page-list/edit.js


/**
 * External dependencies
 */


/**
 * GeChiUI dependencies
 */







/**
 * Internal dependencies
 */


 // We only show the edit option when page count is <= MAX_PAGE_COUNT
// Performance of Navigation Links is not good past this value.

const edit_MAX_PAGE_COUNT = 100;
function PageListEdit(_ref) {
  var _context$style;

  let {
    context,
    clientId
  } = _ref;
  const {
    pagesByParentId,
    totalPages,
    hasResolvedPages
  } = usePageData();
  const isNavigationChild = ('showSubmenuIcon' in context);
  const allowConvertToLinks = isNavigationChild && totalPages <= edit_MAX_PAGE_COUNT;
  const [isOpen, setOpen] = Object(external_gc_element_["useState"])(false);

  const openModal = () => setOpen(true);

  const closeModal = () => setOpen(false);

  const blockProps = Object(external_gc_blockEditor_["useBlockProps"])({
    className: classnames_default()('gc-block-page-list', {
      'has-text-color': !!context.textColor,
      [Object(external_gc_blockEditor_["getColorClassName"])('color', context.textColor)]: !!context.textColor,
      'has-background': !!context.backgroundColor,
      [Object(external_gc_blockEditor_["getColorClassName"])('background-color', context.backgroundColor)]: !!context.backgroundColor
    }),
    style: { ...((_context$style = context.style) === null || _context$style === void 0 ? void 0 : _context$style.color)
    }
  });
  return Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, allowConvertToLinks && Object(external_gc_element_["createElement"])(external_gc_blockEditor_["BlockControls"], {
    group: "other"
  }, Object(external_gc_element_["createElement"])(external_gc_components_["ToolbarButton"], {
    title: Object(external_gc_i18n_["__"])('编辑'),
    onClick: openModal
  }, Object(external_gc_i18n_["__"])('编辑'))), allowConvertToLinks && isOpen && Object(external_gc_element_["createElement"])(ConvertToLinksModal, {
    onClose: closeModal,
    clientId: clientId
  }), !hasResolvedPages && Object(external_gc_element_["createElement"])("div", blockProps, Object(external_gc_element_["createElement"])(external_gc_components_["Placeholder"], null, Object(external_gc_element_["createElement"])(external_gc_components_["Spinner"], null))), hasResolvedPages && totalPages === null && Object(external_gc_element_["createElement"])("div", blockProps, Object(external_gc_element_["createElement"])("div", blockProps, Object(external_gc_element_["createElement"])(external_gc_components_["Notice"], {
    status: 'warning',
    isDismissible: false
  }, Object(external_gc_i18n_["__"])('页面列表：无法检索页面。')))), totalPages === 0 && Object(external_gc_element_["createElement"])("div", blockProps, Object(external_gc_element_["createElement"])(external_gc_components_["Notice"], {
    status: 'info',
    isDismissible: false
  }, Object(external_gc_i18n_["__"])('页面列表：无法检索页面。'))), totalPages > 0 && Object(external_gc_element_["createElement"])("ul", blockProps, Object(external_gc_element_["createElement"])(edit_PageItems, {
    context: context,
    pagesByParentId: pagesByParentId
  })));
}

function useFrontPageId() {
  return Object(external_gc_data_["useSelect"])(select => {
    const site = select(external_gc_coreData_["store"]).getEntityRecord('root', 'site');
    return (site === null || site === void 0 ? void 0 : site.show_on_front) === 'page' && (site === null || site === void 0 ? void 0 : site.page_on_front);
  }, []);
}

function usePageData() {
  const {
    pages,
    hasResolvedPages
  } = Object(external_gc_data_["useSelect"])(select => {
    const {
      getEntityRecords,
      hasFinishedResolution
    } = select(external_gc_coreData_["store"]);
    return {
      pages: getEntityRecords('postType', 'page', {
        orderby: 'menu_order',
        order: 'asc',
        _fields: ['id', 'link', 'parent', 'title', 'menu_order'],
        per_page: -1
      }),
      hasResolvedPages: hasFinishedResolution('getEntityRecords', ['postType', 'page', {
        orderby: 'menu_order',
        order: 'asc',
        _fields: ['id', 'link', 'parent', 'title', 'menu_order'],
        per_page: -1
      }])
    };
  }, []);
  return Object(external_gc_element_["useMemo"])(() => {
    var _pages$length;

    // TODO: Once the REST API supports passing multiple values to
    // 'orderby', this can be removed.
    // https://core.trac.gechiui.com/ticket/39037
    const sortedPages = Object(external_lodash_["sortBy"])(pages, ['menu_order', 'title.rendered']);
    const pagesByParentId = sortedPages.reduce((accumulator, page) => {
      const {
        parent
      } = page;

      if (accumulator.has(parent)) {
        accumulator.get(parent).push(page);
      } else {
        accumulator.set(parent, [page]);
      }

      return accumulator;
    }, new Map());
    return {
      pagesByParentId,
      hasResolvedPages,
      totalPages: (_pages$length = pages === null || pages === void 0 ? void 0 : pages.length) !== null && _pages$length !== void 0 ? _pages$length : null
    };
  }, [pages, hasResolvedPages]);
}

const edit_PageItems = Object(external_gc_element_["memo"])(function PageItems(_ref2) {
  let {
    context,
    pagesByParentId,
    parentId = 0,
    depth = 0
  } = _ref2;
  const pages = pagesByParentId.get(parentId);
  const frontPageId = useFrontPageId();

  if (!(pages !== null && pages !== void 0 && pages.length)) {
    return [];
  }

  return pages.map(page => {
    var _page$title, _page$title2;

    const hasChildren = pagesByParentId.has(page.id);
    const isNavigationChild = ('showSubmenuIcon' in context);
    return Object(external_gc_element_["createElement"])("li", {
      key: page.id,
      className: classnames_default()('gc-block-pages-list__item', {
        'has-child': hasChildren,
        'gc-block-navigation-item': isNavigationChild,
        'open-on-click': context.openSubmenusOnClick,
        'open-on-hover-click': !context.openSubmenusOnClick && context.showSubmenuIcon,
        'menu-item-home': page.id === frontPageId
      })
    }, hasChildren && context.openSubmenusOnClick ? Object(external_gc_element_["createElement"])(ItemSubmenuToggle, {
      title: (_page$title = page.title) === null || _page$title === void 0 ? void 0 : _page$title.rendered
    }) : Object(external_gc_element_["createElement"])("a", {
      className: classnames_default()('gc-block-pages-list__item__link', {
        'gc-block-navigation-item__content': isNavigationChild
      }),
      href: page.link
    }, (_page$title2 = page.title) === null || _page$title2 === void 0 ? void 0 : _page$title2.rendered), hasChildren && Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, !context.openSubmenusOnClick && context.showSubmenuIcon && Object(external_gc_element_["createElement"])(ItemSubmenuToggle, null), Object(external_gc_element_["createElement"])("ul", {
      className: classnames_default()('submenu-container', {
        'gc-block-navigation__submenu-container': isNavigationChild
      })
    }, Object(external_gc_element_["createElement"])(PageItems, {
      context: context,
      pagesByParentId: pagesByParentId,
      parentId: page.id,
      depth: depth + 1
    }))));
  });
});

function ItemSubmenuToggle(_ref3) {
  let {
    title
  } = _ref3;
  return Object(external_gc_element_["createElement"])("button", {
    className: "gc-block-navigation-item__content gc-block-navigation-submenu__toggle",
    "aria-expanded": "false"
  }, title, Object(external_gc_element_["createElement"])("span", {
    className: "gc-block-page-list__submenu-icon gc-block-navigation__submenu-icon"
  }, Object(external_gc_element_["createElement"])(icons_ItemSubmenuIcon, null)));
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/page-list/index.js
/**
 * GeChiUI dependencies
 */

/**
 * Internal dependencies
 */

const page_list_metadata = {
  apiVersion: 2,
  name: "core/page-list",
  title: "页面列表",
  category: "widgets",
  description: "显示所有页面的列表。",
  keywords: ["menu", "navigation"],
  textdomain: "default",
  attributes: {},
  usesContext: ["textColor", "customTextColor", "backgroundColor", "customBackgroundColor", "overlayTextColor", "customOverlayTextColor", "overlayBackgroundColor", "customOverlayBackgroundColor", "fontSize", "customFontSize", "showSubmenuIcon", "style", "openSubmenusOnClick"],
  supports: {
    reusable: false,
    html: false
  },
  editorStyle: "gc-block-page-list-editor",
  style: "gc-block-page-list"
};

const {
  name: page_list_name
} = page_list_metadata;

const page_list_settings = {
  icon: library_pages,
  example: {},
  edit: PageListEdit
};

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/paragraph.js


/**
 * GeChiUI dependencies
 */

const paragraph = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M18.3 4H9.9v-.1l-.9.2c-2.3.4-4 2.4-4 4.8s1.7 4.4 4 4.8l.7.1V20h1.5V5.5h2.9V20h1.5V5.5h2.7V4z"
}));
/* harmony default export */ var library_paragraph = (paragraph);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/paragraph/deprecated.js


/**
 * External dependencies
 */


/**
 * GeChiUI dependencies
 */



const supports = {
  className: false
};
const paragraph_deprecated_blockAttributes = {
  align: {
    type: 'string'
  },
  content: {
    type: 'string',
    source: 'html',
    selector: 'p',
    default: ''
  },
  dropCap: {
    type: 'boolean',
    default: false
  },
  placeholder: {
    type: 'string'
  },
  textColor: {
    type: 'string'
  },
  backgroundColor: {
    type: 'string'
  },
  fontSize: {
    type: 'string'
  },
  direction: {
    type: 'string',
    enum: ['ltr', 'rtl']
  },
  style: {
    type: 'object'
  }
};

const migrateCustomColorsAndFontSizes = attributes => {
  if (!attributes.customTextColor && !attributes.customBackgroundColor && !attributes.customFontSize) {
    return attributes;
  }

  const style = {};

  if (attributes.customTextColor || attributes.customBackgroundColor) {
    style.color = {};
  }

  if (attributes.customTextColor) {
    style.color.text = attributes.customTextColor;
  }

  if (attributes.customBackgroundColor) {
    style.color.background = attributes.customBackgroundColor;
  }

  if (attributes.customFontSize) {
    style.typography = {
      fontSize: attributes.customFontSize
    };
  }

  return { ...Object(external_lodash_["omit"])(attributes, ['customTextColor', 'customBackgroundColor', 'customFontSize']),
    style
  };
};

const paragraph_deprecated_deprecated = [{
  supports,
  attributes: { ...Object(external_lodash_["omit"])(paragraph_deprecated_blockAttributes, ['style']),
    customTextColor: {
      type: 'string'
    },
    customBackgroundColor: {
      type: 'string'
    },
    customFontSize: {
      type: 'number'
    }
  },
  migrate: migrateCustomColorsAndFontSizes,

  save(_ref) {
    let {
      attributes
    } = _ref;
    const {
      align,
      content,
      dropCap,
      backgroundColor,
      textColor,
      customBackgroundColor,
      customTextColor,
      fontSize,
      customFontSize,
      direction
    } = attributes;
    const textClass = Object(external_gc_blockEditor_["getColorClassName"])('color', textColor);
    const backgroundClass = Object(external_gc_blockEditor_["getColorClassName"])('background-color', backgroundColor);
    const fontSizeClass = Object(external_gc_blockEditor_["getFontSizeClass"])(fontSize);
    const className = classnames_default()({
      'has-text-color': textColor || customTextColor,
      'has-background': backgroundColor || customBackgroundColor,
      'has-drop-cap': dropCap,
      [`has-text-align-${align}`]: align,
      [fontSizeClass]: fontSizeClass,
      [textClass]: textClass,
      [backgroundClass]: backgroundClass
    });
    const styles = {
      backgroundColor: backgroundClass ? undefined : customBackgroundColor,
      color: textClass ? undefined : customTextColor,
      fontSize: fontSizeClass ? undefined : customFontSize
    };
    return Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"].Content, {
      tagName: "p",
      style: styles,
      className: className ? className : undefined,
      value: content,
      dir: direction
    });
  }

}, {
  supports,
  attributes: { ...Object(external_lodash_["omit"])(paragraph_deprecated_blockAttributes, ['style']),
    customTextColor: {
      type: 'string'
    },
    customBackgroundColor: {
      type: 'string'
    },
    customFontSize: {
      type: 'number'
    }
  },
  migrate: migrateCustomColorsAndFontSizes,

  save(_ref2) {
    let {
      attributes
    } = _ref2;
    const {
      align,
      content,
      dropCap,
      backgroundColor,
      textColor,
      customBackgroundColor,
      customTextColor,
      fontSize,
      customFontSize,
      direction
    } = attributes;
    const textClass = Object(external_gc_blockEditor_["getColorClassName"])('color', textColor);
    const backgroundClass = Object(external_gc_blockEditor_["getColorClassName"])('background-color', backgroundColor);
    const fontSizeClass = Object(external_gc_blockEditor_["getFontSizeClass"])(fontSize);
    const className = classnames_default()({
      'has-text-color': textColor || customTextColor,
      'has-background': backgroundColor || customBackgroundColor,
      'has-drop-cap': dropCap,
      [fontSizeClass]: fontSizeClass,
      [textClass]: textClass,
      [backgroundClass]: backgroundClass
    });
    const styles = {
      backgroundColor: backgroundClass ? undefined : customBackgroundColor,
      color: textClass ? undefined : customTextColor,
      fontSize: fontSizeClass ? undefined : customFontSize,
      textAlign: align
    };
    return Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"].Content, {
      tagName: "p",
      style: styles,
      className: className ? className : undefined,
      value: content,
      dir: direction
    });
  }

}, {
  supports,
  attributes: { ...Object(external_lodash_["omit"])(paragraph_deprecated_blockAttributes, ['style']),
    customTextColor: {
      type: 'string'
    },
    customBackgroundColor: {
      type: 'string'
    },
    customFontSize: {
      type: 'number'
    },
    width: {
      type: 'string'
    }
  },
  migrate: migrateCustomColorsAndFontSizes,

  save(_ref3) {
    let {
      attributes
    } = _ref3;
    const {
      width,
      align,
      content,
      dropCap,
      backgroundColor,
      textColor,
      customBackgroundColor,
      customTextColor,
      fontSize,
      customFontSize
    } = attributes;
    const textClass = Object(external_gc_blockEditor_["getColorClassName"])('color', textColor);
    const backgroundClass = Object(external_gc_blockEditor_["getColorClassName"])('background-color', backgroundColor);
    const fontSizeClass = fontSize && `is-${fontSize}-text`;
    const className = classnames_default()({
      [`align${width}`]: width,
      'has-background': backgroundColor || customBackgroundColor,
      'has-drop-cap': dropCap,
      [fontSizeClass]: fontSizeClass,
      [textClass]: textClass,
      [backgroundClass]: backgroundClass
    });
    const styles = {
      backgroundColor: backgroundClass ? undefined : customBackgroundColor,
      color: textClass ? undefined : customTextColor,
      fontSize: fontSizeClass ? undefined : customFontSize,
      textAlign: align
    };
    return Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"].Content, {
      tagName: "p",
      style: styles,
      className: className ? className : undefined,
      value: content
    });
  }

}, {
  supports,
  attributes: Object(external_lodash_["omit"])({ ...paragraph_deprecated_blockAttributes,
    fontSize: {
      type: 'number'
    }
  }, ['style']),

  save(_ref4) {
    let {
      attributes
    } = _ref4;
    const {
      width,
      align,
      content,
      dropCap,
      backgroundColor,
      textColor,
      fontSize
    } = attributes;
    const className = classnames_default()({
      [`align${width}`]: width,
      'has-background': backgroundColor,
      'has-drop-cap': dropCap
    });
    const styles = {
      backgroundColor,
      color: textColor,
      fontSize,
      textAlign: align
    };
    return Object(external_gc_element_["createElement"])("p", {
      style: styles,
      className: className ? className : undefined
    }, content);
  },

  migrate(attributes) {
    return migrateCustomColorsAndFontSizes(Object(external_lodash_["omit"])({ ...attributes,
      customFontSize: Object(external_lodash_["isFinite"])(attributes.fontSize) ? attributes.fontSize : undefined,
      customTextColor: attributes.textColor && '#' === attributes.textColor[0] ? attributes.textColor : undefined,
      customBackgroundColor: attributes.backgroundColor && '#' === attributes.backgroundColor[0] ? attributes.backgroundColor : undefined
    }), ['fontSize', 'textColor', 'backgroundColor', 'style']);
  }

}, {
  supports,
  attributes: { ...paragraph_deprecated_blockAttributes,
    content: {
      type: 'string',
      source: 'html',
      default: ''
    }
  },

  save(_ref5) {
    let {
      attributes
    } = _ref5;
    return Object(external_gc_element_["createElement"])(external_gc_element_["RawHTML"], null, attributes.content);
  },

  migrate(attributes) {
    return attributes;
  }

}];
/* harmony default export */ var paragraph_deprecated = (paragraph_deprecated_deprecated);

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/format-ltr.js


/**
 * GeChiUI dependencies
 */

const formatLtr = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "-2 -2 24 24"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M5.52 2h7.43c.55 0 1 .45 1 1s-.45 1-1 1h-1v13c0 .55-.45 1-1 1s-1-.45-1-1V5c0-.55-.45-1-1-1s-1 .45-1 1v12c0 .55-.45 1-1 1s-1-.45-1-1v-5.96h-.43C3.02 11.04 1 9.02 1 6.52S3.02 2 5.52 2zM14 14l5-4-5-4v8z"
}));
/* harmony default export */ var format_ltr = (formatLtr);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/paragraph/edit.js



/**
 * External dependencies
 */

/**
 * GeChiUI dependencies
 */






const paragraph_edit_name = 'core/paragraph';

function ParagraphRTLControl(_ref) {
  let {
    direction,
    setDirection
  } = _ref;
  return Object(external_gc_i18n_["isRTL"])() && Object(external_gc_element_["createElement"])(external_gc_components_["ToolbarDropdownMenu"], {
    controls: [{
      icon: format_ltr,
      title: Object(external_gc_i18n_["_x"])('从左到右', 'editor button'),
      isActive: direction === 'ltr',

      onClick() {
        setDirection(direction === 'ltr' ? undefined : 'ltr');
      }

    }]
  });
}

function ParagraphBlock(_ref2) {
  let {
    attributes,
    mergeBlocks,
    onReplace,
    onRemove,
    setAttributes,
    clientId
  } = _ref2;
  const {
    align,
    content,
    direction,
    dropCap,
    placeholder
  } = attributes;
  const isDropCapFeatureEnabled = Object(external_gc_blockEditor_["useSetting"])('typography.dropCap');
  const blockProps = Object(external_gc_blockEditor_["useBlockProps"])({
    className: classnames_default()({
      'has-drop-cap': dropCap,
      [`has-text-align-${align}`]: align
    }),
    style: {
      direction
    }
  });
  return Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["BlockControls"], {
    group: "block"
  }, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["AlignmentControl"], {
    value: align,
    onChange: newAlign => setAttributes({
      align: newAlign
    })
  }), Object(external_gc_element_["createElement"])(ParagraphRTLControl, {
    direction: direction,
    setDirection: newDirection => setAttributes({
      direction: newDirection
    })
  })), isDropCapFeatureEnabled && Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InspectorControls"], null, Object(external_gc_element_["createElement"])(external_gc_components_["PanelBody"], {
    title: Object(external_gc_i18n_["__"])('文本设置')
  }, Object(external_gc_element_["createElement"])(external_gc_components_["ToggleControl"], {
    label: Object(external_gc_i18n_["__"])('首字下沉'),
    checked: !!dropCap,
    onChange: () => setAttributes({
      dropCap: !dropCap
    }),
    help: dropCap ? Object(external_gc_i18n_["__"])('显示大型首字母。') : Object(external_gc_i18n_["__"])('切换显示大型首字母。')
  }))), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"], Object(esm_extends["a" /* default */])({
    identifier: "content",
    tagName: "p"
  }, blockProps, {
    value: content,
    onChange: newContent => setAttributes({
      content: newContent
    }),
    onSplit: (value, isOriginal) => {
      let newAttributes;

      if (isOriginal || value) {
        newAttributes = { ...attributes,
          content: value
        };
      }

      const block = Object(external_gc_blocks_["createBlock"])(paragraph_edit_name, newAttributes);

      if (isOriginal) {
        block.clientId = clientId;
      }

      return block;
    },
    onMerge: mergeBlocks,
    onReplace: onReplace,
    onRemove: onRemove,
    "aria-label": content ? Object(external_gc_i18n_["__"])('段落区块') : Object(external_gc_i18n_["__"])('空区块；开始写作或按正斜杠来选择区块'),
    "data-empty": content ? false : true,
    placeholder: placeholder || Object(external_gc_i18n_["__"])('输入/来选择一个区块'),
    __unstableEmbedURLOnPaste: true,
    __unstableAllowPrefixTransformations: true
  })));
}

/* harmony default export */ var paragraph_edit = (ParagraphBlock);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/paragraph/save.js


/**
 * External dependencies
 */

/**
 * GeChiUI dependencies
 */


function paragraph_save_save(_ref) {
  let {
    attributes
  } = _ref;
  const {
    align,
    content,
    dropCap,
    direction
  } = attributes;
  const className = classnames_default()({
    'has-drop-cap': dropCap,
    [`has-text-align-${align}`]: align
  });
  return Object(external_gc_element_["createElement"])("p", external_gc_blockEditor_["useBlockProps"].save({
    className,
    dir: direction
  }), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"].Content, {
    value: content
  }));
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/paragraph/transforms.js
/**
 * GeChiUI dependencies
 */

/**
 * Internal dependencies
 */

const {
  name: paragraph_transforms_name
} = {
  apiVersion: 2,
  name: "core/paragraph",
  title: "段落",
  category: "text",
  description: "从所有叙事的基础部分开始。",
  keywords: ["text"],
  textdomain: "default",
  attributes: {
    align: {
      type: "string"
    },
    content: {
      type: "string",
      source: "html",
      selector: "p",
      "default": "",
      __experimentalRole: "content"
    },
    dropCap: {
      type: "boolean",
      "default": false
    },
    placeholder: {
      type: "string"
    },
    direction: {
      type: "string",
      "enum": ["ltr", "rtl"]
    }
  },
  supports: {
    anchor: true,
    className: false,
    color: {
      link: true
    },
    typography: {
      fontSize: true,
      lineHeight: true,
      __experimentalFontStyle: true,
      __experimentalFontWeight: true,
      __experimentalLetterSpacing: true,
      __experimentalTextTransform: true,
      __experimentalDefaultControls: {
        fontSize: true
      }
    },
    __experimentalSelector: "p",
    __unstablePasteTextInline: true
  },
  editorStyle: "gc-block-paragraph-editor",
  style: "gc-block-paragraph"
};
const paragraph_transforms_transforms = {
  from: [{
    type: 'raw',
    // Paragraph is a fallback and should be matched last.
    priority: 20,
    selector: 'p',
    schema: _ref => {
      let {
        phrasingContentSchema,
        isPaste
      } = _ref;
      return {
        p: {
          children: phrasingContentSchema,
          attributes: isPaste ? [] : ['style', 'id']
        }
      };
    },

    transform(node) {
      const attributes = Object(external_gc_blocks_["getBlockAttributes"])(paragraph_transforms_name, node.outerHTML);
      const {
        textAlign
      } = node.style || {};

      if (textAlign === 'left' || textAlign === 'center' || textAlign === 'right') {
        attributes.align = textAlign;
      }

      return Object(external_gc_blocks_["createBlock"])(paragraph_transforms_name, attributes);
    }

  }]
};
/* harmony default export */ var paragraph_transforms = (paragraph_transforms_transforms);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/paragraph/index.js
/**
 * External dependencies
 */

/**
 * GeChiUI dependencies
 */



/**
 * Internal dependencies
 */



const paragraph_metadata = {
  apiVersion: 2,
  name: "core/paragraph",
  title: "段落",
  category: "text",
  description: "从所有叙事的基础部分开始。",
  keywords: ["text"],
  textdomain: "default",
  attributes: {
    align: {
      type: "string"
    },
    content: {
      type: "string",
      source: "html",
      selector: "p",
      "default": "",
      __experimentalRole: "content"
    },
    dropCap: {
      type: "boolean",
      "default": false
    },
    placeholder: {
      type: "string"
    },
    direction: {
      type: "string",
      "enum": ["ltr", "rtl"]
    }
  },
  supports: {
    anchor: true,
    className: false,
    color: {
      link: true
    },
    typography: {
      fontSize: true,
      lineHeight: true,
      __experimentalFontStyle: true,
      __experimentalFontWeight: true,
      __experimentalLetterSpacing: true,
      __experimentalTextTransform: true,
      __experimentalDefaultControls: {
        fontSize: true
      }
    },
    __experimentalSelector: "p",
    __unstablePasteTextInline: true
  },
  editorStyle: "gc-block-paragraph-editor",
  style: "gc-block-paragraph"
};


const {
  name: paragraph_name
} = paragraph_metadata;

const paragraph_settings = {
  icon: library_paragraph,
  example: {
    attributes: {
      content: Object(external_gc_i18n_["__"])('曼查有个地方，地名就不用提了，不久前住着一位贵族。他那类贵族，矛架上有一支长矛，还有一面皮盾、一匹瘦马和一只猎兔狗。'),
      style: {
        typography: {
          fontSize: 28
        }
      },
      dropCap: true
    }
  },

  __experimentalLabel(attributes, _ref) {
    let {
      context
    } = _ref;

    if (context === 'accessibility') {
      const {
        content
      } = attributes;
      return Object(external_lodash_["isEmpty"])(content) ? Object(external_gc_i18n_["__"])('空') : content;
    }
  },

  transforms: paragraph_transforms,
  deprecated: paragraph_deprecated,

  merge(attributes, attributesToMerge) {
    return {
      content: (attributes.content || '') + (attributesToMerge.content || '')
    };
  },

  edit: paragraph_edit,
  save: paragraph_save_save
};

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/post-author/edit.js


/**
 * External dependencies
 */


/**
 * GeChiUI dependencies
 */







function PostAuthorEdit(_ref) {
  let {
    isSelected,
    context: {
      postType,
      postId,
      queryId
    },
    attributes,
    setAttributes
  } = _ref;
  const isDescendentOfQueryLoop = Number.isFinite(queryId);
  const {
    authorId,
    authorDetails,
    authors
  } = Object(external_gc_data_["useSelect"])(select => {
    var _getEditedEntityRecor;

    const {
      getEditedEntityRecord,
      getUser,
      getUsers
    } = select(external_gc_coreData_["store"]);

    const _authorId = (_getEditedEntityRecor = getEditedEntityRecord('postType', postType, postId)) === null || _getEditedEntityRecor === void 0 ? void 0 : _getEditedEntityRecor.author;

    return {
      authorId: _authorId,
      authorDetails: _authorId ? getUser(_authorId) : null,
      authors: getUsers({
        who: 'authors'
      })
    };
  }, [postType, postId]);
  const {
    editEntityRecord
  } = Object(external_gc_data_["useDispatch"])(external_gc_coreData_["store"]);
  const {
    textAlign,
    showAvatar,
    showBio,
    byline
  } = attributes;
  const avatarSizes = [];

  if (authorDetails) {
    Object(external_lodash_["forEach"])(authorDetails.avatar_urls, (url, size) => {
      avatarSizes.push({
        value: size,
        label: `${size} x ${size}`
      });
    });
  }

  const blockProps = Object(external_gc_blockEditor_["useBlockProps"])({
    className: classnames_default()({
      [`has-text-align-${textAlign}`]: textAlign
    })
  });
  return Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InspectorControls"], null, Object(external_gc_element_["createElement"])(external_gc_components_["PanelBody"], {
    title: Object(external_gc_i18n_["__"])('作者设置')
  }, !isDescendentOfQueryLoop && !!(authors !== null && authors !== void 0 && authors.length) && Object(external_gc_element_["createElement"])(external_gc_components_["SelectControl"], {
    label: Object(external_gc_i18n_["__"])('作者'),
    value: authorId,
    options: authors.map(_ref2 => {
      let {
        id,
        name
      } = _ref2;
      return {
        value: id,
        label: name
      };
    }),
    onChange: nextAuthorId => {
      editEntityRecord('postType', postType, postId, {
        author: nextAuthorId
      });
    }
  }), Object(external_gc_element_["createElement"])(external_gc_components_["ToggleControl"], {
    label: Object(external_gc_i18n_["__"])('显示头像'),
    checked: showAvatar,
    onChange: () => setAttributes({
      showAvatar: !showAvatar
    })
  }), showAvatar && Object(external_gc_element_["createElement"])(external_gc_components_["SelectControl"], {
    label: Object(external_gc_i18n_["__"])('头像大小'),
    value: attributes.avatarSize,
    options: avatarSizes,
    onChange: size => {
      setAttributes({
        avatarSize: Number(size)
      });
    }
  }), Object(external_gc_element_["createElement"])(external_gc_components_["ToggleControl"], {
    label: Object(external_gc_i18n_["__"])('显示简历'),
    checked: showBio,
    onChange: () => setAttributes({
      showBio: !showBio
    })
  }))), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["BlockControls"], {
    group: "block"
  }, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["AlignmentControl"], {
    value: textAlign,
    onChange: nextAlign => {
      setAttributes({
        textAlign: nextAlign
      });
    }
  })), Object(external_gc_element_["createElement"])("div", blockProps, showAvatar && authorDetails && Object(external_gc_element_["createElement"])("div", {
    className: "gc-block-post-author__avatar"
  }, Object(external_gc_element_["createElement"])("img", {
    width: attributes.avatarSize,
    src: authorDetails.avatar_urls[attributes.avatarSize],
    alt: authorDetails.name
  })), Object(external_gc_element_["createElement"])("div", {
    className: "gc-block-post-author__content"
  }, (!external_gc_blockEditor_["RichText"].isEmpty(byline) || isSelected) && Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"], {
    className: "gc-block-post-author__byline",
    multiline: false,
    "aria-label": Object(external_gc_i18n_["__"])('作者署名文字'),
    placeholder: Object(external_gc_i18n_["__"])('写署名...'),
    value: byline,
    onChange: value => setAttributes({
      byline: value
    })
  }), Object(external_gc_element_["createElement"])("p", {
    className: "gc-block-post-author__name"
  }, (authorDetails === null || authorDetails === void 0 ? void 0 : authorDetails.name) || Object(external_gc_i18n_["__"])('文章作者')), showBio && Object(external_gc_element_["createElement"])("p", {
    className: "gc-block-post-author__bio"
  }, authorDetails === null || authorDetails === void 0 ? void 0 : authorDetails.description))));
}

/* harmony default export */ var post_author_edit = (PostAuthorEdit);

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/post-author.js


/**
 * GeChiUI dependencies
 */

const postAuthor = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  viewBox: "0 0 24 24",
  xmlns: "http://www.w3.org/2000/svg"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M10 4.5a1 1 0 11-2 0 1 1 0 012 0zm1.5 0a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0zm2.25 7.5v-1A2.75 2.75 0 0011 8.25H7A2.75 2.75 0 004.25 11v1h1.5v-1c0-.69.56-1.25 1.25-1.25h4c.69 0 1.25.56 1.25 1.25v1h1.5zM4 20h9v-1.5H4V20zm16-4H4v-1.5h16V16z",
  fillRule: "evenodd",
  clipRule: "evenodd"
}));
/* harmony default export */ var post_author = (postAuthor);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/post-author/index.js
/**
 * Internal dependencies
 */
const post_author_metadata = {
  apiVersion: 2,
  name: "core/post-author",
  title: "文章作者",
  category: "theme",
  description: "添加此文章的作者。",
  textdomain: "default",
  attributes: {
    textAlign: {
      type: "string"
    },
    avatarSize: {
      type: "number",
      "default": 48
    },
    showAvatar: {
      type: "boolean",
      "default": true
    },
    showBio: {
      type: "boolean"
    },
    byline: {
      type: "string"
    }
  },
  usesContext: ["postType", "postId", "queryId"],
  supports: {
    html: false,
    spacing: {
      margin: true,
      padding: true
    },
    typography: {
      fontSize: true,
      lineHeight: true,
      __experimentalFontStyle: true,
      __experimentalFontWeight: true,
      __experimentalLetterSpacing: true,
      __experimentalTextTransform: true,
      __experimentalDefaultControls: {
        fontSize: true
      }
    },
    color: {
      gradients: true,
      link: true,
      __experimentalDuotone: ".gc-block-post-author__avatar img"
    }
  },
  editorStyle: "gc-block-post-author-editor",
  style: "gc-block-post-author"
};

/**
 * GeChiUI dependencies
 */


const {
  name: post_author_name
} = post_author_metadata;

const post_author_settings = {
  icon: post_author,
  edit: post_author_edit
};

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/post-comments.js


/**
 * GeChiUI dependencies
 */

const postComments = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M14 10.1V4c0-.6-.4-1-1-1H5c-.6 0-1 .4-1 1v8.3c0 .3.2.7.6.8.1.1.2.1.3.1.2 0 .5-.1.6-.3l1.8-1.8H13c.6 0 1-.4 1-1zm-1.5-.5H6.7l-1.2 1.2V4.5h7v5.1zM19 12h-8c-.6 0-1 .4-1 1v6.1c0 .6.4 1 1 1h5.7l1.8 1.8c.1.2.4.3.6.3.1 0 .2 0 .3-.1.4-.1.6-.5.6-.8V13c0-.6-.4-1-1-1zm-.5 7.8l-1.2-1.2h-5.8v-5.1h7v6.3z"
}));
/* harmony default export */ var post_comments = (postComments);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/post-comments/edit.js


/**
 * External dependencies
 */

/**
 * GeChiUI dependencies
 */







function PostCommentsDisplay(_ref) {
  let {
    postId
  } = _ref;
  return Object(external_gc_data_["useSelect"])(select => {
    const comments = select(external_gc_coreData_["store"]).getEntityRecords('root', 'comment', {
      post: postId
    }); // TODO: "No Comments" placeholder should be editable.

    return comments && comments.length ? comments.map(comment => Object(external_gc_element_["createElement"])(external_gc_element_["RawHTML"], {
      className: "gc-block-post-comments__comment",
      key: comment.id
    }, comment.content.rendered)) : Object(external_gc_i18n_["__"])('没有评论');
  }, [postId]);
}

function PostCommentsEdit(_ref2) {
  let {
    attributes,
    setAttributes,
    context
  } = _ref2;
  const {
    postType,
    postId
  } = context;
  const {
    textAlign
  } = attributes;
  const blockProps = Object(external_gc_blockEditor_["useBlockProps"])({
    className: classnames_default()({
      [`has-text-align-${textAlign}`]: textAlign
    })
  });

  if (!postType || !postId) {
    return Object(external_gc_element_["createElement"])("div", blockProps, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["Warning"], null, Object(external_gc_i18n_["__"])('文章评论区块：未找到文章。')));
  }

  return Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["BlockControls"], {
    group: "block"
  }, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["AlignmentControl"], {
    value: textAlign,
    onChange: nextAlign => {
      setAttributes({
        textAlign: nextAlign
      });
    }
  })), Object(external_gc_element_["createElement"])("div", blockProps, Object(external_gc_element_["createElement"])(PostCommentsDisplay, {
    postId: postId
  })));
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/post-comments/index.js
/**
 * GeChiUI dependencies
 */

/**
 * Internal dependencies
 */

const post_comments_metadata = {
  apiVersion: 2,
  name: "core/post-comments",
  title: "文章评论",
  category: "theme",
  description: "显示文章的评论。",
  textdomain: "default",
  attributes: {
    textAlign: {
      type: "string"
    }
  },
  usesContext: ["postId", "postType"],
  supports: {
    html: false,
    align: ["wide", "full"],
    typography: {
      fontSize: true,
      lineHeight: true,
      __experimentalFontStyle: true,
      __experimentalFontWeight: true,
      __experimentalLetterSpacing: true,
      __experimentalTextTransform: true,
      __experimentalDefaultControls: {
        fontSize: true
      }
    },
    color: {
      gradients: true,
      link: true
    }
  },
  style: ["gc-block-post-comments", "gc-block-buttons", "gc-block-button"]
};

const {
  name: post_comments_name
} = post_comments_metadata;

const post_comments_settings = {
  icon: post_comments,
  edit: PostCommentsEdit
};

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/post-content.js


/**
 * GeChiUI dependencies
 */

const postContent = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  xmlns: "https://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M4 20h16v-1.5H4V20zm0-4.8h16v-1.5H4v1.5zm0-6.4v1.5h16V8.8H4zM16 4H4v1.5h12V4z"
}));
/* harmony default export */ var post_content = (postContent);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/utils/hooks.js
/**
 * GeChiUI dependencies
 */


/**
 * Returns whether the current user can edit the given entity.
 *
 * @param {string} kind     Entity kind.
 * @param {string} name     Entity name.
 * @param {string} recordId Record's id.
 */

function useCanEditEntity(kind, name, recordId) {
  return Object(external_gc_data_["useSelect"])(select => select(external_gc_coreData_["store"]).canUserEditEntityRecord(kind, name, recordId), [kind, name, recordId]);
}
/* harmony default export */ var hooks = ({
  useCanEditEntity
});

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/post-content/edit.js


/**
 * GeChiUI dependencies
 */





/**
 * Internal dependencies
 */



function ReadOnlyContent(_ref) {
  let {
    userCanEdit,
    postType,
    postId
  } = _ref;
  const [,, content] = Object(external_gc_coreData_["useEntityProp"])('postType', postType, 'content', postId);
  const blockProps = Object(external_gc_blockEditor_["useBlockProps"])();
  return content !== null && content !== void 0 && content.protected && !userCanEdit ? Object(external_gc_element_["createElement"])("div", blockProps, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["Warning"], null, Object(external_gc_i18n_["__"])('此内容受密码保护。'))) : Object(external_gc_element_["createElement"])("div", blockProps, Object(external_gc_element_["createElement"])(external_gc_element_["RawHTML"], {
    key: "html"
  }, content === null || content === void 0 ? void 0 : content.rendered));
}

function EditableContent(_ref2) {
  let {
    layout,
    context = {}
  } = _ref2;
  const {
    postType,
    postId
  } = context;
  const themeSupportsLayout = Object(external_gc_data_["useSelect"])(select => {
    var _getSettings;

    const {
      getSettings
    } = select(external_gc_blockEditor_["store"]);
    return (_getSettings = getSettings()) === null || _getSettings === void 0 ? void 0 : _getSettings.supportsLayout;
  }, []);
  const defaultLayout = Object(external_gc_blockEditor_["useSetting"])('layout') || {};
  const usedLayout = !!layout && layout.inherit ? defaultLayout : layout;
  const [blocks, onInput, onChange] = Object(external_gc_coreData_["useEntityBlockEditor"])('postType', postType, {
    id: postId
  });
  const props = Object(external_gc_blockEditor_["useInnerBlocksProps"])(Object(external_gc_blockEditor_["useBlockProps"])({
    className: 'entry-content'
  }), {
    value: blocks,
    onInput,
    onChange,
    __experimentalLayout: themeSupportsLayout ? usedLayout : undefined
  });
  return Object(external_gc_element_["createElement"])("div", props);
}

function Content(props) {
  const {
    context: {
      queryId,
      postType,
      postId
    } = {}
  } = props;
  const isDescendentOfQueryLoop = Number.isFinite(queryId);
  const userCanEdit = useCanEditEntity('postType', postType, postId);
  const isEditable = userCanEdit && !isDescendentOfQueryLoop;
  return isEditable ? Object(external_gc_element_["createElement"])(EditableContent, props) : Object(external_gc_element_["createElement"])(ReadOnlyContent, {
    userCanEdit: userCanEdit,
    postType: postType,
    postId: postId
  });
}

function edit_Placeholder() {
  const blockProps = Object(external_gc_blockEditor_["useBlockProps"])();
  return Object(external_gc_element_["createElement"])("div", blockProps, Object(external_gc_element_["createElement"])("p", null, Object(external_gc_i18n_["__"])('文章内容')));
}

function RecursionError() {
  const blockProps = Object(external_gc_blockEditor_["useBlockProps"])();
  return Object(external_gc_element_["createElement"])("div", blockProps, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["Warning"], null, Object(external_gc_i18n_["__"])('区块不能在其内部渲染。')));
}

function PostContentEdit(_ref3) {
  let {
    context,
    attributes
  } = _ref3;
  const {
    postId: contextPostId,
    postType: contextPostType
  } = context;
  const {
    layout = {}
  } = attributes;
  const [hasAlreadyRendered, RecursionProvider] = Object(external_gc_blockEditor_["__experimentalUseNoRecursiveRenders"])(contextPostId);

  if (contextPostId && contextPostType && hasAlreadyRendered) {
    return Object(external_gc_element_["createElement"])(RecursionError, null);
  }

  return Object(external_gc_element_["createElement"])(RecursionProvider, null, contextPostId && contextPostType ? Object(external_gc_element_["createElement"])(Content, {
    context: context,
    layout: layout
  }) : Object(external_gc_element_["createElement"])(edit_Placeholder, null));
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/post-content/index.js
/**
 * GeChiUI dependencies
 */

/**
 * Internal dependencies
 */

const post_content_metadata = {
  apiVersion: 2,
  name: "core/post-content",
  title: "文章内容",
  category: "theme",
  description: "显示文章的或页面的内容。",
  textdomain: "default",
  usesContext: ["postId", "postType", "queryId"],
  supports: {
    align: ["wide", "full"],
    html: false,
    __experimentalLayout: true
  },
  editorStyle: "gc-block-post-content-editor"
};

const {
  name: post_content_name
} = post_content_metadata;

const post_content_settings = {
  icon: post_content,
  edit: PostContentEdit
};

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/post-date.js


/**
 * GeChiUI dependencies
 */

const post_date_postDate = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M11.696 13.972c.356-.546.599-.958.728-1.235a1.79 1.79 0 00.203-.783c0-.264-.077-.47-.23-.618-.148-.153-.354-.23-.618-.23-.295 0-.569.07-.82.212a3.413 3.413 0 00-.738.571l-.147-1.188c.289-.234.59-.41.903-.526.313-.117.66-.175 1.041-.175.375 0 .695.08.959.24.264.153.46.362.59.626.135.265.203.556.203.876 0 .362-.08.734-.24 1.115-.154.381-.427.87-.82 1.466l-.756 1.152H14v1.106h-4l1.696-2.609z"
}), Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M19.5 7h-15v12a.5.5 0 00.5.5h14a.5.5 0 00.5-.5V7zM3 7V5a2 2 0 012-2h14a2 2 0 012 2v14a2 2 0 01-2 2H5a2 2 0 01-2-2V7z"
}));
/* harmony default export */ var post_date = (post_date_postDate);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/post-date/edit.js


/**
 * External dependencies
 */

/**
 * GeChiUI dependencies
 */









function PostDateEdit(_ref) {
  let {
    attributes: {
      textAlign,
      format,
      isLink
    },
    context: {
      postId,
      postType,
      queryId
    },
    setAttributes
  } = _ref;
  const isDescendentOfQueryLoop = Number.isFinite(queryId);
  const [siteFormat] = Object(external_gc_coreData_["useEntityProp"])('root', 'site', 'date_format');
  const [date, setDate] = Object(external_gc_coreData_["useEntityProp"])('postType', postType, 'date', postId);

  const settings = Object(external_gc_date_["__experimentalGetSettings"])(); // To know if the current time format is a 12 hour time, look for "a".
  // Also make sure this "a" is not escaped by a "/".


  const is12Hour = /a(?!\\)/i.test(settings.formats.time.toLowerCase() // Test only for the lower case "a".
  .replace(/\\\\/g, '') // Replace "//" with empty strings.
  .split('').reverse().join('') // Reverse the string and test for "a" not followed by a slash.
  );
  const formatOptions = Object.values(settings.formats).map(formatOption => ({
    key: formatOption,
    name: Object(external_gc_date_["dateI18n"])(formatOption, date)
  }));
  const resolvedFormat = format || siteFormat || settings.formats.date;
  const blockProps = Object(external_gc_blockEditor_["useBlockProps"])({
    className: classnames_default()({
      [`has-text-align-${textAlign}`]: textAlign
    })
  });
  const timeRef = Object(external_gc_element_["useRef"])();
  let postDate = date ? Object(external_gc_element_["createElement"])("time", {
    dateTime: Object(external_gc_date_["dateI18n"])('c', date),
    ref: timeRef
  }, Object(external_gc_date_["dateI18n"])(resolvedFormat, date)) : Object(external_gc_i18n_["__"])('文章日期');

  if (isLink && date) {
    postDate = Object(external_gc_element_["createElement"])("a", {
      href: "#post-date-pseudo-link",
      onClick: event => event.preventDefault()
    }, postDate);
  }

  return Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["BlockControls"], {
    group: "block"
  }, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["AlignmentControl"], {
    value: textAlign,
    onChange: nextAlign => {
      setAttributes({
        textAlign: nextAlign
      });
    }
  }), date && !isDescendentOfQueryLoop && Object(external_gc_element_["createElement"])(external_gc_components_["ToolbarGroup"], null, Object(external_gc_element_["createElement"])(external_gc_components_["Dropdown"], {
    popoverProps: {
      anchorRef: timeRef.current
    },
    renderContent: () => Object(external_gc_element_["createElement"])(external_gc_components_["DateTimePicker"], {
      currentDate: date,
      onChange: setDate,
      is12Hour: is12Hour
    }),
    renderToggle: _ref2 => {
      let {
        isOpen,
        onToggle
      } = _ref2;

      const openOnArrowDown = event => {
        if (!isOpen && event.keyCode === external_gc_keycodes_["DOWN"]) {
          event.preventDefault();
          onToggle();
        }
      };

      return Object(external_gc_element_["createElement"])(external_gc_components_["ToolbarButton"], {
        "aria-expanded": isOpen,
        icon: library_edit["a" /* default */],
        title: Object(external_gc_i18n_["__"])('变更日期'),
        onClick: onToggle,
        onKeyDown: openOnArrowDown
      });
    }
  }))), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InspectorControls"], null, Object(external_gc_element_["createElement"])(external_gc_components_["PanelBody"], {
    title: Object(external_gc_i18n_["__"])('格式设置')
  }, Object(external_gc_element_["createElement"])(external_gc_components_["CustomSelectControl"], {
    hideLabelFromVision: true,
    label: Object(external_gc_i18n_["__"])('日期格式'),
    options: formatOptions,
    onChange: _ref3 => {
      let {
        selectedItem
      } = _ref3;
      return setAttributes({
        format: selectedItem.key
      });
    },
    value: formatOptions.find(option => option.key === resolvedFormat)
  })), Object(external_gc_element_["createElement"])(external_gc_components_["PanelBody"], {
    title: Object(external_gc_i18n_["__"])('链接设置')
  }, Object(external_gc_element_["createElement"])(external_gc_components_["ToggleControl"], {
    label: Object(external_gc_i18n_["sprintf"])( // translators: %s: Name of the post type e.g: "post".
    Object(external_gc_i18n_["__"])('到%s的链接'), postType),
    onChange: () => setAttributes({
      isLink: !isLink
    }),
    checked: isLink
  }))), Object(external_gc_element_["createElement"])("div", blockProps, postDate));
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/post-date/deprecated.js
/**
 * Internal dependencies
 */

const post_date_deprecated_v1 = {
  attributes: {
    textAlign: {
      type: 'string'
    },
    format: {
      type: 'string'
    },
    isLink: {
      type: 'boolean',
      default: false
    }
  },
  supports: {
    html: false,
    color: {
      gradients: true,
      link: true
    },
    typography: {
      fontSize: true,
      lineHeight: true,
      __experimentalFontFamily: true,
      __experimentalFontWeight: true,
      __experimentalFontStyle: true,
      __experimentalTextTransform: true,
      __experimentalLetterSpacing: true
    }
  },

  save() {
    return null;
  },

  migrate: migrate_font_family,

  isEligible(_ref) {
    var _style$typography;

    let {
      style
    } = _ref;
    return style === null || style === void 0 ? void 0 : (_style$typography = style.typography) === null || _style$typography === void 0 ? void 0 : _style$typography.fontFamily;
  }

};
/**
 * New deprecations need to be placed first
 * for them to have higher priority.
 *
 * Old deprecations may need to be updated as well.
 *
 * See block-deprecation.md
 */

/* harmony default export */ var post_date_deprecated = ([post_date_deprecated_v1]);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/post-date/index.js
/**
 * GeChiUI dependencies
 */

/**
 * Internal dependencies
 */

const post_date_metadata = {
  apiVersion: 2,
  name: "core/post-date",
  title: "文章日期",
  category: "theme",
  description: "添加此文章的日期。",
  textdomain: "default",
  attributes: {
    textAlign: {
      type: "string"
    },
    format: {
      type: "string"
    },
    isLink: {
      type: "boolean",
      "default": false
    }
  },
  usesContext: ["postId", "postType", "queryId"],
  supports: {
    html: false,
    color: {
      gradients: true,
      link: true
    },
    typography: {
      fontSize: true,
      lineHeight: true,
      __experimentalFontFamily: true,
      __experimentalFontWeight: true,
      __experimentalFontStyle: true,
      __experimentalTextTransform: true,
      __experimentalLetterSpacing: true,
      __experimentalDefaultControls: {
        fontSize: true
      }
    }
  }
};


const {
  name: post_date_name
} = post_date_metadata;

const post_date_settings = {
  icon: post_date,
  edit: PostDateEdit,
  deprecated: post_date_deprecated
};

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/post-excerpt.js


/**
 * GeChiUI dependencies
 */

const post_excerpt_postExcerpt = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M12.75 9.333c0 .521-.102.977-.327 1.354-.23.386-.555.628-.893.774-.545.234-1.183.227-1.544.222l-.12-.001v-1.5h.123c.414.001.715.002.948-.099a.395.395 0 00.199-.166c.05-.083.114-.253.114-.584V7.2H8.8V4h3.95v5.333zM7.95 9.333c0 .521-.102.977-.327 1.354-.23.386-.555.628-.893.774-.545.234-1.183.227-1.544.222l-.12-.001v-1.5h.123c.414.001.715.002.948-.099a.394.394 0 00.198-.166c.05-.083.115-.253.115-.584V7.2H4V4h3.95v5.333zM13 20H4v-1.5h9V20zM20 16H4v-1.5h16V16z"
}));
/* harmony default export */ var post_excerpt = (post_excerpt_postExcerpt);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/post-excerpt/edit.js


/**
 * External dependencies
 */

/**
 * GeChiUI dependencies
 */






/**
 * Internal dependencies
 */


function PostExcerptEditor(_ref) {
  let {
    attributes: {
      textAlign,
      moreText,
      showMoreOnNewLine
    },
    setAttributes,
    isSelected,
    context: {
      postId,
      postType,
      queryId
    }
  } = _ref;
  const isDescendentOfQueryLoop = Number.isFinite(queryId);
  const userCanEdit = useCanEditEntity('postType', postType, postId);
  const isEditable = userCanEdit && !isDescendentOfQueryLoop;
  const [rawExcerpt, setExcerpt, {
    rendered: renderedExcerpt,
    protected: isProtected
  } = {}] = Object(external_gc_coreData_["useEntityProp"])('postType', postType, 'excerpt', postId);
  const blockProps = Object(external_gc_blockEditor_["useBlockProps"])({
    className: classnames_default()({
      [`has-text-align-${textAlign}`]: textAlign
    })
  });
  /**
   * When excerpt is editable, strip the html tags from
   * rendered excerpt. This will be used if the entity's
   * excerpt has been produced from the content.
   */

  const strippedRenderedExcerpt = Object(external_gc_element_["useMemo"])(() => {
    if (!renderedExcerpt) return '';
    const document = new window.DOMParser().parseFromString(renderedExcerpt, 'text/html');
    return document.body.textContent || document.body.innerText || '';
  }, [renderedExcerpt]);

  if (!postType || !postId) {
    return Object(external_gc_element_["createElement"])("div", blockProps, Object(external_gc_i18n_["__"])('文章摘要'));
  }

  if (isProtected && !userCanEdit) {
    return Object(external_gc_element_["createElement"])("div", blockProps, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["Warning"], null, Object(external_gc_i18n_["__"])('无法提供摘要。这是一篇受保护的文章。')));
  }

  const readMoreLink = Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"], {
    className: "gc-block-post-excerpt__more-link",
    tagName: "a",
    "aria-label": Object(external_gc_i18n_["__"])('“阅读更多”链接文字'),
    placeholder: Object(external_gc_i18n_["__"])('添加“阅读更多”链接文字'),
    value: moreText,
    onChange: newMoreText => setAttributes({
      moreText: newMoreText
    }),
    withoutInteractiveFormatting: true
  });
  const excerptContent = isEditable ? Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"], {
    className: !showMoreOnNewLine && 'gc-block-post-excerpt__excerpt is-inline',
    "aria-label": Object(external_gc_i18n_["__"])('文章摘要文本'),
    value: rawExcerpt || strippedRenderedExcerpt || (isSelected ? '' : Object(external_gc_i18n_["__"])('找不到文章摘要')),
    onChange: setExcerpt
  }) : renderedExcerpt && Object(external_gc_element_["createElement"])(external_gc_components_["Disabled"], null, Object(external_gc_element_["createElement"])(external_gc_element_["RawHTML"], {
    key: "html"
  }, renderedExcerpt)) || Object(external_gc_i18n_["__"])('找不到文章摘要');
  return Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["BlockControls"], null, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["AlignmentToolbar"], {
    value: textAlign,
    onChange: newAlign => setAttributes({
      textAlign: newAlign
    })
  })), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InspectorControls"], null, Object(external_gc_element_["createElement"])(external_gc_components_["PanelBody"], {
    title: Object(external_gc_i18n_["__"])('文章摘要设置')
  }, Object(external_gc_element_["createElement"])(external_gc_components_["ToggleControl"], {
    label: Object(external_gc_i18n_["__"])('在新行上显示链接'),
    checked: showMoreOnNewLine,
    onChange: newShowMoreOnNewLine => setAttributes({
      showMoreOnNewLine: newShowMoreOnNewLine
    })
  }))), Object(external_gc_element_["createElement"])("div", blockProps, excerptContent, !showMoreOnNewLine && ' ', showMoreOnNewLine ? Object(external_gc_element_["createElement"])("p", {
    className: "gc-block-post-excerpt__more-text"
  }, readMoreLink) : readMoreLink));
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/post-excerpt/index.js
/**
 * GeChiUI dependencies
 */

/**
 * Internal dependencies
 */

const post_excerpt_metadata = {
  apiVersion: 2,
  name: "core/post-excerpt",
  title: "文章摘要",
  category: "theme",
  description: "显示文章的摘要。",
  textdomain: "default",
  attributes: {
    textAlign: {
      type: "string"
    },
    moreText: {
      type: "string"
    },
    showMoreOnNewLine: {
      type: "boolean",
      "default": true
    }
  },
  usesContext: ["postId", "postType", "queryId"],
  supports: {
    html: false,
    color: {
      gradients: true,
      link: true
    },
    spacing: {
      margin: true,
      padding: true
    },
    typography: {
      fontSize: true,
      lineHeight: true,
      __experimentalFontStyle: true,
      __experimentalFontWeight: true,
      __experimentalLetterSpacing: true,
      __experimentalTextTransform: true,
      __experimentalDefaultControls: {
        fontSize: true
      }
    }
  },
  editorStyle: "gc-block-post-excerpt-editor",
  style: "gc-block-post-excerpt"
};

const {
  name: post_excerpt_name
} = post_excerpt_metadata;

const post_excerpt_settings = {
  icon: post_excerpt,
  edit: PostExcerptEditor
};

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/post-featured-image.js


/**
 * GeChiUI dependencies
 */

const postFeaturedImage = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M19 3H5c-.6 0-1 .4-1 1v7c0 .5.4 1 1 1h14c.5 0 1-.4 1-1V4c0-.6-.4-1-1-1zM5.5 10.5v-.4l1.8-1.3 1.3.8c.3.2.7.2.9-.1L11 8.1l2.4 2.4H5.5zm13 0h-2.9l-4-4c-.3-.3-.8-.3-1.1 0L8.9 8l-1.2-.8c-.3-.2-.6-.2-.9 0l-1.3 1V4.5h13v6zM4 20h9v-1.5H4V20zm0-4h16v-1.5H4V16z"
}));
/* harmony default export */ var post_featured_image = (postFeaturedImage);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/post-featured-image/dimension-controls.js


/**
 * GeChiUI dependencies
 */



const SCALE_OPTIONS = Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])(external_gc_components_["__experimentalToggleGroupControlOption"], {
  value: "cover",
  label: Object(external_gc_i18n_["_x"])('覆盖', 'Scale option for Image dimension control')
}), Object(external_gc_element_["createElement"])(external_gc_components_["__experimentalToggleGroupControlOption"], {
  value: "contain",
  label: Object(external_gc_i18n_["_x"])('包含', 'Scale option for Image dimension control')
}), Object(external_gc_element_["createElement"])(external_gc_components_["__experimentalToggleGroupControlOption"], {
  value: "fill",
  label: Object(external_gc_i18n_["_x"])('填满', 'Scale option for Image dimension control')
}));
const DEFAULT_SCALE = 'cover';
const scaleHelp = {
  cover: Object(external_gc_i18n_["__"])('缩放或裁剪图片用以填充整个空间而不失真。'),
  contain: Object(external_gc_i18n_["__"])('缩放图片用以填充空间而不会剪裁或失真。'),
  fill: Object(external_gc_i18n_["__"])('图片将拉伸并失真以完全填满空间。')
};

const DimensionControls = _ref => {
  let {
    clientId,
    attributes: {
      width,
      height,
      scale
    },
    setAttributes
  } = _ref;
  const defaultUnits = ['px', '%', 'vw', 'em', 'rem'];
  const units = Object(external_gc_components_["__experimentalUseCustomUnits"])({
    availableUnits: Object(external_gc_blockEditor_["useSetting"])('spacing.units') || defaultUnits
  });

  const onDimensionChange = (dimension, nextValue) => {
    const parsedValue = parseFloat(nextValue);
    /**
     * If we have no value set and we change the unit,
     * we don't want to set the attribute, as it would
     * end up having the unit as value without any number.
     */

    if (isNaN(parsedValue) && nextValue) return;
    setAttributes({
      [dimension]: parsedValue < 0 ? '0' : nextValue
    });
  };

  const scaleLabel = Object(external_gc_i18n_["_x"])('缩放', 'Image scaling options');

  return Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InspectorControls"], {
    __experimentalGroup: "dimensions"
  }, Object(external_gc_element_["createElement"])(external_gc_components_["__experimentalToolsPanelItem"], {
    className: "single-column",
    hasValue: () => !!height,
    label: Object(external_gc_i18n_["__"])('高度'),
    onDeselect: () => setAttributes({
      height: undefined
    }),
    resetAllFilter: () => ({
      height: undefined
    }),
    isShownByDefault: true,
    panelId: clientId
  }, Object(external_gc_element_["createElement"])(external_gc_components_["__experimentalUnitControl"], {
    label: Object(external_gc_i18n_["__"])('高度'),
    labelPosition: "top",
    value: height || '',
    min: 0,
    onChange: nextHeight => onDimensionChange('height', nextHeight),
    units: units
  })), Object(external_gc_element_["createElement"])(external_gc_components_["__experimentalToolsPanelItem"], {
    className: "single-column",
    hasValue: () => !!width,
    label: Object(external_gc_i18n_["__"])('宽度'),
    onDeselect: () => setAttributes({
      width: undefined
    }),
    resetAllFilter: () => ({
      width: undefined
    }),
    isShownByDefault: true,
    panelId: clientId
  }, Object(external_gc_element_["createElement"])(external_gc_components_["__experimentalUnitControl"], {
    label: Object(external_gc_i18n_["__"])('宽度'),
    labelPosition: "top",
    value: width || '',
    min: 0,
    onChange: nextWidth => onDimensionChange('width', nextWidth),
    units: units
  })), !!height && Object(external_gc_element_["createElement"])(external_gc_components_["__experimentalToolsPanelItem"], {
    hasValue: () => !!scale && scale !== DEFAULT_SCALE,
    label: scaleLabel,
    onDeselect: () => setAttributes({
      scale: DEFAULT_SCALE
    }),
    resetAllFilter: () => ({
      scale: DEFAULT_SCALE
    }),
    isShownByDefault: true,
    panelId: clientId
  }, Object(external_gc_element_["createElement"])(external_gc_components_["__experimentalToggleGroupControl"], {
    label: scaleLabel,
    value: scale,
    help: scaleHelp[scale],
    onChange: value => setAttributes({
      scale: value
    }),
    isBlock: true
  }, SCALE_OPTIONS)));
};

/* harmony default export */ var dimension_controls = (DimensionControls);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/post-featured-image/edit.js


/**
 * GeChiUI dependencies
 */








/**
 * Internal dependencies
 */


const placeholderIllustration = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  className: "components-placeholder__illustration",
  fill: "none",
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 60 60",
  preserveAspectRatio: "none"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  vectorEffect: "non-scaling-stroke",
  d: "M60 60 0 0"
}));
const post_featured_image_edit_ALLOWED_MEDIA_TYPES = ['image'];
const placeholderChip = Object(external_gc_element_["createElement"])("div", {
  className: "gc-block-post-featured-image__placeholder"
}, placeholderIllustration);

function PostFeaturedImageDisplay(_ref) {
  let {
    clientId,
    attributes,
    setAttributes,
    context: {
      postId,
      postType,
      queryId
    }
  } = _ref;
  const isDescendentOfQueryLoop = Number.isFinite(queryId);
  const {
    isLink,
    height,
    width,
    scale
  } = attributes;
  const [featuredImage, setFeaturedImage] = Object(external_gc_coreData_["useEntityProp"])('postType', postType, 'featured_media', postId);
  const media = Object(external_gc_data_["useSelect"])(select => featuredImage && select(external_gc_coreData_["store"]).getMedia(featuredImage, {
    context: 'view'
  }), [featuredImage]);
  const blockProps = Object(external_gc_blockEditor_["useBlockProps"])({
    style: {
      width,
      height
    }
  });

  const placeholder = content => {
    return Object(external_gc_element_["createElement"])(external_gc_components_["Placeholder"], {
      className: "block-editor-media-placeholder"
    }, placeholderIllustration, content);
  };

  const onSelectImage = value => {
    if (value !== null && value !== void 0 && value.id) {
      setFeaturedImage(value.id);
    }
  };

  const {
    createErrorNotice
  } = Object(external_gc_data_["useDispatch"])(external_gc_notices_["store"]);

  const onUploadError = message => {
    createErrorNotice(message[2], {
      type: 'snackbar'
    });
  };

  let image;

  if (!featuredImage && isDescendentOfQueryLoop) {
    return Object(external_gc_element_["createElement"])("div", blockProps, placeholderChip);
  }

  const label = Object(external_gc_i18n_["__"])('添加特色图片');

  if (!featuredImage) {
    image = Object(external_gc_element_["createElement"])(external_gc_blockEditor_["MediaPlaceholder"], {
      onSelect: onSelectImage,
      accept: "image/*",
      allowedTypes: post_featured_image_edit_ALLOWED_MEDIA_TYPES,
      onError: onUploadError,
      placeholder: placeholder,
      mediaLibraryButton: _ref2 => {
        let {
          open
        } = _ref2;
        return Object(external_gc_element_["createElement"])(external_gc_components_["Button"], {
          icon: upload["a" /* default */],
          variant: "primary",
          label: label,
          showTooltip: true,
          tooltipPosition: "top center",
          onClick: () => {
            open();
          }
        });
      }
    });
  } else {
    // We have a Featured image so show a Placeholder if is loading.
    image = !media ? placeholderChip : Object(external_gc_element_["createElement"])("img", {
      src: media.source_url,
      alt: media.alt_text || Object(external_gc_i18n_["__"])('特色图片'),
      style: {
        height,
        objectFit: height && scale
      }
    });
  }

  return Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])(dimension_controls, {
    clientId: clientId,
    attributes: attributes,
    setAttributes: setAttributes
  }), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InspectorControls"], null, Object(external_gc_element_["createElement"])(external_gc_components_["PanelBody"], {
    title: Object(external_gc_i18n_["__"])('链接设置')
  }, Object(external_gc_element_["createElement"])(external_gc_components_["ToggleControl"], {
    label: Object(external_gc_i18n_["sprintf"])( // translators: %s: Name of the post type e.g: "post".
    Object(external_gc_i18n_["__"])('到%s的链接'), postType),
    onChange: () => setAttributes({
      isLink: !isLink
    }),
    checked: isLink
  }))), !!media && !isDescendentOfQueryLoop && Object(external_gc_element_["createElement"])(external_gc_blockEditor_["BlockControls"], {
    group: "other"
  }, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["MediaReplaceFlow"], {
    mediaId: featuredImage,
    mediaURL: media.source_url,
    allowedTypes: post_featured_image_edit_ALLOWED_MEDIA_TYPES,
    accept: "image/*",
    onSelect: onSelectImage,
    onError: onUploadError
  })), Object(external_gc_element_["createElement"])("figure", blockProps, image));
}

function PostFeaturedImageEdit(props) {
  var _props$context;

  const blockProps = Object(external_gc_blockEditor_["useBlockProps"])();

  if (!((_props$context = props.context) !== null && _props$context !== void 0 && _props$context.postId)) {
    return Object(external_gc_element_["createElement"])("div", blockProps, placeholderChip);
  }

  return Object(external_gc_element_["createElement"])(PostFeaturedImageDisplay, props);
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/post-featured-image/index.js
/**
 * GeChiUI dependencies
 */

/**
 * Internal dependencies
 */

const post_featured_image_metadata = {
  apiVersion: 2,
  name: "core/post-featured-image",
  title: "文章特色图片",
  category: "theme",
  description: "显示文章的特色图片。",
  textdomain: "default",
  attributes: {
    isLink: {
      type: "boolean",
      "default": false
    },
    width: {
      type: "string"
    },
    height: {
      type: "string"
    },
    scale: {
      type: "string",
      "default": "cover"
    }
  },
  usesContext: ["postId", "postType", "queryId"],
  supports: {
    align: ["left", "right", "center", "wide", "full"],
    color: {
      __experimentalDuotone: "img",
      text: false,
      background: false
    },
    html: false,
    spacing: {
      margin: true,
      padding: true
    }
  },
  editorStyle: "gc-block-post-featured-image-editor",
  style: "gc-block-post-featured-image"
};

const {
  name: post_featured_image_name
} = post_featured_image_metadata;

const post_featured_image_settings = {
  icon: post_featured_image,
  edit: PostFeaturedImageEdit
};

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/post-navigation-link/edit.js


/**
 * External dependencies
 */

/**
 * GeChiUI dependencies
 */




function PostNavigationLinkEdit(_ref) {
  let {
    attributes: {
      type,
      label,
      showTitle,
      textAlign,
      linkLabel
    },
    setAttributes
  } = _ref;
  const isNext = type === 'next';
  let placeholder = isNext ? Object(external_gc_i18n_["__"])('下一篇') : Object(external_gc_i18n_["__"])('上一篇');

  if (showTitle) {
    /* translators: Label before for next and previous post. There is a space after the colon. */
    placeholder = isNext ? Object(external_gc_i18n_["__"])('下一篇: ') : Object(external_gc_i18n_["__"])('上一篇: ');
  }

  const ariaLabel = isNext ? Object(external_gc_i18n_["__"])('下篇文章') : Object(external_gc_i18n_["__"])('上篇文章');
  const blockProps = Object(external_gc_blockEditor_["useBlockProps"])({
    className: classnames_default()({
      [`has-text-align-${textAlign}`]: textAlign
    })
  });
  return Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InspectorControls"], null, Object(external_gc_element_["createElement"])(external_gc_components_["PanelBody"], null, Object(external_gc_element_["createElement"])(external_gc_components_["ToggleControl"], {
    label: Object(external_gc_i18n_["__"])('以链接方式显示标题'),
    help: Object(external_gc_i18n_["__"])('如果您输入了自定义标签，它将在标题前加上前缀。'),
    checked: !!showTitle,
    onChange: () => setAttributes({
      showTitle: !showTitle
    })
  }), showTitle && Object(external_gc_element_["createElement"])(external_gc_components_["ToggleControl"], {
    label: Object(external_gc_i18n_["__"])('将标签包括在内作为链接的一部分'),
    checked: !!linkLabel,
    onChange: () => setAttributes({
      linkLabel: !linkLabel
    })
  }))), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["BlockControls"], null, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["AlignmentToolbar"], {
    value: textAlign,
    onChange: nextAlign => {
      setAttributes({
        textAlign: nextAlign
      });
    }
  })), Object(external_gc_element_["createElement"])("div", blockProps, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"], {
    tagName: "a",
    "aria-label": ariaLabel,
    placeholder: placeholder,
    value: label,
    allowedFormats: ['core/bold', 'core/italic'],
    onChange: newLabel => setAttributes({
      label: newLabel
    })
  }), showTitle && Object(external_gc_element_["createElement"])("a", {
    href: "#post-navigation-pseudo-link",
    onClick: event => event.preventDefault()
  }, Object(external_gc_i18n_["__"])('标题示例'))));
}

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/next.js


/**
 * GeChiUI dependencies
 */

const next = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M6.6 6L5.4 7l4.5 5-4.5 5 1.1 1 5.5-6-5.4-6zm6 0l-1.1 1 4.5 5-4.5 5 1.1 1 5.5-6-5.5-6z"
}));
/* harmony default export */ var library_next = (next);

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/previous.js


/**
 * GeChiUI dependencies
 */

const previous = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M11.6 7l-1.1-1L5 12l5.5 6 1.1-1L7 12l4.6-5zm6 0l-1.1-1-5.5 6 5.5 6 1.1-1-4.6-5 4.6-5z"
}));
/* harmony default export */ var library_previous = (previous);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/post-navigation-link/variations.js
/**
 * GeChiUI dependencies
 */


const post_navigation_link_variations_variations = [{
  isDefault: true,
  name: 'post-next',
  title: Object(external_gc_i18n_["__"])('下篇文章'),
  description: Object(external_gc_i18n_["__"])('显示与当前文章相邻的下一篇文章的链接。'),
  icon: library_next,
  attributes: {
    type: 'next'
  },
  scope: ['inserter', 'transform']
}, {
  name: 'post-previous',
  title: Object(external_gc_i18n_["__"])('上篇文章'),
  description: Object(external_gc_i18n_["__"])('显示与当前文章相邻的上一篇文章的链接。'),
  icon: library_previous,
  attributes: {
    type: 'previous'
  },
  scope: ['inserter', 'transform']
}];
/**
 * Add `isActive` function to all `post-navigation-link` variations, if not defined.
 * `isActive` function is used to find a variation match from a created
 *  Block by providing its attributes.
 */

post_navigation_link_variations_variations.forEach(variation => {
  if (variation.isActive) return;

  variation.isActive = (blockAttributes, variationAttributes) => blockAttributes.type === variationAttributes.type;
});
/* harmony default export */ var post_navigation_link_variations = (post_navigation_link_variations_variations);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/post-navigation-link/index.js
/**
 * Internal dependencies
 */
const post_navigation_link_metadata = {
  apiVersion: 2,
  name: "core/post-navigation-link",
  title: "文章导航链接",
  category: "theme",
  description: "显示与当前文章相邻的下一篇或上一篇文章的链接。",
  textdomain: "default",
  attributes: {
    textAlign: {
      type: "string"
    },
    type: {
      type: "string",
      "default": "next"
    },
    label: {
      type: "string"
    },
    showTitle: {
      type: "boolean",
      "default": false
    },
    linkLabel: {
      type: "boolean",
      "default": false
    }
  },
  supports: {
    reusable: false,
    html: false,
    typography: {
      fontSize: true,
      lineHeight: true,
      __experimentalFontStyle: true,
      __experimentalFontWeight: true,
      __experimentalLetterSpacing: true,
      __experimentalTextTransform: true,
      __experimentalDefaultControls: {
        fontSize: true
      }
    }
  }
};


const {
  name: post_navigation_link_name
} = post_navigation_link_metadata;

const post_navigation_link_settings = {
  edit: PostNavigationLinkEdit,
  variations: post_navigation_link_variations
};

// EXTERNAL MODULE: ./node_modules/@gechiui/icons/build-module/library/layout.js
var library_layout = __webpack_require__("wwl2");

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/post-template/edit.js



/**
 * External dependencies
 */

/**
 * GeChiUI dependencies
 */







const edit_TEMPLATE = [['core/post-title'], ['core/post-date'], ['core/post-excerpt']];

function PostTemplateInnerBlocks() {
  const innerBlocksProps = Object(external_gc_blockEditor_["useInnerBlocksProps"])({}, {
    template: edit_TEMPLATE
  });
  return Object(external_gc_element_["createElement"])("li", innerBlocksProps);
}

function PostTemplateBlockPreview(_ref) {
  let {
    blocks,
    blockContextId,
    isHidden,
    setActiveBlockContextId
  } = _ref;
  const blockPreviewProps = Object(external_gc_blockEditor_["__experimentalUseBlockPreview"])({
    blocks
  });

  const handleOnClick = () => {
    setActiveBlockContextId(blockContextId);
  };

  const style = {
    display: isHidden ? 'none' : undefined
  };
  return Object(external_gc_element_["createElement"])("li", Object(esm_extends["a" /* default */])({}, blockPreviewProps, {
    tabIndex: 0 // eslint-disable-next-line jsx-a11y/no-noninteractive-element-to-interactive-role
    ,
    role: "button",
    onClick: handleOnClick,
    onKeyPress: handleOnClick,
    style: style
  }));
}

const MemoizedPostTemplateBlockPreview = Object(external_gc_element_["memo"])(PostTemplateBlockPreview);
function PostTemplateEdit(_ref2) {
  let {
    clientId,
    context: {
      query: {
        perPage,
        offset,
        categoryIds = [],
        postType,
        tagIds = [],
        order,
        orderBy,
        author,
        search,
        exclude,
        sticky,
        inherit
      } = {},
      queryContext = [{
        page: 1
      }],
      templateSlug,
      displayLayout: {
        type: layoutType = 'flex',
        columns = 1
      } = {}
    }
  } = _ref2;
  const [{
    page
  }] = queryContext;
  const [activeBlockContextId, setActiveBlockContextId] = Object(external_gc_element_["useState"])();
  const {
    posts,
    blocks
  } = Object(external_gc_data_["useSelect"])(select => {
    const {
      getEntityRecords
    } = select(external_gc_coreData_["store"]);
    const {
      getBlocks
    } = select(external_gc_blockEditor_["store"]);
    const query = {
      offset: perPage ? perPage * (page - 1) + offset : 0,
      categories: categoryIds,
      tags: tagIds,
      order,
      orderby: orderBy
    };

    if (perPage) {
      query.per_page = perPage;
    }

    if (author) {
      query.author = author;
    }

    if (search) {
      query.search = search;
    }

    if (exclude !== null && exclude !== void 0 && exclude.length) {
      query.exclude = exclude;
    } // If sticky is not set, it will return all posts in the results.
    // If sticky is set to `only`, it will limit the results to sticky posts only.
    // If it is anything else, it will exclude sticky posts from results. For the record the value stored is `exclude`.


    if (sticky) {
      query.sticky = sticky === 'only';
    } // If `inherit` is truthy, adjust conditionally the query to create a better preview.


    if (inherit) {
      // Change the post-type if needed.
      if (templateSlug !== null && templateSlug !== void 0 && templateSlug.startsWith('archive-')) {
        query.postType = templateSlug.replace('archive-', '');
        postType = query.postType;
      }
    }

    return {
      posts: getEntityRecords('postType', postType, query),
      blocks: getBlocks(clientId)
    };
  }, [perPage, page, offset, categoryIds, tagIds, order, orderBy, clientId, author, search, postType, exclude, sticky, inherit, templateSlug]);
  const blockContexts = Object(external_gc_element_["useMemo"])(() => posts === null || posts === void 0 ? void 0 : posts.map(post => ({
    postType: post.type,
    postId: post.id
  })), [posts]);
  const hasLayoutFlex = layoutType === 'flex' && columns > 1;
  const blockProps = Object(external_gc_blockEditor_["useBlockProps"])({
    className: classnames_default()({
      'is-flex-container': hasLayoutFlex,
      [`columns-${columns}`]: hasLayoutFlex
    })
  });

  if (!posts) {
    return Object(external_gc_element_["createElement"])("p", blockProps, Object(external_gc_element_["createElement"])(external_gc_components_["Spinner"], null));
  }

  if (!posts.length) {
    return Object(external_gc_element_["createElement"])("p", blockProps, " ", Object(external_gc_i18n_["__"])('未找到结果。'));
  } // To avoid flicker when switching active block contexts, a preview is rendered
  // for each block context, but the preview for the active block context is hidden.
  // This ensures that when it is displayed again, the cached rendering of the
  // block preview is used, instead of having to re-render the preview from scratch.


  return Object(external_gc_element_["createElement"])("ul", blockProps, blockContexts && blockContexts.map(blockContext => {
    var _blockContexts$, _blockContexts$2;

    return Object(external_gc_element_["createElement"])(external_gc_blockEditor_["BlockContextProvider"], {
      key: blockContext.postId,
      value: blockContext
    }, blockContext.postId === (activeBlockContextId || ((_blockContexts$ = blockContexts[0]) === null || _blockContexts$ === void 0 ? void 0 : _blockContexts$.postId)) ? Object(external_gc_element_["createElement"])(PostTemplateInnerBlocks, null) : null, Object(external_gc_element_["createElement"])(MemoizedPostTemplateBlockPreview, {
      blocks: blocks,
      blockContextId: blockContext.postId,
      setActiveBlockContextId: setActiveBlockContextId,
      isHidden: blockContext.postId === (activeBlockContextId || ((_blockContexts$2 = blockContexts[0]) === null || _blockContexts$2 === void 0 ? void 0 : _blockContexts$2.postId))
    }));
  }));
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/post-template/save.js


/**
 * GeChiUI dependencies
 */

function PostTemplateSave() {
  return Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InnerBlocks"].Content, null);
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/post-template/index.js
/**
 * GeChiUI dependencies
 */

/**
 * Internal dependencies
 */

const post_template_metadata = {
  apiVersion: 2,
  name: "core/post-template",
  title: "文章模板",
  category: "design",
  parent: ["core/query"],
  description: "包含用于呈现文章的区块元素，如标题、日期、特色图片、内容或摘要等。",
  textdomain: "default",
  usesContext: ["queryId", "query", "queryContext", "displayLayout", "templateSlug"],
  supports: {
    reusable: false,
    html: false,
    align: true,
    __experimentalLayout: {
      allowEditing: false
    }
  },
  style: "gc-block-post-template",
  editorStyle: "gc-block-post-template-editor"
};


const {
  name: post_template_name
} = post_template_metadata;

const post_template_settings = {
  icon: library_layout["a" /* default */],
  edit: PostTemplateEdit,
  save: PostTemplateSave
};

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/post-terms/use-post-terms.js
/**
 * GeChiUI dependencies
 */


function usePostTerms(_ref) {
  var _term$visibility2;

  let {
    postId,
    postType,
    term
  } = _ref;
  const {
    rest_base: restBase,
    slug
  } = term;
  const [termIds] = Object(external_gc_coreData_["useEntityProp"])('postType', postType, restBase, postId);
  return Object(external_gc_data_["useSelect"])(select => {
    var _term$visibility;

    const visible = term === null || term === void 0 ? void 0 : (_term$visibility = term.visibility) === null || _term$visibility === void 0 ? void 0 : _term$visibility.publicly_queryable;

    if (!visible) {
      return {
        postTerms: [],
        _isLoading: false,
        hasPostTerms: false
      };
    }

    if (!termIds) {
      var _term$postTerms;

      // Waiting for post terms to be fetched.
      return {
        isLoading: term === null || term === void 0 ? void 0 : (_term$postTerms = term.postTerms) === null || _term$postTerms === void 0 ? void 0 : _term$postTerms.includes(postType)
      };
    }

    if (!termIds.length) {
      return {
        isLoading: false
      };
    }

    const {
      getEntityRecords,
      isResolving
    } = select(external_gc_coreData_["store"]);
    const taxonomyArgs = ['taxonomy', slug, {
      include: termIds,
      context: 'view'
    }];
    const terms = getEntityRecords(...taxonomyArgs);

    const _isLoading = isResolving('getEntityRecords', taxonomyArgs);

    return {
      postTerms: terms,
      isLoading: _isLoading,
      hasPostTerms: !!(terms !== null && terms !== void 0 && terms.length)
    };
  }, [termIds, term === null || term === void 0 ? void 0 : (_term$visibility2 = term.visibility) === null || _term$visibility2 === void 0 ? void 0 : _term$visibility2.publicly_queryable]);
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/post-terms/edit.js


/**
 * External dependencies
 */

/**
 * GeChiUI dependencies
 */






/**
 * Internal dependencies
 */


function PostTermsEdit(_ref) {
  var _selectedTerm$labels;

  let {
    attributes,
    context,
    setAttributes
  } = _ref;
  const {
    term,
    textAlign,
    separator
  } = attributes;
  const {
    postId,
    postType
  } = context;
  const selectedTerm = Object(external_gc_data_["useSelect"])(select => {
    var _taxonomy$visibility;

    if (!term) return {};
    const {
      getTaxonomy
    } = select(external_gc_coreData_["store"]);
    const taxonomy = getTaxonomy(term);
    return taxonomy !== null && taxonomy !== void 0 && (_taxonomy$visibility = taxonomy.visibility) !== null && _taxonomy$visibility !== void 0 && _taxonomy$visibility.publicly_queryable ? taxonomy : {};
  }, [term]);
  const {
    postTerms,
    hasPostTerms,
    isLoading
  } = usePostTerms({
    postId,
    postType,
    term: selectedTerm
  });
  const hasPost = postId && postType;
  const blockProps = Object(external_gc_blockEditor_["useBlockProps"])({
    className: classnames_default()({
      [`has-text-align-${textAlign}`]: textAlign,
      [`taxonomy-${term}`]: term
    })
  });

  if (!hasPost || !term) {
    return Object(external_gc_element_["createElement"])("div", blockProps, Object(external_gc_i18n_["__"])('文章项目'));
  }

  return Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["BlockControls"], null, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["AlignmentToolbar"], {
    value: textAlign,
    onChange: nextAlign => {
      setAttributes({
        textAlign: nextAlign
      });
    }
  })), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InspectorControls"], {
    __experimentalGroup: "advanced"
  }, Object(external_gc_element_["createElement"])(external_gc_components_["TextControl"], {
    autoComplete: "off",
    label: Object(external_gc_i18n_["__"])('分隔符'),
    value: separator || '',
    onChange: nextValue => {
      setAttributes({
        separator: nextValue
      });
    },
    help: Object(external_gc_i18n_["__"])('输入用于分隔项目的字符。')
  })), Object(external_gc_element_["createElement"])("div", blockProps, isLoading && Object(external_gc_element_["createElement"])(external_gc_components_["Spinner"], null), !isLoading && hasPostTerms && postTerms.map(postTerm => Object(external_gc_element_["createElement"])("a", {
    key: postTerm.id,
    href: postTerm.link,
    onClick: event => event.preventDefault()
  }, postTerm.name)).reduce((prev, curr) => Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, prev, Object(external_gc_element_["createElement"])("span", {
    className: "gc-block-post-terms__separator"
  }, separator || ' '), curr)), !isLoading && !hasPostTerms && ((selectedTerm === null || selectedTerm === void 0 ? void 0 : (_selectedTerm$labels = selectedTerm.labels) === null || _selectedTerm$labels === void 0 ? void 0 : _selectedTerm$labels.no_terms) || Object(external_gc_i18n_["__"])('未找到项目。'))));
}

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/post-categories.js


/**
 * GeChiUI dependencies
 */

const postCategories = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  viewBox: "0 0 24 24",
  xmlns: "http://www.w3.org/2000/svg"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M20 4H4v1.5h16V4zm-2 9h-3c-1.1 0-2 .9-2 2v3c0 1.1.9 2 2 2h3c1.1 0 2-.9 2-2v-3c0-1.1-.9-2-2-2zm.5 5c0 .3-.2.5-.5.5h-3c-.3 0-.5-.2-.5-.5v-3c0-.3.2-.5.5-.5h3c.3 0 .5.2.5.5v3zM4 9.5h9V8H4v1.5zM9 13H6c-1.1 0-2 .9-2 2v3c0 1.1.9 2 2 2h3c1.1 0 2-.9 2-2v-3c0-1.1-.9-2-2-2zm.5 5c0 .3-.2.5-.5.5H6c-.3 0-.5-.2-.5-.5v-3c0-.3.2-.5.5-.5h3c.3 0 .5.2.5.5v3z",
  fillRule: "evenodd",
  clipRule: "evenodd"
}));
/* harmony default export */ var post_categories = (postCategories);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/post-terms/variations.js
/**
 * GeChiUI dependencies
 */


const post_terms_variations_variations = [{
  name: 'category',
  title: Object(external_gc_i18n_["__"])('文章分类'),
  description: Object(external_gc_i18n_["__"])("显示文章的分类。"),
  icon: post_categories,
  isDefault: true,
  attributes: {
    term: 'category'
  },
  isActive: blockAttributes => blockAttributes.term === 'category'
}, {
  name: 'post_tag',
  title: Object(external_gc_i18n_["__"])('文章标签'),
  description: Object(external_gc_i18n_["__"])("显示文章的标签。"),
  icon: post_categories,
  attributes: {
    term: 'post_tag'
  },
  isActive: blockAttributes => blockAttributes.term === 'post_tag'
}];
/* harmony default export */ var post_terms_variations = (post_terms_variations_variations);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/post-terms/index.js
/**
 * Internal dependencies
 */
const post_terms_metadata = {
  apiVersion: 2,
  name: "core/post-terms",
  title: "文章项目",
  category: "theme",
  description: "Post terms.",
  textdomain: "default",
  attributes: {
    term: {
      type: "string"
    },
    textAlign: {
      type: "string"
    },
    separator: {
      type: "string",
      "default": ", "
    }
  },
  usesContext: ["postId", "postType"],
  supports: {
    html: false,
    color: {
      gradients: true,
      link: true
    },
    typography: {
      lineHeight: true,
      fontSize: true,
      __experimentalFontStyle: true,
      __experimentalFontWeight: true,
      __experimentalLetterSpacing: true,
      __experimentalTextTransform: true,
      __experimentalDefaultControls: {
        fontSize: true
      }
    }
  },
  style: "gc-block-post-terms"
};


const {
  name: post_terms_name
} = post_terms_metadata;

const post_terms_settings = {
  variations: post_terms_variations,
  edit: PostTermsEdit
};

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/post-title/edit.js



/**
 * External dependencies
 */

/**
 * GeChiUI dependencies
 */






/**
 * Internal dependencies
 */



function PostTitleEdit(_ref) {
  let {
    attributes: {
      level,
      textAlign,
      isLink,
      rel,
      linkTarget
    },
    setAttributes,
    context: {
      postType,
      postId,
      queryId
    }
  } = _ref;
  const TagName = 0 === level ? 'p' : 'h' + level;
  const isDescendentOfQueryLoop = Number.isFinite(queryId);
  const userCanEdit = useCanEditEntity('postType', postType, postId);
  const [rawTitle = '', setTitle, fullTitle] = Object(external_gc_coreData_["useEntityProp"])('postType', postType, 'title', postId);
  const [link] = Object(external_gc_coreData_["useEntityProp"])('postType', postType, 'link', postId);
  const blockProps = Object(external_gc_blockEditor_["useBlockProps"])({
    className: classnames_default()({
      [`has-text-align-${textAlign}`]: textAlign
    })
  });
  let titleElement = Object(external_gc_element_["createElement"])(TagName, blockProps, Object(external_gc_i18n_["__"])('文章标题'));

  if (postType && postId) {
    titleElement = userCanEdit && !isDescendentOfQueryLoop ? Object(external_gc_element_["createElement"])(external_gc_blockEditor_["PlainText"], Object(esm_extends["a" /* default */])({
      tagName: TagName,
      placeholder: Object(external_gc_i18n_["__"])('无标题'),
      value: rawTitle,
      onChange: setTitle,
      __experimentalVersion: 2
    }, blockProps)) : Object(external_gc_element_["createElement"])(TagName, blockProps, Object(external_gc_element_["createElement"])(external_gc_element_["RawHTML"], {
      key: "html"
    }, fullTitle === null || fullTitle === void 0 ? void 0 : fullTitle.rendered));
  }

  if (isLink && postType && postId) {
    titleElement = userCanEdit && !isDescendentOfQueryLoop ? Object(external_gc_element_["createElement"])(TagName, blockProps, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["PlainText"], {
      tagName: "a",
      href: link,
      target: linkTarget,
      rel: rel,
      placeholder: !rawTitle.length ? Object(external_gc_i18n_["__"])('无标题') : null,
      value: rawTitle,
      onChange: setTitle,
      __experimentalVersion: 2
    })) : Object(external_gc_element_["createElement"])(TagName, blockProps, Object(external_gc_element_["createElement"])("a", {
      href: link,
      target: linkTarget,
      rel: rel,
      onClick: event => event.preventDefault()
    }, Object(external_gc_element_["createElement"])(external_gc_element_["RawHTML"], {
      key: "html"
    }, fullTitle === null || fullTitle === void 0 ? void 0 : fullTitle.rendered)));
  }

  return Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["BlockControls"], {
    group: "block"
  }, Object(external_gc_element_["createElement"])(HeadingLevelDropdown, {
    selectedLevel: level,
    onChange: newLevel => setAttributes({
      level: newLevel
    })
  }), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["AlignmentControl"], {
    value: textAlign,
    onChange: nextAlign => {
      setAttributes({
        textAlign: nextAlign
      });
    }
  })), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InspectorControls"], null, Object(external_gc_element_["createElement"])(external_gc_components_["PanelBody"], {
    title: Object(external_gc_i18n_["__"])('链接设置')
  }, Object(external_gc_element_["createElement"])(external_gc_components_["ToggleControl"], {
    label: Object(external_gc_i18n_["__"])('将标题设置为链接'),
    onChange: () => setAttributes({
      isLink: !isLink
    }),
    checked: isLink
  }), isLink && Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])(external_gc_components_["ToggleControl"], {
    label: Object(external_gc_i18n_["__"])('在新窗口打开'),
    onChange: value => setAttributes({
      linkTarget: value ? '_blank' : '_self'
    }),
    checked: linkTarget === '_blank'
  }), Object(external_gc_element_["createElement"])(external_gc_components_["TextControl"], {
    label: Object(external_gc_i18n_["__"])('链接rel'),
    value: rel,
    onChange: newRel => setAttributes({
      rel: newRel
    })
  })))), titleElement);
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/post-title/deprecated.js
/**
 * Internal dependencies
 */

const post_title_deprecated_v1 = {
  attributes: {
    textAlign: {
      type: 'string'
    },
    level: {
      type: 'number',
      default: 2
    },
    isLink: {
      type: 'boolean',
      default: false
    },
    rel: {
      type: 'string',
      attribute: 'rel',
      default: ''
    },
    linkTarget: {
      type: 'string',
      default: '_self'
    }
  },
  supports: {
    align: ['wide', 'full'],
    html: false,
    color: {
      gradients: true,
      link: true
    },
    spacing: {
      margin: true
    },
    typography: {
      fontSize: true,
      lineHeight: true,
      __experimentalFontFamily: true,
      __experimentalFontWeight: true,
      __experimentalFontStyle: true,
      __experimentalTextTransform: true
    }
  },

  save() {
    return null;
  },

  migrate: migrate_font_family,

  isEligible(_ref) {
    var _style$typography;

    let {
      style
    } = _ref;
    return style === null || style === void 0 ? void 0 : (_style$typography = style.typography) === null || _style$typography === void 0 ? void 0 : _style$typography.fontFamily;
  }

};
/**
 * New deprecations need to be placed first
 * for them to have higher priority.
 *
 * Old deprecations may need to be updated as well.
 *
 * See block-deprecation.md
 */

/* harmony default export */ var post_title_deprecated = ([post_title_deprecated_v1]);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/post-title/index.js
/**
 * GeChiUI dependencies
 */

/**
 * Internal dependencies
 */

const post_title_metadata = {
  apiVersion: 2,
  name: "core/post-title",
  title: "文章标题",
  category: "theme",
  description: "显示文章、页面或任何其他内容类型的标题。",
  textdomain: "default",
  usesContext: ["postId", "postType", "queryId"],
  attributes: {
    textAlign: {
      type: "string"
    },
    level: {
      type: "number",
      "default": 2
    },
    isLink: {
      type: "boolean",
      "default": false
    },
    rel: {
      type: "string",
      attribute: "rel",
      "default": ""
    },
    linkTarget: {
      type: "string",
      "default": "_self"
    }
  },
  supports: {
    align: ["wide", "full"],
    html: false,
    color: {
      gradients: true,
      link: true
    },
    spacing: {
      margin: true
    },
    typography: {
      fontSize: true,
      lineHeight: true,
      __experimentalFontFamily: true,
      __experimentalFontWeight: true,
      __experimentalFontStyle: true,
      __experimentalTextTransform: true,
      __experimentalLetterSpacing: true,
      __experimentalDefaultControls: {
        fontSize: true,
        fontAppearance: true,
        textTransform: true
      }
    }
  },
  style: "gc-block-post-title"
};


const {
  name: post_title_name
} = post_title_metadata;

const post_title_settings = {
  icon: post_title,
  edit: PostTitleEdit,
  deprecated: post_title_deprecated
};

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/preformatted.js


/**
 * GeChiUI dependencies
 */

const preformatted = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  viewBox: "0 0 24 24",
  xmlns: "http://www.w3.org/2000/svg"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M18 4H6c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm.5 14c0 .3-.2.5-.5.5H6c-.3 0-.5-.2-.5-.5V6c0-.3.2-.5.5-.5h12c.3 0 .5.2.5.5v12zM7 16.5h6V15H7v1.5zm4-4h6V11h-6v1.5zM9 11H7v1.5h2V11zm6 5.5h2V15h-2v1.5z"
}));
/* harmony default export */ var library_preformatted = (preformatted);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/preformatted/edit.js



/**
 * GeChiUI dependencies
 */


function PreformattedEdit(_ref) {
  let {
    attributes,
    mergeBlocks,
    setAttributes,
    onRemove,
    style
  } = _ref;
  const {
    content
  } = attributes;
  const blockProps = Object(external_gc_blockEditor_["useBlockProps"])({
    style
  });
  return Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"], Object(esm_extends["a" /* default */])({
    tagName: "pre",
    identifier: "content",
    preserveWhiteSpace: true,
    value: content,
    onChange: nextContent => {
      setAttributes({
        content: nextContent
      });
    },
    onRemove: onRemove,
    "aria-label": Object(external_gc_i18n_["__"])('预格式化文字'),
    placeholder: Object(external_gc_i18n_["__"])('编写预格式化文字…'),
    onMerge: mergeBlocks
  }, blockProps, {
    __unstablePastePlainText: true
  }));
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/preformatted/save.js


/**
 * GeChiUI dependencies
 */

function preformatted_save_save(_ref) {
  let {
    attributes
  } = _ref;
  const {
    content
  } = attributes;
  return Object(external_gc_element_["createElement"])("pre", external_gc_blockEditor_["useBlockProps"].save(), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"].Content, {
    value: content
  }));
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/preformatted/transforms.js
/**
 * GeChiUI dependencies
 */

const preformatted_transforms_transforms = {
  from: [{
    type: 'block',
    blocks: ['core/code', 'core/paragraph'],
    transform: _ref => {
      let {
        content,
        anchor
      } = _ref;
      return Object(external_gc_blocks_["createBlock"])('core/preformatted', {
        content,
        anchor
      });
    }
  }, {
    type: 'raw',
    isMatch: node => node.nodeName === 'PRE' && !(node.children.length === 1 && node.firstChild.nodeName === 'CODE'),
    schema: _ref2 => {
      let {
        phrasingContentSchema
      } = _ref2;
      return {
        pre: {
          children: phrasingContentSchema
        }
      };
    }
  }],
  to: [{
    type: 'block',
    blocks: ['core/paragraph'],
    transform: attributes => Object(external_gc_blocks_["createBlock"])('core/paragraph', attributes)
  }, {
    type: 'block',
    blocks: ['core/code'],
    transform: attributes => Object(external_gc_blocks_["createBlock"])('core/code', attributes)
  }]
};
/* harmony default export */ var preformatted_transforms = (preformatted_transforms_transforms);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/preformatted/index.js
/**
 * GeChiUI dependencies
 */


/**
 * Internal dependencies
 */


const preformatted_metadata = {
  apiVersion: 2,
  name: "core/preformatted",
  title: "预格式",
  category: "text",
  description: "添加符合间距和标签的文字，也可设置样式。",
  textdomain: "default",
  attributes: {
    content: {
      type: "string",
      source: "html",
      selector: "pre",
      "default": "",
      __unstablePreserveWhiteSpace: true,
      __experimentalRole: "content"
    }
  },
  supports: {
    anchor: true,
    color: {
      gradients: true
    },
    typography: {
      fontSize: true,
      lineHeight: true,
      __experimentalFontStyle: true,
      __experimentalFontWeight: true,
      __experimentalLetterSpacing: true,
      __experimentalTextTransform: true,
      __experimentalDefaultControls: {
        fontSize: true
      }
    }
  },
  style: "gc-block-preformatted"
};


const {
  name: preformatted_name
} = preformatted_metadata;

const preformatted_settings = {
  icon: library_preformatted,
  example: {
    attributes: {
      /* eslint-disable @gechiui/i18n-no-collapsible-whitespace */
      // translators: Sample content for the Preformatted block. Can be replaced with a more locale-adequate work.
      content: Object(external_gc_i18n_["__"])('山不在高，有仙则名。水不在深，有龙则灵。\n斯是陋室，惟吾德馨。苔痕上阶绿，草色入帘青。谈笑有鸿儒，往来无白丁。\n可以调素琴，阅金经。无丝竹之乱耳，无案牍之劳形。南阳诸葛庐，西蜀子云亭，孔子云：何陋之有？')
      /* eslint-enable @gechiui/i18n-no-collapsible-whitespace */

    }
  },
  transforms: preformatted_transforms,
  edit: PreformattedEdit,
  save: preformatted_save_save,

  merge(attributes, attributesToMerge) {
    return {
      content: attributes.content + attributesToMerge.content
    };
  }

};

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/pullquote.js


/**
 * GeChiUI dependencies
 */

const pullquote = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  viewBox: "0 0 24 24",
  xmlns: "http://www.w3.org/2000/svg"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M18 8H6c-1.1 0-2 .9-2 2v4c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2v-4c0-1.1-.9-2-2-2zm.5 6c0 .3-.2.5-.5.5H6c-.3 0-.5-.2-.5-.5v-4c0-.3.2-.5.5-.5h12c.3 0 .5.2.5.5v4zM4 4v1.5h16V4H4zm0 16h16v-1.5H4V20z"
}));
/* harmony default export */ var library_pullquote = (pullquote);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/pullquote/shared.js
const SOLID_COLOR_CLASS = `is-style-solid-color`;

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/pullquote/deprecated.js


/**
 * External dependencies
 */


/**
 * GeChiUI dependencies
 */



/**
 * Internal dependencies
 */


const pullquote_deprecated_blockAttributes = {
  value: {
    type: 'string',
    source: 'html',
    selector: 'blockquote',
    multiline: 'p'
  },
  citation: {
    type: 'string',
    source: 'html',
    selector: 'cite',
    default: ''
  },
  mainColor: {
    type: 'string'
  },
  customMainColor: {
    type: 'string'
  },
  textColor: {
    type: 'string'
  },
  customTextColor: {
    type: 'string'
  }
};

function parseBorderColor(styleString) {
  if (!styleString) {
    return;
  }

  const matches = styleString.match(/border-color:([^;]+)[;]?/);

  if (matches && matches[1]) {
    return matches[1];
  }
} // TODO: this is ripe for a bit of a clean up according to the example in https://developer.gechiui.com/block-editor/reference-guides/block-api/block-deprecation/#example


const pullquote_deprecated_deprecated = [{
  attributes: { ...pullquote_deprecated_blockAttributes
  },

  save(_ref) {
    let {
      attributes
    } = _ref;
    const {
      mainColor,
      customMainColor,
      customTextColor,
      textColor,
      value,
      citation,
      className
    } = attributes;
    const isSolidColorStyle = Object(external_lodash_["includes"])(className, SOLID_COLOR_CLASS);
    let figureClasses, figureStyles; // Is solid color style

    if (isSolidColorStyle) {
      const backgroundClass = Object(external_gc_blockEditor_["getColorClassName"])('background-color', mainColor);
      figureClasses = classnames_default()({
        'has-background': backgroundClass || customMainColor,
        [backgroundClass]: backgroundClass
      });
      figureStyles = {
        backgroundColor: backgroundClass ? undefined : customMainColor
      }; // Is normal style and a custom color is being used ( we can set a style directly with its value)
    } else if (customMainColor) {
      figureStyles = {
        borderColor: customMainColor
      };
    }

    const blockquoteTextColorClass = Object(external_gc_blockEditor_["getColorClassName"])('color', textColor);
    const blockquoteClasses = classnames_default()({
      'has-text-color': textColor || customTextColor,
      [blockquoteTextColorClass]: blockquoteTextColorClass
    });
    const blockquoteStyles = blockquoteTextColorClass ? undefined : {
      color: customTextColor
    };
    return Object(external_gc_element_["createElement"])("figure", external_gc_blockEditor_["useBlockProps"].save({
      className: figureClasses,
      style: figureStyles
    }), Object(external_gc_element_["createElement"])("blockquote", {
      className: blockquoteClasses,
      style: blockquoteStyles
    }, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"].Content, {
      value: value,
      multiline: true
    }), !external_gc_blockEditor_["RichText"].isEmpty(citation) && Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"].Content, {
      tagName: "cite",
      value: citation
    })));
  },

  migrate(_ref2) {
    let {
      className,
      mainColor,
      customMainColor,
      customTextColor,
      ...attributes
    } = _ref2;
    const isSolidColorStyle = Object(external_lodash_["includes"])(className, SOLID_COLOR_CLASS);
    let style;

    if (customMainColor) {
      if (!isSolidColorStyle) {
        // Block supports: Set style.border.color if a deprecated block has a default style and a `customMainColor` attribute.
        style = {
          border: {
            color: customMainColor
          }
        };
      } else {
        // Block supports: Set style.color.background if a deprecated block has a solid style and a `customMainColor` attribute.
        style = {
          color: {
            background: customMainColor
          }
        };
      }
    } // Block supports: Set style.color.text if a deprecated block has a `customTextColor` attribute.


    if (customTextColor && style) {
      style.color = { ...style.color,
        text: customTextColor
      };
    }

    return {
      className,
      backgroundColor: isSolidColorStyle ? mainColor : undefined,
      borderColor: isSolidColorStyle ? undefined : mainColor,
      textAlign: isSolidColorStyle ? 'left' : undefined,
      style,
      ...attributes
    };
  }

}, {
  attributes: { ...pullquote_deprecated_blockAttributes,
    // figureStyle is an attribute that never existed.
    // We are using it as a way to access the styles previously applied to the figure.
    figureStyle: {
      source: 'attribute',
      selector: 'figure',
      attribute: 'style'
    }
  },

  save(_ref3) {
    let {
      attributes
    } = _ref3;
    const {
      mainColor,
      customMainColor,
      textColor,
      customTextColor,
      value,
      citation,
      className,
      figureStyle
    } = attributes;
    const isSolidColorStyle = Object(external_lodash_["includes"])(className, SOLID_COLOR_CLASS);
    let figureClasses, figureStyles; // Is solid color style

    if (isSolidColorStyle) {
      const backgroundClass = Object(external_gc_blockEditor_["getColorClassName"])('background-color', mainColor);
      figureClasses = classnames_default()({
        'has-background': backgroundClass || customMainColor,
        [backgroundClass]: backgroundClass
      });
      figureStyles = {
        backgroundColor: backgroundClass ? undefined : customMainColor
      }; // Is normal style and a custom color is being used ( we can set a style directly with its value)
    } else if (customMainColor) {
      figureStyles = {
        borderColor: customMainColor
      }; // If normal style and a named color are being used, we need to retrieve the color value to set the style,
      // as there is no expectation that themes create classes that set border colors.
    } else if (mainColor) {
      // Previously here we queried the color settings to know the color value
      // of a named color. This made the save function impure and the block was refactored,
      // because meanwhile a change in the editor made it impossible to query color settings in the save function.
      // Here instead of querying the color settings to know the color value, we retrieve the value
      // directly from the style previously serialized.
      const borderColor = parseBorderColor(figureStyle);
      figureStyles = {
        borderColor
      };
    }

    const blockquoteTextColorClass = Object(external_gc_blockEditor_["getColorClassName"])('color', textColor);
    const blockquoteClasses = (textColor || customTextColor) && classnames_default()('has-text-color', {
      [blockquoteTextColorClass]: blockquoteTextColorClass
    });
    const blockquoteStyles = blockquoteTextColorClass ? undefined : {
      color: customTextColor
    };
    return Object(external_gc_element_["createElement"])("figure", {
      className: figureClasses,
      style: figureStyles
    }, Object(external_gc_element_["createElement"])("blockquote", {
      className: blockquoteClasses,
      style: blockquoteStyles
    }, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"].Content, {
      value: value,
      multiline: true
    }), !external_gc_blockEditor_["RichText"].isEmpty(citation) && Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"].Content, {
      tagName: "cite",
      value: citation
    })));
  },

  migrate(_ref4) {
    let {
      className,
      figureStyle,
      mainColor,
      customMainColor,
      customTextColor,
      ...attributes
    } = _ref4;
    const isSolidColorStyle = Object(external_lodash_["includes"])(className, SOLID_COLOR_CLASS);
    let style;

    if (customMainColor) {
      if (!isSolidColorStyle) {
        // Block supports: Set style.border.color if a deprecated block has a default style and a `customMainColor` attribute.
        style = {
          border: {
            color: customMainColor
          }
        };
      } else {
        // Block supports: Set style.color.background if a deprecated block has a solid style and a `customMainColor` attribute.
        style = {
          color: {
            background: customMainColor
          }
        };
      }
    } // Block supports: Set style.color.text if a deprecated block has a `customTextColor` attribute.


    if (customTextColor && style) {
      style.color = { ...style.color,
        text: customTextColor
      };
    } // If is the default style, and a main color is set,
    // migrate the main color value into a custom border color.
    // The custom border color value is retrieved by parsing the figure styles.


    if (!isSolidColorStyle && mainColor && figureStyle) {
      const borderColor = parseBorderColor(figureStyle);

      if (borderColor) {
        return { ...attributes,
          className,
          // Block supports: Set style.border.color if a deprecated block has `mainColor`, inline border CSS and is not a solid color style.
          style: {
            border: {
              color: borderColor
            }
          }
        };
      }
    }

    return {
      className,
      backgroundColor: isSolidColorStyle ? mainColor : undefined,
      borderColor: isSolidColorStyle ? undefined : mainColor,
      textAlign: isSolidColorStyle ? 'left' : undefined,
      style,
      ...attributes
    };
  }

}, {
  attributes: pullquote_deprecated_blockAttributes,

  save(_ref5) {
    let {
      attributes
    } = _ref5;
    const {
      mainColor,
      customMainColor,
      textColor,
      customTextColor,
      value,
      citation,
      className
    } = attributes;
    const isSolidColorStyle = Object(external_lodash_["includes"])(className, SOLID_COLOR_CLASS);
    let figureClass, figureStyles; // Is solid color style

    if (isSolidColorStyle) {
      figureClass = Object(external_gc_blockEditor_["getColorClassName"])('background-color', mainColor);

      if (!figureClass) {
        figureStyles = {
          backgroundColor: customMainColor
        };
      } // Is normal style and a custom color is being used ( we can set a style directly with its value)

    } else if (customMainColor) {
      figureStyles = {
        borderColor: customMainColor
      }; // Is normal style and a named color is being used, we need to retrieve the color value to set the style,
      // as there is no expectation that themes create classes that set border colors.
    } else if (mainColor) {
      const colors = Object(external_lodash_["get"])(Object(external_gc_data_["select"])(external_gc_blockEditor_["store"]).getSettings(), ['colors'], []);
      const colorObject = Object(external_gc_blockEditor_["getColorObjectByAttributeValues"])(colors, mainColor);
      figureStyles = {
        borderColor: colorObject.color
      };
    }

    const blockquoteTextColorClass = Object(external_gc_blockEditor_["getColorClassName"])('color', textColor);
    const blockquoteClasses = textColor || customTextColor ? classnames_default()('has-text-color', {
      [blockquoteTextColorClass]: blockquoteTextColorClass
    }) : undefined;
    const blockquoteStyle = blockquoteTextColorClass ? undefined : {
      color: customTextColor
    };
    return Object(external_gc_element_["createElement"])("figure", {
      className: figureClass,
      style: figureStyles
    }, Object(external_gc_element_["createElement"])("blockquote", {
      className: blockquoteClasses,
      style: blockquoteStyle
    }, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"].Content, {
      value: value,
      multiline: true
    }), !external_gc_blockEditor_["RichText"].isEmpty(citation) && Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"].Content, {
      tagName: "cite",
      value: citation
    })));
  },

  migrate(_ref6) {
    let {
      className,
      mainColor,
      customMainColor,
      customTextColor,
      ...attributes
    } = _ref6;
    const isSolidColorStyle = Object(external_lodash_["includes"])(className, SOLID_COLOR_CLASS);
    let style = {};

    if (customMainColor) {
      if (!isSolidColorStyle) {
        // Block supports: Set style.border.color if a deprecated block has a default style and a `customMainColor` attribute.
        style = {
          border: {
            color: customMainColor
          }
        };
      } else {
        // Block supports: Set style.color.background if a deprecated block has a solid style and a `customMainColor` attribute.
        style = {
          color: {
            background: customMainColor
          }
        };
      }
    } // Block supports: Set style.color.text if a deprecated block has a `customTextColor` attribute.


    if (customTextColor && style) {
      style.color = { ...style.color,
        text: customTextColor
      };
    }

    return {
      className,
      backgroundColor: isSolidColorStyle ? mainColor : undefined,
      borderColor: isSolidColorStyle ? undefined : mainColor,
      textAlign: isSolidColorStyle ? 'left' : undefined,
      style,
      ...attributes
    };
  }

}, {
  attributes: { ...pullquote_deprecated_blockAttributes
  },

  save(_ref7) {
    let {
      attributes
    } = _ref7;
    const {
      value,
      citation
    } = attributes;
    return Object(external_gc_element_["createElement"])("blockquote", null, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"].Content, {
      value: value,
      multiline: true
    }), !external_gc_blockEditor_["RichText"].isEmpty(citation) && Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"].Content, {
      tagName: "cite",
      value: citation
    }));
  }

}, {
  attributes: { ...pullquote_deprecated_blockAttributes,
    citation: {
      type: 'string',
      source: 'html',
      selector: 'footer'
    },
    align: {
      type: 'string',
      default: 'none'
    }
  },

  save(_ref8) {
    let {
      attributes
    } = _ref8;
    const {
      value,
      citation,
      align
    } = attributes;
    return Object(external_gc_element_["createElement"])("blockquote", {
      className: `align${align}`
    }, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"].Content, {
      value: value,
      multiline: true
    }), !external_gc_blockEditor_["RichText"].isEmpty(citation) && Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"].Content, {
      tagName: "footer",
      value: citation
    }));
  }

}];
/* harmony default export */ var pullquote_deprecated = (pullquote_deprecated_deprecated);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/pullquote/figure.js
const Figure = 'figure';

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/pullquote/blockquote.js
const BlockQuote = 'blockquote';

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/pullquote/edit.js


/**
 * External dependencies
 */

/**
 * GeChiUI dependencies
 */




/**
 * Internal dependencies
 */



/**
 * Internal dependencies
 */

function PullQuoteEdit(_ref) {
  let {
    attributes,
    setAttributes,
    isSelected,
    insertBlocksAfter
  } = _ref;
  const {
    textAlign,
    citation,
    value
  } = attributes;
  const blockProps = Object(external_gc_blockEditor_["useBlockProps"])({
    className: classnames_default()({
      [`has-text-align-${textAlign}`]: textAlign
    })
  });
  const shouldShowCitation = !external_gc_blockEditor_["RichText"].isEmpty(citation) || isSelected;
  return Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["BlockControls"], {
    group: "block"
  }, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["AlignmentControl"], {
    value: textAlign,
    onChange: nextAlign => {
      setAttributes({
        textAlign: nextAlign
      });
    }
  })), Object(external_gc_element_["createElement"])(Figure, blockProps, Object(external_gc_element_["createElement"])(BlockQuote, null, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"], {
    identifier: "value",
    multiline: true,
    value: value,
    onChange: nextValue => setAttributes({
      value: nextValue
    }),
    "aria-label": Object(external_gc_i18n_["__"])('引用文字'),
    placeholder: // translators: placeholder text used for the quote
    Object(external_gc_i18n_["__"])('添加引用'),
    textAlign: "center"
  }), shouldShowCitation && Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"], {
    identifier: "citation",
    value: citation,
    "aria-label": Object(external_gc_i18n_["__"])('引用引文'),
    placeholder: // translators: placeholder text used for the citation
    Object(external_gc_i18n_["__"])('添加引文'),
    onChange: nextCitation => setAttributes({
      citation: nextCitation
    }),
    className: "gc-block-pullquote__citation",
    __unstableMobileNoFocusOnMount: true,
    textAlign: "center",
    __unstableOnSplitAtEnd: () => insertBlocksAfter(Object(external_gc_blocks_["createBlock"])('core/paragraph'))
  }))));
}

/* harmony default export */ var pullquote_edit = (PullQuoteEdit);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/pullquote/save.js


/**
 * External dependencies
 */

/**
 * GeChiUI dependencies
 */


function pullquote_save_save(_ref) {
  let {
    attributes
  } = _ref;
  const {
    textAlign,
    citation,
    value
  } = attributes;
  const shouldShowCitation = !external_gc_blockEditor_["RichText"].isEmpty(citation);
  return Object(external_gc_element_["createElement"])("figure", external_gc_blockEditor_["useBlockProps"].save({
    className: classnames_default()({
      [`has-text-align-${textAlign}`]: textAlign
    })
  }), Object(external_gc_element_["createElement"])("blockquote", null, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"].Content, {
    value: value,
    multiline: true
  }), shouldShowCitation && Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"].Content, {
    tagName: "cite",
    value: citation
  })));
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/pullquote/transforms.js
/**
 * GeChiUI dependencies
 */


const pullquote_transforms_transforms = {
  from: [{
    type: 'block',
    isMultiBlock: true,
    blocks: ['core/paragraph'],
    transform: attributes => {
      return Object(external_gc_blocks_["createBlock"])('core/pullquote', {
        value: Object(external_gc_richText_["toHTMLString"])({
          value: Object(external_gc_richText_["join"])(attributes.map(_ref => {
            let {
              content
            } = _ref;
            return Object(external_gc_richText_["create"])({
              html: content
            });
          }), '\u2028'),
          multilineTag: 'p'
        }),
        anchor: attributes.anchor
      });
    }
  }, {
    type: 'block',
    blocks: ['core/heading'],
    transform: _ref2 => {
      let {
        content,
        anchor
      } = _ref2;
      return Object(external_gc_blocks_["createBlock"])('core/pullquote', {
        value: `<p>${content}</p>`,
        anchor
      });
    }
  }],
  to: [{
    type: 'block',
    blocks: ['core/paragraph'],
    transform: _ref3 => {
      let {
        value,
        citation
      } = _ref3;
      const paragraphs = [];

      if (value && value !== '<p></p>') {
        paragraphs.push(...Object(external_gc_richText_["split"])(Object(external_gc_richText_["create"])({
          html: value,
          multilineTag: 'p'
        }), '\u2028').map(piece => Object(external_gc_blocks_["createBlock"])('core/paragraph', {
          content: Object(external_gc_richText_["toHTMLString"])({
            value: piece
          })
        })));
      }

      if (citation && citation !== '<p></p>') {
        paragraphs.push(Object(external_gc_blocks_["createBlock"])('core/paragraph', {
          content: citation
        }));
      }

      if (paragraphs.length === 0) {
        return Object(external_gc_blocks_["createBlock"])('core/paragraph', {
          content: ''
        });
      }

      return paragraphs;
    }
  }, {
    type: 'block',
    blocks: ['core/heading'],
    transform: _ref4 => {
      let {
        value,
        citation,
        ...attrs
      } = _ref4;

      // If there is no pullquote content, use the citation as the
      // content of the resulting heading. A nonexistent citation
      // will result in an empty heading.
      if (value === '<p></p>') {
        return Object(external_gc_blocks_["createBlock"])('core/heading', {
          content: citation
        });
      }

      const pieces = Object(external_gc_richText_["split"])(Object(external_gc_richText_["create"])({
        html: value,
        multilineTag: 'p'
      }), '\u2028');
      const headingBlock = Object(external_gc_blocks_["createBlock"])('core/heading', {
        content: Object(external_gc_richText_["toHTMLString"])({
          value: pieces[0]
        })
      });

      if (!citation && pieces.length === 1) {
        return headingBlock;
      }

      const quotePieces = pieces.slice(1);
      const pullquoteBlock = Object(external_gc_blocks_["createBlock"])('core/pullquote', { ...attrs,
        citation,
        value: Object(external_gc_richText_["toHTMLString"])({
          value: quotePieces.length ? Object(external_gc_richText_["join"])(pieces.slice(1), '\u2028') : Object(external_gc_richText_["create"])(),
          multilineTag: 'p'
        })
      });
      return [headingBlock, pullquoteBlock];
    }
  }]
};
/* harmony default export */ var pullquote_transforms = (pullquote_transforms_transforms);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/pullquote/index.js
/**
 * GeChiUI dependencies
 */


/**
 * Internal dependencies
 */



const pullquote_metadata = {
  apiVersion: 2,
  name: "core/pullquote",
  title: "引文",
  category: "text",
  description: "为您文中的引用增添特殊的视觉显示效果。",
  textdomain: "default",
  attributes: {
    value: {
      type: "string",
      source: "html",
      selector: "blockquote",
      multiline: "p",
      __experimentalRole: "content"
    },
    citation: {
      type: "string",
      source: "html",
      selector: "cite",
      "default": "",
      __experimentalRole: "content"
    },
    textAlign: {
      type: "string"
    }
  },
  supports: {
    anchor: true,
    align: ["left", "right", "wide", "full"],
    color: {
      gradients: true,
      background: true,
      link: true
    },
    typography: {
      fontSize: true,
      lineHeight: true,
      __experimentalFontStyle: true,
      __experimentalFontWeight: true,
      __experimentalLetterSpacing: true,
      __experimentalTextTransform: true,
      __experimentalDefaultControls: {
        fontSize: true,
        fontAppearance: true
      }
    },
    __experimentalBorder: {
      color: true,
      radius: true,
      style: true,
      width: true
    }
  },
  editorStyle: "gc-block-pullquote-editor",
  style: "gc-block-pullquote"
};


const {
  name: pullquote_name
} = pullquote_metadata;

const pullquote_settings = {
  icon: library_pullquote,
  example: {
    attributes: {
      value: '<p>' + // translators: Quote serving as example for the Pullquote block. Attributed to Matt Mullenweg.
      Object(external_gc_i18n_["__"])('技术上最难的事情之一就是扰乱自己。') + '</p>',
      citation: Object(external_gc_i18n_["__"])('Matt Mullenweg')
    }
  },
  transforms: pullquote_transforms,
  edit: pullquote_edit,
  save: pullquote_save_save,
  deprecated: pullquote_deprecated
};

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/loop.js


/**
 * GeChiUI dependencies
 */

const loop_loop = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  viewBox: "0 0 24 24",
  xmlns: "http://www.w3.org/2000/svg"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M18.1823 11.6392C18.1823 13.0804 17.0139 14.2487 15.5727 14.2487C14.3579 14.2487 13.335 13.4179 13.0453 12.2922L13.0377 12.2625L13.0278 12.2335L12.3985 10.377L12.3942 10.3785C11.8571 8.64997 10.246 7.39405 8.33961 7.39405C5.99509 7.39405 4.09448 9.29465 4.09448 11.6392C4.09448 13.9837 5.99509 15.8843 8.33961 15.8843C8.88499 15.8843 9.40822 15.781 9.88943 15.5923L9.29212 14.0697C8.99812 14.185 8.67729 14.2487 8.33961 14.2487C6.89838 14.2487 5.73003 13.0804 5.73003 11.6392C5.73003 10.1979 6.89838 9.02959 8.33961 9.02959C9.55444 9.02959 10.5773 9.86046 10.867 10.9862L10.8772 10.9836L11.4695 12.7311C11.9515 14.546 13.6048 15.8843 15.5727 15.8843C17.9172 15.8843 19.8178 13.9837 19.8178 11.6392C19.8178 9.29465 17.9172 7.39404 15.5727 7.39404C15.0287 7.39404 14.5066 7.4968 14.0264 7.6847L14.6223 9.20781C14.9158 9.093 15.2358 9.02959 15.5727 9.02959C17.0139 9.02959 18.1823 10.1979 18.1823 11.6392Z"
}));
/* harmony default export */ var library_loop = (loop_loop);

// EXTERNAL MODULE: ./node_modules/@gechiui/icons/build-module/library/settings.js
var library_settings = __webpack_require__("LzsW");

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/query/edit/query-toolbar.js


/**
 * GeChiUI dependencies
 */




function QueryToolbar(_ref) {
  let {
    attributes: {
      query,
      displayLayout
    },
    setQuery,
    setDisplayLayout
  } = _ref;
  const maxPageInputId = Object(external_gc_compose_["useInstanceId"])(QueryToolbar, 'blocks-query-pagination-max-page-input');
  const displayLayoutControls = [{
    icon: library_list,
    title: Object(external_gc_i18n_["__"])('列表视图'),
    onClick: () => setDisplayLayout({
      type: 'list'
    }),
    isActive: (displayLayout === null || displayLayout === void 0 ? void 0 : displayLayout.type) === 'list'
  }, {
    icon: grid["a" /* default */],
    title: Object(external_gc_i18n_["__"])('网格视图'),
    onClick: () => setDisplayLayout({
      type: 'flex',
      columns: (displayLayout === null || displayLayout === void 0 ? void 0 : displayLayout.columns) || 3
    }),
    isActive: (displayLayout === null || displayLayout === void 0 ? void 0 : displayLayout.type) === 'flex'
  }];
  return Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, !query.inherit && Object(external_gc_element_["createElement"])(external_gc_components_["ToolbarGroup"], null, Object(external_gc_element_["createElement"])(external_gc_components_["Dropdown"], {
    contentClassName: "block-library-query-toolbar__popover",
    renderToggle: _ref2 => {
      let {
        onToggle
      } = _ref2;
      return Object(external_gc_element_["createElement"])(external_gc_components_["ToolbarButton"], {
        icon: library_settings["a" /* default */],
        label: Object(external_gc_i18n_["__"])('显示设置'),
        onClick: onToggle
      });
    },
    renderContent: () => Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])(external_gc_components_["BaseControl"], null, Object(external_gc_element_["createElement"])(external_gc_components_["__experimentalNumberControl"], {
      __unstableInputWidth: "60px",
      label: Object(external_gc_i18n_["__"])('每页项目数'),
      labelPosition: "edge",
      min: 1,
      max: 100,
      onChange: value => {
        if (isNaN(value) || value < 1 || value > 100) {
          return;
        }

        setQuery({
          perPage: value
        });
      },
      step: "1",
      value: query.perPage,
      isDragEnabled: false
    })), Object(external_gc_element_["createElement"])(external_gc_components_["BaseControl"], null, Object(external_gc_element_["createElement"])(external_gc_components_["__experimentalNumberControl"], {
      __unstableInputWidth: "60px",
      label: Object(external_gc_i18n_["__"])('偏移'),
      labelPosition: "edge",
      min: 0,
      max: 100,
      onChange: value => {
        if (isNaN(value) || value < 0 || value > 100) {
          return;
        }

        setQuery({
          offset: value
        });
      },
      step: "1",
      value: query.offset,
      isDragEnabled: false
    })), Object(external_gc_element_["createElement"])(external_gc_components_["BaseControl"], {
      id: maxPageInputId,
      help: Object(external_gc_i18n_["__"])('限制要显示的页面数目，即使有更多查询结果。要显示所有页面，请使用0（零）。')
    }, Object(external_gc_element_["createElement"])(external_gc_components_["__experimentalNumberControl"], {
      id: maxPageInputId,
      __unstableInputWidth: "60px",
      label: Object(external_gc_i18n_["__"])('要显示的最大页数'),
      labelPosition: "edge",
      min: 0,
      onChange: value => {
        if (isNaN(value) || value < 0) {
          return;
        }

        setQuery({
          pages: value
        });
      },
      step: "1",
      value: query.pages,
      isDragEnabled: false
    })))
  })), Object(external_gc_element_["createElement"])(external_gc_components_["ToolbarGroup"], {
    controls: displayLayoutControls
  }));
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/query/utils.js
/**
 * GeChiUI dependencies
 */



/**
 * GeChiUI term object from REST API.
 * Categories ref: https://developer.gechiui.com/rest-api/reference/categories/
 * Tags ref: https://developer.gechiui.com/rest-api/reference/tags/
 *
 * @typedef {Object} GCTerm
 * @property {number} id          Unique identifier for the term.
 * @property {number} count       Number of published posts for the term.
 * @property {string} description HTML description of the term.
 * @property {string} link        URL of the term.
 * @property {string} name        HTML title for the term.
 * @property {string} slug        An alphanumeric identifier for the term unique to its type.
 * @property {string} taxonomy    Type attribution for the term.
 * @property {Object} meta        Meta fields
 * @property {number} [parent]    The parent term ID.
 */

/**
 * The object used in Query block that contains info and helper mappings
 * from an array of GCTerm.
 *
 * @typedef {Object} QueryTermsInfo
 * @property {GCTerm[]}               terms     The array of terms.
 * @property {Object<string, GCTerm>} mapById   Object mapping with the term id as key and the term as value.
 * @property {Object<string, GCTerm>} mapByName Object mapping with the term name as key and the term as value.
 * @property {string[]}               names     Array with the terms' names.
 */

/**
 * Returns a helper object with mapping from GCTerms.
 *
 * @param {GCTerm[]} terms The terms to extract of helper object.
 * @return {QueryTermsInfo} The object with the terms information.
 */

const getTermsInfo = terms => {
  const mapping = terms === null || terms === void 0 ? void 0 : terms.reduce((accumulator, term) => {
    const {
      mapById,
      mapByName,
      names
    } = accumulator;
    mapById[term.id] = term;
    mapByName[term.name] = term;
    names.push(term.name);
    return accumulator;
  }, {
    mapById: {},
    mapByName: {},
    names: []
  });
  return {
    terms,
    ...mapping
  };
};
/**
 * Returns a helper object that contains:
 * 1. An `options` object from the available post types, to be passed to a `SelectControl`.
 * 2. A helper map with available taxonomies per post type.
 *
 * @return {Object} The helper object related to post types.
 */

const usePostTypes = () => {
  const {
    postTypes
  } = Object(external_gc_data_["useSelect"])(select => {
    var _getPostTypes;

    const {
      getPostTypes
    } = select(external_gc_coreData_["store"]);
    const excludedPostTypes = ['attachment'];
    const filteredPostTypes = (_getPostTypes = getPostTypes({
      per_page: -1
    })) === null || _getPostTypes === void 0 ? void 0 : _getPostTypes.filter(_ref => {
      let {
        viewable,
        slug
      } = _ref;
      return viewable && !excludedPostTypes.includes(slug);
    });
    return {
      postTypes: filteredPostTypes
    };
  }, []);
  const postTypesTaxonomiesMap = Object(external_gc_element_["useMemo"])(() => {
    if (!(postTypes !== null && postTypes !== void 0 && postTypes.length)) return;
    return postTypes.reduce((accumulator, type) => {
      accumulator[type.slug] = type.taxonomies;
      return accumulator;
    }, {});
  }, [postTypes]);
  const postTypesSelectOptions = Object(external_gc_element_["useMemo"])(() => (postTypes || []).map(_ref2 => {
    let {
      labels,
      slug
    } = _ref2;
    return {
      label: labels.singular_name,
      value: slug
    };
  }), [postTypes]);
  return {
    postTypesTaxonomiesMap,
    postTypesSelectOptions
  };
};
/**
 * Recurses over a list of blocks and returns the first found
 * Query Loop block's clientId.
 *
 * @param {GCBlock[]} blocks The list of blocks to look through.
 * @return {string=} The first found Query Loop's clientId.
 */

const getFirstQueryClientIdFromBlocks = blocks => {
  const blocksQueue = [...blocks];

  while (blocksQueue.length > 0) {
    var _block$innerBlocks;

    const block = blocksQueue.shift();

    if (block.name === 'core/query') {
      return block.clientId;
    }

    (_block$innerBlocks = block.innerBlocks) === null || _block$innerBlocks === void 0 ? void 0 : _block$innerBlocks.forEach(innerBlock => {
      blocksQueue.push(innerBlock);
    });
  }
};

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/query/constants.js
const MAX_FETCHED_TERMS = 100;
const DEFAULTS_POSTS_PER_PAGE = 3;
/* harmony default export */ var constants = ({
  MAX_FETCHED_TERMS,
  DEFAULTS_POSTS_PER_PAGE
});

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/query/edit/query-inspector-controls.js


/**
 * External dependencies
 */

/**
 * GeChiUI dependencies
 */







/**
 * Internal dependencies
 */



const stickyOptions = [{
  label: Object(external_gc_i18n_["__"])('包括'),
  value: ''
}, {
  label: Object(external_gc_i18n_["__"])('排除'),
  value: 'exclude'
}, {
  label: Object(external_gc_i18n_["__"])('仅'),
  value: 'only'
}]; // Helper function to get the term id based on user input in terms `FormTokenField`.

const getTermIdByTermValue = (termsMappedByName, termValue) => {
  var _termsMappedByName$te;

  // First we check for exact match by `term.id` or case sensitive `term.name` match.
  const termId = (termValue === null || termValue === void 0 ? void 0 : termValue.id) || ((_termsMappedByName$te = termsMappedByName[termValue]) === null || _termsMappedByName$te === void 0 ? void 0 : _termsMappedByName$te.id);
  if (termId) return termId;
  /**
   * Here we make an extra check for entered terms in a non case sensitive way,
   * to match user expectations, due to `FormTokenField` behaviour that shows
   * suggestions which are case insensitive.
   *
   * Although GC tries to discourage users to add terms with the same name (case insensitive),
   * it's still possible if you manually change the name, as long as the terms have different slugs.
   * In this edge case we always apply the first match from the terms list.
   */

  const termValueLower = termValue.toLocaleLowerCase();

  for (const term in termsMappedByName) {
    if (term.toLocaleLowerCase() === termValueLower) {
      return termsMappedByName[term].id;
    }
  }
};

function QueryInspectorControls(_ref) {
  var _categories$terms, _tags$terms;

  let {
    attributes: {
      query,
      displayLayout
    },
    setQuery,
    setDisplayLayout
  } = _ref;
  const {
    order,
    orderBy,
    author: selectedAuthorId,
    postType,
    sticky,
    inherit
  } = query;
  const [showCategories, setShowCategories] = Object(external_gc_element_["useState"])(true);
  const [showTags, setShowTags] = Object(external_gc_element_["useState"])(true);
  const [showSticky, setShowSticky] = Object(external_gc_element_["useState"])(postType === 'post');
  const {
    postTypesTaxonomiesMap,
    postTypesSelectOptions
  } = usePostTypes();
  const {
    authorList,
    categories,
    tags
  } = Object(external_gc_data_["useSelect"])(select => {
    const {
      getEntityRecords
    } = select(external_gc_coreData_["store"]);
    const termsQuery = {
      per_page: MAX_FETCHED_TERMS
    };

    const _categories = getEntityRecords('taxonomy', 'category', termsQuery);

    const _tags = getEntityRecords('taxonomy', 'post_tag', termsQuery);

    return {
      categories: getTermsInfo(_categories),
      tags: getTermsInfo(_tags),
      authorList: getEntityRecords('root', 'user', {
        per_page: -1
      })
    };
  }, []);
  Object(external_gc_element_["useEffect"])(() => {
    if (!postTypesTaxonomiesMap) return;
    const postTypeTaxonomies = postTypesTaxonomiesMap[postType];
    setShowCategories(postTypeTaxonomies.includes('category'));
    setShowTags(postTypeTaxonomies.includes('post_tag'));
  }, [postType, postTypesTaxonomiesMap]);
  Object(external_gc_element_["useEffect"])(() => {
    setShowSticky(postType === 'post');
  }, [postType]);

  const onPostTypeChange = newValue => {
    const updateQuery = {
      postType: newValue
    };

    if (!postTypesTaxonomiesMap[newValue].includes('category')) {
      updateQuery.categoryIds = [];
    }

    if (!postTypesTaxonomiesMap[newValue].includes('post_tag')) {
      updateQuery.tagIds = [];
    }

    if (newValue !== 'post') {
      updateQuery.sticky = '';
    }

    setQuery(updateQuery);
  }; // Handles categories and tags changes.


  const onTermsChange = (terms, queryProperty) => newTermValues => {
    const termIds = Array.from(newTermValues.reduce((accumulator, termValue) => {
      const termId = getTermIdByTermValue(terms.mapByName, termValue);
      if (termId) accumulator.add(termId);
      return accumulator;
    }, new Set()));
    setQuery({
      [queryProperty]: termIds
    });
  };

  const onCategoriesChange = onTermsChange(categories, 'categoryIds');
  const onTagsChange = onTermsChange(tags, 'tagIds');
  const [querySearch, setQuerySearch] = Object(external_gc_element_["useState"])(query.search);
  const onChangeDebounced = Object(external_gc_element_["useCallback"])(Object(external_lodash_["debounce"])(() => {
    if (query.search !== querySearch) {
      setQuery({
        search: querySearch
      });
    }
  }, 250), [querySearch, query.search]);
  Object(external_gc_element_["useEffect"])(() => {
    onChangeDebounced();
    return onChangeDebounced.cancel;
  }, [querySearch, onChangeDebounced]); // Returns only the existing term ids (categories/tags) in proper
  // format to be used in `FormTokenField`. This prevents the component
  // from crashing in the editor, when non existing term ids were provided.

  const getExistingTermsFormTokenValue = taxonomy => {
    const termsMapper = {
      category: {
        queryProp: 'categoryIds',
        terms: categories
      },
      post_tag: {
        queryProp: 'tagIds',
        terms: tags
      }
    };
    const requestedTerm = termsMapper[taxonomy];
    return (query[requestedTerm.queryProp] || []).reduce((accumulator, termId) => {
      const term = requestedTerm.terms.mapById[termId];

      if (term) {
        accumulator.push({
          id: termId,
          value: term.name
        });
      }

      return accumulator;
    }, []);
  };

  return Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InspectorControls"], null, Object(external_gc_element_["createElement"])(external_gc_components_["PanelBody"], {
    title: Object(external_gc_i18n_["__"])('设置')
  }, Object(external_gc_element_["createElement"])(external_gc_components_["ToggleControl"], {
    label: Object(external_gc_i18n_["__"])('从模版继承查询'),
    help: Object(external_gc_i18n_["__"])('切换以使用通过当前模板设置的全局查询上下文，例如归档或搜索。禁用以单独定义设置。'),
    checked: !!inherit,
    onChange: value => setQuery({
      inherit: !!value
    })
  }), !inherit && Object(external_gc_element_["createElement"])(external_gc_components_["SelectControl"], {
    options: postTypesSelectOptions,
    value: postType,
    label: Object(external_gc_i18n_["__"])('文章类型'),
    onChange: onPostTypeChange,
    help: Object(external_gc_i18n_["__"])('GeChiUI 包含不同类型的内容，且已被分之到了称为“文章类型”的集合中。默认情况下只有如博客文章和页面等几个类型，但可以通过插件添加更多类型。')
  }), (displayLayout === null || displayLayout === void 0 ? void 0 : displayLayout.type) === 'flex' && Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])(external_gc_components_["RangeControl"], {
    label: Object(external_gc_i18n_["__"])('栏目'),
    value: displayLayout.columns,
    onChange: value => setDisplayLayout({
      columns: value
    }),
    min: 2,
    max: Math.max(6, displayLayout.columns)
  }), displayLayout.columns > 6 && Object(external_gc_element_["createElement"])(external_gc_components_["Notice"], {
    status: "warning",
    isDismissible: false
  }, Object(external_gc_i18n_["__"])('该栏数超过建议的数量，可能会导致页面无法完整呈现。'))), !inherit && Object(external_gc_element_["createElement"])(external_gc_components_["QueryControls"], {
    order,
    orderBy,
    onOrderChange: value => setQuery({
      order: value
    }),
    onOrderByChange: value => setQuery({
      orderBy: value
    })
  }), showSticky && Object(external_gc_element_["createElement"])(external_gc_components_["SelectControl"], {
    label: Object(external_gc_i18n_["__"])('置顶文章'),
    options: stickyOptions,
    value: sticky,
    onChange: value => setQuery({
      sticky: value
    }),
    help: Object(external_gc_i18n_["__"])('博客文章可以被“置顶”，即将其放置在文章首页的最顶部，直到有新的置顶文章被发布。')
  })), !inherit && Object(external_gc_element_["createElement"])(external_gc_components_["PanelBody"], {
    title: Object(external_gc_i18n_["__"])('筛选条件')
  }, showCategories && (categories === null || categories === void 0 ? void 0 : (_categories$terms = categories.terms) === null || _categories$terms === void 0 ? void 0 : _categories$terms.length) > 0 && Object(external_gc_element_["createElement"])(external_gc_components_["FormTokenField"], {
    label: Object(external_gc_i18n_["__"])('分类'),
    value: getExistingTermsFormTokenValue('category'),
    suggestions: categories.names,
    onChange: onCategoriesChange
  }), showTags && (tags === null || tags === void 0 ? void 0 : (_tags$terms = tags.terms) === null || _tags$terms === void 0 ? void 0 : _tags$terms.length) > 0 && Object(external_gc_element_["createElement"])(external_gc_components_["FormTokenField"], {
    label: Object(external_gc_i18n_["__"])('标签'),
    value: getExistingTermsFormTokenValue('post_tag'),
    suggestions: tags.names,
    onChange: onTagsChange
  }), Object(external_gc_element_["createElement"])(external_gc_components_["QueryControls"], {
    selectedAuthorId,
    authorList,
    onAuthorChange: value => setQuery({
      author: value !== '' ? +value : undefined
    })
  }), Object(external_gc_element_["createElement"])(external_gc_components_["TextControl"], {
    label: Object(external_gc_i18n_["__"])('关键字'),
    value: querySearch,
    onChange: setQuerySearch
  })));
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/query/edit/query-placeholder.js


/**
 * GeChiUI dependencies
 */




const QueryPlaceholder = _ref => {
  var _blockType$icon;

  let {
    clientId,
    name,
    attributes,
    setAttributes
  } = _ref;
  const {
    blockType,
    defaultVariation,
    scopeVariations,
    allVariations
  } = Object(external_gc_data_["useSelect"])(select => {
    const {
      getBlockVariations,
      getBlockType,
      getDefaultBlockVariation
    } = select(external_gc_blocks_["store"]);
    return {
      blockType: getBlockType(name),
      defaultVariation: getDefaultBlockVariation(name, 'block'),
      scopeVariations: getBlockVariations(name, 'block'),
      allVariations: getBlockVariations(name)
    };
  }, [name]);
  const {
    replaceInnerBlocks
  } = Object(external_gc_data_["useDispatch"])(external_gc_blockEditor_["store"]);
  const blockProps = Object(external_gc_blockEditor_["useBlockProps"])();
  const matchingVariation = Object(external_gc_blockEditor_["__experimentalGetMatchingVariation"])(attributes, allVariations);
  const icon = (matchingVariation === null || matchingVariation === void 0 ? void 0 : matchingVariation.icon) || (blockType === null || blockType === void 0 ? void 0 : (_blockType$icon = blockType.icon) === null || _blockType$icon === void 0 ? void 0 : _blockType$icon.src);
  const label = (matchingVariation === null || matchingVariation === void 0 ? void 0 : matchingVariation.title) || (blockType === null || blockType === void 0 ? void 0 : blockType.title);
  return Object(external_gc_element_["createElement"])("div", blockProps, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["__experimentalBlockVariationPicker"], {
    icon: icon,
    label: label,
    variations: scopeVariations,
    onSelect: function () {
      let nextVariation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultVariation;

      if (nextVariation.attributes) {
        setAttributes(nextVariation.attributes);
      }

      if (nextVariation.innerBlocks) {
        replaceInnerBlocks(clientId, Object(external_gc_blocks_["createBlocksFromInnerBlocksTemplate"])(nextVariation.innerBlocks), false);
      }
    }
  }));
};

/* harmony default export */ var query_placeholder = (QueryPlaceholder);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/query/edit/index.js


/**
 * GeChiUI dependencies
 */







/**
 * Internal dependencies
 */






const query_edit_TEMPLATE = [['core/post-template']];
function QueryContent(_ref) {
  let {
    attributes,
    setAttributes
  } = _ref;
  const {
    queryId,
    query,
    displayLayout,
    tagName: TagName = 'div',
    layout = {}
  } = attributes;
  const {
    __unstableMarkNextChangeAsNotPersistent
  } = Object(external_gc_data_["useDispatch"])(external_gc_blockEditor_["store"]);
  const instanceId = Object(external_gc_compose_["useInstanceId"])(QueryContent);
  const {
    themeSupportsLayout
  } = Object(external_gc_data_["useSelect"])(select => {
    var _getSettings;

    const {
      getSettings
    } = select(external_gc_blockEditor_["store"]);
    return {
      themeSupportsLayout: (_getSettings = getSettings()) === null || _getSettings === void 0 ? void 0 : _getSettings.supportsLayout
    };
  }, []);
  const defaultLayout = Object(external_gc_blockEditor_["useSetting"])('layout') || {};
  const usedLayout = !!layout && layout.inherit ? defaultLayout : layout;
  const blockProps = Object(external_gc_blockEditor_["useBlockProps"])();
  const innerBlocksProps = Object(external_gc_blockEditor_["useInnerBlocksProps"])(blockProps, {
    template: query_edit_TEMPLATE,
    __experimentalLayout: themeSupportsLayout ? usedLayout : undefined
  });
  const {
    postsPerPage
  } = Object(external_gc_data_["useSelect"])(select => {
    const {
      getSettings
    } = select(external_gc_blockEditor_["store"]);
    return {
      postsPerPage: +getSettings().postsPerPage || DEFAULTS_POSTS_PER_PAGE
    };
  }, []); // There are some effects running where some initialization logic is
  // happening and setting some values to some attributes (ex. queryId).
  // These updates can cause an `undo trap` where undoing will result in
  // resetting again, so we need to mark these changes as not persistent
  // with `__unstableMarkNextChangeAsNotPersistent`.
  // Changes in query property (which is an object) need to be in the same callback,
  // because updates are batched after the render and changes in different query properties
  // would cause to overide previous wanted changes.

  Object(external_gc_element_["useEffect"])(() => {
    const newQuery = {};

    if (!query.perPage && postsPerPage) {
      newQuery.perPage = postsPerPage;
    }

    if (!!Object.keys(newQuery).length) {
      __unstableMarkNextChangeAsNotPersistent();

      updateQuery(newQuery);
    }
  }, [query.perPage]); // We need this for multi-query block pagination.
  // Query parameters for each block are scoped to their ID.

  Object(external_gc_element_["useEffect"])(() => {
    if (!queryId) {
      __unstableMarkNextChangeAsNotPersistent();

      setAttributes({
        queryId: instanceId
      });
    }
  }, [queryId, instanceId]);

  const updateQuery = newQuery => setAttributes({
    query: { ...query,
      ...newQuery
    }
  });

  const updateDisplayLayout = newDisplayLayout => setAttributes({
    displayLayout: { ...displayLayout,
      ...newDisplayLayout
    }
  });

  return Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])(QueryInspectorControls, {
    attributes: attributes,
    setQuery: updateQuery,
    setDisplayLayout: updateDisplayLayout
  }), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["BlockControls"], null, Object(external_gc_element_["createElement"])(QueryToolbar, {
    attributes: attributes,
    setQuery: updateQuery,
    setDisplayLayout: updateDisplayLayout
  })), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InspectorControls"], {
    __experimentalGroup: "advanced"
  }, Object(external_gc_element_["createElement"])(external_gc_components_["SelectControl"], {
    label: Object(external_gc_i18n_["__"])('HTML 元素'),
    options: [{
      label: Object(external_gc_i18n_["__"])('默认（<div>）'),
      value: 'div'
    }, {
      label: '<main>',
      value: 'main'
    }, {
      label: '<section>',
      value: 'section'
    }, {
      label: '<aside>',
      value: 'aside'
    }],
    value: TagName,
    onChange: value => setAttributes({
      tagName: value
    })
  })), Object(external_gc_element_["createElement"])(TagName, innerBlocksProps));
}

function QueryPatternSetup(props) {
  const {
    clientId,
    name: blockName
  } = props;
  const blockProps = Object(external_gc_blockEditor_["useBlockProps"])();
  const {
    replaceBlock,
    selectBlock
  } = Object(external_gc_data_["useDispatch"])(external_gc_blockEditor_["store"]);

  const onBlockPatternSelect = blocks => {
    const clonedBlocks = blocks.map(block => Object(external_gc_blocks_["cloneBlock"])(block));
    const firstQueryClientId = getFirstQueryClientIdFromBlocks(clonedBlocks);
    replaceBlock(clientId, clonedBlocks);

    if (firstQueryClientId) {
      selectBlock(firstQueryClientId);
    }
  }; // `startBlankComponent` is what to render when clicking `Start blank`
  // or if no matched patterns are found.


  return Object(external_gc_element_["createElement"])("div", blockProps, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["__experimentalBlockPatternSetup"], {
    blockName: blockName,
    clientId: clientId,
    startBlankComponent: Object(external_gc_element_["createElement"])(query_placeholder, props),
    onBlockPatternSelect: onBlockPatternSelect
  }));
}

const QueryEdit = props => {
  const {
    clientId
  } = props;
  const hasInnerBlocks = Object(external_gc_data_["useSelect"])(select => !!select(external_gc_blockEditor_["store"]).getBlocks(clientId).length, [clientId]);
  const Component = hasInnerBlocks ? QueryContent : QueryPatternSetup;
  return Object(external_gc_element_["createElement"])(Component, props);
};

/* harmony default export */ var query_edit = (QueryEdit);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/query/save.js


/**
 * GeChiUI dependencies
 */

function QuerySave(_ref) {
  let {
    attributes: {
      tagName: Tag = 'div'
    }
  } = _ref;
  const blockProps = external_gc_blockEditor_["useBlockProps"].save();
  const innerBlocksProps = external_gc_blockEditor_["useInnerBlocksProps"].save(blockProps);
  return Object(external_gc_element_["createElement"])(Tag, innerBlocksProps);
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/query/icons.js


/**
 * GeChiUI dependencies
 */

const titleDate = Object(external_gc_element_["createElement"])(external_gc_components_["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 48 48"
}, Object(external_gc_element_["createElement"])(external_gc_components_["Path"], {
  d: "M41 9H7v3h34V9zm-22 5H7v1h12v-1zM7 26h12v1H7v-1zm34-5H7v3h34v-3zM7 38h12v1H7v-1zm34-5H7v3h34v-3z"
}));
const titleExcerpt = Object(external_gc_element_["createElement"])(external_gc_components_["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 48 48"
}, Object(external_gc_element_["createElement"])(external_gc_components_["Path"], {
  d: "M41 9H7v3h34V9zm-4 5H7v1h30v-1zm4 3H7v1h34v-1zM7 20h30v1H7v-1zm0 12h30v1H7v-1zm34 3H7v1h34v-1zM7 38h30v1H7v-1zm34-11H7v3h34v-3z"
}));
const titleDateExcerpt = Object(external_gc_element_["createElement"])(external_gc_components_["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 48 48"
}, Object(external_gc_element_["createElement"])(external_gc_components_["Path"], {
  d: "M41 9H7v3h34V9zm-22 5H7v1h12v-1zm22 3H7v1h34v-1zM7 20h34v1H7v-1zm0 12h12v1H7v-1zm34 3H7v1h34v-1zM7 38h34v1H7v-1zm34-11H7v3h34v-3z"
}));
const imageDateTitle = Object(external_gc_element_["createElement"])(external_gc_components_["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 48 48"
}, Object(external_gc_element_["createElement"])(external_gc_components_["Path"], {
  d: "M7 9h34v6H7V9zm12 8H7v1h12v-1zm18 3H7v1h30v-1zm0 18H7v1h30v-1zM7 35h12v1H7v-1zm34-8H7v6h34v-6z"
}));

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/query/variations.js
/**
 * GeChiUI dependencies
 */


/**
 * Internal dependencies
 */


const QUERY_DEFAULT_ATTRIBUTES = {
  query: {
    perPage: 3,
    pages: 0,
    offset: 0,
    postType: 'post',
    categoryIds: [],
    tagIds: [],
    order: 'desc',
    orderBy: 'date',
    author: '',
    search: '',
    exclude: [],
    sticky: '',
    inherit: false
  }
};
const query_variations_variations = [{
  name: 'posts-list',
  title: Object(external_gc_i18n_["__"])('文章列表'),
  description: Object(external_gc_i18n_["__"])('显示您站点上近期文章的列表，不包括置顶文章。'),
  icon: post_list,
  attributes: {
    query: {
      perPage: 4,
      pages: 1,
      offset: 0,
      postType: 'post',
      categoryIds: [],
      tagIds: [],
      order: 'desc',
      orderBy: 'date',
      author: '',
      search: '',
      sticky: 'exclude',
      inherit: false
    }
  },
  scope: ['inserter']
}, {
  name: 'title-date',
  title: Object(external_gc_i18n_["__"])('标题和日期'),
  icon: titleDate,
  attributes: { ...QUERY_DEFAULT_ATTRIBUTES
  },
  innerBlocks: [['core/post-template', {}, [['core/post-title'], ['core/post-date']]], ['core/query-pagination']],
  scope: ['block']
}, {
  name: 'title-excerpt',
  title: Object(external_gc_i18n_["__"])('标题和摘要'),
  icon: titleExcerpt,
  attributes: { ...QUERY_DEFAULT_ATTRIBUTES
  },
  innerBlocks: [['core/post-template', {}, [['core/post-title'], ['core/post-excerpt']]], ['core/query-pagination']],
  scope: ['block']
}, {
  name: 'title-date-excerpt',
  title: Object(external_gc_i18n_["__"])('标题、日期和摘要'),
  icon: titleDateExcerpt,
  attributes: { ...QUERY_DEFAULT_ATTRIBUTES
  },
  innerBlocks: [['core/post-template', {}, [['core/post-title'], ['core/post-date'], ['core/post-excerpt']]], ['core/query-pagination']],
  scope: ['block']
}, {
  name: 'image-date-title',
  title: Object(external_gc_i18n_["__"])('图片、日期和标题'),
  icon: imageDateTitle,
  attributes: { ...QUERY_DEFAULT_ATTRIBUTES
  },
  innerBlocks: [['core/post-template', {}, [['core/post-featured-image'], ['core/post-date'], ['core/post-title']]], ['core/query-pagination']],
  scope: ['block']
}];
/* harmony default export */ var query_variations = (query_variations_variations);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/query/deprecated.js


/**
 * External dependencies
 */

/**
 * GeChiUI dependencies
 */


const query_deprecated_deprecated = [// Version with NO wrapper `div` element.
{
  attributes: {
    queryId: {
      type: 'number'
    },
    query: {
      type: 'object',
      default: {
        perPage: null,
        pages: 0,
        offset: 0,
        postType: 'post',
        categoryIds: [],
        tagIds: [],
        order: 'desc',
        orderBy: 'date',
        author: '',
        search: '',
        exclude: [],
        sticky: '',
        inherit: true
      }
    },
    layout: {
      type: 'object',
      default: {
        type: 'list'
      }
    }
  },
  supports: {
    html: false
  },

  migrate(attributes) {
    return { ...Object(external_lodash_["omit"])(attributes, ['layout']),
      displayLayout: attributes.layout
    };
  },

  save() {
    return Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InnerBlocks"].Content, null);
  }

}];
/* harmony default export */ var query_deprecated = (query_deprecated_deprecated);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/query/hooks.js



/**
 * GeChiUI dependencies
 */






const CreateNewPostLink = _ref => {
  let {
    attributes: {
      query: {
        postType
      } = {}
    } = {}
  } = _ref;
  if (!postType) return null;
  const newPostUrl = Object(external_gc_url_["addQueryArgs"])('post-new.php', {
    post_type: postType
  });
  return Object(external_gc_element_["createElement"])("div", {
    className: "gc-block-query__create-new-link"
  }, Object(external_gc_element_["createInterpolateElement"])(Object(external_gc_i18n_["__"])('为此feed <a>创建新文章</a>。'), // eslint-disable-next-line jsx-a11y/anchor-has-content
  {
    a: Object(external_gc_element_["createElement"])("a", {
      href: newPostUrl
    })
  }));
};
/**
 * Override the default edit UI to include layout controls
 *
 * @param {Function} BlockEdit Original component
 * @return {Function}           Wrapped component
 */


const queryTopInspectorControls = Object(external_gc_compose_["createHigherOrderComponent"])(BlockEdit => props => {
  const {
    name,
    isSelected
  } = props;

  if (name !== 'core/query' || !isSelected) {
    return Object(external_gc_element_["createElement"])(BlockEdit, Object(esm_extends["a" /* default */])({
      key: "edit"
    }, props));
  }

  return Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InspectorControls"], null, Object(external_gc_element_["createElement"])(CreateNewPostLink, props)), Object(external_gc_element_["createElement"])(BlockEdit, Object(esm_extends["a" /* default */])({
    key: "edit"
  }, props)));
}, 'withInspectorControls');
/* harmony default export */ var query_hooks = (queryTopInspectorControls);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/query/index.js
/**
 * GeChiUI dependencies
 */


/**
 * Internal dependencies
 */

const query_metadata = {
  apiVersion: 2,
  name: "core/query",
  title: "循环查询",
  category: "theme",
  description: "一个可以根据不同的查询参数和视觉配置来显示文章类型的高级区块。",
  textdomain: "default",
  attributes: {
    queryId: {
      type: "number"
    },
    query: {
      type: "object",
      "default": {
        perPage: null,
        pages: 0,
        offset: 0,
        postType: "post",
        categoryIds: [],
        tagIds: [],
        order: "desc",
        orderBy: "date",
        author: "",
        search: "",
        exclude: [],
        sticky: "",
        inherit: true
      }
    },
    tagName: {
      type: "string",
      "default": "div"
    },
    displayLayout: {
      type: "object",
      "default": {
        type: "list"
      }
    }
  },
  providesContext: {
    queryId: "queryId",
    query: "query",
    displayLayout: "displayLayout"
  },
  supports: {
    align: ["wide", "full"],
    html: false,
    color: {
      gradients: true,
      link: true
    },
    __experimentalLayout: true
  },
  editorStyle: "gc-block-query-editor"
};





const {
  name: query_name
} = query_metadata;

const query_settings = {
  icon: library_loop,
  edit: query_edit,
  save: QuerySave,
  variations: query_variations,
  deprecated: query_deprecated
}; // Importing this file includes side effects and is whitelisted
// in block-library/package.json under `sideEffects`.

Object(external_gc_hooks_["addFilter"])('editor.BlockEdit', 'core/query', query_hooks);

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/query-pagination.js


/**
 * GeChiUI dependencies
 */

const queryPagination = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Rect"], {
  x: "4",
  y: "10.5",
  width: "6",
  height: "3",
  rx: "1.5",
  fill: "#000"
}), Object(external_gc_element_["createElement"])(external_gc_primitives_["Rect"], {
  x: "12",
  y: "10.5",
  width: "3",
  height: "3",
  rx: "1.5",
  fill: "#000"
}), Object(external_gc_element_["createElement"])(external_gc_primitives_["Rect"], {
  x: "17",
  y: "10.5",
  width: "3",
  height: "3",
  rx: "1.5",
  fill: "#000"
}));
/* harmony default export */ var query_pagination = (queryPagination);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/query-pagination/query-pagination-arrow-controls.js


/**
 * GeChiUI dependencies
 */


function QueryPaginationArrowControls(_ref) {
  let {
    value,
    onChange
  } = _ref;
  return Object(external_gc_element_["createElement"])(external_gc_components_["__experimentalToggleGroupControl"], {
    label: Object(external_gc_i18n_["__"])('箭'),
    value: value,
    onChange: onChange,
    help: Object(external_gc_i18n_["__"])('附加到下一页和上一页链接的装饰箭头。'),
    isBlock: true
  }, Object(external_gc_element_["createElement"])(external_gc_components_["__experimentalToggleGroupControlOption"], {
    value: "none",
    label: Object(external_gc_i18n_["_x"])('无', 'Arrow option for Query Pagination Next/Previous blocks')
  }), Object(external_gc_element_["createElement"])(external_gc_components_["__experimentalToggleGroupControlOption"], {
    value: "arrow",
    label: Object(external_gc_i18n_["_x"])('箭头', 'Arrow option for Query Pagination Next/Previous blocks')
  }), Object(external_gc_element_["createElement"])(external_gc_components_["__experimentalToggleGroupControlOption"], {
    value: "chevron",
    label: Object(external_gc_i18n_["_x"])('V形', 'Arrow option for Query Pagination Next/Previous blocks')
  }));
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/query-pagination/edit.js


/**
 * GeChiUI dependencies
 */





/**
 * Internal dependencies
 */


const query_pagination_edit_TEMPLATE = [['core/query-pagination-previous'], ['core/query-pagination-numbers'], ['core/query-pagination-next']];

const getDefaultBlockLayout = blockTypeOrName => {
  const layoutBlockSupportConfig = Object(external_gc_blocks_["getBlockSupport"])(blockTypeOrName, '__experimentalLayout');
  return layoutBlockSupportConfig === null || layoutBlockSupportConfig === void 0 ? void 0 : layoutBlockSupportConfig.default;
};

function QueryPaginationEdit(_ref) {
  let {
    attributes: {
      paginationArrow,
      layout
    },
    setAttributes,
    clientId,
    name
  } = _ref;
  const usedLayout = layout || getDefaultBlockLayout(name);
  const hasNextPreviousBlocks = Object(external_gc_data_["useSelect"])(select => {
    const {
      getBlocks
    } = select(external_gc_blockEditor_["store"]);
    const innerBlocks = getBlocks(clientId);
    /**
     * Show the `paginationArrow` control only if a
     * `QueryPaginationNext/Previous` block exists.
     */

    return innerBlocks === null || innerBlocks === void 0 ? void 0 : innerBlocks.find(innerBlock => {
      return ['core/query-pagination-next', 'core/query-pagination-previous'].includes(innerBlock.name);
    });
  }, []);
  const blockProps = Object(external_gc_blockEditor_["useBlockProps"])();
  const innerBlocksProps = Object(external_gc_blockEditor_["useInnerBlocksProps"])(blockProps, {
    template: query_pagination_edit_TEMPLATE,
    allowedBlocks: ['core/query-pagination-previous', 'core/query-pagination-numbers', 'core/query-pagination-next'],
    __experimentalLayout: usedLayout
  });
  return Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, hasNextPreviousBlocks && Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InspectorControls"], null, Object(external_gc_element_["createElement"])(external_gc_components_["PanelBody"], {
    title: Object(external_gc_i18n_["__"])('设置')
  }, Object(external_gc_element_["createElement"])(QueryPaginationArrowControls, {
    value: paginationArrow,
    onChange: value => {
      setAttributes({
        paginationArrow: value
      });
    }
  }))), Object(external_gc_element_["createElement"])("div", innerBlocksProps));
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/query-pagination/save.js


/**
 * GeChiUI dependencies
 */

function query_pagination_save_save() {
  return Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InnerBlocks"].Content, null);
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/query-pagination/deprecated.js


/**
 * GeChiUI dependencies
 */

const query_pagination_deprecated_deprecated = [// Version with wrapper `div` element.
{
  save() {
    return Object(external_gc_element_["createElement"])("div", external_gc_blockEditor_["useBlockProps"].save(), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InnerBlocks"].Content, null));
  }

}];
/* harmony default export */ var query_pagination_deprecated = (query_pagination_deprecated_deprecated);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/query-pagination/index.js
/**
 * GeChiUI dependencies
 */

/**
 * Internal dependencies
 */

const query_pagination_metadata = {
  apiVersion: 2,
  name: "core/query-pagination",
  title: "分页",
  category: "design",
  parent: ["core/query"],
  description: "如果适用，显示下一组/上一组文章的分页导航。",
  textdomain: "default",
  attributes: {
    paginationArrow: {
      type: "string",
      "default": "none"
    }
  },
  usesContext: ["queryId", "query"],
  providesContext: {
    paginationArrow: "paginationArrow"
  },
  supports: {
    align: true,
    reusable: false,
    html: false,
    color: {
      gradients: true,
      link: true
    },
    __experimentalLayout: {
      allowSwitching: false,
      allowInheriting: false,
      "default": {
        type: "flex"
      }
    }
  },
  editorStyle: "gc-block-query-pagination-editor",
  style: "gc-block-query-pagination"
};



const {
  name: query_pagination_name
} = query_pagination_metadata;

const query_pagination_settings = {
  icon: query_pagination,
  edit: QueryPaginationEdit,
  save: query_pagination_save_save,
  deprecated: query_pagination_deprecated
};

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/query-pagination-next.js


/**
 * GeChiUI dependencies
 */

const queryPaginationNext = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Rect"], {
  x: "6",
  y: "10.5",
  width: "3",
  height: "3",
  rx: "1.5",
  fill: "#000"
}), Object(external_gc_element_["createElement"])(external_gc_primitives_["Rect"], {
  x: "11",
  y: "10.5",
  width: "3",
  height: "3",
  rx: "1.5",
  fill: "#000"
}), Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M16.5 9.5L19 12l-2.5 2.5",
  stroke: "#1E1E1E",
  strokeWidth: "1.5"
}));
/* harmony default export */ var query_pagination_next = (queryPaginationNext);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/query-pagination-next/edit.js



/**
 * GeChiUI dependencies
 */


const arrowMap = {
  none: '',
  arrow: '→',
  chevron: '»'
};
function QueryPaginationNextEdit(_ref) {
  let {
    attributes: {
      label
    },
    setAttributes,
    context: {
      paginationArrow
    }
  } = _ref;
  const displayArrow = arrowMap[paginationArrow];
  return Object(external_gc_element_["createElement"])("a", Object(esm_extends["a" /* default */])({
    href: "#pagination-next-pseudo-link",
    onClick: event => event.preventDefault()
  }, Object(external_gc_blockEditor_["useBlockProps"])()), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["PlainText"], {
    __experimentalVersion: 2,
    tagName: "span",
    "aria-label": Object(external_gc_i18n_["__"])('下一页链接'),
    placeholder: Object(external_gc_i18n_["__"])('下一页'),
    value: label,
    onChange: newLabel => setAttributes({
      label: newLabel
    })
  }), displayArrow && Object(external_gc_element_["createElement"])("span", {
    className: `gc-block-query-pagination-next-arrow is-arrow-${paginationArrow}`
  }, displayArrow));
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/query-pagination-next/index.js
/**
 * GeChiUI dependencies
 */

/**
 * Internal dependencies
 */

const query_pagination_next_metadata = {
  apiVersion: 2,
  name: "core/query-pagination-next",
  title: "下一页",
  category: "design",
  parent: ["core/query-pagination"],
  description: "显示下一篇文章的页面链接。",
  textdomain: "default",
  attributes: {
    label: {
      type: "string"
    }
  },
  usesContext: ["queryId", "query", "paginationArrow"],
  supports: {
    reusable: false,
    html: false,
    color: {
      gradients: true,
      text: false
    },
    typography: {
      fontSize: true,
      lineHeight: true,
      __experimentalFontStyle: true,
      __experimentalFontWeight: true,
      __experimentalLetterSpacing: true,
      __experimentalTextTransform: true,
      __experimentalDefaultControls: {
        fontSize: true
      }
    }
  }
};

const {
  name: query_pagination_next_name
} = query_pagination_next_metadata;

const query_pagination_next_settings = {
  icon: query_pagination_next,
  edit: QueryPaginationNextEdit
};

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/query-pagination-numbers.js


/**
 * GeChiUI dependencies
 */

const queryPaginationNumbers = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Rect"], {
  x: "4",
  y: "10.5",
  width: "6",
  height: "3",
  rx: "1.5",
  fill: "#000"
}), Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M13.5 14v-4l-1.5.5",
  stroke: "#1E1E1E"
}), Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M19.266 9.805c-.473-.611-1.22-.51-1.702-.367a3.854 3.854 0 00-.718.307l.13 1.082c.192-.17.47-.422.782-.515.34-.1.578.025.668.141.21.27-.034.835-.16 1.055-.49.85-.93 1.594-1.45 2.492H19.5v-1h-.914c.277-.574.814-1.443.914-2.106.052-.343.02-.762-.234-1.09z",
  fill: "#1E1E1E"
}));
/* harmony default export */ var query_pagination_numbers = (queryPaginationNumbers);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/query-pagination-numbers/edit.js


/**
 * GeChiUI dependencies
 */


const createPaginationItem = function (content) {
  let Tag = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'a';
  let extraClass = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
  return Object(external_gc_element_["createElement"])(Tag, {
    className: `page-numbers ${extraClass}`
  }, content);
};

const previewPaginationNumbers = () => Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, createPaginationItem(1), createPaginationItem(2), createPaginationItem(3, 'span', 'current'), createPaginationItem(4), createPaginationItem(5), createPaginationItem('...', 'span', 'dots'), createPaginationItem(8));

function QueryPaginationNumbersEdit() {
  const paginationNumbers = previewPaginationNumbers();
  return Object(external_gc_element_["createElement"])("div", Object(external_gc_blockEditor_["useBlockProps"])(), paginationNumbers);
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/query-pagination-numbers/index.js
/**
 * GeChiUI dependencies
 */

/**
 * Internal dependencies
 */

const query_pagination_numbers_metadata = {
  apiVersion: 2,
  name: "core/query-pagination-numbers",
  title: "页码",
  category: "design",
  parent: ["core/query-pagination"],
  description: "显示分页的页码列表",
  textdomain: "default",
  usesContext: ["queryId", "query"],
  supports: {
    reusable: false,
    html: false
  },
  editorStyle: "query-pagination-numbers-editor"
};

const {
  name: query_pagination_numbers_name
} = query_pagination_numbers_metadata;

const query_pagination_numbers_settings = {
  icon: query_pagination_numbers,
  edit: QueryPaginationNumbersEdit
};

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/query-pagination-previous.js


/**
 * GeChiUI dependencies
 */

const queryPaginationPrevious = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Rect"], {
  x: "18",
  y: "13.5",
  width: "3",
  height: "3",
  rx: "1.5",
  transform: "rotate(-180 18 13.5)",
  fill: "#000"
}), Object(external_gc_element_["createElement"])(external_gc_primitives_["Rect"], {
  x: "13",
  y: "13.5",
  width: "3",
  height: "3",
  rx: "1.5",
  transform: "rotate(-180 13 13.5)",
  fill: "#000"
}), Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M7.5 14.5L5 12l2.5-2.5",
  stroke: "#1E1E1E",
  strokeWidth: "1.5"
}));
/* harmony default export */ var query_pagination_previous = (queryPaginationPrevious);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/query-pagination-previous/edit.js



/**
 * GeChiUI dependencies
 */


const edit_arrowMap = {
  none: '',
  arrow: '←',
  chevron: '«'
};
function QueryPaginationPreviousEdit(_ref) {
  let {
    attributes: {
      label
    },
    setAttributes,
    context: {
      paginationArrow
    }
  } = _ref;
  const displayArrow = edit_arrowMap[paginationArrow];
  return Object(external_gc_element_["createElement"])("a", Object(esm_extends["a" /* default */])({
    href: "#pagination-previous-pseudo-link",
    onClick: event => event.preventDefault()
  }, Object(external_gc_blockEditor_["useBlockProps"])()), displayArrow && Object(external_gc_element_["createElement"])("span", {
    className: `gc-block-query-pagination-previous-arrow is-arrow-${paginationArrow}`
  }, displayArrow), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["PlainText"], {
    __experimentalVersion: 2,
    tagName: "span",
    "aria-label": Object(external_gc_i18n_["__"])('上一页链接'),
    placeholder: Object(external_gc_i18n_["__"])('上一页'),
    value: label,
    onChange: newLabel => setAttributes({
      label: newLabel
    })
  }));
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/query-pagination-previous/index.js
/**
 * GeChiUI dependencies
 */

/**
 * Internal dependencies
 */

const query_pagination_previous_metadata = {
  apiVersion: 2,
  name: "core/query-pagination-previous",
  title: "上一页",
  category: "design",
  parent: ["core/query-pagination"],
  description: "显示上一篇文章的页面链接。",
  textdomain: "default",
  attributes: {
    label: {
      type: "string"
    }
  },
  usesContext: ["queryId", "query", "paginationArrow"],
  supports: {
    reusable: false,
    html: false,
    color: {
      gradients: true,
      text: false
    },
    typography: {
      fontSize: true,
      lineHeight: true,
      __experimentalFontStyle: true,
      __experimentalFontWeight: true,
      __experimentalLetterSpacing: true,
      __experimentalTextTransform: true,
      __experimentalDefaultControls: {
        fontSize: true
      }
    }
  }
};

const {
  name: query_pagination_previous_name
} = query_pagination_previous_metadata;

const query_pagination_previous_settings = {
  icon: query_pagination_previous,
  edit: QueryPaginationPreviousEdit
};

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/query-title/edit.js


/**
 * External dependencies
 */

/**
 * GeChiUI dependencies
 */
// import { useSelect, useDispatch } from '@gechiui/data';



/**
 * Internal dependencies
 */


const SUPPORTED_TYPES = ['archive'];
function QueryTitleEdit(_ref) {
  let {
    attributes: {
      type,
      level,
      textAlign
    },
    setAttributes
  } = _ref;
  const TagName = `h${level}`;
  const blockProps = Object(external_gc_blockEditor_["useBlockProps"])({
    className: classnames_default()({
      [`has-text-align-${textAlign}`]: textAlign,
      'gc-block-query-title__placeholder': type === 'archive'
    })
  }); // The plan is to augment this block with more
  // block variations like `Search Title`.

  if (!SUPPORTED_TYPES.includes(type)) {
    return Object(external_gc_element_["createElement"])("div", blockProps, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["Warning"], null, Object(external_gc_i18n_["__"])('不支持提供的类型。')));
  }

  let titleElement;

  if (type === 'archive') {
    titleElement = Object(external_gc_element_["createElement"])(TagName, blockProps, Object(external_gc_i18n_["__"])('归档标题'));
  }

  return Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["BlockControls"], {
    group: "block"
  }, Object(external_gc_element_["createElement"])(HeadingLevelDropdown, {
    selectedLevel: level,
    onChange: newLevel => setAttributes({
      level: newLevel
    })
  }), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["AlignmentControl"], {
    value: textAlign,
    onChange: nextAlign => {
      setAttributes({
        textAlign: nextAlign
      });
    }
  })), titleElement);
}

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/archive-title.js


/**
 * GeChiUI dependencies
 */

const archiveTitle = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  viewBox: "0 0 24 24",
  xmlns: "http://www.w3.org/2000/svg"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  stroke: "#1E1E1E",
  strokeWidth: "1.5",
  d: "M4 19.25h9M4 15.25h16"
}), Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M8.994 10.103H6.08L5.417 12H4l2.846-8h1.383l2.845 8H9.657l-.663-1.897zm-.457-1.28l-.994-2.857-1.006 2.857h2z",
  fill: "#1E1E1E"
}));
/* harmony default export */ var archive_title = (archiveTitle);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/query-title/variations.js
/**
 * GeChiUI dependencies
 */


const query_title_variations_variations = [{
  isDefault: true,
  name: 'archive-title',
  title: Object(external_gc_i18n_["__"])('归档标题'),
  description: Object(external_gc_i18n_["__"])('根据查询的对象显示归档标题。'),
  icon: archive_title,
  attributes: {
    type: 'archive'
  },
  scope: ['inserter']
}];
/**
 * Add `isActive` function to all `query-title` variations, if not defined.
 * `isActive` function is used to find a variation match from a created
 *  Block by providing its attributes.
 */

query_title_variations_variations.forEach(variation => {
  if (variation.isActive) return;

  variation.isActive = (blockAttributes, variationAttributes) => blockAttributes.type === variationAttributes.type;
});
/* harmony default export */ var query_title_variations = (query_title_variations_variations);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/query-title/deprecated.js
/**
 * Internal dependencies
 */

const query_title_deprecated_v1 = {
  attributes: {
    type: {
      type: 'string'
    },
    textAlign: {
      type: 'string'
    },
    level: {
      type: 'number',
      default: 1
    }
  },
  supports: {
    align: ['wide', 'full'],
    html: false,
    color: {
      gradients: true
    },
    spacing: {
      margin: true
    },
    typography: {
      fontSize: true,
      lineHeight: true,
      __experimentalFontFamily: true
    }
  },

  save() {
    return null;
  },

  migrate: migrate_font_family,

  isEligible(_ref) {
    var _style$typography;

    let {
      style
    } = _ref;
    return style === null || style === void 0 ? void 0 : (_style$typography = style.typography) === null || _style$typography === void 0 ? void 0 : _style$typography.fontFamily;
  }

};
/**
 * New deprecations need to be placed first
 * for them to have higher priority.
 *
 * Old deprecations may need to be updated as well.
 *
 * See block-deprecation.md
 */

/* harmony default export */ var query_title_deprecated = ([query_title_deprecated_v1]);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/query-title/index.js
/**
 * Internal dependencies
 */
const query_title_metadata = {
  apiVersion: 2,
  name: "core/query-title",
  title: "查询标题",
  category: "theme",
  description: "显示查询标题。",
  textdomain: "default",
  attributes: {
    type: {
      type: "string"
    },
    textAlign: {
      type: "string"
    },
    level: {
      type: "number",
      "default": 1
    }
  },
  supports: {
    align: ["wide", "full"],
    html: false,
    color: {
      gradients: true
    },
    spacing: {
      margin: true
    },
    typography: {
      fontSize: true,
      lineHeight: true,
      __experimentalFontFamily: true,
      __experimentalFontStyle: true,
      __experimentalFontWeight: true,
      __experimentalLetterSpacing: true,
      __experimentalTextTransform: true,
      __experimentalDefaultControls: {
        fontSize: true,
        fontAppearance: true,
        textTransform: true
      }
    }
  },
  editorStyle: "gc-block-query-title-editor"
};



const {
  name: query_title_name
} = query_title_metadata;

const query_title_settings = {
  edit: QueryTitleEdit,
  variations: query_title_variations,
  deprecated: query_title_deprecated
};

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/quote.js


/**
 * GeChiUI dependencies
 */

const quote = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  viewBox: "0 0 24 24",
  xmlns: "http://www.w3.org/2000/svg"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M13 6v6h5.2v4c0 .8-.2 1.4-.5 1.7-.6.6-1.6.6-2.5.5h-.3v1.5h.5c1 0 2.3-.1 3.3-1 .6-.6 1-1.6 1-2.8V6H13zm-9 6h5.2v4c0 .8-.2 1.4-.5 1.7-.6.6-1.6.6-2.5.5h-.3v1.5h.5c1 0 2.3-.1 3.3-1 .6-.6 1-1.6 1-2.8V6H4v6z"
}));
/* harmony default export */ var library_quote = (quote);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/quote/deprecated.js


/**
 * External dependencies
 */

/**
 * GeChiUI dependencies
 */


const quote_deprecated_blockAttributes = {
  value: {
    type: 'string',
    source: 'html',
    selector: 'blockquote',
    multiline: 'p',
    default: ''
  },
  citation: {
    type: 'string',
    source: 'html',
    selector: 'cite',
    default: ''
  },
  align: {
    type: 'string'
  }
};
const quote_deprecated_deprecated = [{
  attributes: quote_deprecated_blockAttributes,

  save(_ref) {
    let {
      attributes
    } = _ref;
    const {
      align,
      value,
      citation
    } = attributes;
    return Object(external_gc_element_["createElement"])("blockquote", {
      style: {
        textAlign: align ? align : null
      }
    }, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"].Content, {
      multiline: true,
      value: value
    }), !external_gc_blockEditor_["RichText"].isEmpty(citation) && Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"].Content, {
      tagName: "cite",
      value: citation
    }));
  }

}, {
  attributes: { ...quote_deprecated_blockAttributes,
    style: {
      type: 'number',
      default: 1
    }
  },

  migrate(attributes) {
    if (attributes.style === 2) {
      return { ...Object(external_lodash_["omit"])(attributes, ['style']),
        className: attributes.className ? attributes.className + ' is-style-large' : 'is-style-large'
      };
    }

    return attributes;
  },

  save(_ref2) {
    let {
      attributes
    } = _ref2;
    const {
      align,
      value,
      citation,
      style
    } = attributes;
    return Object(external_gc_element_["createElement"])("blockquote", {
      className: style === 2 ? 'is-large' : '',
      style: {
        textAlign: align ? align : null
      }
    }, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"].Content, {
      multiline: true,
      value: value
    }), !external_gc_blockEditor_["RichText"].isEmpty(citation) && Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"].Content, {
      tagName: "cite",
      value: citation
    }));
  }

}, {
  attributes: { ...quote_deprecated_blockAttributes,
    citation: {
      type: 'string',
      source: 'html',
      selector: 'footer',
      default: ''
    },
    style: {
      type: 'number',
      default: 1
    }
  },

  migrate(attributes) {
    if (!isNaN(parseInt(attributes.style))) {
      return { ...Object(external_lodash_["omit"])(attributes, ['style'])
      };
    }

    return attributes;
  },

  save(_ref3) {
    let {
      attributes
    } = _ref3;
    const {
      align,
      value,
      citation,
      style
    } = attributes;
    return Object(external_gc_element_["createElement"])("blockquote", {
      className: `blocks-quote-style-${style}`,
      style: {
        textAlign: align ? align : null
      }
    }, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"].Content, {
      multiline: true,
      value: value
    }), !external_gc_blockEditor_["RichText"].isEmpty(citation) && Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"].Content, {
      tagName: "footer",
      value: citation
    }));
  }

}];
/* harmony default export */ var quote_deprecated = (quote_deprecated_deprecated);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/quote/edit.js


/**
 * External dependencies
 */

/**
 * GeChiUI dependencies
 */






const isWebPlatform = external_gc_element_["Platform"].OS === 'web';
function QuoteEdit(_ref) {
  let {
    attributes,
    setAttributes,
    isSelected,
    mergeBlocks,
    onReplace,
    className,
    insertBlocksAfter,
    style
  } = _ref;
  const {
    align,
    value,
    citation
  } = attributes;
  const blockProps = Object(external_gc_blockEditor_["useBlockProps"])({
    className: classnames_default()(className, {
      [`has-text-align-${align}`]: align
    }),
    style
  });
  return Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["BlockControls"], {
    group: "block"
  }, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["AlignmentControl"], {
    value: align,
    onChange: nextAlign => {
      setAttributes({
        align: nextAlign
      });
    }
  })), Object(external_gc_element_["createElement"])(external_gc_components_["BlockQuotation"], blockProps, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"], {
    identifier: "value",
    multiline: true,
    value: value,
    onChange: nextValue => setAttributes({
      value: nextValue
    }),
    onMerge: mergeBlocks,
    onRemove: forward => {
      const hasEmptyCitation = !citation || citation.length === 0;

      if (!forward && hasEmptyCitation) {
        onReplace([]);
      }
    },
    "aria-label": Object(external_gc_i18n_["__"])('引用文字'),
    placeholder: // translators: placeholder text used for the quote
    Object(external_gc_i18n_["__"])('添加引用'),
    onReplace: onReplace,
    onSplit: piece => Object(external_gc_blocks_["createBlock"])('core/quote', { ...attributes,
      value: piece
    }),
    __unstableOnSplitMiddle: () => Object(external_gc_blocks_["createBlock"])('core/paragraph'),
    textAlign: align
  }), (!external_gc_blockEditor_["RichText"].isEmpty(citation) || isSelected) && Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"], {
    identifier: "citation",
    tagName: isWebPlatform ? 'cite' : undefined,
    style: {
      display: 'block'
    },
    value: citation,
    onChange: nextCitation => setAttributes({
      citation: nextCitation
    }),
    __unstableMobileNoFocusOnMount: true,
    "aria-label": Object(external_gc_i18n_["__"])('引文'),
    placeholder: // translators: placeholder text used for the citation
    Object(external_gc_i18n_["__"])('添加引文'),
    className: "gc-block-quote__citation",
    textAlign: align,
    __unstableOnSplitAtEnd: () => insertBlocksAfter(Object(external_gc_blocks_["createBlock"])('core/paragraph'))
  })));
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/quote/save.js


/**
 * External dependencies
 */

/**
 * GeChiUI dependencies
 */


function quote_save_save(_ref) {
  let {
    attributes
  } = _ref;
  const {
    align,
    value,
    citation
  } = attributes;
  const className = classnames_default()({
    [`has-text-align-${align}`]: align
  });
  return Object(external_gc_element_["createElement"])("blockquote", external_gc_blockEditor_["useBlockProps"].save({
    className
  }), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"].Content, {
    multiline: true,
    value: value
  }), !external_gc_blockEditor_["RichText"].isEmpty(citation) && Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"].Content, {
    tagName: "cite",
    value: citation
  }));
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/quote/transforms.js
/**
 * GeChiUI dependencies
 */


const quote_transforms_transforms = {
  from: [{
    type: 'block',
    isMultiBlock: true,
    blocks: ['core/paragraph'],
    transform: attributes => {
      return Object(external_gc_blocks_["createBlock"])('core/quote', {
        value: Object(external_gc_richText_["toHTMLString"])({
          value: Object(external_gc_richText_["join"])(attributes.map(_ref => {
            let {
              content
            } = _ref;
            return Object(external_gc_richText_["create"])({
              html: content
            });
          }), '\u2028'),
          multilineTag: 'p'
        }),
        anchor: attributes.anchor
      });
    }
  }, {
    type: 'block',
    blocks: ['core/heading'],
    transform: _ref2 => {
      let {
        content,
        anchor
      } = _ref2;
      return Object(external_gc_blocks_["createBlock"])('core/quote', {
        value: `<p>${content}</p>`,
        anchor
      });
    }
  }, {
    type: 'block',
    blocks: ['core/pullquote'],
    transform: _ref3 => {
      let {
        value,
        citation,
        anchor
      } = _ref3;
      return Object(external_gc_blocks_["createBlock"])('core/quote', {
        value,
        citation,
        anchor
      });
    }
  }, {
    type: 'prefix',
    prefix: '>',
    transform: content => {
      return Object(external_gc_blocks_["createBlock"])('core/quote', {
        value: `<p>${content}</p>`
      });
    }
  }, {
    type: 'raw',
    isMatch: node => {
      const isParagraphOrSingleCite = (() => {
        let hasCitation = false;
        return child => {
          // Child is a paragraph.
          if (child.nodeName === 'P') {
            return true;
          } // Child is a cite and no other cite child exists before it.


          if (!hasCitation && child.nodeName === 'CITE') {
            hasCitation = true;
            return true;
          }
        };
      })();

      return node.nodeName === 'BLOCKQUOTE' && // The quote block can only handle multiline paragraph
      // content with an optional cite child.
      Array.from(node.childNodes).every(isParagraphOrSingleCite);
    },
    schema: _ref4 => {
      let {
        phrasingContentSchema
      } = _ref4;
      return {
        blockquote: {
          children: {
            p: {
              children: phrasingContentSchema
            },
            cite: {
              children: phrasingContentSchema
            }
          }
        }
      };
    }
  }],
  to: [{
    type: 'block',
    blocks: ['core/paragraph'],
    transform: _ref5 => {
      let {
        value,
        citation
      } = _ref5;
      const paragraphs = [];

      if (value && value !== '<p></p>') {
        paragraphs.push(...Object(external_gc_richText_["split"])(Object(external_gc_richText_["create"])({
          html: value,
          multilineTag: 'p'
        }), '\u2028').map(piece => Object(external_gc_blocks_["createBlock"])('core/paragraph', {
          content: Object(external_gc_richText_["toHTMLString"])({
            value: piece
          })
        })));
      }

      if (citation && citation !== '<p></p>') {
        paragraphs.push(Object(external_gc_blocks_["createBlock"])('core/paragraph', {
          content: citation
        }));
      }

      if (paragraphs.length === 0) {
        return Object(external_gc_blocks_["createBlock"])('core/paragraph', {
          content: ''
        });
      }

      return paragraphs;
    }
  }, {
    type: 'block',
    blocks: ['core/heading'],
    transform: _ref6 => {
      let {
        value,
        citation,
        ...attrs
      } = _ref6;

      // If there is no quote content, use the citation as the
      // content of the resulting heading. A nonexistent citation
      // will result in an empty heading.
      if (value === '<p></p>') {
        return Object(external_gc_blocks_["createBlock"])('core/heading', {
          content: citation
        });
      }

      const pieces = Object(external_gc_richText_["split"])(Object(external_gc_richText_["create"])({
        html: value,
        multilineTag: 'p'
      }), '\u2028');
      const headingBlock = Object(external_gc_blocks_["createBlock"])('core/heading', {
        content: Object(external_gc_richText_["toHTMLString"])({
          value: pieces[0]
        })
      });

      if (!citation && pieces.length === 1) {
        return headingBlock;
      }

      const quotePieces = pieces.slice(1);
      const quoteBlock = Object(external_gc_blocks_["createBlock"])('core/quote', { ...attrs,
        citation,
        value: Object(external_gc_richText_["toHTMLString"])({
          value: quotePieces.length ? Object(external_gc_richText_["join"])(pieces.slice(1), '\u2028') : Object(external_gc_richText_["create"])(),
          multilineTag: 'p'
        })
      });
      return [headingBlock, quoteBlock];
    }
  }, {
    type: 'block',
    blocks: ['core/pullquote'],
    transform: _ref7 => {
      let {
        value,
        citation,
        anchor
      } = _ref7;
      return Object(external_gc_blocks_["createBlock"])('core/pullquote', {
        value,
        citation,
        anchor
      });
    }
  }]
};
/* harmony default export */ var quote_transforms = (quote_transforms_transforms);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/quote/index.js
/**
 * GeChiUI dependencies
 */


/**
 * Internal dependencies
 */



const quote_metadata = {
  apiVersion: 2,
  name: "core/quote",
  title: "引用",
  category: "text",
  description: "对引用的文本进行视觉强调。",
  keywords: ["blockquote", "cite"],
  textdomain: "default",
  attributes: {
    value: {
      type: "string",
      source: "html",
      selector: "blockquote",
      multiline: "p",
      "default": "",
      __experimentalRole: "content"
    },
    citation: {
      type: "string",
      source: "html",
      selector: "cite",
      "default": "",
      __experimentalRole: "content"
    },
    align: {
      type: "string"
    }
  },
  supports: {
    anchor: true,
    __experimentalSlashInserter: true,
    typography: {
      fontSize: true,
      lineHeight: true,
      __experimentalFontStyle: true,
      __experimentalFontWeight: true,
      __experimentalLetterSpacing: true,
      __experimentalTextTransform: true,
      __experimentalDefaultControls: {
        fontSize: true,
        fontAppearance: true
      }
    }
  },
  styles: [{
    name: "default",
    label: "默认",
    isDefault: true
  }, {
    name: "plain",
    label: "Plain"
  }, {
    name: "large",
    label: "大号"
  }],
  editorStyle: "gc-block-quote-editor",
  style: "gc-block-quote"
};


const {
  name: quote_name
} = quote_metadata;

const quote_settings = {
  icon: library_quote,
  example: {
    attributes: {
      value: '<p>' + Object(external_gc_i18n_["__"])('在引用其他人时，我们引用自己。') + '</p>',
      citation: 'Julio Cortázar',
      className: 'is-style-large'
    }
  },
  transforms: quote_transforms,
  edit: QuoteEdit,
  save: quote_save_save,

  merge(attributes, _ref) {
    let {
      value,
      citation
    } = _ref;

    // Quote citations cannot be merged. Pick the second one unless it's
    // empty.
    if (!citation) {
      citation = attributes.citation;
    }

    if (!value || value === '<p></p>') {
      return { ...attributes,
        citation
      };
    }

    return { ...attributes,
      value: attributes.value + value,
      citation
    };
  },

  deprecated: quote_deprecated
};

// EXTERNAL MODULE: ./node_modules/@gechiui/icons/build-module/library/symbol.js
var symbol = __webpack_require__("DUvu");

// EXTERNAL MODULE: external ["gc","reusableBlocks"]
var external_gc_reusableBlocks_ = __webpack_require__("Ppya");

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/ungroup.js


/**
 * GeChiUI dependencies
 */

const ungroup = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M18 4h-7c-1.1 0-2 .9-2 2v7c0 1.1.9 2 2 2h7c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm.5 9c0 .3-.2.5-.5.5h-7c-.3 0-.5-.2-.5-.5V6c0-.3.2-.5.5-.5h7c.3 0 .5.2.5.5v7zm-5 5c0 .3-.2.5-.5.5H6c-.3 0-.5-.2-.5-.5v-7c0-.3.2-.5.5-.5h1V9H6c-1.1 0-2 .9-2 2v7c0 1.1.9 2 2 2h7c1.1 0 2-.9 2-2v-1h-1.5v1z"
}));
/* harmony default export */ var library_ungroup = (ungroup);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/block/edit.js


/**
 * GeChiUI dependencies
 */







function ReusableBlockEdit(_ref) {
  let {
    attributes: {
      ref
    },
    clientId
  } = _ref;
  const [hasAlreadyRendered, RecursionProvider] = Object(external_gc_blockEditor_["__experimentalUseNoRecursiveRenders"])(ref);
  const {
    isMissing,
    hasResolved
  } = Object(external_gc_data_["useSelect"])(select => {
    const persistedBlock = select(external_gc_coreData_["store"]).getEntityRecord('postType', 'gc_block', ref);
    const hasResolvedBlock = select(external_gc_coreData_["store"]).hasFinishedResolution('getEntityRecord', ['postType', 'gc_block', ref]);
    return {
      hasResolved: hasResolvedBlock,
      isMissing: hasResolvedBlock && !persistedBlock
    };
  }, [ref, clientId]);
  const {
    __experimentalConvertBlockToStatic: convertBlockToStatic
  } = Object(external_gc_data_["useDispatch"])(external_gc_reusableBlocks_["store"]);
  const [blocks, onInput, onChange] = Object(external_gc_coreData_["useEntityBlockEditor"])('postType', 'gc_block', {
    id: ref
  });
  const [title, setTitle] = Object(external_gc_coreData_["useEntityProp"])('postType', 'gc_block', 'title', ref);
  const blockProps = Object(external_gc_blockEditor_["useBlockProps"])();
  const innerBlocksProps = Object(external_gc_blockEditor_["useInnerBlocksProps"])({}, {
    value: blocks,
    onInput,
    onChange,
    renderAppender: blocks !== null && blocks !== void 0 && blocks.length ? undefined : external_gc_blockEditor_["InnerBlocks"].ButtonBlockAppender
  });

  if (hasAlreadyRendered) {
    return Object(external_gc_element_["createElement"])("div", blockProps, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["Warning"], null, Object(external_gc_i18n_["__"])('区块不能在其内部渲染。')));
  }

  if (isMissing) {
    return Object(external_gc_element_["createElement"])("div", blockProps, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["Warning"], null, Object(external_gc_i18n_["__"])('区块已被删除或不可用。')));
  }

  if (!hasResolved) {
    return Object(external_gc_element_["createElement"])("div", blockProps, Object(external_gc_element_["createElement"])(external_gc_components_["Placeholder"], null, Object(external_gc_element_["createElement"])(external_gc_components_["Spinner"], null)));
  }

  return Object(external_gc_element_["createElement"])(RecursionProvider, null, Object(external_gc_element_["createElement"])("div", blockProps, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["BlockControls"], null, Object(external_gc_element_["createElement"])(external_gc_components_["ToolbarGroup"], null, Object(external_gc_element_["createElement"])(external_gc_components_["ToolbarButton"], {
    onClick: () => convertBlockToStatic(clientId),
    label: Object(external_gc_i18n_["__"])('转换为常规区块'),
    icon: library_ungroup,
    showTooltip: true
  }))), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InspectorControls"], null, Object(external_gc_element_["createElement"])(external_gc_components_["PanelBody"], null, Object(external_gc_element_["createElement"])(external_gc_components_["TextControl"], {
    label: Object(external_gc_i18n_["__"])('名称'),
    value: title,
    onChange: setTitle
  }))), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["__experimentalBlockContentOverlay"], {
    clientId: clientId,
    wrapperProps: innerBlocksProps,
    className: "block-library-block__reusable-block-container"
  })));
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/block/index.js
/**
 * GeChiUI dependencies
 */

/**
 * Internal dependencies
 */

const block_metadata = {
  apiVersion: 2,
  name: "core/block",
  title: "可重用区块",
  category: "reusable",
  description: "创建并保存内容，以便在整个网站上重复使用。更新块，所做的更改将应用于它所使用的任何地方。",
  textdomain: "default",
  attributes: {
    ref: {
      type: "number"
    }
  },
  supports: {
    customClassName: false,
    html: false,
    inserter: false
  },
  editorStyle: "gc-block-editor"
};

const {
  name: block_name
} = block_metadata;

const block_settings = {
  edit: ReusableBlockEdit,
  icon: symbol["a" /* default */]
};

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/rss.js


/**
 * GeChiUI dependencies
 */

const rss = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M5 10.2h-.8v1.5H5c1.9 0 3.8.8 5.1 2.1 1.4 1.4 2.1 3.2 2.1 5.1v.8h1.5V19c0-2.3-.9-4.5-2.6-6.2-1.6-1.6-3.8-2.6-6.1-2.6zm10.4-1.6C12.6 5.8 8.9 4.2 5 4.2h-.8v1.5H5c3.5 0 6.9 1.4 9.4 3.9s3.9 5.8 3.9 9.4v.8h1.5V19c0-3.9-1.6-7.6-4.4-10.4zM4 20h3v-3H4v3z"
}));
/* harmony default export */ var library_rss = (rss);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/rss/edit.js


/**
 * GeChiUI dependencies
 */






const DEFAULT_MIN_ITEMS = 1;
const DEFAULT_MAX_ITEMS = 10;
function RSSEdit(_ref) {
  let {
    attributes,
    setAttributes
  } = _ref;
  const [isEditing, setIsEditing] = Object(external_gc_element_["useState"])(!attributes.feedURL);
  const {
    blockLayout,
    columns,
    displayAuthor,
    displayDate,
    displayExcerpt,
    excerptLength,
    feedURL,
    itemsToShow
  } = attributes;

  function toggleAttribute(propName) {
    return () => {
      const value = attributes[propName];
      setAttributes({
        [propName]: !value
      });
    };
  }

  function onSubmitURL(event) {
    event.preventDefault();

    if (feedURL) {
      setIsEditing(false);
    }
  }

  const blockProps = Object(external_gc_blockEditor_["useBlockProps"])();

  if (isEditing) {
    return Object(external_gc_element_["createElement"])("div", blockProps, Object(external_gc_element_["createElement"])(external_gc_components_["Placeholder"], {
      icon: library_rss,
      label: "RSS"
    }, Object(external_gc_element_["createElement"])("form", {
      onSubmit: onSubmitURL,
      className: "gc-block-rss__placeholder-form"
    }, Object(external_gc_element_["createElement"])(external_gc_components_["TextControl"], {
      placeholder: Object(external_gc_i18n_["__"])('在此输入URL…'),
      value: feedURL,
      onChange: value => setAttributes({
        feedURL: value
      }),
      className: "gc-block-rss__placeholder-input"
    }), Object(external_gc_element_["createElement"])(external_gc_components_["Button"], {
      variant: "primary",
      type: "submit"
    }, Object(external_gc_i18n_["__"])('使用URL')))));
  }

  const toolbarControls = [{
    icon: library_edit["a" /* default */],
    title: Object(external_gc_i18n_["__"])('编辑RSS URL'),
    onClick: () => setIsEditing(true)
  }, {
    icon: library_list,
    title: Object(external_gc_i18n_["__"])('列表视图'),
    onClick: () => setAttributes({
      blockLayout: 'list'
    }),
    isActive: blockLayout === 'list'
  }, {
    icon: grid["a" /* default */],
    title: Object(external_gc_i18n_["__"])('网格视图'),
    onClick: () => setAttributes({
      blockLayout: 'grid'
    }),
    isActive: blockLayout === 'grid'
  }];
  return Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["BlockControls"], null, Object(external_gc_element_["createElement"])(external_gc_components_["ToolbarGroup"], {
    controls: toolbarControls
  })), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InspectorControls"], null, Object(external_gc_element_["createElement"])(external_gc_components_["PanelBody"], {
    title: Object(external_gc_i18n_["__"])('RSS设置')
  }, Object(external_gc_element_["createElement"])(external_gc_components_["RangeControl"], {
    label: Object(external_gc_i18n_["__"])('项目数量'),
    value: itemsToShow,
    onChange: value => setAttributes({
      itemsToShow: value
    }),
    min: DEFAULT_MIN_ITEMS,
    max: DEFAULT_MAX_ITEMS,
    required: true
  }), Object(external_gc_element_["createElement"])(external_gc_components_["ToggleControl"], {
    label: Object(external_gc_i18n_["__"])('显示作者'),
    checked: displayAuthor,
    onChange: toggleAttribute('displayAuthor')
  }), Object(external_gc_element_["createElement"])(external_gc_components_["ToggleControl"], {
    label: Object(external_gc_i18n_["__"])('显示日期'),
    checked: displayDate,
    onChange: toggleAttribute('displayDate')
  }), Object(external_gc_element_["createElement"])(external_gc_components_["ToggleControl"], {
    label: Object(external_gc_i18n_["__"])('显示摘要'),
    checked: displayExcerpt,
    onChange: toggleAttribute('displayExcerpt')
  }), displayExcerpt && Object(external_gc_element_["createElement"])(external_gc_components_["RangeControl"], {
    label: Object(external_gc_i18n_["__"])('摘要的最大字数'),
    value: excerptLength,
    onChange: value => setAttributes({
      excerptLength: value
    }),
    min: 10,
    max: 100,
    required: true
  }), blockLayout === 'grid' && Object(external_gc_element_["createElement"])(external_gc_components_["RangeControl"], {
    label: Object(external_gc_i18n_["__"])('栏目'),
    value: columns,
    onChange: value => setAttributes({
      columns: value
    }),
    min: 2,
    max: 6,
    required: true
  }))), Object(external_gc_element_["createElement"])("div", blockProps, Object(external_gc_element_["createElement"])(external_gc_components_["Disabled"], null, Object(external_gc_element_["createElement"])(external_gc_serverSideRender_default.a, {
    block: "core/rss",
    attributes: attributes
  }))));
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/rss/index.js
/**
 * GeChiUI dependencies
 */

/**
 * Internal dependencies
 */

const rss_metadata = {
  apiVersion: 2,
  name: "core/rss",
  title: "RSS",
  category: "widgets",
  description: "显示来自任何RSS或Atom Feed的条目。",
  keywords: ["atom", "feed"],
  textdomain: "default",
  attributes: {
    columns: {
      type: "number",
      "default": 2
    },
    blockLayout: {
      type: "string",
      "default": "list"
    },
    feedURL: {
      type: "string",
      "default": ""
    },
    itemsToShow: {
      type: "number",
      "default": 5
    },
    displayExcerpt: {
      type: "boolean",
      "default": false
    },
    displayAuthor: {
      type: "boolean",
      "default": false
    },
    displayDate: {
      type: "boolean",
      "default": false
    },
    excerptLength: {
      type: "number",
      "default": 55
    }
  },
  supports: {
    align: true,
    html: false
  },
  editorStyle: "gc-block-rss-editor",
  style: "gc-block-rss"
};

const {
  name: rss_name
} = rss_metadata;

const rss_settings = {
  icon: library_rss,
  example: {
    attributes: {
      feedURL: 'https://www.gechiui.com'
    }
  },
  edit: RSSEdit
};

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/search/icons.js


/**
 * GeChiUI dependencies
 */

const buttonOnly = Object(external_gc_element_["createElement"])(external_gc_components_["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, Object(external_gc_element_["createElement"])(external_gc_components_["Rect"], {
  x: "7",
  y: "10",
  width: "10",
  height: "4",
  rx: "1",
  fill: "currentColor"
}));
const buttonOutside = Object(external_gc_element_["createElement"])(external_gc_components_["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, Object(external_gc_element_["createElement"])(external_gc_components_["Rect"], {
  x: "4.75",
  y: "15.25",
  width: "6.5",
  height: "9.5",
  transform: "rotate(-90 4.75 15.25)",
  stroke: "currentColor",
  strokeWidth: "1.5",
  fill: "none"
}), Object(external_gc_element_["createElement"])(external_gc_components_["Rect"], {
  x: "16",
  y: "10",
  width: "4",
  height: "4",
  rx: "1",
  fill: "currentColor"
}));
const buttonInside = Object(external_gc_element_["createElement"])(external_gc_components_["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, Object(external_gc_element_["createElement"])(external_gc_components_["Rect"], {
  x: "4.75",
  y: "15.25",
  width: "6.5",
  height: "14.5",
  transform: "rotate(-90 4.75 15.25)",
  stroke: "currentColor",
  strokeWidth: "1.5",
  fill: "none"
}), Object(external_gc_element_["createElement"])(external_gc_components_["Rect"], {
  x: "14",
  y: "10",
  width: "4",
  height: "4",
  rx: "1",
  fill: "currentColor"
}));
const noButton = Object(external_gc_element_["createElement"])(external_gc_components_["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, Object(external_gc_element_["createElement"])(external_gc_components_["Rect"], {
  x: "4.75",
  y: "15.25",
  width: "6.5",
  height: "14.5",
  transform: "rotate(-90 4.75 15.25)",
  stroke: "currentColor",
  fill: "none",
  strokeWidth: "1.5"
}));
const buttonWithIcon = Object(external_gc_element_["createElement"])(external_gc_components_["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, Object(external_gc_element_["createElement"])(external_gc_components_["Rect"], {
  x: "4.75",
  y: "7.75",
  width: "14.5",
  height: "8.5",
  rx: "1.25",
  stroke: "currentColor",
  fill: "none",
  strokeWidth: "1.5"
}), Object(external_gc_element_["createElement"])(external_gc_components_["Rect"], {
  x: "8",
  y: "11",
  width: "8",
  height: "2",
  fill: "currentColor"
}));
const toggleLabel = Object(external_gc_element_["createElement"])(external_gc_components_["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, Object(external_gc_element_["createElement"])(external_gc_components_["Rect"], {
  x: "4.75",
  y: "17.25",
  width: "5.5",
  height: "14.5",
  transform: "rotate(-90 4.75 17.25)",
  stroke: "currentColor",
  fill: "none",
  strokeWidth: "1.5"
}), Object(external_gc_element_["createElement"])(external_gc_components_["Rect"], {
  x: "4",
  y: "7",
  width: "10",
  height: "2",
  fill: "currentColor"
}));

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/search/utils.js
/**
 * Constants
 */
const PC_WIDTH_DEFAULT = 50;
const PX_WIDTH_DEFAULT = 350;
const MIN_WIDTH = 220;
const MIN_WIDTH_UNIT = 'px';
/**
 * Returns a boolean whether passed unit is percentage
 *
 * @param {string} unit Block width unit.
 *
 * @return {boolean} 	Whether unit is '%'.
 */

function utils_isPercentageUnit(unit) {
  return unit === '%';
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/search/edit.js


/**
 * External dependencies
 */

/**
 * GeChiUI dependencies
 */








/**
 * Internal dependencies
 */


 // Used to calculate border radius adjustment to avoid "fat" corners when
// button is placed inside wrapper.

const DEFAULT_INNER_PADDING = '4px';
function SearchEdit(_ref) {
  var _style$border, _style$border2;

  let {
    className,
    attributes,
    setAttributes,
    toggleSelection,
    isSelected,
    clientId
  } = _ref;
  const {
    label,
    showLabel,
    placeholder,
    width,
    widthUnit,
    align,
    buttonText,
    buttonPosition,
    buttonUseIcon,
    style
  } = attributes;
  const insertedInNavigationBlock = Object(external_gc_data_["useSelect"])(select => {
    var _getBlockParentsByBlo;

    const {
      getBlockParentsByBlockName,
      wasBlockJustInserted
    } = select(external_gc_blockEditor_["store"]);
    return !!((_getBlockParentsByBlo = getBlockParentsByBlockName(clientId, 'core/navigation')) !== null && _getBlockParentsByBlo !== void 0 && _getBlockParentsByBlo.length) && wasBlockJustInserted(clientId);
  }, [clientId]);
  const {
    __unstableMarkNextChangeAsNotPersistent
  } = Object(external_gc_data_["useDispatch"])(external_gc_blockEditor_["store"]);
  Object(external_gc_element_["useEffect"])(() => {
    if (!insertedInNavigationBlock) return; // This side-effect should not create an undo level.

    __unstableMarkNextChangeAsNotPersistent();

    setAttributes({
      showLabel: false,
      buttonUseIcon: true,
      buttonPosition: 'button-inside'
    });
  }, [insertedInNavigationBlock]);
  const borderRadius = style === null || style === void 0 ? void 0 : (_style$border = style.border) === null || _style$border === void 0 ? void 0 : _style$border.radius;
  const borderColor = style === null || style === void 0 ? void 0 : (_style$border2 = style.border) === null || _style$border2 === void 0 ? void 0 : _style$border2.color;
  const borderProps = Object(external_gc_blockEditor_["__experimentalUseBorderProps"])(attributes); // Check for old deprecated numerical border radius. Done as a separate
  // check so that a borderRadius style won't overwrite the longhand
  // per-corner styles.

  if (typeof borderRadius === 'number') {
    borderProps.style.borderRadius = `${borderRadius}px`;
  }

  const colorProps = Object(external_gc_blockEditor_["__experimentalUseColorProps"])(attributes);
  const unitControlInstanceId = Object(external_gc_compose_["useInstanceId"])(external_gc_blockEditor_["__experimentalUnitControl"]);
  const unitControlInputId = `gc-block-search__width-${unitControlInstanceId}`;
  const isButtonPositionInside = 'button-inside' === buttonPosition;
  const isButtonPositionOutside = 'button-outside' === buttonPosition;
  const hasNoButton = 'no-button' === buttonPosition;
  const hasOnlyButton = 'button-only' === buttonPosition;
  const units = Object(external_gc_components_["__experimentalUseCustomUnits"])({
    availableUnits: ['%', 'px'],
    defaultValues: {
      '%': PC_WIDTH_DEFAULT,
      px: PX_WIDTH_DEFAULT
    }
  });

  const getBlockClassNames = () => {
    return classnames_default()(className, !isButtonPositionInside ? borderProps.className : undefined, isButtonPositionInside ? 'gc-block-search__button-inside' : undefined, isButtonPositionOutside ? 'gc-block-search__button-outside' : undefined, hasNoButton ? 'gc-block-search__no-button' : undefined, hasOnlyButton ? 'gc-block-search__button-only' : undefined, !buttonUseIcon && !hasNoButton ? 'gc-block-search__text-button' : undefined, buttonUseIcon && !hasNoButton ? 'gc-block-search__icon-button' : undefined);
  };

  const buttonPositionControls = [{
    role: 'menuitemradio',
    title: Object(external_gc_i18n_["__"])('按钮在外部'),
    isActive: buttonPosition === 'button-outside',
    icon: buttonOutside,
    onClick: () => {
      setAttributes({
        buttonPosition: 'button-outside'
      });
    }
  }, {
    role: 'menuitemradio',
    title: Object(external_gc_i18n_["__"])('按钮在内部'),
    isActive: buttonPosition === 'button-inside',
    icon: buttonInside,
    onClick: () => {
      setAttributes({
        buttonPosition: 'button-inside'
      });
    }
  }, {
    role: 'menuitemradio',
    title: Object(external_gc_i18n_["__"])('无按钮'),
    isActive: buttonPosition === 'no-button',
    icon: noButton,
    onClick: () => {
      setAttributes({
        buttonPosition: 'no-button'
      });
    }
  }];

  const getButtonPositionIcon = () => {
    switch (buttonPosition) {
      case 'button-inside':
        return buttonInside;

      case 'button-outside':
        return buttonOutside;

      case 'no-button':
        return noButton;

      case 'button-only':
        return buttonOnly;
    }
  };

  const getResizableSides = () => {
    if (hasOnlyButton) {
      return {};
    }

    return {
      right: align !== 'right',
      left: align === 'right'
    };
  };

  const renderTextField = () => {
    // If the input is inside the wrapper, the wrapper gets the border color styles/classes, not the input control.
    const textFieldClasses = classnames_default()('gc-block-search__input', isButtonPositionInside ? undefined : borderProps.className);
    const textFieldStyles = isButtonPositionInside ? {
      borderRadius
    } : borderProps.style;
    return Object(external_gc_element_["createElement"])("input", {
      className: textFieldClasses,
      style: textFieldStyles,
      "aria-label": Object(external_gc_i18n_["__"])('可选的占位文字') // We hide the placeholder field's placeholder when there is a value. This
      // stops screen readers from reading the placeholder field's placeholder
      // which is confusing.
      ,
      placeholder: placeholder ? undefined : Object(external_gc_i18n_["__"])('可选的占位文字…'),
      value: placeholder,
      onChange: event => setAttributes({
        placeholder: event.target.value
      })
    });
  };

  const renderButton = () => {
    // If the button is inside the wrapper, the wrapper gets the border color styles/classes, not the button.
    const buttonClasses = classnames_default()('gc-block-search__button', colorProps.className, isButtonPositionInside ? undefined : borderProps.className, buttonUseIcon ? 'has-icon' : undefined);
    const buttonStyles = { ...colorProps.style,
      ...(isButtonPositionInside ? {
        borderRadius
      } : borderProps.style)
    };
    return Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, buttonUseIcon && Object(external_gc_element_["createElement"])("button", {
      type: "button",
      className: buttonClasses,
      style: buttonStyles
    }, Object(external_gc_element_["createElement"])(build_module_icon["a" /* default */], {
      icon: library_search["a" /* default */]
    })), !buttonUseIcon && Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"], {
      className: buttonClasses,
      style: buttonStyles,
      "aria-label": Object(external_gc_i18n_["__"])('按钮文字'),
      placeholder: Object(external_gc_i18n_["__"])('添加按钮文字…'),
      withoutInteractiveFormatting: true,
      value: buttonText,
      onChange: html => setAttributes({
        buttonText: html
      })
    }));
  };

  const controls = Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["BlockControls"], null, Object(external_gc_element_["createElement"])(external_gc_components_["ToolbarGroup"], null, Object(external_gc_element_["createElement"])(external_gc_components_["ToolbarButton"], {
    title: Object(external_gc_i18n_["__"])('切换搜索标签'),
    icon: toggleLabel,
    onClick: () => {
      setAttributes({
        showLabel: !showLabel
      });
    },
    className: showLabel ? 'is-pressed' : undefined
  }), Object(external_gc_element_["createElement"])(external_gc_components_["ToolbarDropdownMenu"], {
    icon: getButtonPositionIcon(),
    label: Object(external_gc_i18n_["__"])('更改按钮位置'),
    controls: buttonPositionControls
  }), !hasNoButton && Object(external_gc_element_["createElement"])(external_gc_components_["ToolbarButton"], {
    title: Object(external_gc_i18n_["__"])('使用带图标的按钮'),
    icon: buttonWithIcon,
    onClick: () => {
      setAttributes({
        buttonUseIcon: !buttonUseIcon
      });
    },
    className: buttonUseIcon ? 'is-pressed' : undefined
  }))), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InspectorControls"], null, Object(external_gc_element_["createElement"])(external_gc_components_["PanelBody"], {
    title: Object(external_gc_i18n_["__"])('显示设置')
  }, Object(external_gc_element_["createElement"])(external_gc_components_["BaseControl"], {
    label: Object(external_gc_i18n_["__"])('宽度'),
    id: unitControlInputId
  }, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["__experimentalUnitControl"], {
    id: unitControlInputId,
    min: `${MIN_WIDTH}${MIN_WIDTH_UNIT}`,
    onChange: newWidth => {
      const filteredWidth = widthUnit === '%' && parseInt(newWidth, 10) > 100 ? 100 : newWidth;
      setAttributes({
        width: parseInt(filteredWidth, 10)
      });
    },
    onUnitChange: newUnit => {
      setAttributes({
        width: '%' === newUnit ? PC_WIDTH_DEFAULT : PX_WIDTH_DEFAULT,
        widthUnit: newUnit
      });
    },
    style: {
      maxWidth: 80
    },
    value: `${width}${widthUnit}`,
    unit: widthUnit,
    units: units
  }), Object(external_gc_element_["createElement"])(external_gc_components_["ButtonGroup"], {
    className: "gc-block-search__components-button-group",
    "aria-label": Object(external_gc_i18n_["__"])('百分比宽度')
  }, [25, 50, 75, 100].map(widthValue => {
    return Object(external_gc_element_["createElement"])(external_gc_components_["Button"], {
      key: widthValue,
      isSmall: true,
      variant: `${widthValue}%` === `${width}${widthUnit}` ? 'primary' : undefined,
      onClick: () => setAttributes({
        width: widthValue,
        widthUnit: '%'
      })
    }, widthValue, "%");
  }))))));

  const padBorderRadius = radius => radius ? `calc(${radius} + ${DEFAULT_INNER_PADDING})` : undefined;

  const getWrapperStyles = () => {
    const styles = {
      borderColor
    };
    const isNonZeroBorderRadius = parseInt(borderRadius, 10) !== 0;

    if (isButtonPositionInside && isNonZeroBorderRadius) {
      // We have button inside wrapper and a border radius value to apply.
      // Add default padding so we don't get "fat" corners.
      //
      // CSS calc() is used here to support non-pixel units. The inline
      // style using calc() will only apply if both values have units.
      if (typeof borderRadius === 'object') {
        // Individual corner border radii present.
        const {
          topLeft,
          topRight,
          bottomLeft,
          bottomRight
        } = borderRadius;
        return {
          borderTopLeftRadius: padBorderRadius(topLeft),
          borderTopRightRadius: padBorderRadius(topRight),
          borderBottomLeftRadius: padBorderRadius(bottomLeft),
          borderBottomRightRadius: padBorderRadius(bottomRight),
          ...styles
        };
      } // The inline style using calc() will only apply if both values
      // supplied to calc() have units. Deprecated block's may have
      // unitless integer.


      const radius = Number.isInteger(borderRadius) ? `${borderRadius}px` : borderRadius;
      styles.borderRadius = `calc(${radius} + ${DEFAULT_INNER_PADDING})`;
    }

    return styles;
  };

  const blockProps = Object(external_gc_blockEditor_["useBlockProps"])({
    className: getBlockClassNames()
  });
  return Object(external_gc_element_["createElement"])("div", blockProps, controls, showLabel && Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"], {
    className: "gc-block-search__label",
    "aria-label": Object(external_gc_i18n_["__"])('标签文字'),
    placeholder: Object(external_gc_i18n_["__"])('添加label…'),
    withoutInteractiveFormatting: true,
    value: label,
    onChange: html => setAttributes({
      label: html
    })
  }), Object(external_gc_element_["createElement"])(external_gc_components_["ResizableBox"], {
    size: {
      width: `${width}${widthUnit}`
    },
    className: classnames_default()('gc-block-search__inside-wrapper', isButtonPositionInside ? borderProps.className : undefined),
    style: getWrapperStyles(),
    minWidth: MIN_WIDTH,
    enable: getResizableSides(),
    onResizeStart: (event, direction, elt) => {
      setAttributes({
        width: parseInt(elt.offsetWidth, 10),
        widthUnit: 'px'
      });
      toggleSelection(false);
    },
    onResizeStop: (event, direction, elt, delta) => {
      setAttributes({
        width: parseInt(width + delta.width, 10)
      });
      toggleSelection(true);
    },
    showHandle: isSelected
  }, (isButtonPositionInside || isButtonPositionOutside) && Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, renderTextField(), renderButton()), hasOnlyButton && renderButton(), hasNoButton && renderTextField()));
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/search/variations.js
/**
 * GeChiUI dependencies
 */

const search_variations_variations = [{
  name: 'default',
  isDefault: true,
  attributes: {
    buttonText: Object(external_gc_i18n_["__"])('搜索'),
    label: Object(external_gc_i18n_["__"])('搜索')
  }
}];
/* harmony default export */ var search_variations = (search_variations_variations);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/search/index.js
/**
 * GeChiUI dependencies
 */

/**
 * Internal dependencies
 */

const search_metadata = {
  apiVersion: 2,
  name: "core/search",
  title: "搜索",
  category: "widgets",
  description: "帮助访客找到您的内容。",
  keywords: ["find"],
  textdomain: "default",
  attributes: {
    label: {
      type: "string",
      __experimentalRole: "content"
    },
    showLabel: {
      type: "boolean",
      "default": true
    },
    placeholder: {
      type: "string",
      "default": "",
      __experimentalRole: "content"
    },
    width: {
      type: "number"
    },
    widthUnit: {
      type: "string"
    },
    buttonText: {
      type: "string",
      __experimentalRole: "content"
    },
    buttonPosition: {
      type: "string",
      "default": "button-outside"
    },
    buttonUseIcon: {
      type: "boolean",
      "default": false
    }
  },
  supports: {
    align: ["left", "center", "right"],
    color: {
      gradients: true,
      __experimentalSkipSerialization: true
    },
    __experimentalBorder: {
      color: true,
      radius: true,
      __experimentalSkipSerialization: true
    },
    html: false
  },
  editorStyle: "gc-block-search-editor",
  style: "gc-block-search"
};


const {
  name: search_name
} = search_metadata;

const search_settings = {
  icon: library_search["a" /* default */],
  example: {},
  variations: search_variations,
  edit: SearchEdit
};

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/separator.js


/**
 * GeChiUI dependencies
 */

const separator_separator = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  viewBox: "0 0 24 24",
  xmlns: "http://www.w3.org/2000/svg"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M20.2 7v4H3.8V7H2.2v9h1.6v-3.5h16.4V16h1.6V7z"
}));
/* harmony default export */ var library_separator = (separator_separator);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/separator/separator-settings.js


/**
 * GeChiUI dependencies
 */



const SeparatorSettings = _ref => {
  let {
    color,
    setColor
  } = _ref;
  return Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InspectorControls"], null, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["PanelColorSettings"], {
    __experimentalHasMultipleOrigins: true,
    __experimentalIsRenderedInSidebar: true,
    title: Object(external_gc_i18n_["__"])('颜色'),
    colorSettings: [{
      value: color.color,
      onChange: setColor,
      label: Object(external_gc_i18n_["__"])('颜色')
    }]
  }));
};

/* harmony default export */ var separator_settings = (SeparatorSettings);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/separator/edit.js


/**
 * External dependencies
 */

/**
 * GeChiUI dependencies
 */



/**
 * Internal dependencies
 */



function SeparatorEdit(_ref) {
  let {
    color,
    setColor,
    className
  } = _ref;
  return Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])(external_gc_components_["HorizontalRule"], Object(external_gc_blockEditor_["useBlockProps"])({
    className: classnames_default()(className, {
      'has-background': color.color,
      [color.class]: color.class
    }),
    style: {
      backgroundColor: color.color,
      color: color.color
    }
  })), Object(external_gc_element_["createElement"])(separator_settings, {
    color: color,
    setColor: setColor
  }));
}

/* harmony default export */ var separator_edit = (Object(external_gc_blockEditor_["withColors"])('color', {
  textColor: 'color'
})(SeparatorEdit));

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/separator/save.js


/**
 * External dependencies
 */

/**
 * GeChiUI dependencies
 */


function separatorSave(_ref) {
  let {
    attributes
  } = _ref;
  const {
    color,
    customColor
  } = attributes; // the hr support changing color using border-color, since border-color
  // is not yet supported in the color palette, we use background-color

  const backgroundClass = Object(external_gc_blockEditor_["getColorClassName"])('background-color', color); // the dots styles uses text for the dots, to change those dots color is
  // using color, not backgroundColor

  const colorClass = Object(external_gc_blockEditor_["getColorClassName"])('color', color);
  const className = classnames_default()({
    'has-text-color has-background': color || customColor,
    [backgroundClass]: backgroundClass,
    [colorClass]: colorClass
  });
  const style = {
    backgroundColor: backgroundClass ? undefined : customColor,
    color: colorClass ? undefined : customColor
  };
  return Object(external_gc_element_["createElement"])("hr", external_gc_blockEditor_["useBlockProps"].save({
    className,
    style
  }));
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/separator/transforms.js
/**
 * GeChiUI dependencies
 */

const separator_transforms_transforms = {
  from: [{
    type: 'enter',
    regExp: /^-{3,}$/,
    transform: () => Object(external_gc_blocks_["createBlock"])('core/separator')
  }, {
    type: 'raw',
    selector: 'hr',
    schema: {
      hr: {}
    }
  }]
};
/* harmony default export */ var separator_transforms = (separator_transforms_transforms);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/separator/index.js
/**
 * GeChiUI dependencies
 */

/**
 * Internal dependencies
 */


const separator_metadata = {
  apiVersion: 2,
  name: "core/separator",
  title: "分隔符",
  category: "design",
  description: "用水平分隔符在点子或章节之间创造分隔符。",
  keywords: ["horizontal-line", "hr", "divider"],
  textdomain: "default",
  attributes: {
    color: {
      type: "string"
    },
    customColor: {
      type: "string"
    }
  },
  supports: {
    anchor: true,
    align: ["center", "wide", "full"]
  },
  styles: [{
    name: "default",
    label: "默认",
    isDefault: true
  }, {
    name: "wide",
    label: "Wide Line"
  }, {
    name: "dots",
    label: "Dots"
  }],
  editorStyle: "gc-block-separator-editor",
  style: "gc-block-separator"
};


const {
  name: separator_name
} = separator_metadata;

const build_module_separator_settings = {
  icon: library_separator,
  example: {
    attributes: {
      customColor: '#065174',
      className: 'is-style-wide'
    }
  },
  transforms: separator_transforms,
  edit: separator_edit,
  save: separatorSave
};

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/shortcode.js


/**
 * GeChiUI dependencies
 */

const shortcode = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  viewBox: "0 0 24 24",
  xmlns: "http://www.w3.org/2000/svg"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M16 4.2v1.5h2.5v12.5H16v1.5h4V4.2h-4zM4.2 19.8h4v-1.5H5.8V5.8h2.5V4.2h-4l-.1 15.6zm5.1-3.1l1.4.6 4-10-1.4-.6-4 10z"
}));
/* harmony default export */ var library_shortcode = (shortcode);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/shortcode/edit.js


/**
 * GeChiUI dependencies
 */




function ShortcodeEdit(_ref) {
  let {
    attributes,
    setAttributes
  } = _ref;
  const instanceId = Object(external_gc_compose_["useInstanceId"])(ShortcodeEdit);
  const inputId = `blocks-shortcode-input-${instanceId}`;
  return Object(external_gc_element_["createElement"])("div", Object(external_gc_blockEditor_["useBlockProps"])({
    className: 'components-placeholder'
  }), Object(external_gc_element_["createElement"])("label", {
    htmlFor: inputId,
    className: "components-placeholder__label"
  }, Object(external_gc_element_["createElement"])(build_module_icon["a" /* default */], {
    icon: library_shortcode
  }), Object(external_gc_i18n_["__"])('简码')), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["PlainText"], {
    className: "blocks-shortcode__textarea",
    id: inputId,
    value: attributes.text,
    "aria-label": Object(external_gc_i18n_["__"])('简码文字'),
    placeholder: Object(external_gc_i18n_["__"])('在此编写简码…'),
    onChange: text => setAttributes({
      text
    })
  }));
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/shortcode/save.js


/**
 * GeChiUI dependencies
 */

function shortcode_save_save(_ref) {
  let {
    attributes
  } = _ref;
  return Object(external_gc_element_["createElement"])(external_gc_element_["RawHTML"], null, attributes.text);
}

// EXTERNAL MODULE: external ["gc","autop"]
var external_gc_autop_ = __webpack_require__("Ck0e");

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/shortcode/transforms.js
/**
 * GeChiUI dependencies
 */

const shortcode_transforms_transforms = {
  from: [{
    type: 'shortcode',
    // Per "Shortcode names should be all lowercase and use all
    // letters, but numbers and underscores should work fine too.
    // Be wary of using hyphens (dashes), you'll be better off not
    // using them." in https://codex.gechiui.com/Shortcode_API
    // Require that the first character be a letter. This notably
    // prevents footnote markings ([1]) from being caught as
    // shortcodes.
    tag: '[a-z][a-z0-9_-]*',
    attributes: {
      text: {
        type: 'string',
        shortcode: (attrs, _ref) => {
          let {
            content
          } = _ref;
          return Object(external_gc_autop_["removep"])(Object(external_gc_autop_["autop"])(content));
        }
      }
    },
    priority: 20
  }]
};
/* harmony default export */ var shortcode_transforms = (shortcode_transforms_transforms);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/shortcode/index.js
/**
 * GeChiUI dependencies
 */

/**
 * Internal dependencies
 */




const shortcode_metadata = {
  apiVersion: 2,
  name: "core/shortcode",
  title: "简码",
  category: "widgets",
  description: "通过 GeChiUI 简码插入额外的自定义元素。",
  textdomain: "default",
  attributes: {
    text: {
      type: "string",
      source: "html"
    }
  },
  supports: {
    className: false,
    customClassName: false,
    html: false
  },
  editorStyle: "gc-block-shortcode-editor"
};
const {
  name: shortcode_name
} = shortcode_metadata;

const shortcode_settings = {
  icon: library_shortcode,
  transforms: shortcode_transforms,
  edit: ShortcodeEdit,
  save: shortcode_save_save
};

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/site-logo.js


/**
 * GeChiUI dependencies
 */

const siteLogo = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M12 3c-5 0-9 4-9 9s4 9 9 9 9-4 9-9-4-9-9-9zm0 1.5c4.1 0 7.5 3.4 7.5 7.5v.1c-1.4-.8-3.3-1.7-3.4-1.8-.2-.1-.5-.1-.8.1l-2.9 2.1L9 11.3c-.2-.1-.4 0-.6.1l-3.7 2.2c-.1-.5-.2-1-.2-1.5 0-4.2 3.4-7.6 7.5-7.6zm0 15c-3.1 0-5.7-1.9-6.9-4.5l3.7-2.2 3.5 1.2c.2.1.5 0 .7-.1l2.9-2.1c.8.4 2.5 1.2 3.5 1.9-.9 3.3-3.9 5.8-7.4 5.8z"
}));
/* harmony default export */ var site_logo = (siteLogo);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/site-logo/edit.js


/**
 * External dependencies
 */


/**
 * GeChiUI dependencies
 */












/**
 * Internal dependencies
 */


/**
 * Module constants
 */


const site_logo_edit_ALLOWED_MEDIA_TYPES = ['image'];
const ACCEPT_MEDIA_STRING = 'image/*';

const SiteLogo = _ref => {
  let {
    alt,
    attributes: {
      align,
      width,
      height,
      isLink,
      linkTarget,
      shouldSyncIcon
    },
    containerRef,
    isSelected,
    setAttributes,
    setLogo,
    logoUrl,
    siteUrl,
    logoId,
    iconId,
    setIcon,
    canUserEdit
  } = _ref;
  const clientWidth = useClientWidth(containerRef, [align]);
  const isLargeViewport = Object(external_gc_compose_["useViewportMatch"])('medium');
  const isWideAligned = Object(external_lodash_["includes"])(['wide', 'full'], align);
  const isResizable = !isWideAligned && isLargeViewport;
  const [{
    naturalWidth,
    naturalHeight
  }, setNaturalSize] = Object(external_gc_element_["useState"])({});
  const [isEditingImage, setIsEditingImage] = Object(external_gc_element_["useState"])(false);
  const {
    toggleSelection
  } = Object(external_gc_data_["useDispatch"])(external_gc_blockEditor_["store"]);
  const classes = classnames_default()('custom-logo-link', {
    'is-transient': Object(external_gc_blob_["isBlobURL"])(logoUrl)
  });
  const {
    imageEditing,
    maxWidth,
    title
  } = Object(external_gc_data_["useSelect"])(select => {
    const {
      getSettings
    } = select(external_gc_blockEditor_["store"]);
    const siteEntities = select(external_gc_coreData_["store"]).getEditedEntityRecord('root', 'site');
    return {
      title: siteEntities.title,
      ...Object(external_lodash_["pick"])(getSettings(), ['imageEditing', 'maxWidth'])
    };
  }, []);
  Object(external_gc_element_["useEffect"])(() => {
    // Turn the `Use as site icon` toggle off if it is on but the logo and icon have
    // fallen out of sync. This can happen if the toggle is saved in the `on` position,
    // but changes are later made to the site icon in the Customizer.
    if (shouldSyncIcon && logoId !== iconId) {
      setAttributes({
        shouldSyncIcon: false
      });
    }
  }, []);
  Object(external_gc_element_["useEffect"])(() => {
    if (!isSelected) {
      setIsEditingImage(false);
    }
  }, [isSelected]);

  function onResizeStart() {
    toggleSelection(false);
  }

  function onResizeStop() {
    toggleSelection(true);
  }

  const img = Object(external_gc_element_["createElement"])("img", {
    className: "custom-logo",
    src: logoUrl,
    alt: alt,
    onLoad: event => {
      setNaturalSize(Object(external_lodash_["pick"])(event.target, ['naturalWidth', 'naturalHeight']));
    }
  });
  let imgWrapper = img; // Disable reason: Image itself is not meant to be interactive, but
  // should direct focus to block.

  if (isLink) {
    imgWrapper =
    /* eslint-disable jsx-a11y/no-noninteractive-element-interactions, jsx-a11y/click-events-have-key-events */
    Object(external_gc_element_["createElement"])("a", {
      href: siteUrl,
      className: classes,
      rel: "home",
      title: title,
      onClick: event => event.preventDefault()
    }, img)
    /* eslint-enable jsx-a11y/no-noninteractive-element-interactions, jsx-a11y/click-events-have-key-events */
    ;
  }

  let imageWidthWithinContainer;

  if (clientWidth && naturalWidth && naturalHeight) {
    const exceedMaxWidth = naturalWidth > clientWidth;
    imageWidthWithinContainer = exceedMaxWidth ? clientWidth : naturalWidth;
  }

  if (!isResizable || !imageWidthWithinContainer) {
    return Object(external_gc_element_["createElement"])("div", {
      style: {
        width,
        height
      }
    }, imgWrapper);
  } // Set the default width to a responsible size.
  // Note that this width is also set in the attached frontend CSS file.


  const defaultWidth = 120;
  const currentWidth = width || defaultWidth;
  const ratio = naturalWidth / naturalHeight;
  const currentHeight = currentWidth / ratio;
  const minWidth = naturalWidth < naturalHeight ? MIN_SIZE : Math.ceil(MIN_SIZE * ratio);
  const minHeight = naturalHeight < naturalWidth ? MIN_SIZE : Math.ceil(MIN_SIZE / ratio); // With the current implementation of ResizableBox, an image needs an
  // explicit pixel value for the max-width. In absence of being able to
  // set the content-width, this max-width is currently dictated by the
  // vanilla editor style. The following variable adds a buffer to this
  // vanilla style, so 3rd party themes have some wiggleroom. This does,
  // in most cases, allow you to scale the image beyond the width of the
  // main column, though not infinitely.
  // @todo It would be good to revisit this once a content-width variable
  // becomes available.

  const maxWidthBuffer = maxWidth * 2.5;
  let showRightHandle = false;
  let showLeftHandle = false;
  /* eslint-disable no-lonely-if */
  // See https://github.com/GeChiUI/gutenberg/issues/7584.

  if (align === 'center') {
    // When the image is centered, show both handles.
    showRightHandle = true;
    showLeftHandle = true;
  } else if (Object(external_gc_i18n_["isRTL"])()) {
    // In RTL mode the image is on the right by default.
    // Show the right handle and hide the left handle only when it is
    // aligned left. Otherwise always show the left handle.
    if (align === 'left') {
      showRightHandle = true;
    } else {
      showLeftHandle = true;
    }
  } else {
    // Show the left handle and hide the right handle only when the
    // image is aligned right. Otherwise always show the right handle.
    if (align === 'right') {
      showLeftHandle = true;
    } else {
      showRightHandle = true;
    }
  }
  /* eslint-enable no-lonely-if */


  const canEditImage = logoId && naturalWidth && naturalHeight && imageEditing;
  const imgEdit = canEditImage && isEditingImage ? Object(external_gc_element_["createElement"])(external_gc_blockEditor_["__experimentalImageEditingProvider"], {
    id: logoId,
    url: logoUrl,
    naturalWidth: naturalWidth,
    naturalHeight: naturalHeight,
    clientWidth: clientWidth,
    onSaveImage: imageAttributes => {
      setLogo(imageAttributes.id);
    },
    isEditing: isEditingImage,
    onFinishEditing: () => setIsEditingImage(false)
  }, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["__experimentalImageEditor"], {
    url: logoUrl,
    width: currentWidth,
    height: currentHeight,
    clientWidth: clientWidth,
    naturalHeight: naturalHeight,
    naturalWidth: naturalWidth
  })) : Object(external_gc_element_["createElement"])(external_gc_components_["ResizableBox"], {
    size: {
      width: currentWidth,
      height: currentHeight
    },
    showHandle: isSelected,
    minWidth: minWidth,
    maxWidth: maxWidthBuffer,
    minHeight: minHeight,
    maxHeight: maxWidthBuffer / ratio,
    lockAspectRatio: true,
    enable: {
      top: false,
      right: showRightHandle,
      bottom: true,
      left: showLeftHandle
    },
    onResizeStart: onResizeStart,
    onResizeStop: (event, direction, elt, delta) => {
      onResizeStop();
      setAttributes({
        width: parseInt(currentWidth + delta.width, 10),
        height: parseInt(currentHeight + delta.height, 10)
      });
    }
  }, imgWrapper);
  const syncSiteIconHelpText = Object(external_gc_element_["createInterpolateElement"])(Object(external_gc_i18n_["__"])('站点图标是您在浏览器选项卡、书签栏和 GeChiUI 移动应用程序中看到的内容。要使用与站点 LOGO 不同的自定义图标，请使用<a>站点图标设置</a>。'), {
    a: // eslint-disable-next-line jsx-a11y/anchor-has-content
    Object(external_gc_element_["createElement"])("a", {
      href: siteUrl + '/gc-admin/customize.php?autofocus[section]=title_tagline',
      target: "_blank",
      rel: "noopener noreferrer"
    })
  });
  return Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InspectorControls"], null, Object(external_gc_element_["createElement"])(external_gc_components_["PanelBody"], {
    title: Object(external_gc_i18n_["__"])('设置')
  }, Object(external_gc_element_["createElement"])(external_gc_components_["RangeControl"], {
    label: Object(external_gc_i18n_["__"])('图片宽度'),
    onChange: newWidth => setAttributes({
      width: newWidth
    }),
    min: minWidth,
    max: maxWidthBuffer,
    initialPosition: Math.min(defaultWidth, maxWidthBuffer),
    value: width || '',
    disabled: !isResizable
  }), Object(external_gc_element_["createElement"])(external_gc_components_["ToggleControl"], {
    label: Object(external_gc_i18n_["__"])('将图片链接至首页'),
    onChange: () => setAttributes({
      isLink: !isLink
    }),
    checked: isLink
  }), isLink && Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])(external_gc_components_["ToggleControl"], {
    label: Object(external_gc_i18n_["__"])('在新窗口打开'),
    onChange: value => setAttributes({
      linkTarget: value ? '_blank' : '_self'
    }),
    checked: linkTarget === '_blank'
  })), canUserEdit && Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])(external_gc_components_["ToggleControl"], {
    label: Object(external_gc_i18n_["__"])('用作站点图标'),
    onChange: value => {
      setAttributes({
        shouldSyncIcon: value
      });
      setIcon(value ? logoId : undefined);
    },
    checked: !!shouldSyncIcon,
    help: syncSiteIconHelpText
  })))), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["BlockControls"], {
    group: "block"
  }, canEditImage && !isEditingImage && Object(external_gc_element_["createElement"])(external_gc_components_["ToolbarButton"], {
    onClick: () => setIsEditingImage(true),
    icon: library_crop,
    label: Object(external_gc_i18n_["__"])('裁剪')
  })), imgEdit);
};

function LogoEdit(_ref2) {
  let {
    attributes,
    className,
    setAttributes,
    isSelected
  } = _ref2;
  const {
    width,
    shouldSyncIcon
  } = attributes;
  const [logoUrl, setLogoUrl] = Object(external_gc_element_["useState"])();
  const ref = Object(external_gc_element_["useRef"])();
  const {
    siteLogoId,
    canUserEdit,
    url,
    siteIconId,
    mediaItemData,
    isRequestingMediaItem
  } = Object(external_gc_data_["useSelect"])(select => {
    const {
      canUser,
      getEntityRecord,
      getEditedEntityRecord
    } = select(external_gc_coreData_["store"]);
    const siteSettings = getEditedEntityRecord('root', 'site');
    const siteData = getEntityRecord('root', '__unstableBase');

    const _siteLogo = siteSettings === null || siteSettings === void 0 ? void 0 : siteSettings.site_logo;

    const _readOnlyLogo = siteData === null || siteData === void 0 ? void 0 : siteData.site_logo;

    const _canUserEdit = canUser('update', 'settings');

    const _siteLogoId = _canUserEdit ? _siteLogo : _readOnlyLogo;

    const _siteIconId = siteSettings === null || siteSettings === void 0 ? void 0 : siteSettings.site_icon;

    const mediaItem = _siteLogoId && select(external_gc_coreData_["store"]).getMedia(_siteLogoId, {
      context: 'view'
    });

    const _isRequestingMediaItem = _siteLogoId && !select(external_gc_coreData_["store"]).hasFinishedResolution('getMedia', [_siteLogoId, {
      context: 'view'
    }]);

    return {
      siteLogoId: _siteLogoId,
      canUserEdit: _canUserEdit,
      url: siteData === null || siteData === void 0 ? void 0 : siteData.url,
      mediaItemData: mediaItem && {
        id: mediaItem.id,
        url: mediaItem.source_url,
        alt: mediaItem.alt_text
      },
      isRequestingMediaItem: _isRequestingMediaItem,
      siteIconId: _siteIconId
    };
  }, []);
  const {
    editEntityRecord
  } = Object(external_gc_data_["useDispatch"])(external_gc_coreData_["store"]);

  const setLogo = function (newValue) {
    let shouldForceSync = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    // `shouldForceSync` is used to force syncing when the attribute
    // may not have updated yet.
    if (shouldSyncIcon || shouldForceSync) {
      setIcon(newValue);
    }

    editEntityRecord('root', 'site', undefined, {
      site_logo: newValue
    });
  };

  const setIcon = newValue => editEntityRecord('root', 'site', undefined, {
    site_icon: newValue
  });

  let alt = null;

  if (mediaItemData) {
    alt = mediaItemData.alt;

    if (logoUrl !== mediaItemData.url) {
      setLogoUrl(mediaItemData.url);
    }
  }

  const onInitialSelectLogo = media => {
    // Initialize the syncSiteIcon toggle. If we currently have no Site logo and no
    // site icon, automatically sync the logo to the icon.
    if (shouldSyncIcon === undefined) {
      const shouldForceSync = !siteIconId;
      setAttributes({
        shouldSyncIcon: shouldForceSync
      }); // Because we cannot rely on the `shouldSyncIcon` attribute to have updated by
      // the time `setLogo` is called, pass an argument to force the syncing.

      onSelectLogo(media, shouldForceSync);
      return;
    }

    onSelectLogo(media);
  };

  const onSelectLogo = function (media) {
    let shouldForceSync = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    if (!media) {
      return;
    }

    if (!media.id && media.url) {
      // This is a temporary blob image
      setLogo(undefined);
      setLogoUrl(media.url);
      return;
    }

    setLogo(media.id, shouldForceSync);
  };

  const onRemoveLogo = () => {
    setLogo(null);
    setLogoUrl(undefined);
    setAttributes({
      width: undefined
    });
  };

  const {
    createErrorNotice
  } = Object(external_gc_data_["useDispatch"])(external_gc_notices_["store"]);

  const onUploadError = message => {
    createErrorNotice(message[2], {
      type: 'snackbar'
    });
  };

  const controls = canUserEdit && logoUrl && Object(external_gc_element_["createElement"])(external_gc_blockEditor_["BlockControls"], {
    group: "other"
  }, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["MediaReplaceFlow"], {
    mediaURL: logoUrl,
    allowedTypes: site_logo_edit_ALLOWED_MEDIA_TYPES,
    accept: ACCEPT_MEDIA_STRING,
    onSelect: onSelectLogo,
    onError: onUploadError
  }, Object(external_gc_element_["createElement"])(external_gc_components_["MenuItem"], {
    onClick: onRemoveLogo
  }, Object(external_gc_i18n_["__"])('重置'))));
  let logoImage;
  const isLoading = siteLogoId === undefined || isRequestingMediaItem;

  if (isLoading) {
    logoImage = Object(external_gc_element_["createElement"])(external_gc_components_["Spinner"], null);
  }

  if (!!logoUrl) {
    logoImage = Object(external_gc_element_["createElement"])(SiteLogo, {
      alt: alt,
      attributes: attributes,
      className: className,
      containerRef: ref,
      isSelected: isSelected,
      setAttributes: setAttributes,
      logoUrl: logoUrl,
      setLogo: setLogo,
      logoId: (mediaItemData === null || mediaItemData === void 0 ? void 0 : mediaItemData.id) || siteLogoId,
      siteUrl: url,
      setIcon: setIcon,
      iconId: siteIconId,
      canUserEdit: canUserEdit
    });
  }

  const placeholder = content => {
    const placeholderClassName = classnames_default()('block-editor-media-placeholder', className);
    return Object(external_gc_element_["createElement"])(external_gc_components_["Placeholder"], {
      className: placeholderClassName,
      preview: logoImage
    }, Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
      className: "components-placeholder__illustration",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 60 60"
    }, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
      vectorEffect: "non-scaling-stroke",
      d: "m61 32.622-13.555-9.137-15.888 9.859a5 5 0 0 1-5.386-.073l-9.095-5.989L1 37.5"
    })), content);
  };

  const classes = classnames_default()(className, {
    'is-default-size': !width
  });
  const blockProps = Object(external_gc_blockEditor_["useBlockProps"])({
    ref,
    className: classes
  });

  const label = Object(external_gc_i18n_["__"])('添加站点  logo');

  return Object(external_gc_element_["createElement"])("div", blockProps, controls, !!logoUrl && logoImage, !logoUrl && !canUserEdit && Object(external_gc_element_["createElement"])(external_gc_components_["Placeholder"], {
    className: "site-logo_placeholder"
  }, isLoading && Object(external_gc_element_["createElement"])("span", {
    className: "components-placeholder__preview"
  }, Object(external_gc_element_["createElement"])(external_gc_components_["Spinner"], null))), !logoUrl && canUserEdit && Object(external_gc_element_["createElement"])(external_gc_blockEditor_["MediaPlaceholder"], {
    onSelect: onInitialSelectLogo,
    accept: ACCEPT_MEDIA_STRING,
    allowedTypes: site_logo_edit_ALLOWED_MEDIA_TYPES,
    onError: onUploadError,
    placeholder: placeholder,
    mediaLibraryButton: _ref3 => {
      let {
        open
      } = _ref3;
      return Object(external_gc_element_["createElement"])(external_gc_components_["Button"], {
        icon: upload["a" /* default */],
        variant: "primary",
        label: label,
        showTooltip: true,
        tooltipPosition: "top center",
        onClick: () => {
          open();
        }
      });
    }
  }));
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/site-logo/index.js
/**
 * GeChiUI dependencies
 */

/**
 * Internal dependencies
 */

const site_logo_metadata = {
  apiVersion: 2,
  name: "core/site-logo",
  title: "站点 Logo ",
  category: "theme",
  description: "显示代表此网站的Logo。更新区块，所做的更改将应用于它所使用的任何地方。这与站点Icon不同，站点Icon是在仪表板、浏览器选项卡等中可见的较小图像，用于帮助其他人识别此站点。",
  textdomain: "default",
  attributes: {
    width: {
      type: "number"
    },
    isLink: {
      type: "boolean",
      "default": true
    },
    linkTarget: {
      type: "string",
      "default": "_self"
    },
    shouldSyncIcon: {
      type: "boolean"
    }
  },
  example: {
    viewportWidth: 500,
    attributes: {
      width: 350,
      className: "block-editor-block-types-list__site-logo-example"
    }
  },
  supports: {
    html: false,
    align: true,
    alignWide: false,
    color: {
      __experimentalDuotone: "img",
      text: false,
      background: false
    }
  },
  styles: [{
    name: "default",
    label: "默认",
    isDefault: true
  }, {
    name: "rounded",
    label: "圆角"
  }],
  editorStyle: "gc-block-site-logo-editor",
  style: "gc-block-site-logo"
};

const {
  name: site_logo_name
} = site_logo_metadata;

const site_logo_settings = {
  icon: site_logo,
  edit: LogoEdit
};

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/site-tagline/edit.js



/**
 * External dependencies
 */

/**
 * GeChiUI dependencies
 */





function SiteTaglineEdit(_ref) {
  let {
    attributes,
    setAttributes
  } = _ref;
  const {
    textAlign
  } = attributes;
  const [siteTagline, setSiteTagline] = Object(external_gc_coreData_["useEntityProp"])('root', 'site', 'description');
  const {
    canUserEdit,
    readOnlySiteTagLine
  } = Object(external_gc_data_["useSelect"])(select => {
    const {
      canUser,
      getEntityRecord
    } = select(external_gc_coreData_["store"]);
    const siteData = getEntityRecord('root', '__unstableBase');
    return {
      canUserEdit: canUser('update', 'settings'),
      readOnlySiteTagLine: siteData === null || siteData === void 0 ? void 0 : siteData.description
    };
  }, []);
  const blockProps = Object(external_gc_blockEditor_["useBlockProps"])({
    className: classnames_default()({
      [`has-text-align-${textAlign}`]: textAlign,
      'gc-block-site-tagline__placeholder': !canUserEdit && !readOnlySiteTagLine
    })
  });
  const siteTaglineContent = canUserEdit ? Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"], Object(esm_extends["a" /* default */])({
    allowedFormats: [],
    onChange: setSiteTagline,
    "aria-label": Object(external_gc_i18n_["__"])('站点副标题文字'),
    placeholder: Object(external_gc_i18n_["__"])('填写站点副标题…'),
    tagName: "p",
    value: siteTagline
  }, blockProps)) : Object(external_gc_element_["createElement"])("p", blockProps, readOnlySiteTagLine || Object(external_gc_i18n_["__"])('站点副标题占位符'));
  return Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["BlockControls"], {
    group: "block"
  }, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["AlignmentControl"], {
    onChange: newAlign => setAttributes({
      textAlign: newAlign
    }),
    value: textAlign
  })), siteTaglineContent);
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/site-tagline/icon.js


/**
 * GeChiUI dependencies
 */

/* harmony default export */ var site_tagline_icon = (Object(external_gc_element_["createElement"])(external_gc_components_["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  width: "24",
  height: "24"
}, Object(external_gc_element_["createElement"])(external_gc_components_["Path"], {
  fill: "none",
  d: "M0 0h24v24H0z"
}), Object(external_gc_element_["createElement"])(external_gc_components_["Path"], {
  d: "M4 9h16v2H4V9zm0 4h10v2H4v-2z"
})));

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/site-tagline/deprecated.js
/**
 * Internal dependencies
 */

const site_tagline_deprecated_v1 = {
  attributes: {
    textAlign: {
      type: 'string'
    }
  },
  supports: {
    align: ['wide', 'full'],
    html: false,
    color: {
      gradients: true
    },
    spacing: {
      margin: true,
      padding: true
    },
    typography: {
      fontSize: true,
      lineHeight: true,
      __experimentalFontFamily: true,
      __experimentalTextTransform: true,
      __experimentalFontStyle: true,
      __experimentalFontWeight: true,
      __experimentalLetterSpacing: true
    }
  },

  save() {
    return null;
  },

  migrate: migrate_font_family,

  isEligible(_ref) {
    var _style$typography;

    let {
      style
    } = _ref;
    return style === null || style === void 0 ? void 0 : (_style$typography = style.typography) === null || _style$typography === void 0 ? void 0 : _style$typography.fontFamily;
  }

};
/**
 * New deprecations need to be placed first
 * for them to have higher priority.
 *
 * Old deprecations may need to be updated as well.
 *
 * See block-deprecation.md
 */

/* harmony default export */ var site_tagline_deprecated = ([site_tagline_deprecated_v1]);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/site-tagline/index.js
/**
 * Internal dependencies
 */
const site_tagline_metadata = {
  apiVersion: 2,
  name: "core/site-tagline",
  title: "站点副标题",
  category: "theme",
  description: "用几句话描述网站的内容。副标题可以在搜索结果中或在社交网络上分享时使用，即使它没有显示在主题设计中。",
  keywords: ["description"],
  textdomain: "default",
  attributes: {
    textAlign: {
      type: "string"
    }
  },
  supports: {
    align: ["wide", "full"],
    html: false,
    color: {
      gradients: true
    },
    spacing: {
      margin: true,
      padding: true
    },
    typography: {
      fontSize: true,
      lineHeight: true,
      __experimentalFontFamily: true,
      __experimentalTextTransform: true,
      __experimentalFontStyle: true,
      __experimentalFontWeight: true,
      __experimentalLetterSpacing: true,
      __experimentalDefaultControls: {
        fontSize: true
      }
    }
  },
  editorStyle: "gc-block-site-tagline-editor"
};



const {
  name: site_tagline_name
} = site_tagline_metadata;

const site_tagline_settings = {
  icon: site_tagline_icon,
  edit: SiteTaglineEdit,
  deprecated: site_tagline_deprecated
};

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/map-marker.js


/**
 * GeChiUI dependencies
 */

const mapMarker = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  xmlns: "https://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M12 9c-.8 0-1.5.7-1.5 1.5S11.2 12 12 12s1.5-.7 1.5-1.5S12.8 9 12 9zm0-5c-3.6 0-6.5 2.8-6.5 6.2 0 .8.3 1.8.9 3.1.5 1.1 1.2 2.3 2 3.6.7 1 3 3.8 3.2 3.9l.4.5.4-.5c.2-.2 2.6-2.9 3.2-3.9.8-1.2 1.5-2.5 2-3.6.6-1.3.9-2.3.9-3.1C18.5 6.8 15.6 4 12 4zm4.3 8.7c-.5 1-1.1 2.2-1.9 3.4-.5.7-1.7 2.2-2.4 3-.7-.8-1.9-2.3-2.4-3-.8-1.2-1.4-2.3-1.9-3.3-.6-1.4-.7-2.2-.7-2.5 0-2.6 2.2-4.7 5-4.7s5 2.1 5 4.7c0 .2-.1 1-.7 2.4z"
}));
/* harmony default export */ var map_marker = (mapMarker);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/site-title/edit/level-icon.js


/**
 * GeChiUI dependencies
 */


function LevelIcon(_ref) {
  let {
    level,
    isPressed = false
  } = _ref;
  if (level === 0) return library_paragraph;
  const levelToPath = {
    1: 'M9 5h2v10H9v-4H5v4H3V5h2v4h4V5zm6.6 0c-.6.9-1.5 1.7-2.6 2v1h2v7h2V5h-1.4z',
    2: 'M7 5h2v10H7v-4H3v4H1V5h2v4h4V5zm8 8c.5-.4.6-.6 1.1-1.1.4-.4.8-.8 1.2-1.3.3-.4.6-.8.9-1.3.2-.4.3-.8.3-1.3 0-.4-.1-.9-.3-1.3-.2-.4-.4-.7-.8-1-.3-.3-.7-.5-1.2-.6-.5-.2-1-.2-1.5-.2-.4 0-.7 0-1.1.1-.3.1-.7.2-1 .3-.3.1-.6.3-.9.5-.3.2-.6.4-.8.7l1.2 1.2c.3-.3.6-.5 1-.7.4-.2.7-.3 1.2-.3s.9.1 1.3.4c.3.3.5.7.5 1.1 0 .4-.1.8-.4 1.1-.3.5-.6.9-1 1.2-.4.4-1 .9-1.6 1.4-.6.5-1.4 1.1-2.2 1.6V15h8v-2H15z',
    3: 'M12.1 12.2c.4.3.8.5 1.2.7.4.2.9.3 1.4.3.5 0 1-.1 1.4-.3.3-.1.5-.5.5-.8 0-.2 0-.4-.1-.6-.1-.2-.3-.3-.5-.4-.3-.1-.7-.2-1-.3-.5-.1-1-.1-1.5-.1V9.1c.7.1 1.5-.1 2.2-.4.4-.2.6-.5.6-.9 0-.3-.1-.6-.4-.8-.3-.2-.7-.3-1.1-.3-.4 0-.8.1-1.1.3-.4.2-.7.4-1.1.6l-1.2-1.4c.5-.4 1.1-.7 1.6-.9.5-.2 1.2-.3 1.8-.3.5 0 1 .1 1.6.2.4.1.8.3 1.2.5.3.2.6.5.8.8.2.3.3.7.3 1.1 0 .5-.2.9-.5 1.3-.4.4-.9.7-1.5.9v.1c.6.1 1.2.4 1.6.8.4.4.7.9.7 1.5 0 .4-.1.8-.3 1.2-.2.4-.5.7-.9.9-.4.3-.9.4-1.3.5-.5.1-1 .2-1.6.2-.8 0-1.6-.1-2.3-.4-.6-.2-1.1-.6-1.6-1l1.1-1.4zM7 9H3V5H1v10h2v-4h4v4h2V5H7v4z',
    4: 'M9 15H7v-4H3v4H1V5h2v4h4V5h2v10zm10-2h-1v2h-2v-2h-5v-2l4-6h3v6h1v2zm-3-2V7l-2.8 4H16z',
    5: 'M12.1 12.2c.4.3.7.5 1.1.7.4.2.9.3 1.3.3.5 0 1-.1 1.4-.4.4-.3.6-.7.6-1.1 0-.4-.2-.9-.6-1.1-.4-.3-.9-.4-1.4-.4H14c-.1 0-.3 0-.4.1l-.4.1-.5.2-1-.6.3-5h6.4v1.9h-4.3L14 8.8c.2-.1.5-.1.7-.2.2 0 .5-.1.7-.1.5 0 .9.1 1.4.2.4.1.8.3 1.1.6.3.2.6.6.8.9.2.4.3.9.3 1.4 0 .5-.1 1-.3 1.4-.2.4-.5.8-.9 1.1-.4.3-.8.5-1.3.7-.5.2-1 .3-1.5.3-.8 0-1.6-.1-2.3-.4-.6-.2-1.1-.6-1.6-1-.1-.1 1-1.5 1-1.5zM9 15H7v-4H3v4H1V5h2v4h4V5h2v10z',
    6: 'M9 15H7v-4H3v4H1V5h2v4h4V5h2v10zm8.6-7.5c-.2-.2-.5-.4-.8-.5-.6-.2-1.3-.2-1.9 0-.3.1-.6.3-.8.5l-.6.9c-.2.5-.2.9-.2 1.4.4-.3.8-.6 1.2-.8.4-.2.8-.3 1.3-.3.4 0 .8 0 1.2.2.4.1.7.3 1 .6.3.3.5.6.7.9.2.4.3.8.3 1.3s-.1.9-.3 1.4c-.2.4-.5.7-.8 1-.4.3-.8.5-1.2.6-1 .3-2 .3-3 0-.5-.2-1-.5-1.4-.9-.4-.4-.8-.9-1-1.5-.2-.6-.3-1.3-.3-2.1s.1-1.6.4-2.3c.2-.6.6-1.2 1-1.6.4-.4.9-.7 1.4-.9.6-.3 1.1-.4 1.7-.4.7 0 1.4.1 2 .3.5.2 1 .5 1.4.8 0 .1-1.3 1.4-1.3 1.4zm-2.4 5.8c.2 0 .4 0 .6-.1.2 0 .4-.1.5-.2.1-.1.3-.3.4-.5.1-.2.1-.5.1-.7 0-.4-.1-.8-.4-1.1-.3-.2-.7-.3-1.1-.3-.3 0-.7.1-1 .2-.4.2-.7.4-1 .7 0 .3.1.7.3 1 .1.2.3.4.4.6.2.1.3.3.5.3.2.1.5.2.7.1z'
  };
  return Object(external_gc_element_["createElement"])(external_gc_components_["SVG"], {
    width: "20",
    height: "20",
    viewBox: "0 0 20 20",
    xmlns: "http://www.w3.org/2000/svg",
    isPressed: isPressed
  }, Object(external_gc_element_["createElement"])(external_gc_components_["Path"], {
    d: levelToPath[level]
  }));
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/site-title/edit/level-toolbar.js


/**
 * GeChiUI dependencies
 */


/**
 * Internal dependencies
 */


function LevelControl(_ref) {
  let {
    level,
    onChange
  } = _ref;
  const allControls = [1, 2, 3, 4, 5, 6, 0].map(currentLevel => {
    const isActive = currentLevel === level;
    return {
      icon: Object(external_gc_element_["createElement"])(LevelIcon, {
        level: currentLevel,
        isPressed: isActive
      }),
      title: currentLevel === 0 ? Object(external_gc_i18n_["__"])('段落') : // translators: %s: heading level e.g: "1", "2", "3"
      Object(external_gc_i18n_["sprintf"])(Object(external_gc_i18n_["__"])('标题%d'), currentLevel),
      isActive,
      onClick: () => onChange(currentLevel)
    };
  });
  return Object(external_gc_element_["createElement"])(external_gc_components_["ToolbarDropdownMenu"], {
    label: Object(external_gc_i18n_["__"])('修改标题级别'),
    icon: Object(external_gc_element_["createElement"])(LevelIcon, {
      level: level
    }),
    controls: allControls
  });
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/site-title/edit/index.js


/**
 * External dependencies
 */

/**
 * GeChiUI dependencies
 */








/**
 * Internal dependencies
 */


function SiteTitleEdit(_ref) {
  let {
    attributes,
    setAttributes,
    insertBlocksAfter
  } = _ref;
  const {
    level,
    textAlign,
    isLink,
    linkTarget
  } = attributes;
  const [title, setTitle] = Object(external_gc_coreData_["useEntityProp"])('root', 'site', 'title');
  const {
    canUserEdit,
    readOnlyTitle
  } = Object(external_gc_data_["useSelect"])(select => {
    const {
      canUser,
      getEntityRecord
    } = select(external_gc_coreData_["store"]);
    const siteData = getEntityRecord('root', '__unstableBase');
    return {
      canUserEdit: canUser('update', 'settings'),
      readOnlyTitle: Object(external_gc_htmlEntities_["decodeEntities"])(siteData === null || siteData === void 0 ? void 0 : siteData.name)
    };
  }, []);
  const TagName = level === 0 ? 'p' : `h${level}`;
  const blockProps = Object(external_gc_blockEditor_["useBlockProps"])({
    className: classnames_default()({
      [`has-text-align-${textAlign}`]: textAlign,
      'gc-block-site-title__placeholder': !canUserEdit && !readOnlyTitle
    })
  });
  const siteTitleContent = canUserEdit ? Object(external_gc_element_["createElement"])(TagName, blockProps, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"], {
    tagName: isLink ? 'a' : 'span',
    href: isLink ? '#site-title-pseudo-link' : undefined,
    "aria-label": Object(external_gc_i18n_["__"])('站点标题文字'),
    placeholder: Object(external_gc_i18n_["__"])('填写站点标题…'),
    value: title,
    onChange: setTitle,
    allowedFormats: [],
    disableLineBreaks: true,
    __unstableOnSplitAtEnd: () => insertBlocksAfter(Object(external_gc_blocks_["createBlock"])(Object(external_gc_blocks_["getDefaultBlockName"])()))
  })) : Object(external_gc_element_["createElement"])(TagName, blockProps, isLink ? Object(external_gc_element_["createElement"])("a", {
    href: "#site-title-pseudo-link",
    onClick: event => event.preventDefault()
  }, readOnlyTitle || Object(external_gc_i18n_["__"])('站点标题占位符')) : Object(external_gc_element_["createElement"])("span", null, title || readOnlyTitle));
  return Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["BlockControls"], {
    group: "block"
  }, Object(external_gc_element_["createElement"])(LevelControl, {
    level: level,
    onChange: newLevel => setAttributes({
      level: newLevel
    })
  }), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["AlignmentControl"], {
    value: textAlign,
    onChange: nextAlign => {
      setAttributes({
        textAlign: nextAlign
      });
    }
  })), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InspectorControls"], null, Object(external_gc_element_["createElement"])(external_gc_components_["PanelBody"], {
    title: Object(external_gc_i18n_["__"])('链接设置')
  }, Object(external_gc_element_["createElement"])(external_gc_components_["ToggleControl"], {
    label: Object(external_gc_i18n_["__"])('将标题链接到主页'),
    onChange: () => setAttributes({
      isLink: !isLink
    }),
    checked: isLink
  }), isLink && Object(external_gc_element_["createElement"])(external_gc_components_["ToggleControl"], {
    label: Object(external_gc_i18n_["__"])('在新窗口打开'),
    onChange: value => setAttributes({
      linkTarget: value ? '_blank' : '_self'
    }),
    checked: linkTarget === '_blank'
  }))), siteTitleContent);
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/site-title/deprecated.js
/**
 * Internal dependencies
 */

const site_title_deprecated_v1 = {
  attributes: {
    level: {
      type: 'number',
      default: 1
    },
    textAlign: {
      type: 'string'
    },
    isLink: {
      type: 'boolean',
      default: true
    },
    linkTarget: {
      type: 'string',
      default: '_self'
    }
  },
  supports: {
    align: ['wide', 'full'],
    html: false,
    color: {
      gradients: true,
      link: true
    },
    spacing: {
      padding: true,
      margin: true
    },
    typography: {
      fontSize: true,
      lineHeight: true,
      __experimentalFontFamily: true,
      __experimentalTextTransform: true,
      __experimentalFontStyle: true,
      __experimentalFontWeight: true,
      __experimentalLetterSpacing: true
    }
  },

  save() {
    return null;
  },

  migrate: migrate_font_family,

  isEligible(_ref) {
    var _style$typography;

    let {
      style
    } = _ref;
    return style === null || style === void 0 ? void 0 : (_style$typography = style.typography) === null || _style$typography === void 0 ? void 0 : _style$typography.fontFamily;
  }

};
/**
 * New deprecations need to be placed first
 * for them to have higher priority.
 *
 * Old deprecations may need to be updated as well.
 *
 * See block-deprecation.md
 */

/* harmony default export */ var site_title_deprecated = ([site_title_deprecated_v1]);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/site-title/index.js
/**
 * GeChiUI dependencies
 */

/**
 * Internal dependencies
 */

const site_title_metadata = {
  apiVersion: 2,
  name: "core/site-title",
  title: "站点标题",
  category: "theme",
  description: "显示此网站的名称。更新区块，所做的更改将应用于它所使用的任何地方。这也将出现在浏览器标题栏和搜索结果中。",
  textdomain: "default",
  attributes: {
    level: {
      type: "number",
      "default": 1
    },
    textAlign: {
      type: "string"
    },
    isLink: {
      type: "boolean",
      "default": true
    },
    linkTarget: {
      type: "string",
      "default": "_self"
    }
  },
  example: {
    viewportWidth: 500
  },
  supports: {
    align: ["wide", "full"],
    html: false,
    color: {
      gradients: true,
      link: true
    },
    spacing: {
      padding: true,
      margin: true
    },
    typography: {
      fontSize: true,
      lineHeight: true,
      __experimentalFontFamily: true,
      __experimentalTextTransform: true,
      __experimentalFontStyle: true,
      __experimentalFontWeight: true,
      __experimentalLetterSpacing: true,
      __experimentalDefaultControls: {
        fontSize: true,
        lineHeight: true,
        fontAppearance: true,
        letterSpacing: true,
        textTransform: true
      }
    }
  },
  editorStyle: "gc-block-site-title-editor"
};


const {
  name: site_title_name
} = site_title_metadata;

const site_title_settings = {
  icon: map_marker,
  edit: SiteTitleEdit,
  deprecated: site_title_deprecated
};

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/share.js


/**
 * GeChiUI dependencies
 */

const share = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  viewBox: "0 0 24 24",
  xmlns: "http://www.w3.org/2000/svg"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M9 11.8l6.1-4.5c.1.4.4.7.9.7h2c.6 0 1-.4 1-1V5c0-.6-.4-1-1-1h-2c-.6 0-1 .4-1 1v.4l-6.4 4.8c-.2-.1-.4-.2-.6-.2H6c-.6 0-1 .4-1 1v2c0 .6.4 1 1 1h2c.2 0 .4-.1.6-.2l6.4 4.8v.4c0 .6.4 1 1 1h2c.6 0 1-.4 1-1v-2c0-.6-.4-1-1-1h-2c-.5 0-.8.3-.9.7L9 12.2v-.4z"
}));
/* harmony default export */ var library_share = (share);

// EXTERNAL MODULE: ./node_modules/@gechiui/icons/build-module/library/keyboard-return.js
var keyboard_return = __webpack_require__("lyGs");

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/social-link/icons/gechiui.js


/**
 * GeChiUI dependencies
 */

const GeChiUIIcon = () => Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24",
  version: "1.1",
  xmlns: "http://www.w3.org/2000/svg"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M12.158,12.786L9.46,20.625c0.806,0.237,1.657,0.366,2.54,0.366c1.047,0,2.051-0.181,2.986-0.51 c-0.024-0.038-0.046-0.079-0.065-0.124L12.158,12.786z M3.009,12c0,3.559,2.068,6.634,5.067,8.092L3.788,8.341 C3.289,9.459,3.009,10.696,3.009,12z M18.069,11.546c0-1.112-0.399-1.881-0.741-2.48c-0.456-0.741-0.883-1.368-0.883-2.109 c0-0.826,0.627-1.596,1.51-1.596c0.04,0,0.078,0.005,0.116,0.007C16.472,3.904,14.34,3.009,12,3.009 c-3.141,0-5.904,1.612-7.512,4.052c0.211,0.007,0.41,0.011,0.579,0.011c0.94,0,2.396-0.114,2.396-0.114 C7.947,6.93,8.004,7.642,7.52,7.699c0,0-0.487,0.057-1.029,0.085l3.274,9.739l1.968-5.901l-1.401-3.838 C9.848,7.756,9.389,7.699,9.389,7.699C8.904,7.67,8.961,6.93,9.446,6.958c0,0,1.484,0.114,2.368,0.114 c0.94,0,2.397-0.114,2.397-0.114c0.485-0.028,0.542,0.684,0.057,0.741c0,0-0.488,0.057-1.029,0.085l3.249,9.665l0.897-2.996 C17.841,13.284,18.069,12.316,18.069,11.546z M19.889,7.686c0.039,0.286,0.06,0.593,0.06,0.924c0,0.912-0.171,1.938-0.684,3.22 l-2.746,7.94c2.673-1.558,4.47-4.454,4.47-7.771C20.991,10.436,20.591,8.967,19.889,7.686z M12,22C6.486,22,2,17.514,2,12 C2,6.486,6.486,2,12,2c5.514,0,10,4.486,10,10C22,17.514,17.514,22,12,22z"
}));

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/social-link/icons/chain.js


/**
 * GeChiUI dependencies
 */

const ChainIcon = () => Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24",
  version: "1.1"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M19.647,16.706a1.134,1.134,0,0,0-.343-.833l-2.549-2.549a1.134,1.134,0,0,0-.833-.343,1.168,1.168,0,0,0-.883.392l.233.226q.2.189.264.264a2.922,2.922,0,0,1,.184.233.986.986,0,0,1,.159.312,1.242,1.242,0,0,1,.043.337,1.172,1.172,0,0,1-1.176,1.176,1.237,1.237,0,0,1-.337-.043,1,1,0,0,1-.312-.159,2.76,2.76,0,0,1-.233-.184q-.073-.068-.264-.264l-.226-.233a1.19,1.19,0,0,0-.4.895,1.134,1.134,0,0,0,.343.833L15.837,19.3a1.13,1.13,0,0,0,.833.331,1.18,1.18,0,0,0,.833-.318l1.8-1.789a1.12,1.12,0,0,0,.343-.821Zm-8.615-8.64a1.134,1.134,0,0,0-.343-.833L8.163,4.7a1.134,1.134,0,0,0-.833-.343,1.184,1.184,0,0,0-.833.331L4.7,6.473a1.12,1.12,0,0,0-.343.821,1.134,1.134,0,0,0,.343.833l2.549,2.549a1.13,1.13,0,0,0,.833.331,1.184,1.184,0,0,0,.883-.38L8.728,10.4q-.2-.189-.264-.264A2.922,2.922,0,0,1,8.28,9.9a.986.986,0,0,1-.159-.312,1.242,1.242,0,0,1-.043-.337A1.172,1.172,0,0,1,9.254,8.079a1.237,1.237,0,0,1,.337.043,1,1,0,0,1,.312.159,2.761,2.761,0,0,1,.233.184q.073.068.264.264l.226.233a1.19,1.19,0,0,0,.4-.895ZM22,16.706a3.343,3.343,0,0,1-1.042,2.488l-1.8,1.789a3.536,3.536,0,0,1-4.988-.025l-2.525-2.537a3.384,3.384,0,0,1-1.017-2.488,3.448,3.448,0,0,1,1.078-2.561l-1.078-1.078a3.434,3.434,0,0,1-2.549,1.078,3.4,3.4,0,0,1-2.5-1.029L3.029,9.794A3.4,3.4,0,0,1,2,7.294,3.343,3.343,0,0,1,3.042,4.806l1.8-1.789A3.384,3.384,0,0,1,7.331,2a3.357,3.357,0,0,1,2.5,1.042l2.525,2.537a3.384,3.384,0,0,1,1.017,2.488,3.448,3.448,0,0,1-1.078,2.561l1.078,1.078a3.551,3.551,0,0,1,5.049-.049l2.549,2.549A3.4,3.4,0,0,1,22,16.706Z"
}));

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/social-link/icons/feed.js


/**
 * GeChiUI dependencies
 */

const FeedIcon = () => Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24",
  version: "1.1"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M2,8.667V12c5.515,0,10,4.485,10,10h3.333C15.333,14.637,9.363,8.667,2,8.667z M2,2v3.333 c9.19,0,16.667,7.477,16.667,16.667H22C22,10.955,13.045,2,2,2z M4.5,17C3.118,17,2,18.12,2,19.5S3.118,22,4.5,22S7,20.88,7,19.5 S5.882,17,4.5,17z"
}));

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/social-link/icons/mail.js


/**
 * GeChiUI dependencies
 */

const MailIcon = () => Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24",
  version: "1.1"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M20,4H4C2.895,4,2,4.895,2,6v12c0,1.105,0.895,2,2,2h16c1.105,0,2-0.895,2-2V6C22,4.895,21.105,4,20,4z M20,8.236l-8,4.882 L4,8.236V6h16V8.236z"
}));

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/social-link/variations.js
/**
 * Internal dependencies
 */

const social_link_variations_variations = [{
  isDefault: true,
  name: 'gechiui',
  attributes: {
    service: 'gechiui'
  },
  title: 'GeChiUI',
  icon: GeChiUIIcon
}, {
  name: 'chain',
  attributes: {
    service: 'chain'
  },
  title: '链接',
  icon: ChainIcon
}, {
  name: 'feed',
  attributes: {
    service: 'feed'
  },
  title: 'RSS Feed',
  icon: FeedIcon
}, {
  name: 'mail',
  attributes: {
    service: 'mail'
  },
  title: 'Mail',
  keywords: ['email', 'e-mail'],
  icon: MailIcon
}];
/**
 * Add `isActive` function to all `social link` variations, if not defined.
 * `isActive` function is used to find a variation match from a created
 *  Block by providing its attributes.
 */

social_link_variations_variations.forEach(variation => {
  if (variation.isActive) return;

  variation.isActive = (blockAttributes, variationAttributes) => blockAttributes.service === variationAttributes.service;
});
/* harmony default export */ var social_link_variations = (social_link_variations_variations);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/social-link/social-list.js
/**
 * External dependencies
 */

/**
 * GeChiUI dependencies
 */


/**
 * Internal dependencies
 */



/**
 * Retrieves the social service's icon component.
 *
 * @param {string} name key for a social service (lowercase slug)
 *
 * @return {GCComponent} Icon component for social service.
 */

const getIconBySite = name => {
  const variation = Object(external_lodash_["find"])(social_link_variations, {
    name
  });
  return variation ? variation.icon : ChainIcon;
};
/**
 * Retrieves the display name for the social service.
 *
 * @param {string} name key for a social service (lowercase slug)
 *
 * @return {string} Display name for social service
 */

const getNameBySite = name => {
  const variation = Object(external_lodash_["find"])(social_link_variations, {
    name
  });
  return variation ? variation.title : Object(external_gc_i18n_["__"])('社交图标');
};

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/social-link/edit.js


/**
 * External dependencies
 */

/**
 * GeChiUI dependencies
 */






/**
 * Internal dependencies
 */



const SocialLinkURLPopover = _ref => {
  let {
    url,
    setAttributes,
    setPopover,
    anchorRef
  } = _ref;
  return Object(external_gc_element_["createElement"])(external_gc_blockEditor_["URLPopover"], {
    anchorRef: anchorRef === null || anchorRef === void 0 ? void 0 : anchorRef.current,
    onClose: () => setPopover(false)
  }, Object(external_gc_element_["createElement"])("form", {
    className: "block-editor-url-popover__link-editor",
    onSubmit: event => {
      event.preventDefault();
      setPopover(false);
    }
  }, Object(external_gc_element_["createElement"])("div", {
    className: "block-editor-url-input"
  }, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["URLInput"], {
    value: url,
    onChange: nextURL => setAttributes({
      url: nextURL
    }),
    placeholder: Object(external_gc_i18n_["__"])('输入地址'),
    disableSuggestions: true
  })), Object(external_gc_element_["createElement"])(external_gc_components_["Button"], {
    icon: keyboard_return["a" /* default */],
    label: Object(external_gc_i18n_["__"])('应用'),
    type: "submit"
  })));
};

const SocialLinkEdit = _ref2 => {
  let {
    attributes,
    context,
    isSelected,
    setAttributes
  } = _ref2;
  const {
    url,
    service,
    label
  } = attributes;
  const {
    iconColorValue,
    iconBackgroundColorValue
  } = context;
  const [showURLPopover, setPopover] = Object(external_gc_element_["useState"])(false);
  const classes = classnames_default()('gc-social-link', 'gc-social-link-' + service, {
    'gc-social-link__is-incomplete': !url
  });
  const ref = Object(external_gc_element_["useRef"])();
  const IconComponent = getIconBySite(service);
  const socialLinkName = getNameBySite(service);
  const blockProps = Object(external_gc_blockEditor_["useBlockProps"])({
    className: classes,
    style: {
      color: iconColorValue,
      backgroundColor: iconBackgroundColorValue
    }
  });
  return Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InspectorControls"], null, Object(external_gc_element_["createElement"])(external_gc_components_["PanelBody"], {
    title: Object(external_gc_i18n_["sprintf"])(
    /* translators: %s: name of the social service. */
    Object(external_gc_i18n_["__"])('%s标签'), socialLinkName),
    initialOpen: false
  }, Object(external_gc_element_["createElement"])(external_gc_components_["PanelRow"], null, Object(external_gc_element_["createElement"])(external_gc_components_["TextControl"], {
    label: Object(external_gc_i18n_["__"])('链接标签'),
    help: Object(external_gc_i18n_["__"])('简短描述此链接以帮助屏幕阅读器用户。'),
    value: label,
    onChange: value => setAttributes({
      label: value
    })
  })))), Object(external_gc_element_["createElement"])("li", blockProps, Object(external_gc_element_["createElement"])(external_gc_components_["Button"], {
    ref: ref,
    onClick: () => setPopover(true)
  }, Object(external_gc_element_["createElement"])(IconComponent, null), isSelected && showURLPopover && Object(external_gc_element_["createElement"])(SocialLinkURLPopover, {
    url: url,
    setAttributes: setAttributes,
    setPopover: setPopover,
    anchorRef: ref
  }))));
};

/* harmony default export */ var social_link_edit = (SocialLinkEdit);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/social-link/index.js
/**
 * GeChiUI dependencies
 */

/**
 * Internal dependencies
 */


const social_link_metadata = {
  apiVersion: 2,
  name: "core/social-link",
  title: "社交图标",
  category: "widgets",
  parent: ["core/social-links"],
  description: "显示链接至您的社交媒体资料或网站的图标。",
  textdomain: "default",
  attributes: {
    url: {
      type: "string"
    },
    service: {
      type: "string"
    },
    label: {
      type: "string"
    }
  },
  usesContext: ["openInNewTab", "iconColorValue", "iconBackgroundColorValue"],
  supports: {
    reusable: false,
    html: false
  },
  editorStyle: "gc-block-social-link-editor"
};

const {
  name: social_link_name
} = social_link_metadata;

const social_link_settings = {
  icon: library_share,
  edit: social_link_edit,
  variations: social_link_variations
};

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/social-links/deprecated.js


/**
 * External dependencies
 */

/**
 * GeChiUI dependencies
 */


/**
 * The specific handling by `className` below is needed because `itemsJustification`
 * was introduced in https://github.com/GeChiUI/gutenberg/pull/28980/files and wasn't
 * declared in block.json.
 *
 * @param {Object} attributes Block's attributes.
 */

const social_links_deprecated_migrateWithLayout = attributes => {
  var _className$match, _className$match$;

  if (!!attributes.layout) {
    return attributes;
  }

  const {
    className
  } = attributes; // Matches classes with `items-justified-` prefix.

  const prefix = `items-justified-`;
  const justifiedItemsRegex = new RegExp(`\\b${prefix}[^ ]*[ ]?\\b`, 'g');
  const newAttributes = { ...attributes,
    className: className === null || className === void 0 ? void 0 : className.replace(justifiedItemsRegex, '').trim()
  };
  /**
   * Add `layout` prop only if `justifyContent` is defined, for backwards
   * compatibility. In other cases the block's default layout will be used.
   * Also noting that due to the missing attribute, it's possible for a block
   * to have more than one of `justified` classes.
   */

  const justifyContent = className === null || className === void 0 ? void 0 : (_className$match = className.match(justifiedItemsRegex)) === null || _className$match === void 0 ? void 0 : (_className$match$ = _className$match[0]) === null || _className$match$ === void 0 ? void 0 : _className$match$.trim();

  if (justifyContent) {
    Object.assign(newAttributes, {
      layout: {
        type: 'flex',
        justifyContent: justifyContent.slice(prefix.length)
      }
    });
  }

  return newAttributes;
}; // Social Links block deprecations.


const social_links_deprecated_deprecated = [// V1. Remove CSS variable use for colors.
{
  attributes: {
    iconColor: {
      type: 'string'
    },
    customIconColor: {
      type: 'string'
    },
    iconColorValue: {
      type: 'string'
    },
    iconBackgroundColor: {
      type: 'string'
    },
    customIconBackgroundColor: {
      type: 'string'
    },
    iconBackgroundColorValue: {
      type: 'string'
    },
    openInNewTab: {
      type: 'boolean',
      default: false
    },
    size: {
      type: 'string'
    }
  },
  providesContext: {
    openInNewTab: 'openInNewTab'
  },
  supports: {
    align: ['left', 'center', 'right'],
    anchor: true
  },
  migrate: social_links_deprecated_migrateWithLayout,
  save: props => {
    const {
      attributes: {
        iconBackgroundColorValue,
        iconColorValue,
        itemsJustification,
        size
      }
    } = props;
    const className = classnames_default()(size, {
      'has-icon-color': iconColorValue,
      'has-icon-background-color': iconBackgroundColorValue,
      [`items-justified-${itemsJustification}`]: itemsJustification
    });
    const style = {
      '--gc--social-links--icon-color': iconColorValue,
      '--gc--social-links--icon-background-color': iconBackgroundColorValue
    };
    return Object(external_gc_element_["createElement"])("ul", external_gc_blockEditor_["useBlockProps"].save({
      className,
      style
    }), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InnerBlocks"].Content, null));
  }
}];
/* harmony default export */ var social_links_deprecated = (social_links_deprecated_deprecated);

// EXTERNAL MODULE: ./node_modules/@gechiui/icons/build-module/library/check.js
var check = __webpack_require__("Tv9K");

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/social-links/edit.js


/**
 * External dependencies
 */

/**
 * GeChiUI dependencies
 */







const social_links_edit_ALLOWED_BLOCKS = ['core/social-link'];
const sizeOptions = [{
  name: Object(external_gc_i18n_["__"])('小'),
  value: 'has-small-icon-size'
}, {
  name: Object(external_gc_i18n_["__"])('常规'),
  value: 'has-normal-icon-size'
}, {
  name: Object(external_gc_i18n_["__"])('大'),
  value: 'has-large-icon-size'
}, {
  name: Object(external_gc_i18n_["__"])('特大'),
  value: 'has-huge-icon-size'
}];

const edit_getDefaultBlockLayout = blockTypeOrName => {
  const layoutBlockSupportConfig = Object(external_gc_blocks_["getBlockSupport"])(blockTypeOrName, '__experimentalLayout');
  return layoutBlockSupportConfig === null || layoutBlockSupportConfig === void 0 ? void 0 : layoutBlockSupportConfig.default;
};

function SocialLinksEdit(props) {
  var _attributes$className;

  const {
    name,
    attributes,
    iconBackgroundColor,
    iconColor,
    isSelected,
    setAttributes,
    setIconBackgroundColor,
    setIconColor
  } = props;
  const {
    iconBackgroundColorValue,
    iconColorValue,
    openInNewTab,
    size,
    layout
  } = attributes;
  const usedLayout = layout || edit_getDefaultBlockLayout(name); // Remove icon background color if logos only style selected.

  const logosOnly = ((_attributes$className = attributes.className) === null || _attributes$className === void 0 ? void 0 : _attributes$className.indexOf('is-style-logos-only')) >= 0;
  Object(external_gc_element_["useEffect"])(() => {
    if (logosOnly) {
      setAttributes({
        iconBackgroundColor: undefined,
        customIconBackgroundColor: undefined,
        iconBackgroundColorValue: undefined
      });
    }
  }, [logosOnly, setAttributes]);
  const SocialPlaceholder = Object(external_gc_element_["createElement"])("li", {
    className: "gc-block-social-links__social-placeholder"
  }, Object(external_gc_element_["createElement"])("div", {
    className: "gc-social-link"
  }), Object(external_gc_element_["createElement"])("div", {
    className: "gc-block-social-links__social-placeholder-icons"
  }, Object(external_gc_element_["createElement"])("div", {
    className: "gc-social-link gc-social-link-twitter"
  }), Object(external_gc_element_["createElement"])("div", {
    className: "gc-social-link gc-social-link-facebook"
  }), Object(external_gc_element_["createElement"])("div", {
    className: "gc-social-link gc-social-link-instagram"
  })));
  const SelectedSocialPlaceholder = Object(external_gc_element_["createElement"])("li", {
    className: "gc-block-social-links__social-prompt"
  }, Object(external_gc_i18n_["__"])('点击加号以添加')); // Fallback color values are used maintain selections in case switching
  // themes and named colors in palette do not match.

  const className = classnames_default()(size, {
    'has-icon-color': iconColor.color || iconColorValue,
    'has-icon-background-color': iconBackgroundColor.color || iconBackgroundColorValue
  });
  const blockProps = Object(external_gc_blockEditor_["useBlockProps"])({
    className
  });
  const innerBlocksProps = Object(external_gc_blockEditor_["useInnerBlocksProps"])(blockProps, {
    allowedBlocks: social_links_edit_ALLOWED_BLOCKS,
    placeholder: isSelected ? SelectedSocialPlaceholder : SocialPlaceholder,
    templateLock: false,
    __experimentalAppenderTagName: 'li',
    __experimentalLayout: usedLayout
  });
  const POPOVER_PROPS = {
    position: 'bottom right'
  };
  return Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["BlockControls"], {
    group: "other"
  }, Object(external_gc_element_["createElement"])(external_gc_components_["ToolbarDropdownMenu"], {
    label: Object(external_gc_i18n_["__"])('尺寸'),
    text: Object(external_gc_i18n_["__"])('尺寸'),
    icon: null,
    popoverProps: POPOVER_PROPS
  }, _ref => {
    let {
      onClose
    } = _ref;
    return Object(external_gc_element_["createElement"])(external_gc_components_["MenuGroup"], null, sizeOptions.map(entry => {
      return Object(external_gc_element_["createElement"])(external_gc_components_["MenuItem"], {
        icon: (size === entry.value || !size && entry.value === 'has-normal-icon-size') && check["a" /* default */],
        isSelected: size === entry.value,
        key: entry.value,
        onClick: () => {
          setAttributes({
            size: entry.value
          });
        },
        onClose: onClose,
        role: "menuitemradio"
      }, entry.name);
    }));
  })), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InspectorControls"], null, Object(external_gc_element_["createElement"])(external_gc_components_["PanelBody"], {
    title: Object(external_gc_i18n_["__"])('链接设置')
  }, Object(external_gc_element_["createElement"])(external_gc_components_["ToggleControl"], {
    label: Object(external_gc_i18n_["__"])('在新标签页中打开链接'),
    checked: openInNewTab,
    onChange: () => setAttributes({
      openInNewTab: !openInNewTab
    })
  })), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["PanelColorSettings"], {
    __experimentalHasMultipleOrigins: true,
    __experimentalIsRenderedInSidebar: true,
    title: Object(external_gc_i18n_["__"])('颜色'),
    colorSettings: [{
      // Use custom attribute as fallback to prevent loss of named color selection when
      // switching themes to a new theme that does not have a matching named color.
      value: iconColor.color || iconColorValue,
      onChange: colorValue => {
        setIconColor(colorValue);
        setAttributes({
          iconColorValue: colorValue
        });
      },
      label: Object(external_gc_i18n_["__"])('图标颜色')
    }, !logosOnly && {
      // Use custom attribute as fallback to prevent loss of named color selection when
      // switching themes to a new theme that does not have a matching named color.
      value: iconBackgroundColor.color || iconBackgroundColorValue,
      onChange: colorValue => {
        setIconBackgroundColor(colorValue);
        setAttributes({
          iconBackgroundColorValue: colorValue
        });
      },
      label: Object(external_gc_i18n_["__"])('图标背景')
    }]
  }), !logosOnly && Object(external_gc_element_["createElement"])(external_gc_blockEditor_["ContrastChecker"], {
    textColor: iconColorValue,
    backgroundColor: iconBackgroundColorValue,
    isLargeText: false
  })), Object(external_gc_element_["createElement"])("ul", innerBlocksProps));
}
const iconColorAttributes = {
  iconColor: 'icon-color',
  iconBackgroundColor: 'icon-background-color'
};
/* harmony default export */ var social_links_edit = (Object(external_gc_blockEditor_["withColors"])(iconColorAttributes)(SocialLinksEdit));

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/social-links/save.js


/**
 * External dependencies
 */

/**
 * GeChiUI dependencies
 */


function social_links_save_save(props) {
  const {
    attributes: {
      iconBackgroundColorValue,
      iconColorValue,
      size
    }
  } = props;
  const className = classnames_default()(size, {
    'has-icon-color': iconColorValue,
    'has-icon-background-color': iconBackgroundColorValue
  });
  const blockProps = external_gc_blockEditor_["useBlockProps"].save({
    className
  });
  const innerBlocksProps = external_gc_blockEditor_["useInnerBlocksProps"].save(blockProps);
  return Object(external_gc_element_["createElement"])("ul", innerBlocksProps);
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/social-links/index.js
/**
 * GeChiUI dependencies
 */

/**
 * Internal dependencies
 */



const social_links_metadata = {
  apiVersion: 2,
  name: "core/social-links",
  title: "社交图标",
  category: "widgets",
  description: "显示链接至您的社交媒体资料或网站的图标。",
  keywords: ["links"],
  textdomain: "default",
  attributes: {
    iconColor: {
      type: "string"
    },
    customIconColor: {
      type: "string"
    },
    iconColorValue: {
      type: "string"
    },
    iconBackgroundColor: {
      type: "string"
    },
    customIconBackgroundColor: {
      type: "string"
    },
    iconBackgroundColorValue: {
      type: "string"
    },
    openInNewTab: {
      type: "boolean",
      "default": false
    },
    size: {
      type: "string"
    }
  },
  providesContext: {
    openInNewTab: "openInNewTab",
    iconColorValue: "iconColorValue",
    iconBackgroundColorValue: "iconBackgroundColorValue"
  },
  supports: {
    align: ["left", "center", "right"],
    anchor: true,
    __experimentalExposeControlsToChildren: true,
    __experimentalLayout: {
      allowSwitching: false,
      allowInheriting: false,
      "default": {
        type: "flex"
      }
    },
    spacing: {
      blockGap: true,
      margin: ["top", "bottom"],
      units: ["px", "em", "rem", "vh", "vw"],
      __experimentalDefaultControls: {
        blockGap: true
      }
    }
  },
  styles: [{
    name: "default",
    label: "默认",
    isDefault: true
  }, {
    name: "logos-only",
    label: "Logos Only"
  }, {
    name: "pill-shape",
    label: "Pill Shape"
  }],
  editorStyle: "gc-block-social-links-editor",
  style: "gc-block-social-links"
};

const {
  name: social_links_name
} = social_links_metadata;

const social_links_settings = {
  example: {
    innerBlocks: [{
      name: 'core/social-link',
      attributes: {
        service: 'gechiui',
        url: 'https://www.gechiui.com'
      }
    }, {
      name: 'core/social-link',
      attributes: {
        service: 'facebook',
        url: 'https://www.facebook.com/GeChiUI/'
      }
    }, {
      name: 'core/social-link',
      attributes: {
        service: 'twitter',
        url: 'https://twitter.com/GeChiUI'
      }
    }]
  },
  icon: library_share,
  edit: social_links_edit,
  save: social_links_save_save,
  deprecated: social_links_deprecated
};

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/resize-corner-n-e.js


/**
 * GeChiUI dependencies
 */

const resizeCornerNE = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  viewBox: "0 0 24 24",
  xmlns: "http://www.w3.org/2000/svg"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M12.5 4.2v1.6h4.7L5.8 17.2V12H4.2v7.8H12v-1.6H6.8L18.2 6.8v4.7h1.6V4.2z"
}));
/* harmony default export */ var resize_corner_n_e = (resizeCornerNE);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/spacer/deprecated.js


/**
 * GeChiUI dependencies
 */

const spacer_deprecated_deprecated = [{
  attributes: {
    height: {
      type: 'number',
      default: 100
    },
    width: {
      type: 'number'
    }
  },

  migrate(attributes) {
    const {
      height,
      width
    } = attributes;
    return { ...attributes,
      width: width !== undefined ? `${width}px` : undefined,
      height: height !== undefined ? `${height}px` : undefined
    };
  },

  save(_ref) {
    let {
      attributes
    } = _ref;
    return Object(external_gc_element_["createElement"])("div", external_gc_blockEditor_["useBlockProps"].save({
      style: {
        height: attributes.height,
        width: attributes.width
      },
      'aria-hidden': true
    }));
  }

}];
/* harmony default export */ var spacer_deprecated = (spacer_deprecated_deprecated);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/spacer/controls.js


/**
 * GeChiUI dependencies
 */





/**
 * Internal dependencies
 */



function DimensionInput(_ref) {
  var _ref2;

  let {
    label,
    onChange,
    isResizing,
    value = ''
  } = _ref;
  const [temporaryInput, setTemporaryInput] = Object(external_gc_element_["useState"])(null);
  const inputId = Object(external_gc_compose_["useInstanceId"])(external_gc_components_["__experimentalUnitControl"], 'block-spacer-height-input'); // In most contexts the spacer size cannot meaningfully be set to a
  // percentage, since this is relative to the parent container. This
  // unit is disabled from the UI.

  const availableUnitSettings = (_ref2 = Object(external_gc_blockEditor_["useSetting"])('spacing.units') || undefined) === null || _ref2 === void 0 ? void 0 : _ref2.filter(availableUnit => availableUnit !== '%');
  const units = Object(external_gc_components_["__experimentalUseCustomUnits"])({
    availableUnits: availableUnitSettings || ['px', 'em', 'rem', 'vw', 'vh'],
    defaultValues: {
      px: '100',
      em: '10',
      rem: '10',
      vw: '10',
      vh: '25'
    }
  });

  const handleOnChange = unprocessedValue => {
    setTemporaryInput(null);
    onChange(unprocessedValue);
  };

  const handleOnBlur = () => {
    if (temporaryInput !== null) {
      setTemporaryInput(null);
    }
  };

  const inputValue = temporaryInput !== null ? temporaryInput : value;
  return Object(external_gc_element_["createElement"])(external_gc_components_["BaseControl"], {
    label: label,
    id: inputId
  }, Object(external_gc_element_["createElement"])(external_gc_components_["__experimentalUnitControl"], {
    id: inputId,
    isResetValueOnUnitChange: true,
    min: 0,
    max: MAX_SPACER_SIZE,
    onBlur: handleOnBlur,
    onChange: handleOnChange,
    style: {
      maxWidth: 80
    },
    value: inputValue,
    units: units // Force the unit to update to `px` when the Spacer is being resized.
    ,
    unit: isResizing ? 'px' : undefined
  }));
}

function SpacerControls(_ref3) {
  let {
    setAttributes,
    orientation,
    height,
    width,
    isResizing
  } = _ref3;
  return Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InspectorControls"], null, Object(external_gc_element_["createElement"])(external_gc_components_["PanelBody"], {
    title: Object(external_gc_i18n_["__"])('空白设置')
  }, orientation === 'horizontal' && Object(external_gc_element_["createElement"])(DimensionInput, {
    label: Object(external_gc_i18n_["__"])('宽度'),
    value: width,
    onChange: nextWidth => setAttributes({
      width: nextWidth
    }),
    isResizing: isResizing
  }), orientation !== 'horizontal' && Object(external_gc_element_["createElement"])(DimensionInput, {
    label: Object(external_gc_i18n_["__"])('高度'),
    value: height,
    onChange: nextHeight => setAttributes({
      height: nextHeight
    }),
    isResizing: isResizing
  })));
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/spacer/edit.js



/**
 * External dependencies
 */

/**
 * GeChiUI dependencies
 */







/**
 * Internal dependencies
 */


const MIN_SPACER_SIZE = 1;
const MAX_SPACER_SIZE = 500;

const ResizableSpacer = _ref => {
  let {
    orientation,
    onResizeStart,
    onResize,
    onResizeStop,
    isSelected,
    isResizing,
    setIsResizing,
    ...props
  } = _ref;

  const getCurrentSize = elt => {
    return orientation === 'horizontal' ? elt.clientWidth : elt.clientHeight;
  };

  const getNextVal = elt => {
    return `${getCurrentSize(elt)}px`;
  };

  return Object(external_gc_element_["createElement"])(external_gc_components_["ResizableBox"], Object(esm_extends["a" /* default */])({
    className: classnames_default()('block-library-spacer__resize-container', {
      'resize-horizontal': orientation === 'horizontal',
      'is-resizing': isResizing,
      'is-selected': isSelected
    }),
    onResizeStart: (_event, _direction, elt) => {
      const nextVal = getNextVal(elt);
      onResizeStart(nextVal);
      onResize(nextVal);
    },
    onResize: (_event, _direction, elt) => {
      onResize(getNextVal(elt));

      if (!isResizing) {
        setIsResizing(true);
      }
    },
    onResizeStop: (_event, _direction, elt) => {
      const nextVal = Math.min(MAX_SPACER_SIZE, getCurrentSize(elt));
      onResizeStop(`${nextVal}px`);
      setIsResizing(false);
    },
    __experimentalShowTooltip: true,
    __experimentalTooltipProps: {
      axis: orientation === 'horizontal' ? 'x' : 'y',
      position: 'corner',
      isVisible: isResizing
    },
    showHandle: isSelected
  }, props));
};

const SpacerEdit = _ref2 => {
  let {
    attributes,
    isSelected,
    setAttributes,
    onResizeStart,
    onResizeStop,
    context
  } = _ref2;
  const {
    orientation
  } = context;
  const {
    height,
    width
  } = attributes;
  const [isResizing, setIsResizing] = Object(external_gc_element_["useState"])(false);
  const [temporaryHeight, setTemporaryHeight] = Object(external_gc_element_["useState"])(null);
  const [temporaryWidth, setTemporaryWidth] = Object(external_gc_element_["useState"])(null);

  const handleOnVerticalResizeStop = newHeight => {
    onResizeStop();
    setAttributes({
      height: newHeight
    });
    setTemporaryHeight(null);
  };

  const handleOnHorizontalResizeStop = newWidth => {
    onResizeStop();
    setAttributes({
      width: newWidth
    });
    setTemporaryWidth(null);
  };

  const style = {
    height: orientation === 'horizontal' ? 24 : temporaryHeight || height || undefined,
    width: orientation === 'horizontal' ? temporaryWidth || width || undefined : undefined
  };

  const resizableBoxWithOrientation = blockOrientation => {
    if (blockOrientation === 'horizontal') {
      return Object(external_gc_element_["createElement"])(ResizableSpacer, {
        minWidth: MIN_SPACER_SIZE,
        enable: {
          top: false,
          right: true,
          bottom: false,
          left: false,
          topRight: false,
          bottomRight: false,
          bottomLeft: false,
          topLeft: false
        },
        orientation: blockOrientation,
        onResizeStart: onResizeStart,
        onResize: setTemporaryWidth,
        onResizeStop: handleOnHorizontalResizeStop,
        isSelected: isSelected,
        isResizing: isResizing,
        setIsResizing: setIsResizing
      });
    }

    return Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])(ResizableSpacer, {
      enable: {
        top: false,
        right: false,
        bottom: true,
        left: false,
        topRight: false,
        bottomRight: false,
        bottomLeft: false,
        topLeft: false
      },
      orientation: blockOrientation,
      onResizeStart: onResizeStart,
      onResize: setTemporaryHeight,
      onResizeStop: handleOnVerticalResizeStop,
      isSelected: isSelected,
      isResizing: isResizing,
      setIsResizing: setIsResizing
    }));
  };

  Object(external_gc_element_["useEffect"])(() => {
    if (orientation === 'horizontal' && !width) {
      setAttributes({
        height: '0px',
        width: '72px'
      });
    }
  }, []);
  return Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])(external_gc_primitives_["View"], Object(external_gc_blockEditor_["useBlockProps"])({
    style
  }), resizableBoxWithOrientation(orientation)), Object(external_gc_element_["createElement"])(SpacerControls, {
    setAttributes: setAttributes,
    height: temporaryHeight || height,
    width: temporaryWidth || width,
    orientation: orientation,
    isResizing: isResizing
  }));
};

/* harmony default export */ var spacer_edit = (Object(external_gc_compose_["compose"])([Object(external_gc_data_["withDispatch"])(dispatch => {
  const {
    toggleSelection
  } = dispatch(external_gc_blockEditor_["store"]);
  return {
    onResizeStart: () => toggleSelection(false),
    onResizeStop: () => toggleSelection(true)
  };
}), external_gc_compose_["withInstanceId"]])(SpacerEdit));

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/spacer/save.js


/**
 * GeChiUI dependencies
 */

function spacer_save_save(_ref) {
  let {
    attributes: {
      height,
      width
    }
  } = _ref;
  return Object(external_gc_element_["createElement"])("div", external_gc_blockEditor_["useBlockProps"].save({
    style: {
      height,
      width
    },
    'aria-hidden': true
  }));
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/spacer/index.js
/**
 * GeChiUI dependencies
 */

/**
 * Internal dependencies
 */



const spacer_metadata = {
  apiVersion: 2,
  name: "core/spacer",
  title: "空格",
  category: "design",
  description: "在区块间添加空白并自定义其高度。",
  textdomain: "default",
  attributes: {
    height: {
      type: "string",
      "default": "100px"
    },
    width: {
      type: "string"
    }
  },
  usesContext: ["orientation"],
  supports: {
    anchor: true
  },
  editorStyle: "gc-block-spacer-editor",
  style: "gc-block-spacer"
};

const {
  name: spacer_name
} = spacer_metadata;

const spacer_settings = {
  icon: resize_corner_n_e,
  edit: spacer_edit,
  save: spacer_save_save,
  deprecated: spacer_deprecated
};

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/block-table.js


/**
 * GeChiUI dependencies
 */

const blockTable = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  viewBox: "0 0 24 24",
  xmlns: "http://www.w3.org/2000/svg"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM5 4.5h14c.3 0 .5.2.5.5v3.5h-15V5c0-.3.2-.5.5-.5zm8 5.5h6.5v3.5H13V10zm-1.5 3.5h-7V10h7v3.5zm-7 5.5v-4h7v4.5H5c-.3 0-.5-.2-.5-.5zm14.5.5h-6V15h6.5v4c0 .3-.2.5-.5.5z"
}));
/* harmony default export */ var block_table = (blockTable);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/table/deprecated.js


/**
 * External dependencies
 */

/**
 * GeChiUI dependencies
 */


const deprecated_supports = {
  align: true
}; // As the previous arbitrary colors won't match theme color palettes, the hex
// value will be mapped to the style.color.background attribute as if it was
// a custom color selection.

const oldColors = {
  'subtle-light-gray': '#f3f4f5',
  'subtle-pale-green': '#e9fbe5',
  'subtle-pale-blue': '#e7f5fe',
  'subtle-pale-pink': '#fcf0ef'
};
const table_deprecated_deprecated = [// Deprecation migrating table block to use colors block support feature.
{
  attributes: {
    hasFixedLayout: {
      type: 'boolean',
      default: false
    },
    backgroundColor: {
      type: 'string'
    },
    caption: {
      type: 'string',
      source: 'html',
      selector: 'figcaption',
      default: ''
    },
    head: {
      type: 'array',
      default: [],
      source: 'query',
      selector: 'thead tr',
      query: {
        cells: {
          type: 'array',
          default: [],
          source: 'query',
          selector: 'td,th',
          query: {
            content: {
              type: 'string',
              source: 'html'
            },
            tag: {
              type: 'string',
              default: 'td',
              source: 'tag'
            },
            scope: {
              type: 'string',
              source: 'attribute',
              attribute: 'scope'
            },
            align: {
              type: 'string',
              source: 'attribute',
              attribute: 'data-align'
            }
          }
        }
      }
    },
    body: {
      type: 'array',
      default: [],
      source: 'query',
      selector: 'tbody tr',
      query: {
        cells: {
          type: 'array',
          default: [],
          source: 'query',
          selector: 'td,th',
          query: {
            content: {
              type: 'string',
              source: 'html'
            },
            tag: {
              type: 'string',
              default: 'td',
              source: 'tag'
            },
            scope: {
              type: 'string',
              source: 'attribute',
              attribute: 'scope'
            },
            align: {
              type: 'string',
              source: 'attribute',
              attribute: 'data-align'
            }
          }
        }
      }
    },
    foot: {
      type: 'array',
      default: [],
      source: 'query',
      selector: 'tfoot tr',
      query: {
        cells: {
          type: 'array',
          default: [],
          source: 'query',
          selector: 'td,th',
          query: {
            content: {
              type: 'string',
              source: 'html'
            },
            tag: {
              type: 'string',
              default: 'td',
              source: 'tag'
            },
            scope: {
              type: 'string',
              source: 'attribute',
              attribute: 'scope'
            },
            align: {
              type: 'string',
              source: 'attribute',
              attribute: 'data-align'
            }
          }
        }
      }
    }
  },
  supports: {
    anchor: true,
    align: true,
    __experimentalSelector: '.gc-block-table > table'
  },
  save: _ref => {
    let {
      attributes
    } = _ref;
    const {
      hasFixedLayout,
      head,
      body,
      foot,
      backgroundColor,
      caption
    } = attributes;
    const isEmpty = !head.length && !body.length && !foot.length;

    if (isEmpty) {
      return null;
    }

    const backgroundClass = Object(external_gc_blockEditor_["getColorClassName"])('background-color', backgroundColor);
    const classes = classnames_default()(backgroundClass, {
      'has-fixed-layout': hasFixedLayout,
      'has-background': !!backgroundClass
    });
    const hasCaption = !external_gc_blockEditor_["RichText"].isEmpty(caption);

    const Section = _ref2 => {
      let {
        type,
        rows
      } = _ref2;

      if (!rows.length) {
        return null;
      }

      const Tag = `t${type}`;
      return Object(external_gc_element_["createElement"])(Tag, null, rows.map((_ref3, rowIndex) => {
        let {
          cells
        } = _ref3;
        return Object(external_gc_element_["createElement"])("tr", {
          key: rowIndex
        }, cells.map((_ref4, cellIndex) => {
          let {
            content,
            tag,
            scope,
            align
          } = _ref4;
          const cellClasses = classnames_default()({
            [`has-text-align-${align}`]: align
          });
          return Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"].Content, {
            className: cellClasses ? cellClasses : undefined,
            "data-align": align,
            tagName: tag,
            value: content,
            key: cellIndex,
            scope: tag === 'th' ? scope : undefined
          });
        }));
      }));
    };

    return Object(external_gc_element_["createElement"])("figure", external_gc_blockEditor_["useBlockProps"].save(), Object(external_gc_element_["createElement"])("table", {
      className: classes === '' ? undefined : classes
    }, Object(external_gc_element_["createElement"])(Section, {
      type: "head",
      rows: head
    }), Object(external_gc_element_["createElement"])(Section, {
      type: "body",
      rows: body
    }), Object(external_gc_element_["createElement"])(Section, {
      type: "foot",
      rows: foot
    })), hasCaption && Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"].Content, {
      tagName: "figcaption",
      value: caption
    }));
  },
  isEligible: attributes => {
    return attributes.backgroundColor && !attributes.style;
  },
  // This version is the first to introduce the style attribute to the
  // table block. As a result, we'll explicitly override that.
  migrate: attributes => {
    return { ...attributes,
      backgroundColor: undefined,
      style: {
        color: {
          background: oldColors[attributes.backgroundColor]
        }
      }
    };
  }
}, {
  attributes: {
    hasFixedLayout: {
      type: 'boolean',
      default: false
    },
    backgroundColor: {
      type: 'string'
    },
    head: {
      type: 'array',
      default: [],
      source: 'query',
      selector: 'thead tr',
      query: {
        cells: {
          type: 'array',
          default: [],
          source: 'query',
          selector: 'td,th',
          query: {
            content: {
              type: 'string',
              source: 'html'
            },
            tag: {
              type: 'string',
              default: 'td',
              source: 'tag'
            },
            scope: {
              type: 'string',
              source: 'attribute',
              attribute: 'scope'
            }
          }
        }
      }
    },
    body: {
      type: 'array',
      default: [],
      source: 'query',
      selector: 'tbody tr',
      query: {
        cells: {
          type: 'array',
          default: [],
          source: 'query',
          selector: 'td,th',
          query: {
            content: {
              type: 'string',
              source: 'html'
            },
            tag: {
              type: 'string',
              default: 'td',
              source: 'tag'
            },
            scope: {
              type: 'string',
              source: 'attribute',
              attribute: 'scope'
            }
          }
        }
      }
    },
    foot: {
      type: 'array',
      default: [],
      source: 'query',
      selector: 'tfoot tr',
      query: {
        cells: {
          type: 'array',
          default: [],
          source: 'query',
          selector: 'td,th',
          query: {
            content: {
              type: 'string',
              source: 'html'
            },
            tag: {
              type: 'string',
              default: 'td',
              source: 'tag'
            },
            scope: {
              type: 'string',
              source: 'attribute',
              attribute: 'scope'
            }
          }
        }
      }
    }
  },
  supports: deprecated_supports,

  save(_ref5) {
    let {
      attributes
    } = _ref5;
    const {
      hasFixedLayout,
      head,
      body,
      foot,
      backgroundColor
    } = attributes;
    const isEmpty = !head.length && !body.length && !foot.length;

    if (isEmpty) {
      return null;
    }

    const backgroundClass = Object(external_gc_blockEditor_["getColorClassName"])('background-color', backgroundColor);
    const classes = classnames_default()(backgroundClass, {
      'has-fixed-layout': hasFixedLayout,
      'has-background': !!backgroundClass
    });

    const Section = _ref6 => {
      let {
        type,
        rows
      } = _ref6;

      if (!rows.length) {
        return null;
      }

      const Tag = `t${type}`;
      return Object(external_gc_element_["createElement"])(Tag, null, rows.map((_ref7, rowIndex) => {
        let {
          cells
        } = _ref7;
        return Object(external_gc_element_["createElement"])("tr", {
          key: rowIndex
        }, cells.map((_ref8, cellIndex) => {
          let {
            content,
            tag,
            scope
          } = _ref8;
          return Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"].Content, {
            tagName: tag,
            value: content,
            key: cellIndex,
            scope: tag === 'th' ? scope : undefined
          });
        }));
      }));
    };

    return Object(external_gc_element_["createElement"])("table", {
      className: classes
    }, Object(external_gc_element_["createElement"])(Section, {
      type: "head",
      rows: head
    }), Object(external_gc_element_["createElement"])(Section, {
      type: "body",
      rows: body
    }), Object(external_gc_element_["createElement"])(Section, {
      type: "foot",
      rows: foot
    }));
  }

}];
/* harmony default export */ var table_deprecated = (table_deprecated_deprecated);

// EXTERNAL MODULE: ./node_modules/@gechiui/icons/build-module/library/align-left.js
var align_left = __webpack_require__("eXYJ");

// EXTERNAL MODULE: ./node_modules/@gechiui/icons/build-module/library/align-center.js
var align_center = __webpack_require__("D40o");

// EXTERNAL MODULE: ./node_modules/@gechiui/icons/build-module/library/align-right.js
var align_right = __webpack_require__("dQQD");

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/table-row-before.js


/**
 * GeChiUI dependencies
 */

const tableRowBefore = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "-2 -2 24 24"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M6.656 6.464h2.88v2.88h1.408v-2.88h2.88V5.12h-2.88V2.24H9.536v2.88h-2.88zM0 17.92V0h20.48v17.92H0zm7.68-2.56h5.12v-3.84H7.68v3.84zm-6.4 0H6.4v-3.84H1.28v3.84zM19.2 1.28H1.28v9.024H19.2V1.28zm0 10.24h-5.12v3.84h5.12v-3.84zM6.656 6.464h2.88v2.88h1.408v-2.88h2.88V5.12h-2.88V2.24H9.536v2.88h-2.88zM0 17.92V0h20.48v17.92H0zm7.68-2.56h5.12v-3.84H7.68v3.84zm-6.4 0H6.4v-3.84H1.28v3.84zM19.2 1.28H1.28v9.024H19.2V1.28zm0 10.24h-5.12v3.84h5.12v-3.84z"
}));
/* harmony default export */ var table_row_before = (tableRowBefore);

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/table-row-after.js


/**
 * GeChiUI dependencies
 */

const tableRowAfter = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "-2 -2 24 24"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M13.824 10.176h-2.88v-2.88H9.536v2.88h-2.88v1.344h2.88v2.88h1.408v-2.88h2.88zM0 17.92V0h20.48v17.92H0zM6.4 1.28H1.28v3.84H6.4V1.28zm6.4 0H7.68v3.84h5.12V1.28zm6.4 0h-5.12v3.84h5.12V1.28zm0 5.056H1.28v9.024H19.2V6.336z"
}));
/* harmony default export */ var table_row_after = (tableRowAfter);

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/table-row-delete.js


/**
 * GeChiUI dependencies
 */

const tableRowDelete = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "-2 -2 24 24"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M17.728 11.456L14.592 8.32l3.2-3.2-1.536-1.536-3.2 3.2L9.92 3.648 8.384 5.12l3.2 3.2-3.264 3.264 1.536 1.536 3.264-3.264 3.136 3.136 1.472-1.536zM0 17.92V0h20.48v17.92H0zm19.2-6.4h-.448l-1.28-1.28H19.2V6.4h-1.792l1.28-1.28h.512V1.28H1.28v3.84h6.208l1.28 1.28H1.28v3.84h7.424l-1.28 1.28H1.28v3.84H19.2v-3.84z"
}));
/* harmony default export */ var table_row_delete = (tableRowDelete);

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/table-column-before.js


/**
 * GeChiUI dependencies
 */

const tableColumnBefore = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "-2 -2 24 24"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M6.4 3.776v3.648H2.752v1.792H6.4v3.648h1.728V9.216h3.712V7.424H8.128V3.776zM0 17.92V0h20.48v17.92H0zM12.8 1.28H1.28v14.08H12.8V1.28zm6.4 0h-5.12v3.84h5.12V1.28zm0 5.12h-5.12v3.84h5.12V6.4zm0 5.12h-5.12v3.84h5.12v-3.84z"
}));
/* harmony default export */ var table_column_before = (tableColumnBefore);

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/table-column-after.js


/**
 * GeChiUI dependencies
 */

const tableColumnAfter = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "-2 -2 24 24"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M14.08 12.864V9.216h3.648V7.424H14.08V3.776h-1.728v3.648H8.64v1.792h3.712v3.648zM0 17.92V0h20.48v17.92H0zM6.4 1.28H1.28v3.84H6.4V1.28zm0 5.12H1.28v3.84H6.4V6.4zm0 5.12H1.28v3.84H6.4v-3.84zM19.2 1.28H7.68v14.08H19.2V1.28z"
}));
/* harmony default export */ var table_column_after = (tableColumnAfter);

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/table-column-delete.js


/**
 * GeChiUI dependencies
 */

const tableColumnDelete = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "-2 -2 24 24"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M6.4 9.98L7.68 8.7v-.256L6.4 7.164V9.98zm6.4-1.532l1.28-1.28V9.92L12.8 8.64v-.192zm7.68 9.472V0H0v17.92h20.48zm-1.28-2.56h-5.12v-1.024l-.256.256-1.024-1.024v1.792H7.68v-1.792l-1.024 1.024-.256-.256v1.024H1.28V1.28H6.4v2.368l.704-.704.576.576V1.216h5.12V3.52l.96-.96.32.32V1.216h5.12V15.36zm-5.76-2.112l-3.136-3.136-3.264 3.264-1.536-1.536 3.264-3.264L5.632 5.44l1.536-1.536 3.136 3.136 3.2-3.2 1.536 1.536-3.2 3.2 3.136 3.136-1.536 1.536z"
}));
/* harmony default export */ var table_column_delete = (tableColumnDelete);

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/table.js


/**
 * GeChiUI dependencies
 */

const table = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M4 6v11.5h16V6H4zm1.5 1.5h6V11h-6V7.5zm0 8.5v-3.5h6V16h-6zm13 0H13v-3.5h5.5V16zM13 11V7.5h5.5V11H13z"
}));
/* harmony default export */ var library_table = (table);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/table/state.js
/**
 * External dependencies
 */

const INHERITED_COLUMN_ATTRIBUTES = ['align'];
/**
 * Creates a table state.
 *
 * @param {Object} options
 * @param {number} options.rowCount    Row count for the table to create.
 * @param {number} options.columnCount Column count for the table to create.
 *
 * @return {Object} New table state.
 */

function createTable(_ref) {
  let {
    rowCount,
    columnCount
  } = _ref;
  return {
    body: Object(external_lodash_["times"])(rowCount, () => ({
      cells: Object(external_lodash_["times"])(columnCount, () => ({
        content: '',
        tag: 'td'
      }))
    }))
  };
}
/**
 * Returns the first row in the table.
 *
 * @param {Object} state Current table state.
 *
 * @return {Object} The first table row.
 */

function getFirstRow(state) {
  if (!isEmptyTableSection(state.head)) {
    return state.head[0];
  }

  if (!isEmptyTableSection(state.body)) {
    return state.body[0];
  }

  if (!isEmptyTableSection(state.foot)) {
    return state.foot[0];
  }
}
/**
 * Gets an attribute for a cell.
 *
 * @param {Object} state         Current table state.
 * @param {Object} cellLocation  The location of the cell
 * @param {string} attributeName The name of the attribute to get the value of.
 *
 * @return {*} The attribute value.
 */

function getCellAttribute(state, cellLocation, attributeName) {
  const {
    sectionName,
    rowIndex,
    columnIndex
  } = cellLocation;
  return Object(external_lodash_["get"])(state, [sectionName, rowIndex, 'cells', columnIndex, attributeName]);
}
/**
 * Returns updated cell attributes after applying the `updateCell` function to the selection.
 *
 * @param {Object}   state      The block attributes.
 * @param {Object}   selection  The selection of cells to update.
 * @param {Function} updateCell A function to update the selected cell attributes.
 *
 * @return {Object} New table state including the updated cells.
 */

function updateSelectedCell(state, selection, updateCell) {
  if (!selection) {
    return state;
  }

  const tableSections = Object(external_lodash_["pick"])(state, ['head', 'body', 'foot']);
  const {
    sectionName: selectionSectionName,
    rowIndex: selectionRowIndex
  } = selection;
  return Object(external_lodash_["mapValues"])(tableSections, (section, sectionName) => {
    if (selectionSectionName && selectionSectionName !== sectionName) {
      return section;
    }

    return section.map((row, rowIndex) => {
      if (selectionRowIndex && selectionRowIndex !== rowIndex) {
        return row;
      }

      return {
        cells: row.cells.map((cellAttributes, columnIndex) => {
          const cellLocation = {
            sectionName,
            columnIndex,
            rowIndex
          };

          if (!isCellSelected(cellLocation, selection)) {
            return cellAttributes;
          }

          return updateCell(cellAttributes);
        })
      };
    });
  });
}
/**
 * Returns whether the cell at `cellLocation` is included in the selection `selection`.
 *
 * @param {Object} cellLocation An object containing cell location properties.
 * @param {Object} selection    An object containing selection properties.
 *
 * @return {boolean} True if the cell is selected, false otherwise.
 */

function isCellSelected(cellLocation, selection) {
  if (!cellLocation || !selection) {
    return false;
  }

  switch (selection.type) {
    case 'column':
      return selection.type === 'column' && cellLocation.columnIndex === selection.columnIndex;

    case 'cell':
      return selection.type === 'cell' && cellLocation.sectionName === selection.sectionName && cellLocation.columnIndex === selection.columnIndex && cellLocation.rowIndex === selection.rowIndex;
  }
}
/**
 * Inserts a row in the table state.
 *
 * @param {Object} state               Current table state.
 * @param {Object} options
 * @param {string} options.sectionName Section in which to insert the row.
 * @param {number} options.rowIndex    Row index at which to insert the row.
 * @param {number} options.columnCount Column count for the table to create.
 *
 * @return {Object} New table state.
 */

function insertRow(state, _ref2) {
  let {
    sectionName,
    rowIndex,
    columnCount
  } = _ref2;
  const firstRow = getFirstRow(state);
  const cellCount = columnCount === undefined ? Object(external_lodash_["get"])(firstRow, ['cells', 'length']) : columnCount; // Bail early if the function cannot determine how many cells to add.

  if (!cellCount) {
    return state;
  }

  return {
    [sectionName]: [...state[sectionName].slice(0, rowIndex), {
      cells: Object(external_lodash_["times"])(cellCount, index => {
        const firstCellInColumn = Object(external_lodash_["get"])(firstRow, ['cells', index], {});
        const inheritedAttributes = Object(external_lodash_["pick"])(firstCellInColumn, INHERITED_COLUMN_ATTRIBUTES);
        return { ...inheritedAttributes,
          content: '',
          tag: sectionName === 'head' ? 'th' : 'td'
        };
      })
    }, ...state[sectionName].slice(rowIndex)]
  };
}
/**
 * Deletes a row from the table state.
 *
 * @param {Object} state               Current table state.
 * @param {Object} options
 * @param {string} options.sectionName Section in which to delete the row.
 * @param {number} options.rowIndex    Row index to delete.
 *
 * @return {Object} New table state.
 */

function deleteRow(state, _ref3) {
  let {
    sectionName,
    rowIndex
  } = _ref3;
  return {
    [sectionName]: state[sectionName].filter((row, index) => index !== rowIndex)
  };
}
/**
 * Inserts a column in the table state.
 *
 * @param {Object} state               Current table state.
 * @param {Object} options
 * @param {number} options.columnIndex Column index at which to insert the column.
 *
 * @return {Object} New table state.
 */

function insertColumn(state, _ref4) {
  let {
    columnIndex
  } = _ref4;
  const tableSections = Object(external_lodash_["pick"])(state, ['head', 'body', 'foot']);
  return Object(external_lodash_["mapValues"])(tableSections, (section, sectionName) => {
    // Bail early if the table section is empty.
    if (isEmptyTableSection(section)) {
      return section;
    }

    return section.map(row => {
      // Bail early if the row is empty or it's an attempt to insert past
      // the last possible index of the array.
      if (isEmptyRow(row) || row.cells.length < columnIndex) {
        return row;
      }

      return {
        cells: [...row.cells.slice(0, columnIndex), {
          content: '',
          tag: sectionName === 'head' ? 'th' : 'td'
        }, ...row.cells.slice(columnIndex)]
      };
    });
  });
}
/**
 * Deletes a column from the table state.
 *
 * @param {Object} state               Current table state.
 * @param {Object} options
 * @param {number} options.columnIndex Column index to delete.
 *
 * @return {Object} New table state.
 */

function deleteColumn(state, _ref5) {
  let {
    columnIndex
  } = _ref5;
  const tableSections = Object(external_lodash_["pick"])(state, ['head', 'body', 'foot']);
  return Object(external_lodash_["mapValues"])(tableSections, section => {
    // Bail early if the table section is empty.
    if (isEmptyTableSection(section)) {
      return section;
    }

    return section.map(row => ({
      cells: row.cells.length >= columnIndex ? row.cells.filter((cell, index) => index !== columnIndex) : row.cells
    })).filter(row => row.cells.length);
  });
}
/**
 * Toggles the existance of a section.
 *
 * @param {Object} state       Current table state.
 * @param {string} sectionName Name of the section to toggle.
 *
 * @return {Object} New table state.
 */

function toggleSection(state, sectionName) {
  // Section exists, replace it with an empty row to remove it.
  if (!isEmptyTableSection(state[sectionName])) {
    return {
      [sectionName]: []
    };
  } // Get the length of the first row of the body to use when creating the header.


  const columnCount = Object(external_lodash_["get"])(state, ['body', 0, 'cells', 'length'], 1); // Section doesn't exist, insert an empty row to create the section.

  return insertRow(state, {
    sectionName,
    rowIndex: 0,
    columnCount
  });
}
/**
 * Determines whether a table section is empty.
 *
 * @param {Object} section Table section state.
 *
 * @return {boolean} True if the table section is empty, false otherwise.
 */

function isEmptyTableSection(section) {
  return !section || !section.length || Object(external_lodash_["every"])(section, isEmptyRow);
}
/**
 * Determines whether a table row is empty.
 *
 * @param {Object} row Table row state.
 *
 * @return {boolean} True if the table section is empty, false otherwise.
 */

function isEmptyRow(row) {
  return !(row.cells && row.cells.length);
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/table/edit.js


/**
 * External dependencies
 */

/**
 * GeChiUI dependencies
 */







/**
 * Internal dependencies
 */


const ALIGNMENT_CONTROLS = [{
  icon: align_left["a" /* default */],
  title: Object(external_gc_i18n_["__"])('栏位靠左对齐'),
  align: 'left'
}, {
  icon: align_center["a" /* default */],
  title: Object(external_gc_i18n_["__"])('栏位居中对齐'),
  align: 'center'
}, {
  icon: align_right["a" /* default */],
  title: Object(external_gc_i18n_["__"])('栏位靠右对齐'),
  align: 'right'
}];
const cellAriaLabel = {
  head: Object(external_gc_i18n_["__"])('Header单元格文字'),
  body: Object(external_gc_i18n_["__"])('Body单元格文字'),
  foot: Object(external_gc_i18n_["__"])('Footer单元格文字')
};
const edit_placeholder = {
  head: Object(external_gc_i18n_["__"])('页眉标签'),
  foot: Object(external_gc_i18n_["__"])('页脚标签')
};

function TSection(_ref) {
  let {
    name,
    ...props
  } = _ref;
  const TagName = `t${name}`;
  return Object(external_gc_element_["createElement"])(TagName, props);
}

function TableEdit(_ref2) {
  let {
    attributes,
    setAttributes,
    insertBlocksAfter,
    isSelected
  } = _ref2;
  const {
    hasFixedLayout,
    caption,
    head,
    foot
  } = attributes;
  const [initialRowCount, setInitialRowCount] = Object(external_gc_element_["useState"])(2);
  const [initialColumnCount, setInitialColumnCount] = Object(external_gc_element_["useState"])(2);
  const [selectedCell, setSelectedCell] = Object(external_gc_element_["useState"])();
  const colorProps = Object(external_gc_blockEditor_["__experimentalUseColorProps"])(attributes);
  const borderProps = Object(external_gc_blockEditor_["__experimentalUseBorderProps"])(attributes);
  /**
   * Updates the initial column count used for table creation.
   *
   * @param {number} count New initial column count.
   */

  function onChangeInitialColumnCount(count) {
    setInitialColumnCount(count);
  }
  /**
   * Updates the initial row count used for table creation.
   *
   * @param {number} count New initial row count.
   */


  function onChangeInitialRowCount(count) {
    setInitialRowCount(count);
  }
  /**
   * Creates a table based on dimensions in local state.
   *
   * @param {Object} event Form submit event.
   */


  function onCreateTable(event) {
    event.preventDefault();
    setAttributes(createTable({
      rowCount: parseInt(initialRowCount, 10) || 2,
      columnCount: parseInt(initialColumnCount, 10) || 2
    }));
  }
  /**
   * Toggles whether the table has a fixed layout or not.
   */


  function onChangeFixedLayout() {
    setAttributes({
      hasFixedLayout: !hasFixedLayout
    });
  }
  /**
   * Changes the content of the currently selected cell.
   *
   * @param {Array} content A RichText content value.
   */


  function onChange(content) {
    if (!selectedCell) {
      return;
    }

    setAttributes(updateSelectedCell(attributes, selectedCell, cellAttributes => ({ ...cellAttributes,
      content
    })));
  }
  /**
   * Align text within the a column.
   *
   * @param {string} align The new alignment to apply to the column.
   */


  function onChangeColumnAlignment(align) {
    if (!selectedCell) {
      return;
    } // Convert the cell selection to a column selection so that alignment
    // is applied to the entire column.


    const columnSelection = {
      type: 'column',
      columnIndex: selectedCell.columnIndex
    };
    const newAttributes = updateSelectedCell(attributes, columnSelection, cellAttributes => ({ ...cellAttributes,
      align
    }));
    setAttributes(newAttributes);
  }
  /**
   * Get the alignment of the currently selected cell.
   *
   * @return {string} The new alignment to apply to the column.
   */


  function getCellAlignment() {
    if (!selectedCell) {
      return;
    }

    return getCellAttribute(attributes, selectedCell, 'align');
  }
  /**
   * Add or remove a `head` table section.
   */


  function onToggleHeaderSection() {
    setAttributes(toggleSection(attributes, 'head'));
  }
  /**
   * Add or remove a `foot` table section.
   */


  function onToggleFooterSection() {
    setAttributes(toggleSection(attributes, 'foot'));
  }
  /**
   * Inserts a row at the currently selected row index, plus `delta`.
   *
   * @param {number} delta Offset for selected row index at which to insert.
   */


  function onInsertRow(delta) {
    if (!selectedCell) {
      return;
    }

    const {
      sectionName,
      rowIndex
    } = selectedCell;
    const newRowIndex = rowIndex + delta;
    setAttributes(insertRow(attributes, {
      sectionName,
      rowIndex: newRowIndex
    })); // Select the first cell of the new row

    setSelectedCell({
      sectionName,
      rowIndex: newRowIndex,
      columnIndex: 0,
      type: 'cell'
    });
  }
  /**
   * Inserts a row before the currently selected row.
   */


  function onInsertRowBefore() {
    onInsertRow(0);
  }
  /**
   * Inserts a row after the currently selected row.
   */


  function onInsertRowAfter() {
    onInsertRow(1);
  }
  /**
   * Deletes the currently selected row.
   */


  function onDeleteRow() {
    if (!selectedCell) {
      return;
    }

    const {
      sectionName,
      rowIndex
    } = selectedCell;
    setSelectedCell();
    setAttributes(deleteRow(attributes, {
      sectionName,
      rowIndex
    }));
  }
  /**
   * Inserts a column at the currently selected column index, plus `delta`.
   *
   * @param {number} delta Offset for selected column index at which to insert.
   */


  function onInsertColumn() {
    let delta = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    if (!selectedCell) {
      return;
    }

    const {
      columnIndex
    } = selectedCell;
    const newColumnIndex = columnIndex + delta;
    setAttributes(insertColumn(attributes, {
      columnIndex: newColumnIndex
    })); // Select the first cell of the new column

    setSelectedCell({
      rowIndex: 0,
      columnIndex: newColumnIndex,
      type: 'cell'
    });
  }
  /**
   * Inserts a column before the currently selected column.
   */


  function onInsertColumnBefore() {
    onInsertColumn(0);
  }
  /**
   * Inserts a column after the currently selected column.
   */


  function onInsertColumnAfter() {
    onInsertColumn(1);
  }
  /**
   * Deletes the currently selected column.
   */


  function onDeleteColumn() {
    if (!selectedCell) {
      return;
    }

    const {
      sectionName,
      columnIndex
    } = selectedCell;
    setSelectedCell();
    setAttributes(deleteColumn(attributes, {
      sectionName,
      columnIndex
    }));
  }

  Object(external_gc_element_["useEffect"])(() => {
    if (!isSelected) {
      setSelectedCell();
    }
  }, [isSelected]);
  const sections = ['head', 'body', 'foot'].filter(name => !isEmptyTableSection(attributes[name]));
  const tableControls = [{
    icon: table_row_before,
    title: Object(external_gc_i18n_["__"])('在上方插入行'),
    isDisabled: !selectedCell,
    onClick: onInsertRowBefore
  }, {
    icon: table_row_after,
    title: Object(external_gc_i18n_["__"])('在下方插入行'),
    isDisabled: !selectedCell,
    onClick: onInsertRowAfter
  }, {
    icon: table_row_delete,
    title: Object(external_gc_i18n_["__"])('删除行'),
    isDisabled: !selectedCell,
    onClick: onDeleteRow
  }, {
    icon: table_column_before,
    title: Object(external_gc_i18n_["__"])('在前方插入列'),
    isDisabled: !selectedCell,
    onClick: onInsertColumnBefore
  }, {
    icon: table_column_after,
    title: Object(external_gc_i18n_["__"])('在后方插入列'),
    isDisabled: !selectedCell,
    onClick: onInsertColumnAfter
  }, {
    icon: table_column_delete,
    title: Object(external_gc_i18n_["__"])('删除列'),
    isDisabled: !selectedCell,
    onClick: onDeleteColumn
  }];
  const renderedSections = ['head', 'body', 'foot'].map(name => Object(external_gc_element_["createElement"])(TSection, {
    name: name,
    key: name
  }, attributes[name].map((_ref3, rowIndex) => {
    let {
      cells
    } = _ref3;
    return Object(external_gc_element_["createElement"])("tr", {
      key: rowIndex
    }, cells.map((_ref4, columnIndex) => {
      let {
        content,
        tag: CellTag,
        scope,
        align
      } = _ref4;
      return Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"], {
        tagName: CellTag,
        key: columnIndex,
        className: classnames_default()({
          [`has-text-align-${align}`]: align
        }, 'gc-block-table__cell-content'),
        scope: CellTag === 'th' ? scope : undefined,
        value: content,
        onChange: onChange,
        unstableOnFocus: () => {
          setSelectedCell({
            sectionName: name,
            rowIndex,
            columnIndex,
            type: 'cell'
          });
        },
        "aria-label": cellAriaLabel[name],
        placeholder: edit_placeholder[name]
      });
    }));
  })));
  const isEmpty = !sections.length;
  return Object(external_gc_element_["createElement"])("figure", Object(external_gc_blockEditor_["useBlockProps"])(), !isEmpty && Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["BlockControls"], {
    group: "block"
  }, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["AlignmentControl"], {
    label: Object(external_gc_i18n_["__"])('修改栏位对齐方式'),
    alignmentControls: ALIGNMENT_CONTROLS,
    value: getCellAlignment(),
    onChange: nextAlign => onChangeColumnAlignment(nextAlign)
  })), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["BlockControls"], {
    group: "other"
  }, Object(external_gc_element_["createElement"])(external_gc_components_["ToolbarDropdownMenu"], {
    hasArrowIndicator: true,
    icon: library_table,
    label: Object(external_gc_i18n_["__"])('编辑表格'),
    controls: tableControls
  }))), !isEmpty && Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InspectorControls"], null, Object(external_gc_element_["createElement"])(external_gc_components_["PanelBody"], {
    title: Object(external_gc_i18n_["__"])('表格设置'),
    className: "blocks-table-settings"
  }, Object(external_gc_element_["createElement"])(external_gc_components_["ToggleControl"], {
    label: Object(external_gc_i18n_["__"])('定宽单元格'),
    checked: !!hasFixedLayout,
    onChange: onChangeFixedLayout
  }), Object(external_gc_element_["createElement"])(external_gc_components_["ToggleControl"], {
    label: Object(external_gc_i18n_["__"])('页眉章节'),
    checked: !!(head && head.length),
    onChange: onToggleHeaderSection
  }), Object(external_gc_element_["createElement"])(external_gc_components_["ToggleControl"], {
    label: Object(external_gc_i18n_["__"])('页脚章节'),
    checked: !!(foot && foot.length),
    onChange: onToggleFooterSection
  }))), !isEmpty && Object(external_gc_element_["createElement"])("table", {
    className: classnames_default()(colorProps.className, borderProps.className, {
      'has-fixed-layout': hasFixedLayout
    }),
    style: { ...colorProps.style,
      ...borderProps.style
    }
  }, renderedSections), !isEmpty && Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"], {
    tagName: "figcaption",
    "aria-label": Object(external_gc_i18n_["__"])('表格说明文字'),
    placeholder: Object(external_gc_i18n_["__"])('添加说明文字'),
    value: caption,
    onChange: value => setAttributes({
      caption: value
    }) // Deselect the selected table cell when the caption is focused.
    ,
    unstableOnFocus: () => setSelectedCell(),
    __unstableOnSplitAtEnd: () => insertBlocksAfter(Object(external_gc_blocks_["createBlock"])('core/paragraph'))
  }), isEmpty && Object(external_gc_element_["createElement"])(external_gc_components_["Placeholder"], {
    label: Object(external_gc_i18n_["__"])('表格'),
    icon: Object(external_gc_element_["createElement"])(external_gc_blockEditor_["BlockIcon"], {
      icon: block_table,
      showColors: true
    }),
    instructions: Object(external_gc_i18n_["__"])('插入表格来共享数据。')
  }, Object(external_gc_element_["createElement"])("form", {
    className: "blocks-table__placeholder-form",
    onSubmit: onCreateTable
  }, Object(external_gc_element_["createElement"])(external_gc_components_["TextControl"], {
    type: "number",
    label: Object(external_gc_i18n_["__"])('栏目数'),
    value: initialColumnCount,
    onChange: onChangeInitialColumnCount,
    min: "1",
    className: "blocks-table__placeholder-input"
  }), Object(external_gc_element_["createElement"])(external_gc_components_["TextControl"], {
    type: "number",
    label: Object(external_gc_i18n_["__"])('行数'),
    value: initialRowCount,
    onChange: onChangeInitialRowCount,
    min: "1",
    className: "blocks-table__placeholder-input"
  }), Object(external_gc_element_["createElement"])(external_gc_components_["Button"], {
    className: "blocks-table__placeholder-button",
    variant: "primary",
    type: "submit"
  }, Object(external_gc_i18n_["__"])('创建表格')))));
}

/* harmony default export */ var table_edit = (TableEdit);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/table/save.js


/**
 * External dependencies
 */

/**
 * GeChiUI dependencies
 */


function table_save_save(_ref) {
  let {
    attributes
  } = _ref;
  const {
    hasFixedLayout,
    head,
    body,
    foot,
    caption
  } = attributes;
  const isEmpty = !head.length && !body.length && !foot.length;

  if (isEmpty) {
    return null;
  }

  const colorProps = Object(external_gc_blockEditor_["__experimentalGetColorClassesAndStyles"])(attributes);
  const borderProps = Object(external_gc_blockEditor_["__experimentalGetBorderClassesAndStyles"])(attributes);
  const classes = classnames_default()(colorProps.className, borderProps.className, {
    'has-fixed-layout': hasFixedLayout
  });
  const hasCaption = !external_gc_blockEditor_["RichText"].isEmpty(caption);

  const Section = _ref2 => {
    let {
      type,
      rows
    } = _ref2;

    if (!rows.length) {
      return null;
    }

    const Tag = `t${type}`;
    return Object(external_gc_element_["createElement"])(Tag, null, rows.map((_ref3, rowIndex) => {
      let {
        cells
      } = _ref3;
      return Object(external_gc_element_["createElement"])("tr", {
        key: rowIndex
      }, cells.map((_ref4, cellIndex) => {
        let {
          content,
          tag,
          scope,
          align
        } = _ref4;
        const cellClasses = classnames_default()({
          [`has-text-align-${align}`]: align
        });
        return Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"].Content, {
          className: cellClasses ? cellClasses : undefined,
          "data-align": align,
          tagName: tag,
          value: content,
          key: cellIndex,
          scope: tag === 'th' ? scope : undefined
        });
      }));
    }));
  };

  return Object(external_gc_element_["createElement"])("figure", external_gc_blockEditor_["useBlockProps"].save(), Object(external_gc_element_["createElement"])("table", {
    className: classes === '' ? undefined : classes,
    style: { ...colorProps.style,
      ...borderProps.style
    }
  }, Object(external_gc_element_["createElement"])(Section, {
    type: "head",
    rows: head
  }), Object(external_gc_element_["createElement"])(Section, {
    type: "body",
    rows: body
  }), Object(external_gc_element_["createElement"])(Section, {
    type: "foot",
    rows: foot
  })), hasCaption && Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"].Content, {
    tagName: "figcaption",
    value: caption
  }));
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/table/transforms.js
const tableContentPasteSchema = _ref => {
  let {
    phrasingContentSchema
  } = _ref;
  return {
    tr: {
      allowEmpty: true,
      children: {
        th: {
          allowEmpty: true,
          children: phrasingContentSchema,
          attributes: ['scope']
        },
        td: {
          allowEmpty: true,
          children: phrasingContentSchema
        }
      }
    }
  };
};

const tablePasteSchema = args => ({
  table: {
    children: {
      thead: {
        allowEmpty: true,
        children: tableContentPasteSchema(args)
      },
      tfoot: {
        allowEmpty: true,
        children: tableContentPasteSchema(args)
      },
      tbody: {
        allowEmpty: true,
        children: tableContentPasteSchema(args)
      }
    }
  }
});

const table_transforms_transforms = {
  from: [{
    type: 'raw',
    selector: 'table',
    schema: tablePasteSchema
  }]
};
/* harmony default export */ var table_transforms = (table_transforms_transforms);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/table/index.js
/**
 * GeChiUI dependencies
 */


/**
 * Internal dependencies
 */



const table_metadata = {
  apiVersion: 2,
  name: "core/table",
  title: "表格",
  category: "text",
  description: "在行和列中创建结构化内容以显示信息。",
  textdomain: "default",
  attributes: {
    hasFixedLayout: {
      type: "boolean",
      "default": false
    },
    caption: {
      type: "string",
      source: "html",
      selector: "figcaption",
      "default": ""
    },
    head: {
      type: "array",
      "default": [],
      source: "query",
      selector: "thead tr",
      query: {
        cells: {
          type: "array",
          "default": [],
          source: "query",
          selector: "td,th",
          query: {
            content: {
              type: "string",
              source: "html"
            },
            tag: {
              type: "string",
              "default": "td",
              source: "tag"
            },
            scope: {
              type: "string",
              source: "attribute",
              attribute: "scope"
            },
            align: {
              type: "string",
              source: "attribute",
              attribute: "data-align"
            }
          }
        }
      }
    },
    body: {
      type: "array",
      "default": [],
      source: "query",
      selector: "tbody tr",
      query: {
        cells: {
          type: "array",
          "default": [],
          source: "query",
          selector: "td,th",
          query: {
            content: {
              type: "string",
              source: "html"
            },
            tag: {
              type: "string",
              "default": "td",
              source: "tag"
            },
            scope: {
              type: "string",
              source: "attribute",
              attribute: "scope"
            },
            align: {
              type: "string",
              source: "attribute",
              attribute: "data-align"
            }
          }
        }
      }
    },
    foot: {
      type: "array",
      "default": [],
      source: "query",
      selector: "tfoot tr",
      query: {
        cells: {
          type: "array",
          "default": [],
          source: "query",
          selector: "td,th",
          query: {
            content: {
              type: "string",
              source: "html"
            },
            tag: {
              type: "string",
              "default": "td",
              source: "tag"
            },
            scope: {
              type: "string",
              source: "attribute",
              attribute: "scope"
            },
            align: {
              type: "string",
              source: "attribute",
              attribute: "data-align"
            }
          }
        }
      }
    }
  },
  supports: {
    anchor: true,
    align: true,
    color: {
      __experimentalSkipSerialization: true,
      gradients: true
    },
    typography: {
      fontSize: true,
      lineHeight: true,
      __experimentalFontStyle: true,
      __experimentalFontWeight: true,
      __experimentalLetterSpacing: true,
      __experimentalTextTransform: true,
      __experimentalDefaultControls: {
        fontSize: true
      }
    },
    __experimentalBorder: {
      __experimentalSkipSerialization: true,
      color: true,
      style: true,
      width: true
    },
    __experimentalSelector: ".gc-block-table > table"
  },
  styles: [{
    name: "regular",
    label: "默认",
    isDefault: true
  }, {
    name: "stripes",
    label: "条纹"
  }],
  editorStyle: "gc-block-table-editor",
  style: "gc-block-table"
};


const {
  name: table_name
} = table_metadata;

const table_settings = {
  icon: block_table,
  example: {
    attributes: {
      head: [{
        cells: [{
          content: Object(external_gc_i18n_["__"])('版本'),
          tag: 'th'
        }, {
          content: Object(external_gc_i18n_["__"])('爵士音乐家'),
          tag: 'th'
        }, {
          content: Object(external_gc_i18n_["__"])('发布日期'),
          tag: 'th'
        }]
      }],
      body: [{
        cells: [{
          content: '5.2',
          tag: 'td'
        }, {
          content: 'Jaco Pastorius',
          tag: 'td'
        }, {
          content: Object(external_gc_i18n_["__"])('2019年5月7日'),
          tag: 'td'
        }]
      }, {
        cells: [{
          content: '5.1',
          tag: 'td'
        }, {
          content: 'Betty Carter',
          tag: 'td'
        }, {
          content: Object(external_gc_i18n_["__"])('2019年2月21日'),
          tag: 'td'
        }]
      }, {
        cells: [{
          content: '5.0',
          tag: 'td'
        }, {
          content: 'Bebo Valdés',
          tag: 'td'
        }, {
          content: Object(external_gc_i18n_["__"])('2018年12月6日'),
          tag: 'td'
        }]
      }]
    }
  },
  transforms: table_transforms,
  edit: table_edit,
  save: table_save_save,
  deprecated: table_deprecated
};

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/tag-cloud/edit.js


/**
 * External dependencies
 */

/**
 * GeChiUI dependencies
 */







/**
 * Minimum number of tags a user can show using this block.
 *
 * @type {number}
 */

const MIN_TAGS = 1;
/**
 * Maximum number of tags a user can show using this block.
 *
 * @type {number}
 */

const MAX_TAGS = 100;

function TagCloudEdit(_ref) {
  let {
    attributes,
    setAttributes,
    taxonomies
  } = _ref;
  const {
    taxonomy,
    showTagCounts,
    numberOfTags
  } = attributes;

  const getTaxonomyOptions = () => {
    const selectOption = {
      label: Object(external_gc_i18n_["__"])('- 选择 -'),
      value: '',
      disabled: true
    };
    const taxonomyOptions = Object(external_lodash_["map"])(Object(external_lodash_["filter"])(taxonomies, 'show_cloud'), item => {
      return {
        value: item.slug,
        label: item.name
      };
    });
    return [selectOption, ...taxonomyOptions];
  };

  const inspectorControls = Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InspectorControls"], null, Object(external_gc_element_["createElement"])(external_gc_components_["PanelBody"], {
    title: Object(external_gc_i18n_["__"])('标签云设置')
  }, Object(external_gc_element_["createElement"])(external_gc_components_["SelectControl"], {
    label: Object(external_gc_i18n_["__"])('分类法'),
    options: getTaxonomyOptions(),
    value: taxonomy,
    onChange: selectedTaxonomy => setAttributes({
      taxonomy: selectedTaxonomy
    })
  }), Object(external_gc_element_["createElement"])(external_gc_components_["ToggleControl"], {
    label: Object(external_gc_i18n_["__"])('显示文章数目'),
    checked: showTagCounts,
    onChange: () => setAttributes({
      showTagCounts: !showTagCounts
    })
  }), Object(external_gc_element_["createElement"])(external_gc_components_["RangeControl"], {
    label: Object(external_gc_i18n_["__"])('页数'),
    value: numberOfTags,
    onChange: value => setAttributes({
      numberOfTags: value
    }),
    min: MIN_TAGS,
    max: MAX_TAGS,
    required: true
  })));
  return Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, inspectorControls, Object(external_gc_element_["createElement"])("div", Object(external_gc_blockEditor_["useBlockProps"])(), Object(external_gc_element_["createElement"])(external_gc_serverSideRender_default.a, {
    key: "tag-cloud",
    block: "core/tag-cloud",
    attributes: attributes
  })));
}

/* harmony default export */ var tag_cloud_edit = (Object(external_gc_data_["withSelect"])(select => {
  return {
    taxonomies: select(external_gc_coreData_["store"]).getTaxonomies({
      per_page: -1
    })
  };
})(TagCloudEdit));

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/tag-cloud/index.js
/**
 * GeChiUI dependencies
 */

/**
 * Internal dependencies
 */

const tag_cloud_metadata = {
  apiVersion: 2,
  name: "core/tag-cloud",
  title: "标签云",
  category: "widgets",
  description: "您最常使用的标签云。",
  textdomain: "default",
  attributes: {
    numberOfTags: {
      type: "number",
      "default": 45,
      minimum: 1,
      maximum: 100
    },
    taxonomy: {
      type: "string",
      "default": "post_tag"
    },
    showTagCounts: {
      type: "boolean",
      "default": false
    }
  },
  supports: {
    html: false,
    align: true
  },
  editorStyle: "gc-block-tag-cloud-editor"
};

const {
  name: tag_cloud_name
} = tag_cloud_metadata;

const tag_cloud_settings = {
  icon: library_tag,
  example: {},
  edit: tag_cloud_edit
};

// EXTERNAL MODULE: ./node_modules/@gechiui/icons/build-module/library/symbol-filled.js
var symbol_filled = __webpack_require__("8pBv");

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/template-part/edit/selection/template-part-previews.js



/**
 * External dependencies
 */

/**
 * GeChiUI dependencies
 */











/**
 * Internal dependencies
 */



function getAreaGroupTitle(areaLabel) {
  return Object(external_gc_i18n_["sprintf"])( // Translators: %s for the area the template part is assigned to (Header, Footer, General, etc.)
  Object(external_gc_i18n_["__"])('区域：%s'), areaLabel);
}

function PreviewPlaceholder() {
  return Object(external_gc_element_["createElement"])("div", {
    className: "gc-block-template-part__selection-preview-item is-placeholder",
    tabIndex: 0
  });
}

function TemplatePartItem(_ref) {
  let {
    templatePart,
    setAttributes,
    onClose,
    composite
  } = _ref;
  const {
    slug,
    theme,
    title: {
      rendered: title
    }
  } = templatePart; // The 'raw' property is not defined for a brief period in the save cycle.
  // The fallback prevents an error in the parse function while saving.

  const content = templatePart.content.raw || '';
  const blocks = Object(external_gc_element_["useMemo"])(() => Object(external_gc_blocks_["parse"])(content), [content]);
  const {
    createSuccessNotice
  } = Object(external_gc_data_["useDispatch"])(external_gc_notices_["store"]);
  const onClick = Object(external_gc_element_["useCallback"])(() => {
    setAttributes({
      slug,
      theme,
      area: undefined
    });
    createSuccessNotice(Object(external_gc_i18n_["sprintf"])(
    /* translators: %s: template part title. */
    Object(external_gc_i18n_["__"])(''), title || slug), {
      type: 'snackbar'
    });
    onClose();
  }, [slug, theme]);
  return Object(external_gc_element_["createElement"])(external_gc_components_["__unstableCompositeItem"], Object(esm_extends["a" /* default */])({
    as: "div",
    className: "gc-block-template-part__selection-preview-item",
    role: "option",
    onClick: onClick,
    onKeyDown: event => {
      if (external_gc_keycodes_["ENTER"] === event.keyCode || external_gc_keycodes_["SPACE"] === event.keyCode) {
        onClick();
      }
    },
    tabIndex: 0,
    "aria-label": title || slug
  }, composite), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["BlockPreview"], {
    blocks: blocks
  }), Object(external_gc_element_["createElement"])("div", {
    className: "gc-block-template-part__selection-preview-item-title"
  }, title || slug));
}

function PanelGroup(_ref2) {
  let {
    title,
    icon,
    children
  } = _ref2;
  return Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])("div", {
    className: "gc-block-template-part__selection-panel-group-header"
  }, Object(external_gc_element_["createElement"])("span", {
    className: "gc-block-template-part__selection-panel-group-title"
  }, title), Object(external_gc_element_["createElement"])(external_gc_components_["Icon"], {
    icon: icon
  })), Object(external_gc_element_["createElement"])("div", {
    className: "gc-block-template-part__selection-panel-group-content"
  }, children));
}

function TemplatePartsByArea(_ref3) {
  let {
    templateParts,
    setAttributes,
    onClose,
    composite,
    area = 'uncategorized',
    labelsByArea
  } = _ref3;
  const {
    templatePartsByArea,
    templatePartsToShow
  } = Object(external_gc_element_["useMemo"])(() => {
    const _templatePartsToShow = templateParts.filter(templatePart => 'uncategorized' === area || templatePart.area === area) || [];

    const _templatePartsByArea = Object.values(Object(external_lodash_["groupBy"])(_templatePartsToShow, 'area'));

    const orderedTemplatePartsToShow = Object(external_lodash_["flatten"])(_templatePartsToShow);
    return {
      templatePartsByArea: _templatePartsByArea,
      templatePartsToShow: orderedTemplatePartsToShow
    };
  }, [templateParts, area]);
  const currentShownTPs = Object(external_gc_compose_["useAsyncList"])(templatePartsToShow);

  if (!templatePartsToShow.length) {
    return Object(external_gc_element_["createElement"])(PanelGroup, {
      title: getAreaGroupTitle(labelsByArea[area] || labelsByArea.uncategorized)
    }, Object(external_gc_i18n_["sprintf"])( // Translators: %s for the template part variation ("Header", "Footer", "Template Part").
    Object(external_gc_i18n_["__"])('没有其余的 %s 可用。如果您正在寻找另一类型的模板组件，请尝试用上方的输入搜索。'), area && area !== 'uncategorized' ? labelsByArea[area] || area : Object(external_gc_i18n_["__"])('模版组件')));
  }

  return templatePartsByArea.map(templatePartList => {
    return Object(external_gc_element_["createElement"])(PanelGroup, {
      key: templatePartList[0].area,
      title: getAreaGroupTitle(labelsByArea[templatePartList[0].area] || labelsByArea.uncategorized)
    }, templatePartList.map(templatePart => {
      return currentShownTPs.includes(templatePart) ? Object(external_gc_element_["createElement"])(TemplatePartItem, {
        key: templatePart.id,
        templatePart: templatePart,
        setAttributes: setAttributes,
        onClose: onClose,
        composite: composite
      }) : Object(external_gc_element_["createElement"])(PreviewPlaceholder, {
        key: templatePart.id
      });
    }));
  });
}

function TemplatePartSearchResults(_ref4) {
  let {
    templateParts,
    setAttributes,
    filterValue,
    onClose,
    composite,
    labelsByArea
  } = _ref4;
  const {
    filteredTPs,
    groupedResults
  } = Object(external_gc_element_["useMemo"])(() => {
    // Filter based on value.
    // Remove diacritics and convert to lowercase to normalize.
    const normalizedFilterValue = Object(external_lodash_["deburr"])(filterValue).toLowerCase();
    const searchResults = templateParts.filter(_ref5 => {
      let {
        title: {
          rendered: title
        },
        area
      } = _ref5;
      return Object(external_lodash_["deburr"])(title).toLowerCase().includes(normalizedFilterValue) || // Since diacritics can be used in theme names, remove them for the comparison.
      Object(external_lodash_["deburr"])(labelsByArea[area]).toLowerCase().includes(normalizedFilterValue);
    }); // Order based on value location.

    searchResults.sort((a, b) => {
      // First prioritize index found in title.
      // Deburr for diacritics.
      const indexInTitleA = Object(external_lodash_["deburr"])(a.title.rendered).toLowerCase().indexOf(normalizedFilterValue);
      const indexInTitleB = Object(external_lodash_["deburr"])(b.title.rendered).toLowerCase().indexOf(normalizedFilterValue);

      if (indexInTitleA !== -1 && indexInTitleB !== -1) {
        return indexInTitleA - indexInTitleB;
      } else if (indexInTitleA !== -1) {
        return -1;
      } else if (indexInTitleB !== -1) {
        return 1;
      } // Second prioritize index found in area.


      return Object(external_lodash_["deburr"])(labelsByArea[a.area]).toLowerCase().indexOf(normalizedFilterValue) - Object(external_lodash_["deburr"])(labelsByArea[b.area]).toLowerCase().indexOf(normalizedFilterValue);
    }); // Group filtered results together if their neighbors share the same area.
    // This helps not show redundant panel groups side by side in the results.

    const _groupedResults = [];

    for (let i = 0; i < searchResults.length; i++) {
      if (i !== 0 && searchResults[i].area === searchResults[i - 1].area) {
        _groupedResults[_groupedResults.length - 1].push(searchResults[i]);
      } else {
        _groupedResults.push([searchResults[i]]);
      }
    }

    return {
      filteredTPs: searchResults,
      groupedResults: _groupedResults
    };
  }, [filterValue, templateParts]);
  const currentShownTPs = Object(external_gc_compose_["useAsyncList"])(filteredTPs);
  return groupedResults.map(group => Object(external_gc_element_["createElement"])(PanelGroup, {
    key: group[0].id,
    title: getAreaGroupTitle(labelsByArea[group[0].area] || labelsByArea.uncategorized)
  }, group.map(templatePart => currentShownTPs.includes(templatePart) ? Object(external_gc_element_["createElement"])(TemplatePartItem, {
    key: templatePart.id,
    templatePart: templatePart,
    setAttributes: setAttributes,
    onClose: onClose,
    composite: composite
  }) : Object(external_gc_element_["createElement"])(PreviewPlaceholder, {
    key: templatePart.id
  }))));
}

function TemplatePartPreviews(_ref6) {
  let {
    setAttributes,
    filterValue,
    onClose,
    area,
    templatePartId
  } = _ref6;
  const composite = Object(external_gc_components_["__unstableUseCompositeState"])();
  const {
    templateParts,
    labelsByArea
  } = Object(external_gc_data_["useSelect"])(select => {
    const _templateParts = (select(external_gc_coreData_["store"]).getEntityRecords('postType', 'gc_template_part', {
      per_page: -1
    }) || []).filter(templatePart => createTemplatePartId(templatePart.theme, templatePart.slug) !== templatePartId); // FIXME: @gechiui/block-library should not depend on @gechiui/editor.
    // Blocks can be loaded into a *non-post* block editor.
    // eslint-disable-next-line @gechiui/data-no-store-string-literals


    const definedAreas = select('core/editor').__experimentalGetDefaultTemplatePartAreas();

    const _labelsByArea = {};
    definedAreas.forEach(item => {
      _labelsByArea[item.area] = item.label;
    });
    return {
      templateParts: _templateParts,
      labelsByArea: _labelsByArea
    };
  }, []);

  if (!templateParts || !templateParts.length) {
    return Object(external_gc_element_["createElement"])(PanelGroup, null, Object(external_gc_i18n_["__"])('没有可供选择的现有模板部件。'));
  }

  if (filterValue) {
    return Object(external_gc_element_["createElement"])(external_gc_components_["__unstableComposite"], Object(esm_extends["a" /* default */])({}, composite, {
      role: "listbox",
      "aria-label": Object(external_gc_i18n_["__"])('模板组件列表')
    }), Object(external_gc_element_["createElement"])(TemplatePartSearchResults, {
      templateParts: templateParts,
      setAttributes: setAttributes,
      filterValue: filterValue,
      onClose: onClose,
      composite: composite,
      labelsByArea: labelsByArea
    }));
  }

  return Object(external_gc_element_["createElement"])(external_gc_components_["__unstableComposite"], Object(esm_extends["a" /* default */])({}, composite, {
    role: "listbox",
    "aria-label": Object(external_gc_i18n_["__"])('模板组件列表')
  }), Object(external_gc_element_["createElement"])(TemplatePartsByArea, {
    templateParts: templateParts,
    setAttributes: setAttributes,
    onClose: onClose,
    composite: composite,
    area: area,
    labelsByArea: labelsByArea
  }));
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/template-part/edit/selection/index.js


/**
 * GeChiUI dependencies
 */


/**
 * Internal dependencies
 */


function TemplatePartSelection(_ref) {
  let {
    setAttributes,
    onClose,
    area,
    templatePartId = null
  } = _ref;
  const [filterValue, setFilterValue] = Object(external_gc_element_["useState"])('');
  return Object(external_gc_element_["createElement"])("div", null, Object(external_gc_element_["createElement"])(external_gc_components_["SearchControl"], {
    value: filterValue,
    onChange: setFilterValue,
    className: "gc-block-template-part__selection-preview-search-form"
  }), Object(external_gc_element_["createElement"])("div", {
    className: "gc-block-template-part__selection-preview-container"
  }, Object(external_gc_element_["createElement"])(TemplatePartPreviews, {
    setAttributes: setAttributes,
    filterValue: filterValue,
    onClose: onClose,
    area: area,
    templatePartId: templatePartId
  })));
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/template-part/edit/placeholder/patterns-setup.js


/**
 * GeChiUI dependencies
 */




function PatternsSetup(_ref) {
  let {
    area,
    areaLabel,
    areaIcon,
    clientId,
    onCreate,
    resetPlaceholder
  } = _ref;
  const blockNameWithArea = area ? `core/template-part/${area}` : 'core/template-part'; // Restructure onCreate to set the blocks on local state.
  // Add modal to confirm title and trigger onCreate.

  const [title, setTitle] = Object(external_gc_element_["useState"])(Object(external_gc_i18n_["__"])('无标题模板组件'));
  const [startingBlocks, setStartingBlocks] = Object(external_gc_element_["useState"])([]);
  const [isTitleStep, setIsTitleStep] = Object(external_gc_element_["useState"])(false);

  const selectPattern = selectedPattern => {
    setStartingBlocks(selectedPattern);
    setIsTitleStep(true);
  };

  const submitForCreation = event => {
    event.preventDefault();
    onCreate(startingBlocks, title);
  };

  return Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["__experimentalBlockPatternSetup"], {
    clientId: clientId,
    startBlankComponent: Object(external_gc_element_["createElement"])(StartBlankComponent, {
      setTitleStep: setIsTitleStep,
      areaLabel: areaLabel,
      areaIcon: areaIcon
    }),
    onBlockPatternSelect: selectPattern,
    filterPatternsFn: pattern => {
      var _pattern$blockTypes, _pattern$blockTypes$s;

      return pattern === null || pattern === void 0 ? void 0 : (_pattern$blockTypes = pattern.blockTypes) === null || _pattern$blockTypes === void 0 ? void 0 : (_pattern$blockTypes$s = _pattern$blockTypes.some) === null || _pattern$blockTypes$s === void 0 ? void 0 : _pattern$blockTypes$s.call(_pattern$blockTypes, blockType => blockType === blockNameWithArea);
    }
  }), isTitleStep && Object(external_gc_element_["createElement"])(external_gc_components_["Modal"], {
    title: Object(external_gc_i18n_["sprintf"])( // Translators: %s as template part area title ("Header", "Footer", etc.).
    Object(external_gc_i18n_["__"])('命名并创建新%s'), areaLabel.toLowerCase()),
    closeLabel: Object(external_gc_i18n_["__"])('取消'),
    onRequestClose: resetPlaceholder,
    overlayClassName: "gc-block-template-part__placeholder-create-new__title-form"
  }, Object(external_gc_element_["createElement"])("form", {
    onSubmit: submitForCreation
  }, Object(external_gc_element_["createElement"])(external_gc_components_["TextControl"], {
    label: Object(external_gc_i18n_["__"])('名称'),
    value: title,
    onChange: setTitle
  }), Object(external_gc_element_["createElement"])(external_gc_components_["Flex"], {
    className: "gc-block-template-part__placeholder-create-new__title-form-actions",
    justify: "flex-end"
  }, Object(external_gc_element_["createElement"])(external_gc_components_["FlexItem"], null, Object(external_gc_element_["createElement"])(external_gc_components_["Button"], {
    variant: "secondary",
    onClick: resetPlaceholder
  }, Object(external_gc_i18n_["__"])('取消'))), Object(external_gc_element_["createElement"])(external_gc_components_["FlexItem"], null, Object(external_gc_element_["createElement"])(external_gc_components_["Button"], {
    variant: "primary",
    type: "submit",
    disabled: !title.length,
    "aria-disabled": !title.length
  }, Object(external_gc_i18n_["__"])('创建')))))));
}

function StartBlankComponent(_ref2) {
  let {
    setTitleStep,
    areaLabel,
    areaIcon
  } = _ref2;
  Object(external_gc_element_["useEffect"])(() => {
    setTitleStep(true);
  }, []);
  return Object(external_gc_element_["createElement"])(external_gc_components_["Placeholder"], {
    label: areaLabel,
    icon: areaIcon,
    instructions: Object(external_gc_i18n_["sprintf"])( // Translators: %s as template part area title ("Header", "Footer", "Template Part", etc.).
    Object(external_gc_i18n_["__"])('正在创建新%s...'), areaLabel.toLowerCase())
  });
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/template-part/edit/placeholder/index.js


/**
 * External dependencies
 */

/**
 * GeChiUI dependencies
 */







/**
 * Internal dependencies
 */



const PLACEHOLDER_STEPS = {
  initial: 1,
  patterns: 2
};
function TemplatePartPlaceholder(_ref) {
  let {
    area,
    clientId,
    setAttributes,
    enableSelection,
    hasResolvedReplacements
  } = _ref;
  const {
    saveEntityRecord
  } = Object(external_gc_data_["useDispatch"])(external_gc_coreData_["store"]);
  const [step, setStep] = Object(external_gc_element_["useState"])(PLACEHOLDER_STEPS.initial);
  const {
    areaIcon,
    areaLabel
  } = Object(external_gc_data_["useSelect"])(select => {
    // FIXME: @gechiui/block-library should not depend on @gechiui/editor.
    // Blocks can be loaded into a *non-post* block editor.
    // eslint-disable-next-line @gechiui/data-no-store-string-literals
    const definedAreas = select('core/editor').__experimentalGetDefaultTemplatePartAreas();

    const selectedArea = Object(external_lodash_["find"])(definedAreas, {
      area
    });
    const defaultArea = Object(external_lodash_["find"])(definedAreas, {
      area: 'uncategorized'
    });
    return {
      areaIcon: (selectedArea === null || selectedArea === void 0 ? void 0 : selectedArea.icon) || (defaultArea === null || defaultArea === void 0 ? void 0 : defaultArea.icon),
      areaLabel: (selectedArea === null || selectedArea === void 0 ? void 0 : selectedArea.label) || Object(external_gc_i18n_["__"])('模版组件')
    };
  }, [area]);
  const onCreate = Object(external_gc_element_["useCallback"])(async function () {
    let startingBlocks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    let title = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Object(external_gc_i18n_["__"])('无标题模板组件');
    // If we have `area` set from block attributes, means an exposed
    // block variation was inserted. So add this prop to the template
    // part entity on creation. Afterwards remove `area` value from
    // block attributes.
    const record = {
      title,
      slug: Object(external_lodash_["kebabCase"])(title),
      content: Object(external_gc_blocks_["serialize"])(startingBlocks),
      // `area` is filterable on the server and defaults to `UNCATEGORIZED`
      // if provided value is not allowed.
      area
    };
    const templatePart = await saveEntityRecord('postType', 'gc_template_part', record);
    setAttributes({
      slug: templatePart.slug,
      theme: templatePart.theme,
      area: undefined
    });
  }, [setAttributes, area]);
  return Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, step === PLACEHOLDER_STEPS.initial && Object(external_gc_element_["createElement"])(external_gc_components_["Placeholder"], {
    icon: areaIcon,
    label: areaLabel,
    instructions: enableSelection ? Object(external_gc_i18n_["sprintf"])( // Translators: %s as template part area title ("Header", "Footer", etc.).
    Object(external_gc_i18n_["__"])('选择现有的%s或新建。'), areaLabel.toLowerCase()) : Object(external_gc_i18n_["sprintf"])( // Translators: %s as template part area title ("Header", "Footer", etc.).
    Object(external_gc_i18n_["__"])('创建新%s。'), areaLabel.toLowerCase())
  }, !hasResolvedReplacements ? Object(external_gc_element_["createElement"])(external_gc_components_["Spinner"], null) : Object(external_gc_element_["createElement"])(external_gc_components_["Dropdown"], {
    contentClassName: "gc-block-template-part__placeholder-preview-dropdown-content",
    position: "bottom right left",
    renderToggle: _ref2 => {
      let {
        isOpen,
        onToggle
      } = _ref2;
      return Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, enableSelection && Object(external_gc_element_["createElement"])(external_gc_components_["Button"], {
        variant: "primary",
        onClick: onToggle,
        "aria-expanded": isOpen
      }, Object(external_gc_i18n_["__"])('选择现有')), Object(external_gc_element_["createElement"])(external_gc_components_["Button"], {
        variant: enableSelection ? 'tertiary' : 'primary',
        onClick: () => setStep(PLACEHOLDER_STEPS.patterns)
      }, Object(external_gc_i18n_["sprintf"])( // Translators: %s as template part area title ("Header", "Footer", etc.).
      Object(external_gc_i18n_["__"])('添加%s'), areaLabel.toLowerCase())));
    },
    renderContent: _ref3 => {
      let {
        onClose
      } = _ref3;
      return Object(external_gc_element_["createElement"])(TemplatePartSelection, {
        setAttributes: setAttributes,
        onClose: onClose,
        area: area
      });
    }
  })), step === PLACEHOLDER_STEPS.patterns && Object(external_gc_element_["createElement"])(PatternsSetup, {
    area: area,
    areaLabel: areaLabel,
    areaIcon: areaIcon,
    onCreate: onCreate,
    clientId: clientId,
    resetPlaceholder: () => setStep(PLACEHOLDER_STEPS.initial)
  }));
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/template-part/edit/advanced-controls.js


/**
 * GeChiUI dependencies
 */





function TemplatePartAdvancedControls(_ref) {
  let {
    tagName,
    setAttributes,
    isEntityAvailable,
    templatePartId,
    defaultWrapper
  } = _ref;
  const [area, setArea] = Object(external_gc_coreData_["useEntityProp"])('postType', 'gc_template_part', 'area', templatePartId);
  const [title, setTitle] = Object(external_gc_coreData_["useEntityProp"])('postType', 'gc_template_part', 'title', templatePartId);
  const {
    areaOptions
  } = Object(external_gc_data_["useSelect"])(select => {
    // FIXME: @gechiui/block-library should not depend on @gechiui/editor.
    // Blocks can be loaded into a *non-post* block editor.
    // eslint-disable-next-line @gechiui/data-no-store-string-literals
    const definedAreas = select('core/editor').__experimentalGetDefaultTemplatePartAreas();

    return {
      areaOptions: definedAreas.map(_ref2 => {
        let {
          label,
          area: _area
        } = _ref2;
        return {
          label,
          value: _area
        };
      })
    };
  }, []);
  return Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InspectorControls"], {
    __experimentalGroup: "advanced"
  }, isEntityAvailable && Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])(external_gc_components_["TextControl"], {
    label: Object(external_gc_i18n_["__"])('标题'),
    value: title,
    onChange: value => {
      setTitle(value);
    },
    onFocus: event => event.target.select()
  }), Object(external_gc_element_["createElement"])(external_gc_components_["SelectControl"], {
    label: Object(external_gc_i18n_["__"])('区域'),
    labelPosition: "top",
    options: areaOptions,
    value: area,
    onChange: setArea
  })), Object(external_gc_element_["createElement"])(external_gc_components_["SelectControl"], {
    label: Object(external_gc_i18n_["__"])('HTML 元素'),
    options: [{
      label: Object(external_gc_i18n_["sprintf"])(
      /* translators: %s: HTML tag based on area. */
      Object(external_gc_i18n_["__"])('基于区域的默认值 （%s）'), `<${defaultWrapper}>`),
      value: ''
    }, {
      label: '<header>',
      value: 'header'
    }, {
      label: '<main>',
      value: 'main'
    }, {
      label: '<section>',
      value: 'section'
    }, {
      label: '<article>',
      value: 'article'
    }, {
      label: '<aside>',
      value: 'aside'
    }, {
      label: '<footer>',
      value: 'footer'
    }, {
      label: '<div>',
      value: 'div'
    }],
    value: tagName || '',
    onChange: value => setAttributes({
      tagName: value
    })
  }));
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/template-part/edit/inner-blocks.js


/**
 * GeChiUI dependencies
 */



function TemplatePartInnerBlocks(_ref) {
  let {
    postId: id,
    hasInnerBlocks,
    layout,
    tagName,
    blockProps,
    clientId
  } = _ref;
  const themeSupportsLayout = Object(external_gc_data_["useSelect"])(select => {
    var _getSettings;

    const {
      getSettings
    } = select(external_gc_blockEditor_["store"]);
    return (_getSettings = getSettings()) === null || _getSettings === void 0 ? void 0 : _getSettings.supportsLayout;
  }, []);
  const defaultLayout = Object(external_gc_blockEditor_["useSetting"])('layout') || {};
  const usedLayout = !!layout && layout.inherit ? defaultLayout : layout;
  const [blocks, onInput, onChange] = Object(external_gc_coreData_["useEntityBlockEditor"])('postType', 'gc_template_part', {
    id
  });
  const innerBlocksProps = Object(external_gc_blockEditor_["useInnerBlocksProps"])(blockProps, {
    value: blocks,
    onInput,
    onChange,
    renderAppender: hasInnerBlocks ? undefined : external_gc_blockEditor_["InnerBlocks"].ButtonBlockAppender,
    __experimentalLayout: themeSupportsLayout ? usedLayout : undefined
  });
  return Object(external_gc_element_["createElement"])(external_gc_blockEditor_["__experimentalBlockContentOverlay"], {
    clientId: clientId,
    tagName: tagName,
    wrapperProps: innerBlocksProps
  });
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/template-part/edit/index.js


/**
 * External dependencies
 */

/**
 * GeChiUI dependencies
 */






/**
 * Internal dependencies
 */






function TemplatePartEdit(_ref) {
  let {
    attributes,
    setAttributes,
    clientId
  } = _ref;
  const {
    slug,
    theme,
    tagName,
    layout = {}
  } = attributes;
  const templatePartId = createTemplatePartId(theme, slug);
  const [hasAlreadyRendered, RecursionProvider] = Object(external_gc_blockEditor_["__experimentalUseNoRecursiveRenders"])(templatePartId); // Set the postId block attribute if it did not exist,
  // but wait until the inner blocks have loaded to allow
  // new edits to trigger this.

  const {
    isResolved,
    innerBlocks,
    isMissing,
    defaultWrapper,
    area,
    enableSelection,
    hasResolvedReplacements
  } = Object(external_gc_data_["useSelect"])(select => {
    var _select$__experimenta;

    const {
      getEditedEntityRecord,
      getEntityRecords,
      hasFinishedResolution
    } = select(external_gc_coreData_["store"]);
    const {
      getBlocks
    } = select(external_gc_blockEditor_["store"]);
    const getEntityArgs = ['postType', 'gc_template_part', templatePartId];
    const entityRecord = templatePartId ? getEditedEntityRecord(...getEntityArgs) : null;

    const _area = (entityRecord === null || entityRecord === void 0 ? void 0 : entityRecord.area) || attributes.area; // Check whether other entities exist for switching/selection.


    const availableReplacementArgs = ['postType', 'gc_template_part', _area && 'uncategorized' !== _area && {
      area: _area
    }];
    const matchingReplacements = getEntityRecords(...availableReplacementArgs);

    const _enableSelection = templatePartId ? (matchingReplacements === null || matchingReplacements === void 0 ? void 0 : matchingReplacements.length) > 1 : (matchingReplacements === null || matchingReplacements === void 0 ? void 0 : matchingReplacements.length) > 0;

    const hasResolvedEntity = templatePartId ? hasFinishedResolution('getEditedEntityRecord', getEntityArgs) : false; // FIXME: @gechiui/block-library should not depend on @gechiui/editor.
    // Blocks can be loaded into a *non-post* block editor.
    // eslint-disable-next-line @gechiui/data-no-store-string-literals

    const defaultWrapperElement = (_select$__experimenta = select('core/editor').__experimentalGetDefaultTemplatePartAreas().find(_ref2 => {
      let {
        area: value
      } = _ref2;
      return value === _area;
    })) === null || _select$__experimenta === void 0 ? void 0 : _select$__experimenta.area_tag;
    return {
      innerBlocks: getBlocks(clientId),
      isResolved: hasResolvedEntity,
      isMissing: hasResolvedEntity && Object(external_lodash_["isEmpty"])(entityRecord),
      defaultWrapper: defaultWrapperElement || 'div',
      area: _area,
      enableSelection: _enableSelection,
      hasResolvedReplacements: hasFinishedResolution('getEntityRecords', availableReplacementArgs)
    };
  }, [templatePartId, clientId]);
  const blockProps = Object(external_gc_blockEditor_["useBlockProps"])();
  const isPlaceholder = !slug;
  const isEntityAvailable = !isPlaceholder && !isMissing && isResolved;
  const TagName = tagName || defaultWrapper; // We don't want to render a missing state if we have any inner blocks.
  // A new template part is automatically created if we have any inner blocks but no entity.

  if (innerBlocks.length === 0 && (slug && !theme || slug && isMissing)) {
    return Object(external_gc_element_["createElement"])(TagName, blockProps, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["Warning"], null, Object(external_gc_i18n_["sprintf"])(
    /* translators: %s: Template part slug */
    Object(external_gc_i18n_["__"])('模板组件已被删除或不可用：%s'), slug)));
  }

  if (isEntityAvailable && hasAlreadyRendered) {
    return Object(external_gc_element_["createElement"])(TagName, blockProps, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["Warning"], null, Object(external_gc_i18n_["__"])('区块不能在其内部渲染。')));
  }

  return Object(external_gc_element_["createElement"])(RecursionProvider, null, Object(external_gc_element_["createElement"])(TemplatePartAdvancedControls, {
    tagName: tagName,
    setAttributes: setAttributes,
    isEntityAvailable: isEntityAvailable,
    templatePartId: templatePartId,
    defaultWrapper: defaultWrapper
  }), isPlaceholder && Object(external_gc_element_["createElement"])(TagName, blockProps, Object(external_gc_element_["createElement"])(TemplatePartPlaceholder, {
    area: attributes.area,
    clientId: clientId,
    setAttributes: setAttributes,
    enableSelection: enableSelection,
    hasResolvedReplacements: hasResolvedReplacements
  })), isEntityAvailable && enableSelection && Object(external_gc_element_["createElement"])(external_gc_blockEditor_["BlockControls"], null, Object(external_gc_element_["createElement"])(external_gc_components_["ToolbarGroup"], {
    className: "gc-block-template-part__block-control-group"
  }, Object(external_gc_element_["createElement"])(external_gc_components_["Dropdown"], {
    className: "gc-block-template-part__preview-dropdown-button",
    contentClassName: "gc-block-template-part__preview-dropdown-content",
    position: "bottom right left",
    renderToggle: _ref3 => {
      let {
        isOpen,
        onToggle
      } = _ref3;
      return Object(external_gc_element_["createElement"])(external_gc_components_["ToolbarButton"], {
        "aria-expanded": isOpen,
        onClick: onToggle
      }, Object(external_gc_i18n_["__"])('替换'));
    },
    renderContent: _ref4 => {
      let {
        onClose
      } = _ref4;
      return Object(external_gc_element_["createElement"])(TemplatePartSelection, {
        setAttributes: setAttributes,
        onClose: onClose,
        area: area,
        templatePartId: templatePartId
      });
    }
  }))), isEntityAvailable && Object(external_gc_element_["createElement"])(TemplatePartInnerBlocks, {
    clientId: clientId,
    tagName: TagName,
    blockProps: blockProps,
    postId: templatePartId,
    hasInnerBlocks: innerBlocks.length > 0,
    layout: layout
  }), !isPlaceholder && !isResolved && Object(external_gc_element_["createElement"])(TagName, blockProps, Object(external_gc_element_["createElement"])(external_gc_components_["Spinner"], null)));
}

// EXTERNAL MODULE: ./node_modules/@gechiui/icons/build-module/library/header.js
var header = __webpack_require__("9B20");

// EXTERNAL MODULE: ./node_modules/@gechiui/icons/build-module/library/footer.js
var footer = __webpack_require__("NEvm");

// EXTERNAL MODULE: ./node_modules/@gechiui/icons/build-module/library/sidebar.js
var sidebar = __webpack_require__("jww0");

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/template-part/fallback-variations.js
/**
 * GeChiUI dependencies
 */




const fallback_variations_fallbackVariations = [{
  name: 'header',
  icon: header["a" /* default */],
  title: Object(external_gc_i18n_["__"])('表头'),
  description: Object(external_gc_i18n_["__"])('页眉模板定义一个页面的区域，通常包含标题、 logo 和主导航。'),
  attributes: {
    area: 'header'
  },
  scope: ['inserter']
}, {
  name: 'footer',
  icon: footer["a" /* default */],
  title: Object(external_gc_i18n_["__"])('注脚'),
  description: Object(external_gc_i18n_["__"])('页脚模板定义一个页面的区域，通常包含站点信息、社交链接或额外区块的组合。'),
  attributes: {
    area: 'footer'
  },
  scope: ['inserter']
}];
fallback_variations_fallbackVariations.forEach(variation => {
  if (variation.isActive) return;

  variation.isActive = (blockAttributes, variationAttributes) => {
    const {
      area,
      theme,
      slug
    } = blockAttributes; // We first check the `area` block attribute which is set during insertion.
    // This property is removed on the creation of a template part.

    if (area) return area === variationAttributes.area; // Find a matching variation from the created template part
    // by checking the entity's `area` property.

    if (!slug) return false;
    const entity = Object(external_gc_data_["select"])(external_gc_coreData_["store"]).getEntityRecord('postType', 'gc_template_part', `${theme}//${slug}`);
    return (entity === null || entity === void 0 ? void 0 : entity.area) === variationAttributes.area;
  };
});
/* harmony default export */ var template_part_fallback_variations = (fallback_variations_fallbackVariations);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/template-part/variations.js
/**
 * GeChiUI dependencies
 */



/**
 * Internal dependencies
 */



function getTemplatePartIcon(iconName) {
  if ('header' === iconName) {
    return header["a" /* default */];
  } else if ('footer' === iconName) {
    return footer["a" /* default */];
  } else if ('sidebar' === iconName) {
    return sidebar["a" /* default */];
  }

  return symbol_filled["a" /* default */];
}

function enhanceTemplatePartVariations(settings, name) {
  if (name !== 'core/template-part') {
    return settings;
  } // GeChiUI versions pre-5.8 do not support server side variation registration.
  // So we must register the fallback variations until those versions are no longer supported.


  if (!(settings.variations && settings.variations.length)) {
    return { ...settings,
      variations: template_part_fallback_variations
    };
  }

  if (settings.variations) {
    const isActive = (blockAttributes, variationAttributes) => {
      const {
        area,
        theme,
        slug
      } = blockAttributes; // We first check the `area` block attribute which is set during insertion.
      // This property is removed on the creation of a template part.

      if (area) return area === variationAttributes.area; // Find a matching variation from the created template part
      // by checking the entity's `area` property.

      if (!slug) return false;
      const entity = Object(external_gc_data_["select"])(external_gc_coreData_["store"]).getEntityRecord('postType', 'gc_template_part', `${theme}//${slug}`);
      return (entity === null || entity === void 0 ? void 0 : entity.area) === variationAttributes.area;
    };

    const variations = settings.variations.map(variation => {
      return { ...variation,
        ...(!variation.isActive && {
          isActive
        }),
        ...(typeof variation.icon === 'string' && {
          icon: getTemplatePartIcon(variation.icon)
        })
      };
    });
    return { ...settings,
      variations
    };
  }

  return settings;
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/template-part/index.js
/**
 * External dependencies
 */

/**
 * GeChiUI dependencies
 */





/**
 * Internal dependencies
 */

const template_part_metadata = {
  apiVersion: 2,
  name: "core/template-part",
  title: "模版组件",
  category: "theme",
  description: "编辑站点的不同全局区域，如页眉、页脚、侧边栏，或创建自己的区域。",
  textdomain: "default",
  attributes: {
    slug: {
      type: "string"
    },
    theme: {
      type: "string"
    },
    tagName: {
      type: "string"
    },
    area: {
      type: "string"
    }
  },
  supports: {
    align: true,
    html: false,
    reusable: false
  },
  editorStyle: "gc-block-template-part-editor"
};


const {
  name: template_part_name
} = template_part_metadata;

const template_part_settings = {
  icon: symbol_filled["a" /* default */],
  __experimentalLabel: _ref => {
    var _entity$title;

    let {
      slug,
      theme
    } = _ref;

    // Attempt to find entity title if block is a template part.
    // Require slug to request, otherwise entity is uncreated and will throw 404.
    if (!slug) {
      return;
    }

    const entity = Object(external_gc_data_["select"])(external_gc_coreData_["store"]).getEntityRecord('postType', 'gc_template_part', theme + '//' + slug);

    if (!entity) {
      return;
    }

    return Object(external_lodash_["startCase"])(((_entity$title = entity.title) === null || _entity$title === void 0 ? void 0 : _entity$title.rendered) || entity.slug);
  },
  edit: TemplatePartEdit
}; // Importing this file includes side effects. This is whitelisted in block-library/package.json under sideEffects

Object(external_gc_hooks_["addFilter"])('blocks.registerBlockType', 'core/template-part', enhanceTemplatePartVariations); // Prevent adding template parts inside post templates.

const DISALLOWED_PARENTS = ['core/post-template', 'core/post-content'];
Object(external_gc_hooks_["addFilter"])('blockEditor.__unstableCanInsertBlockType', 'removeTemplatePartsFromPostTemplates', (can, blockType, rootClientId, _ref2) => {
  let {
    getBlock,
    getBlockParentsByBlockName
  } = _ref2;

  if (blockType.name !== 'core/template-part') {
    return can;
  }

  for (const disallowedParentType of DISALLOWED_PARENTS) {
    var _getBlock;

    const hasDisallowedParent = ((_getBlock = getBlock(rootClientId)) === null || _getBlock === void 0 ? void 0 : _getBlock.name) === disallowedParentType || getBlockParentsByBlockName(rootClientId, disallowedParentType).length;

    if (hasDisallowedParent) {
      return false;
    }
  }

  return true;
});

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/term-description.js


/**
 * GeChiUI dependencies
 */

const term_description_tag = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  stroke: "#1E1E1E",
  strokeWidth: "1.5",
  d: "M9 19.25h6M4 19.25h4M12 15.25h8M4 15.25h7"
}), Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M8.994 10.103H6.08L5.417 12H4l2.846-8h1.383l2.845 8H9.657l-.663-1.897zm-.457-1.28l-.994-2.857-1.006 2.857h2z",
  fill: "#1E1E1E"
}));
/* harmony default export */ var term_description = (term_description_tag);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/term-description/edit.js


/**
 * External dependencies
 */

/**
 * GeChiUI dependencies
 */



function TermDescriptionEdit(_ref) {
  let {
    attributes,
    setAttributes,
    mergedStyle
  } = _ref;
  const {
    textAlign
  } = attributes;
  const blockProps = Object(external_gc_blockEditor_["useBlockProps"])({
    className: classnames_default()({
      [`has-text-align-${textAlign}`]: textAlign
    }),
    style: mergedStyle
  });
  return Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["BlockControls"], {
    group: "block"
  }, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["AlignmentControl"], {
    value: textAlign,
    onChange: nextAlign => {
      setAttributes({
        textAlign: nextAlign
      });
    }
  })), Object(external_gc_element_["createElement"])("div", blockProps, Object(external_gc_element_["createElement"])("div", {
    className: "gc-block-term-description__placeholder"
  }, Object(external_gc_element_["createElement"])("span", null, Object(external_gc_i18n_["__"])('项目描述')))));
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/term-description/index.js
/**
 * GeChiUI dependencies
 */

/**
 * Internal dependencies
 */

const term_description_metadata = {
  apiVersion: 2,
  name: "core/term-description",
  title: "项目描述",
  category: "theme",
  description: "查看归档时显示分类、标签和自定义分类法的描述。",
  textdomain: "default",
  attributes: {
    textAlign: {
      type: "string"
    }
  },
  supports: {
    align: ["wide", "full"],
    html: false,
    color: {
      link: true
    },
    typography: {
      fontSize: true,
      lineHeight: true,
      __experimentalDefaultControls: {
        fontSize: true
      }
    }
  },
  editorStyle: "gc-block-term-description-editor"
};

const {
  name: term_description_name
} = term_description_metadata;

const term_description_settings = {
  icon: term_description,
  edit: TermDescriptionEdit
};

// EXTERNAL MODULE: external ["gc","deprecated"]
var external_gc_deprecated_ = __webpack_require__("JWwu");
var external_gc_deprecated_default = /*#__PURE__*/__webpack_require__.n(external_gc_deprecated_);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/text-columns/edit.js


/**
 * External dependencies
 */

/**
 * GeChiUI dependencies
 */





function TextColumnsEdit(_ref) {
  let {
    attributes,
    setAttributes
  } = _ref;
  const {
    width,
    content,
    columns
  } = attributes;
  external_gc_deprecated_default()('The Text Columns block', {
    since: '5.3',
    alternative: 'the Columns block'
  });
  return Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["BlockControls"], null, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["BlockAlignmentToolbar"], {
    value: width,
    onChange: nextWidth => setAttributes({
      width: nextWidth
    }),
    controls: ['center', 'wide', 'full']
  })), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InspectorControls"], null, Object(external_gc_element_["createElement"])(external_gc_components_["PanelBody"], null, Object(external_gc_element_["createElement"])(external_gc_components_["RangeControl"], {
    label: Object(external_gc_i18n_["__"])('栏目'),
    value: columns,
    onChange: value => setAttributes({
      columns: value
    }),
    min: 2,
    max: 4,
    required: true
  }))), Object(external_gc_element_["createElement"])("div", Object(external_gc_blockEditor_["useBlockProps"])({
    className: `align${width} columns-${columns}`
  }), Object(external_lodash_["times"])(columns, index => {
    return Object(external_gc_element_["createElement"])("div", {
      className: "gc-block-column",
      key: `column-${index}`
    }, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"], {
      tagName: "p",
      value: Object(external_lodash_["get"])(content, [index, 'children']),
      onChange: nextContent => {
        setAttributes({
          content: [...content.slice(0, index), {
            children: nextContent
          }, ...content.slice(index + 1)]
        });
      },
      "aria-label": Object(external_gc_i18n_["sprintf"])( // translators: %d: column index (starting with 1)
      Object(external_gc_i18n_["__"])('栏目%d文字'), index + 1),
      placeholder: Object(external_gc_i18n_["__"])('新建栏目')
    }));
  })));
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/text-columns/save.js


/**
 * External dependencies
 */

/**
 * GeChiUI dependencies
 */


function text_columns_save_save(_ref) {
  let {
    attributes
  } = _ref;
  const {
    width,
    content,
    columns
  } = attributes;
  return Object(external_gc_element_["createElement"])("div", external_gc_blockEditor_["useBlockProps"].save({
    className: `align${width} columns-${columns}`
  }), Object(external_lodash_["times"])(columns, index => Object(external_gc_element_["createElement"])("div", {
    className: "gc-block-column",
    key: `column-${index}`
  }, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"].Content, {
    tagName: "p",
    value: Object(external_lodash_["get"])(content, [index, 'children'])
  }))));
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/text-columns/transforms.js
/**
 * GeChiUI dependencies
 */

const text_columns_transforms_transforms = {
  to: [{
    type: 'block',
    blocks: ['core/columns'],
    transform: _ref => {
      let {
        className,
        columns,
        content,
        width
      } = _ref;
      return Object(external_gc_blocks_["createBlock"])('core/columns', {
        align: 'wide' === width || 'full' === width ? width : undefined,
        className,
        columns
      }, content.map(_ref2 => {
        let {
          children
        } = _ref2;
        return Object(external_gc_blocks_["createBlock"])('core/column', {}, [Object(external_gc_blocks_["createBlock"])('core/paragraph', {
          content: children
        })]);
      }));
    }
  }]
};
/* harmony default export */ var text_columns_transforms = (text_columns_transforms_transforms);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/text-columns/index.js
/**
 * Internal dependencies
 */

const text_columns_metadata = {
  apiVersion: 2,
  name: "core/text-columns",
  title: "文本栏（已弃用）",
  icon: "columns",
  category: "design",
  description: "此区块已弃用。请改用“栏目”区块。",
  textdomain: "default",
  attributes: {
    content: {
      type: "array",
      source: "query",
      selector: "p",
      query: {
        children: {
          type: "string",
          source: "html"
        }
      },
      "default": [{}, {}]
    },
    columns: {
      type: "number",
      "default": 2
    },
    width: {
      type: "string"
    }
  },
  supports: {
    inserter: false
  },
  editorStyle: "gc-block-text-columns-editor",
  style: "gc-block-text-columns"
};


const {
  name: text_columns_name
} = text_columns_metadata;

const text_columns_settings = {
  transforms: text_columns_transforms,

  getEditWrapperProps(attributes) {
    const {
      width
    } = attributes;

    if ('wide' === width || 'full' === width) {
      return {
        'data-align': width
      };
    }
  },

  edit: TextColumnsEdit,
  save: text_columns_save_save
};

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/verse.js


/**
 * GeChiUI dependencies
 */

const verse = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  viewBox: "0 0 24 24",
  xmlns: "http://www.w3.org/2000/svg"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M17.8 2l-.9.3c-.1 0-3.6 1-5.2 2.1C10 5.5 9.3 6.5 8.9 7.1c-.6.9-1.7 4.7-1.7 6.3l-.9 2.3c-.2.4 0 .8.4 1 .1 0 .2.1.3.1.3 0 .6-.2.7-.5l.6-1.5c.3 0 .7-.1 1.2-.2.7-.1 1.4-.3 2.2-.5.8-.2 1.6-.5 2.4-.8.7-.3 1.4-.7 1.9-1.2s.8-1.2 1-1.9c.2-.7.3-1.6.4-2.4.1-.8.1-1.7.2-2.5 0-.8.1-1.5.2-2.1V2zm-1.9 5.6c-.1.8-.2 1.5-.3 2.1-.2.6-.4 1-.6 1.3-.3.3-.8.6-1.4.9-.7.3-1.4.5-2.2.8-.6.2-1.3.3-1.8.4L15 7.5c.3-.3.6-.7 1-1.1 0 .4 0 .8-.1 1.2zM6 20h8v-1.5H6V20z"
}));
/* harmony default export */ var library_verse = (verse);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/verse/deprecated.js


/**
 * External dependencies
 */

/**
 * GeChiUI dependencies
 */


/**
 * Internal dependencies
 */


const verse_deprecated_v1 = {
  attributes: {
    content: {
      type: 'string',
      source: 'html',
      selector: 'pre',
      default: ''
    },
    textAlign: {
      type: 'string'
    }
  },

  save(_ref) {
    let {
      attributes
    } = _ref;
    const {
      textAlign,
      content
    } = attributes;
    return Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"].Content, {
      tagName: "pre",
      style: {
        textAlign
      },
      value: content
    });
  }

};
const verse_deprecated_v2 = {
  attributes: {
    content: {
      type: 'string',
      source: 'html',
      selector: 'pre',
      default: '',
      __unstablePreserveWhiteSpace: true,
      __experimentalRole: 'content'
    },
    textAlign: {
      type: 'string'
    }
  },
  supports: {
    anchor: true,
    color: {
      gradients: true,
      link: true
    },
    typography: {
      fontSize: true,
      __experimentalFontFamily: true
    },
    spacing: {
      padding: true
    }
  },

  save(_ref2) {
    let {
      attributes
    } = _ref2;
    const {
      textAlign,
      content
    } = attributes;
    const className = classnames_default()({
      [`has-text-align-${textAlign}`]: textAlign
    });
    return Object(external_gc_element_["createElement"])("pre", external_gc_blockEditor_["useBlockProps"].save({
      className
    }), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"].Content, {
      value: content
    }));
  },

  migrate: migrate_font_family,

  isEligible(_ref3) {
    var _style$typography;

    let {
      style
    } = _ref3;
    return style === null || style === void 0 ? void 0 : (_style$typography = style.typography) === null || _style$typography === void 0 ? void 0 : _style$typography.fontFamily;
  }

};
/**
 * New deprecations need to be placed first
 * for them to have higher priority.
 *
 * Old deprecations may need to be updated as well.
 *
 * See block-deprecation.md
 */

/* harmony default export */ var verse_deprecated = ([verse_deprecated_v2, verse_deprecated_v1]);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/verse/edit.js



/**
 * External dependencies
 */

/**
 * GeChiUI dependencies
 */



function VerseEdit(_ref) {
  let {
    attributes,
    setAttributes,
    mergeBlocks,
    onRemove,
    style
  } = _ref;
  const {
    textAlign,
    content
  } = attributes;
  const blockProps = Object(external_gc_blockEditor_["useBlockProps"])({
    className: classnames_default()({
      [`has-text-align-${textAlign}`]: textAlign
    }),
    style
  });
  return Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["BlockControls"], null, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["AlignmentToolbar"], {
    value: textAlign,
    onChange: nextAlign => {
      setAttributes({
        textAlign: nextAlign
      });
    }
  })), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"], Object(esm_extends["a" /* default */])({
    tagName: "pre",
    identifier: "content",
    preserveWhiteSpace: true,
    value: content,
    onChange: nextContent => {
      setAttributes({
        content: nextContent
      });
    },
    "aria-label": Object(external_gc_i18n_["__"])('诗篇文字'),
    placeholder: Object(external_gc_i18n_["__"])('填写诗篇…'),
    onRemove: onRemove,
    onMerge: mergeBlocks,
    textAlign: textAlign
  }, blockProps, {
    __unstablePastePlainText: true
  })));
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/verse/save.js


/**
 * External dependencies
 */

/**
 * GeChiUI dependencies
 */


function verse_save_save(_ref) {
  let {
    attributes
  } = _ref;
  const {
    textAlign,
    content
  } = attributes;
  const className = classnames_default()({
    [`has-text-align-${textAlign}`]: textAlign
  });
  return Object(external_gc_element_["createElement"])("pre", external_gc_blockEditor_["useBlockProps"].save({
    className
  }), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"].Content, {
    value: content
  }));
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/verse/transforms.js
/**
 * GeChiUI dependencies
 */

const verse_transforms_transforms = {
  from: [{
    type: 'block',
    blocks: ['core/paragraph'],
    transform: attributes => Object(external_gc_blocks_["createBlock"])('core/verse', attributes)
  }],
  to: [{
    type: 'block',
    blocks: ['core/paragraph'],
    transform: attributes => Object(external_gc_blocks_["createBlock"])('core/paragraph', attributes)
  }]
};
/* harmony default export */ var verse_transforms = (verse_transforms_transforms);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/verse/index.js
/**
 * GeChiUI dependencies
 */


/**
 * Internal dependencies
 */



const verse_metadata = {
  apiVersion: 2,
  name: "core/verse",
  title: "诗篇",
  category: "text",
  description: "插入诗歌，使用特殊的空白格式，或引用歌词。",
  keywords: ["poetry", "poem"],
  textdomain: "default",
  attributes: {
    content: {
      type: "string",
      source: "html",
      selector: "pre",
      "default": "",
      __unstablePreserveWhiteSpace: true,
      __experimentalRole: "content"
    },
    textAlign: {
      type: "string"
    }
  },
  supports: {
    anchor: true,
    color: {
      gradients: true,
      link: true
    },
    typography: {
      fontSize: true,
      __experimentalFontFamily: true,
      lineHeight: true,
      __experimentalFontStyle: true,
      __experimentalFontWeight: true,
      __experimentalLetterSpacing: true,
      __experimentalTextTransform: true,
      __experimentalDefaultControls: {
        fontSize: true,
        fontAppearance: true
      }
    },
    spacing: {
      padding: true
    }
  },
  style: "gc-block-verse",
  editorStyle: "gc-block-verse-editor"
};


const {
  name: verse_name
} = verse_metadata;

const verse_settings = {
  icon: library_verse,
  example: {
    attributes: {
      /* eslint-disable @gechiui/i18n-no-collapsible-whitespace */
      // translators: Sample content for the Verse block. Can be replaced with a more locale-adequate work.
      content: Object(external_gc_i18n_["__"])('绵延数日的霏霏细雨冲走了山间光秃秃的地表上堆积的尘土，\n漾出一股深邃的湛蓝，\n而十月的风则撩得芒草左右摇曳，\n窄窄长长的云又冻僵了似的紧偎着蔚蓝的天空。\n天空高踞顶上，只消定睛凝视一会，你便会感到两眼发痛。')
      /* eslint-enable @gechiui/i18n-no-collapsible-whitespace */

    }
  },
  transforms: verse_transforms,
  deprecated: verse_deprecated,

  merge(attributes, attributesToMerge) {
    return {
      content: attributes.content + attributesToMerge.content
    };
  },

  edit: VerseEdit,
  save: verse_save_save
};

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/video.js


/**
 * GeChiUI dependencies
 */

const video = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  viewBox: "0 0 24 24",
  xmlns: "http://www.w3.org/2000/svg"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M18.7 3H5.3C4 3 3 4 3 5.3v13.4C3 20 4 21 5.3 21h13.4c1.3 0 2.3-1 2.3-2.3V5.3C21 4 20 3 18.7 3zm.8 15.7c0 .4-.4.8-.8.8H5.3c-.4 0-.8-.4-.8-.8V5.3c0-.4.4-.8.8-.8h13.4c.4 0 .8.4.8.8v13.4zM10 15l5-3-5-3v6z"
}));
/* harmony default export */ var library_video = (video);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/video/edit-common-settings.js


/**
 * GeChiUI dependencies
 */



const options = [{
  value: 'auto',
  label: Object(external_gc_i18n_["__"])('自动')
}, {
  value: 'metadata',
  label: Object(external_gc_i18n_["__"])('元数据')
}, {
  value: 'none',
  label: Object(external_gc_i18n_["_x"])('无', 'Preload value')
}];

const VideoSettings = _ref => {
  let {
    setAttributes,
    attributes
  } = _ref;
  const {
    autoplay,
    controls,
    loop,
    muted,
    playsInline,
    preload
  } = attributes;

  const autoPlayHelpText = Object(external_gc_i18n_["__"])('自动播放可能对一些用户造成可用性问题。');

  const getAutoplayHelp = external_gc_element_["Platform"].select({
    web: Object(external_gc_element_["useCallback"])(checked => {
      return checked ? autoPlayHelpText : null;
    }, []),
    native: autoPlayHelpText
  });
  const toggleFactory = Object(external_gc_element_["useMemo"])(() => {
    const toggleAttribute = attribute => {
      return newValue => {
        setAttributes({
          [attribute]: newValue
        });
      };
    };

    return {
      autoplay: toggleAttribute('autoplay'),
      loop: toggleAttribute('loop'),
      muted: toggleAttribute('muted'),
      controls: toggleAttribute('controls'),
      playsInline: toggleAttribute('playsInline')
    };
  }, []);
  const onChangePreload = Object(external_gc_element_["useCallback"])(value => {
    setAttributes({
      preload: value
    });
  }, []);
  return Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])(external_gc_components_["ToggleControl"], {
    label: Object(external_gc_i18n_["__"])('自动播放'),
    onChange: toggleFactory.autoplay,
    checked: autoplay,
    help: getAutoplayHelp
  }), Object(external_gc_element_["createElement"])(external_gc_components_["ToggleControl"], {
    label: Object(external_gc_i18n_["__"])('循环'),
    onChange: toggleFactory.loop,
    checked: loop
  }), Object(external_gc_element_["createElement"])(external_gc_components_["ToggleControl"], {
    label: Object(external_gc_i18n_["__"])('静音'),
    onChange: toggleFactory.muted,
    checked: muted
  }), Object(external_gc_element_["createElement"])(external_gc_components_["ToggleControl"], {
    label: Object(external_gc_i18n_["__"])('回放控制'),
    onChange: toggleFactory.controls,
    checked: controls
  }), Object(external_gc_element_["createElement"])(external_gc_components_["ToggleControl"], {
    label: Object(external_gc_i18n_["__"])('内联播放'),
    onChange: toggleFactory.playsInline,
    checked: playsInline
  }), Object(external_gc_element_["createElement"])(external_gc_components_["SelectControl"], {
    label: Object(external_gc_i18n_["__"])('预加载'),
    value: preload,
    onChange: onChangePreload,
    options: options,
    hideCancelButton: true
  }));
};

/* harmony default export */ var edit_common_settings = (VideoSettings);

// EXTERNAL MODULE: ./node_modules/@gechiui/icons/build-module/library/media.js
var library_media = __webpack_require__("ATjk");

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/video/tracks-editor.js


/**
 * GeChiUI dependencies
 */







const ALLOWED_TYPES = ['text/vtt'];
const DEFAULT_KIND = 'subtitles';
const KIND_OPTIONS = [{
  label: Object(external_gc_i18n_["__"])('字幕'),
  value: 'subtitles'
}, {
  label: Object(external_gc_i18n_["__"])('说明文字'),
  value: 'captions'
}, {
  label: Object(external_gc_i18n_["__"])('描述'),
  value: 'descriptions'
}, {
  label: Object(external_gc_i18n_["__"])('章节'),
  value: 'chapters'
}, {
  label: Object(external_gc_i18n_["__"])('元数据'),
  value: 'metadata'
}];
const captionIcon = Object(external_gc_element_["createElement"])(external_gc_components_["SVG"], {
  width: "18",
  height: "14",
  viewBox: "0 0 18 14",
  role: "img",
  fill: "none"
}, Object(external_gc_element_["createElement"])(external_gc_components_["Rect"], {
  x: "0.75",
  y: "0.75",
  width: "16.5",
  height: "12.5",
  rx: "1.25",
  stroke: "black",
  strokeWidth: "1.5",
  fill: "none"
}), Object(external_gc_element_["createElement"])(external_gc_components_["Path"], {
  d: "M3 7H15",
  stroke: "black",
  strokeWidth: "1.5"
}), Object(external_gc_element_["createElement"])(external_gc_components_["Path"], {
  d: "M3 10L15 10",
  stroke: "black",
  strokeWidth: "1.5"
}));

function TrackList(_ref) {
  let {
    tracks,
    onEditPress
  } = _ref;
  let content;

  if (tracks.length === 0) {
    content = Object(external_gc_element_["createElement"])("p", {
      className: "block-library-video-tracks-editor__tracks-informative-message"
    }, Object(external_gc_i18n_["__"])('“音轨”元素可以是字幕、说明文字、章节或内容描述，其有助于更多的用户访问您的内容。'));
  } else {
    content = tracks.map((track, index) => {
      return Object(external_gc_element_["createElement"])("div", {
        key: index,
        className: "block-library-video-tracks-editor__track-list-track"
      }, Object(external_gc_element_["createElement"])("span", null, track.label, " "), Object(external_gc_element_["createElement"])(external_gc_components_["Button"], {
        variant: "tertiary",
        onClick: () => onEditPress(index),
        "aria-label": Object(external_gc_i18n_["sprintf"])(
        /* translators: %s: Label of the video text track e.g: "French subtitles" */
        Object(external_gc_i18n_["__"])('编辑 %s'), track.label)
      }, Object(external_gc_i18n_["__"])('编辑')));
    });
  }

  return Object(external_gc_element_["createElement"])(external_gc_components_["MenuGroup"], {
    label: Object(external_gc_i18n_["__"])('文字音轨'),
    className: "block-library-video-tracks-editor__track-list"
  }, content);
}

function SingleTrackEditor(_ref2) {
  let {
    track,
    onChange,
    onClose,
    onRemove
  } = _ref2;
  const {
    src = '',
    label = '',
    srcLang = '',
    kind = DEFAULT_KIND
  } = track;
  const fileName = src.startsWith('blob:') ? '' : Object(external_gc_url_["getFilename"])(src) || '';
  return Object(external_gc_element_["createElement"])(external_gc_components_["NavigableMenu"], null, Object(external_gc_element_["createElement"])("div", {
    className: "block-library-video-tracks-editor__single-track-editor"
  }, Object(external_gc_element_["createElement"])("span", {
    className: "block-library-video-tracks-editor__single-track-editor-edit-track-label"
  }, Object(external_gc_i18n_["__"])('编辑音轨')), Object(external_gc_element_["createElement"])("span", null, Object(external_gc_i18n_["__"])('文件'), ": ", Object(external_gc_element_["createElement"])("b", null, fileName)), Object(external_gc_element_["createElement"])("div", {
    className: "block-library-video-tracks-editor__single-track-editor-label-language"
  }, Object(external_gc_element_["createElement"])(external_gc_components_["TextControl"]
  /* eslint-disable jsx-a11y/no-autofocus */
  , {
    autoFocus: true
    /* eslint-enable jsx-a11y/no-autofocus */
    ,
    onChange: newLabel => onChange({ ...track,
      label: newLabel
    }),
    label: Object(external_gc_i18n_["__"])('标签'),
    value: label,
    help: Object(external_gc_i18n_["__"])('音轨标题')
  }), Object(external_gc_element_["createElement"])(external_gc_components_["TextControl"], {
    onChange: newSrcLang => onChange({ ...track,
      srcLang: newSrcLang
    }),
    label: Object(external_gc_i18n_["__"])('源语言'),
    value: srcLang,
    help: Object(external_gc_i18n_["__"])('语言标签（英语、法语等）')
  })), Object(external_gc_element_["createElement"])(external_gc_components_["SelectControl"], {
    className: "block-library-video-tracks-editor__single-track-editor-kind-select",
    options: KIND_OPTIONS,
    value: kind,
    label: Object(external_gc_i18n_["__"])('属性'),
    onChange: newKind => {
      onChange({ ...track,
        kind: newKind
      });
    }
  }), Object(external_gc_element_["createElement"])("div", {
    className: "block-library-video-tracks-editor__single-track-editor-buttons-container"
  }, Object(external_gc_element_["createElement"])(external_gc_components_["Button"], {
    variant: "secondary",
    onClick: () => {
      const changes = {};
      let hasChanges = false;

      if (label === '') {
        changes.label = Object(external_gc_i18n_["__"])('英语');
        hasChanges = true;
      }

      if (srcLang === '') {
        changes.srcLang = 'en';
        hasChanges = true;
      }

      if (track.kind === undefined) {
        changes.kind = DEFAULT_KIND;
        hasChanges = true;
      }

      if (hasChanges) {
        onChange({ ...track,
          ...changes
        });
      }

      onClose();
    }
  }, Object(external_gc_i18n_["__"])('关闭')), Object(external_gc_element_["createElement"])(external_gc_components_["Button"], {
    isDestructive: true,
    variant: "link",
    onClick: onRemove
  }, Object(external_gc_i18n_["__"])('移除音轨')))));
}

function TracksEditor(_ref3) {
  let {
    tracks = [],
    onChange
  } = _ref3;
  const mediaUpload = Object(external_gc_data_["useSelect"])(select => {
    return select(external_gc_blockEditor_["store"]).getSettings().mediaUpload;
  }, []);
  const [trackBeingEdited, setTrackBeingEdited] = Object(external_gc_element_["useState"])(null);

  if (!mediaUpload) {
    return null;
  }

  return Object(external_gc_element_["createElement"])(external_gc_components_["Dropdown"], {
    contentClassName: "block-library-video-tracks-editor",
    renderToggle: _ref4 => {
      let {
        isOpen,
        onToggle
      } = _ref4;
      return Object(external_gc_element_["createElement"])(external_gc_components_["ToolbarButton"], {
        label: Object(external_gc_i18n_["__"])('文字音轨'),
        showTooltip: true,
        "aria-expanded": isOpen,
        "aria-haspopup": "true",
        onClick: onToggle,
        icon: captionIcon
      });
    },
    renderContent: _ref5 => {
      let {} = _ref5;

      if (trackBeingEdited !== null) {
        return Object(external_gc_element_["createElement"])(SingleTrackEditor, {
          track: tracks[trackBeingEdited],
          onChange: newTrack => {
            const newTracks = [...tracks];
            newTracks[trackBeingEdited] = newTrack;
            onChange(newTracks);
          },
          onClose: () => setTrackBeingEdited(null),
          onRemove: () => {
            onChange(tracks.filter((_track, index) => index !== trackBeingEdited));
            setTrackBeingEdited(null);
          }
        });
      }

      return Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])(external_gc_components_["NavigableMenu"], null, Object(external_gc_element_["createElement"])(TrackList, {
        tracks: tracks,
        onEditPress: setTrackBeingEdited
      }), Object(external_gc_element_["createElement"])(external_gc_components_["MenuGroup"], {
        className: "block-library-video-tracks-editor__add-tracks-container",
        label: Object(external_gc_i18n_["__"])('天家音轨')
      }, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["MediaUpload"], {
        onSelect: _ref6 => {
          let {
            url
          } = _ref6;
          const trackIndex = tracks.length;
          onChange([...tracks, {
            src: url
          }]);
          setTrackBeingEdited(trackIndex);
        },
        allowedTypes: ALLOWED_TYPES,
        render: _ref7 => {
          let {
            open
          } = _ref7;
          return Object(external_gc_element_["createElement"])(external_gc_components_["MenuItem"], {
            icon: library_media["a" /* default */],
            onClick: open
          }, Object(external_gc_i18n_["__"])('打开媒体库'));
        }
      }), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["MediaUploadCheck"], null, Object(external_gc_element_["createElement"])(external_gc_components_["FormFileUpload"], {
        onChange: event => {
          const files = event.target.files;
          const trackIndex = tracks.length;
          mediaUpload({
            allowedTypes: ALLOWED_TYPES,
            filesList: files,
            onFileChange: _ref8 => {
              let [{
                url
              }] = _ref8;
              const newTracks = [...tracks];

              if (!newTracks[trackIndex]) {
                newTracks[trackIndex] = {};
              }

              newTracks[trackIndex] = { ...tracks[trackIndex],
                src: url
              };
              onChange(newTracks);
              setTrackBeingEdited(trackIndex);
            }
          });
        },
        accept: ".vtt,text/vtt",
        render: _ref9 => {
          let {
            openFileDialog
          } = _ref9;
          return Object(external_gc_element_["createElement"])(external_gc_components_["MenuItem"], {
            icon: upload["a" /* default */],
            onClick: () => {
              openFileDialog();
            }
          }, Object(external_gc_i18n_["__"])('上传'));
        }
      })))));
    }
  });
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/video/tracks.js


function Tracks(_ref) {
  let {
    tracks = []
  } = _ref;
  return tracks.map(track => {
    return Object(external_gc_element_["createElement"])("track", Object(esm_extends["a" /* default */])({
      key: track.src
    }, track));
  });
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/video/edit.js


/**
 * External dependencies
 */

/**
 * GeChiUI dependencies
 */










/**
 * Internal dependencies
 */





const video_edit_ALLOWED_MEDIA_TYPES = ['video'];
const VIDEO_POSTER_ALLOWED_MEDIA_TYPES = ['image'];

function VideoEdit(_ref) {
  let {
    isSelected,
    noticeUI,
    attributes,
    className,
    setAttributes,
    insertBlocksAfter,
    onReplace,
    noticeOperations
  } = _ref;
  const instanceId = Object(external_gc_compose_["useInstanceId"])(VideoEdit);
  const videoPlayer = Object(external_gc_element_["useRef"])();
  const posterImageButton = Object(external_gc_element_["useRef"])();
  const {
    id,
    caption,
    controls,
    poster,
    src,
    tracks
  } = attributes;
  const isTemporaryVideo = !id && Object(external_gc_blob_["isBlobURL"])(src);
  const mediaUpload = Object(external_gc_data_["useSelect"])(select => select(external_gc_blockEditor_["store"]).getSettings().mediaUpload);
  Object(external_gc_element_["useEffect"])(() => {
    if (!id && Object(external_gc_blob_["isBlobURL"])(src)) {
      const file = Object(external_gc_blob_["getBlobByURL"])(src);

      if (file) {
        mediaUpload({
          filesList: [file],
          onFileChange: _ref2 => {
            let [{
              url
            }] = _ref2;
            setAttributes({
              src: url
            });
          },
          onError: message => {
            noticeOperations.createErrorNotice(message);
          },
          allowedTypes: video_edit_ALLOWED_MEDIA_TYPES
        });
      }
    }
  }, []);
  Object(external_gc_element_["useEffect"])(() => {
    // Placeholder may be rendered.
    if (videoPlayer.current) {
      videoPlayer.current.load();
    }
  }, [poster]);

  function onSelectVideo(media) {
    var _media$image, _media$image2;

    if (!media || !media.url) {
      // in this case there was an error
      // previous attributes should be removed
      // because they may be temporary blob urls
      setAttributes({
        src: undefined,
        id: undefined,
        poster: undefined
      });
      return;
    } // sets the block's attribute and updates the edit component from the
    // selected media


    setAttributes({
      src: media.url,
      id: media.id,
      poster: ((_media$image = media.image) === null || _media$image === void 0 ? void 0 : _media$image.src) !== media.icon ? (_media$image2 = media.image) === null || _media$image2 === void 0 ? void 0 : _media$image2.src : undefined
    });
  }

  function onSelectURL(newSrc) {
    if (newSrc !== src) {
      // Check if there's an embed block that handles this URL.
      const embedBlock = createUpgradedEmbedBlock({
        attributes: {
          url: newSrc
        }
      });

      if (undefined !== embedBlock) {
        onReplace(embedBlock);
        return;
      }

      setAttributes({
        src: newSrc,
        id: undefined,
        poster: undefined
      });
    }
  }

  function onUploadError(message) {
    noticeOperations.removeAllNotices();
    noticeOperations.createErrorNotice(message);
  }

  const classes = classnames_default()(className, {
    'is-transient': isTemporaryVideo
  });
  const blockProps = Object(external_gc_blockEditor_["useBlockProps"])({
    className: classes
  });

  if (!src) {
    return Object(external_gc_element_["createElement"])("div", blockProps, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["MediaPlaceholder"], {
      icon: Object(external_gc_element_["createElement"])(external_gc_blockEditor_["BlockIcon"], {
        icon: library_video
      }),
      onSelect: onSelectVideo,
      onSelectURL: onSelectURL,
      accept: "video/*",
      allowedTypes: video_edit_ALLOWED_MEDIA_TYPES,
      value: attributes,
      notices: noticeUI,
      onError: onUploadError
    }));
  }

  function onSelectPoster(image) {
    setAttributes({
      poster: image.url
    });
  }

  function onRemovePoster() {
    setAttributes({
      poster: undefined
    }); // Move focus back to the Media Upload button.

    posterImageButton.current.focus();
  }

  const videoPosterDescription = `video-block__poster-image-description-${instanceId}`;
  return Object(external_gc_element_["createElement"])(external_gc_element_["Fragment"], null, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["BlockControls"], {
    group: "block"
  }, Object(external_gc_element_["createElement"])(TracksEditor, {
    tracks: tracks,
    onChange: newTracks => {
      setAttributes({
        tracks: newTracks
      });
    }
  })), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["BlockControls"], {
    group: "other"
  }, Object(external_gc_element_["createElement"])(external_gc_blockEditor_["MediaReplaceFlow"], {
    mediaId: id,
    mediaURL: src,
    allowedTypes: video_edit_ALLOWED_MEDIA_TYPES,
    accept: "video/*",
    onSelect: onSelectVideo,
    onSelectURL: onSelectURL,
    onError: onUploadError
  })), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["InspectorControls"], null, Object(external_gc_element_["createElement"])(external_gc_components_["PanelBody"], {
    title: Object(external_gc_i18n_["__"])('视频设置')
  }, Object(external_gc_element_["createElement"])(edit_common_settings, {
    setAttributes: setAttributes,
    attributes: attributes
  }), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["MediaUploadCheck"], null, Object(external_gc_element_["createElement"])(external_gc_components_["BaseControl"], {
    className: "editor-video-poster-control"
  }, Object(external_gc_element_["createElement"])(external_gc_components_["BaseControl"].VisualLabel, null, Object(external_gc_i18n_["__"])('海报图片')), Object(external_gc_element_["createElement"])(external_gc_blockEditor_["MediaUpload"], {
    title: Object(external_gc_i18n_["__"])('选择海报图片'),
    onSelect: onSelectPoster,
    allowedTypes: VIDEO_POSTER_ALLOWED_MEDIA_TYPES,
    render: _ref3 => {
      let {
        open
      } = _ref3;
      return Object(external_gc_element_["createElement"])(external_gc_components_["Button"], {
        variant: "primary",
        onClick: open,
        ref: posterImageButton,
        "aria-describedby": videoPosterDescription
      }, !poster ? Object(external_gc_i18n_["__"])('选择') : Object(external_gc_i18n_["__"])('替换'));
    }
  }), Object(external_gc_element_["createElement"])("p", {
    id: videoPosterDescription,
    hidden: true
  }, poster ? Object(external_gc_i18n_["sprintf"])(
  /* translators: %s: poster image URL. */
  Object(external_gc_i18n_["__"])('当前海报图片的URL为%s'), poster) : Object(external_gc_i18n_["__"])('当前没有选择海报图片')), !!poster && Object(external_gc_element_["createElement"])(external_gc_components_["Button"], {
    onClick: onRemovePoster,
    variant: "tertiary"
  }, Object(external_gc_i18n_["__"])('移除')))))), Object(external_gc_element_["createElement"])("figure", blockProps, Object(external_gc_element_["createElement"])(external_gc_components_["Disabled"], {
    isDisabled: !isSelected
  }, Object(external_gc_element_["createElement"])("video", {
    controls: controls,
    poster: poster,
    src: src,
    ref: videoPlayer
  }, Object(external_gc_element_["createElement"])(Tracks, {
    tracks: tracks
  }))), isTemporaryVideo && Object(external_gc_element_["createElement"])(external_gc_components_["Spinner"], null), (!external_gc_blockEditor_["RichText"].isEmpty(caption) || isSelected) && Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"], {
    tagName: "figcaption",
    "aria-label": Object(external_gc_i18n_["__"])('视频说明文字'),
    placeholder: Object(external_gc_i18n_["__"])('添加说明文字'),
    value: caption,
    onChange: value => setAttributes({
      caption: value
    }),
    inlineToolbar: true,
    __unstableOnSplitAtEnd: () => insertBlocksAfter(Object(external_gc_blocks_["createBlock"])('core/paragraph'))
  })));
}

/* harmony default export */ var video_edit = (Object(external_gc_components_["withNotices"])(VideoEdit));

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/video/save.js


/**
 * GeChiUI dependencies
 */

/**
 * Internal dependencies
 */


function video_save_save(_ref) {
  let {
    attributes
  } = _ref;
  const {
    autoplay,
    caption,
    controls,
    loop,
    muted,
    poster,
    preload,
    src,
    playsInline,
    tracks
  } = attributes;
  return Object(external_gc_element_["createElement"])("figure", external_gc_blockEditor_["useBlockProps"].save(), src && Object(external_gc_element_["createElement"])("video", {
    autoPlay: autoplay,
    controls: controls,
    loop: loop,
    muted: muted,
    poster: poster,
    preload: preload !== 'metadata' ? preload : undefined,
    src: src,
    playsInline: playsInline
  }, Object(external_gc_element_["createElement"])(Tracks, {
    tracks: tracks
  })), !external_gc_blockEditor_["RichText"].isEmpty(caption) && Object(external_gc_element_["createElement"])(external_gc_blockEditor_["RichText"].Content, {
    tagName: "figcaption",
    value: caption
  }));
}

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/video/transforms.js
/**
 * GeChiUI dependencies
 */


const video_transforms_transforms = {
  from: [{
    type: 'files',

    isMatch(files) {
      return files.length === 1 && files[0].type.indexOf('video/') === 0;
    },

    transform(files) {
      const file = files[0]; // We don't need to upload the media directly here
      // It's already done as part of the `componentDidMount`
      // in the video block

      const block = Object(external_gc_blocks_["createBlock"])('core/video', {
        src: Object(external_gc_blob_["createBlobURL"])(file)
      });
      return block;
    }

  }, {
    type: 'shortcode',
    tag: 'video',
    attributes: {
      src: {
        type: 'string',
        shortcode: _ref => {
          let {
            named: {
              src,
              mp4,
              m4v,
              webm,
              ogv,
              flv
            }
          } = _ref;
          return src || mp4 || m4v || webm || ogv || flv;
        }
      },
      poster: {
        type: 'string',
        shortcode: _ref2 => {
          let {
            named: {
              poster
            }
          } = _ref2;
          return poster;
        }
      },
      loop: {
        type: 'string',
        shortcode: _ref3 => {
          let {
            named: {
              loop
            }
          } = _ref3;
          return loop;
        }
      },
      autoplay: {
        type: 'string',
        shortcode: _ref4 => {
          let {
            named: {
              autoplay
            }
          } = _ref4;
          return autoplay;
        }
      },
      preload: {
        type: 'string',
        shortcode: _ref5 => {
          let {
            named: {
              preload
            }
          } = _ref5;
          return preload;
        }
      }
    }
  }]
};
/* harmony default export */ var video_transforms = (video_transforms_transforms);

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/video/index.js
/**
 * GeChiUI dependencies
 */


/**
 * Internal dependencies
 */


const video_metadata = {
  apiVersion: 2,
  name: "core/video",
  title: "视频",
  category: "media",
  description: "嵌入您媒体库中的视频或上传新的视频。",
  keywords: ["movie"],
  textdomain: "default",
  attributes: {
    autoplay: {
      type: "boolean",
      source: "attribute",
      selector: "video",
      attribute: "autoplay"
    },
    caption: {
      type: "string",
      source: "html",
      selector: "figcaption"
    },
    controls: {
      type: "boolean",
      source: "attribute",
      selector: "video",
      attribute: "controls",
      "default": true
    },
    id: {
      type: "number"
    },
    loop: {
      type: "boolean",
      source: "attribute",
      selector: "video",
      attribute: "loop"
    },
    muted: {
      type: "boolean",
      source: "attribute",
      selector: "video",
      attribute: "muted"
    },
    poster: {
      type: "string",
      source: "attribute",
      selector: "video",
      attribute: "poster"
    },
    preload: {
      type: "string",
      source: "attribute",
      selector: "video",
      attribute: "preload",
      "default": "metadata"
    },
    src: {
      type: "string",
      source: "attribute",
      selector: "video",
      attribute: "src"
    },
    playsInline: {
      type: "boolean",
      source: "attribute",
      selector: "video",
      attribute: "playsinline"
    },
    tracks: {
      type: "array",
      items: {
        type: "object"
      },
      "default": []
    }
  },
  supports: {
    anchor: true,
    align: true
  },
  editorStyle: "gc-block-video-editor",
  style: "gc-block-video"
};


const {
  name: video_name
} = video_metadata;

const video_settings = {
  icon: library_video,
  example: {
    attributes: {
      src: 'https://upload.wikimedia.org/wikipedia/commons/c/ca/Wood_thrush_in_Central_Park_switch_sides_%2816510%29.webm',
      // translators: Caption accompanying a video of the wood thrush singing, which serves as an example for the Video block.
      caption: Object(external_gc_i18n_["__"])('在纽约市中央公园唱歌的木鸫。')
    }
  },
  transforms: video_transforms,
  edit: video_edit,
  save: video_save_save
};

// CONCATENATED MODULE: ./node_modules/@gechiui/block-library/build-module/index.js
/**
 * GeChiUI dependencies
 */

/**
 * Internal dependencies
 */













































































 // import * as tableOfContents from './table-of-contents';







/**
 * Function to register an individual block.
 *
 * @param {Object} block The block to be registered.
 *
 */

const registerBlock = block => {
  if (!block) {
    return;
  }

  const {
    metadata,
    settings,
    name
  } = block;
  Object(external_gc_blocks_["registerBlockType"])({
    name,
    ...metadata
  }, settings);
};
/**
 * Function to get all the core blocks in an array.
 *
 * @example
 * ```js
 * import { __experimentalGetCoreBlocks } from '@gechiui/block-library';
 *
 * const coreBlocks = __experimentalGetCoreBlocks();
 * ```
 */


const __experimentalGetCoreBlocks = () => [// Common blocks are grouped at the top to prioritize their display
// in various contexts — like the inserter and auto-complete components.
build_module_paragraph_namespaceObject, build_module_image_namespaceObject, build_module_heading_namespaceObject, build_module_gallery_namespaceObject, build_module_list_namespaceObject, build_module_quote_namespaceObject, // Register all remaining core blocks.
archives_namespaceObject, build_module_audio_namespaceObject, button_namespaceObject, build_module_buttons_namespaceObject, build_module_calendar_namespaceObject, categories_namespaceObject, window.gc && window.gc.oldEditor ? freeform_namespaceObject : null, // Only add the classic block in GC Context
code_namespaceObject, build_module_column_namespaceObject, build_module_columns_namespaceObject, build_module_cover_namespaceObject, embed_namespaceObject, build_module_file_namespaceObject, group_namespaceObject, build_module_html_namespaceObject, latest_comments_namespaceObject, latest_posts_namespaceObject, media_text_namespaceObject, missing_namespaceObject, build_module_more_namespaceObject, nextpage_namespaceObject, page_list_namespaceObject, pattern_namespaceObject, build_module_preformatted_namespaceObject, build_module_pullquote_namespaceObject, block_namespaceObject, build_module_rss_namespaceObject, search_namespaceObject, build_module_separator_namespaceObject, build_module_shortcode_namespaceObject, social_link_namespaceObject, social_links_namespaceObject, spacer_namespaceObject, build_module_table_namespaceObject, // tableOfContents,
tag_cloud_namespaceObject, text_columns_namespaceObject, build_module_verse_namespaceObject, build_module_video_namespaceObject, // theme blocks
build_module_navigation_namespaceObject, navigation_link_namespaceObject, navigation_submenu_namespaceObject, build_module_site_logo_namespaceObject, site_title_namespaceObject, site_tagline_namespaceObject, query_namespaceObject, template_part_namespaceObject, build_module_post_title_namespaceObject, build_module_post_excerpt_namespaceObject, build_module_post_featured_image_namespaceObject, build_module_post_content_namespaceObject, build_module_post_author_namespaceObject, build_module_post_date_namespaceObject, post_terms_namespaceObject, post_navigation_link_namespaceObject, post_template_namespaceObject, build_module_query_pagination_namespaceObject, build_module_query_pagination_next_namespaceObject, build_module_query_pagination_numbers_namespaceObject, build_module_query_pagination_previous_namespaceObject, build_module_post_comments_namespaceObject, loginout_namespaceObject, build_module_term_description_namespaceObject, query_title_namespaceObject];
/**
 * Function to register core blocks provided by the block editor.
 *
 * @param {Array} blocks An optional array of the core blocks being registered.
 *
 * @example
 * ```js
 * import { registerCoreBlocks } from '@gechiui/block-library';
 *
 * registerCoreBlocks();
 * ```
 */

const registerCoreBlocks = function () {
  let blocks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : __experimentalGetCoreBlocks();
  blocks.forEach(registerBlock);
  Object(external_gc_blocks_["setDefaultBlockName"])(paragraph_name);

  if (window.gc && window.gc.oldEditor) {
    Object(external_gc_blocks_["setFreeformContentHandlerName"])(freeform_name);
  }

  Object(external_gc_blocks_["setUnregisteredTypeHandlerName"])(missing_name);
  Object(external_gc_blocks_["setGroupingBlockName"])(group_name);
};
/**
 * Function to register experimental core blocks depending on editor settings.
 *
 * @param {boolean} enableFSEBlocks Whether to enable the full site editing blocks.
 * @example
 * ```js
 * import { __experimentalRegisterExperimentalCoreBlocks } from '@gechiui/block-library';
 *
 * __experimentalRegisterExperimentalCoreBlocks( settings );
 * ```
 */

const __experimentalRegisterExperimentalCoreBlocks =  false ? undefined : undefined;


/***/ }),

/***/ "3BOu":
/***/ (function(module, exports) {

(function() { module.exports = window["gc"]["viewport"]; }());

/***/ }),

/***/ "4eJC":
/***/ (function(module, exports, __webpack_require__) {

/**
 * Memize options object.
 *
 * @typedef MemizeOptions
 *
 * @property {number} [maxSize] Maximum size of the cache.
 */

/**
 * Internal cache entry.
 *
 * @typedef MemizeCacheNode
 *
 * @property {?MemizeCacheNode|undefined} [prev] Previous node.
 * @property {?MemizeCacheNode|undefined} [next] Next node.
 * @property {Array<*>}                   args   Function arguments for cache
 *                                               entry.
 * @property {*}                          val    Function result.
 */

/**
 * Properties of the enhanced function for controlling cache.
 *
 * @typedef MemizeMemoizedFunction
 *
 * @property {()=>void} clear Clear the cache.
 */

/**
 * Accepts a function to be memoized, and returns a new memoized function, with
 * optional options.
 *
 * @template {Function} F
 *
 * @param {F}             fn        Function to memoize.
 * @param {MemizeOptions} [options] Options object.
 *
 * @return {F & MemizeMemoizedFunction} Memoized function.
 */
function memize( fn, options ) {
	var size = 0;

	/** @type {?MemizeCacheNode|undefined} */
	var head;

	/** @type {?MemizeCacheNode|undefined} */
	var tail;

	options = options || {};

	function memoized( /* ...args */ ) {
		var node = head,
			len = arguments.length,
			args, i;

		searchCache: while ( node ) {
			// Perform a shallow equality test to confirm that whether the node
			// under test is a candidate for the arguments passed. Two arrays
			// are shallowly equal if their length matches and each entry is
			// strictly equal between the two sets. Avoid abstracting to a
			// function which could incur an arguments leaking deoptimization.

			// Check whether node arguments match arguments length
			if ( node.args.length !== arguments.length ) {
				node = node.next;
				continue;
			}

			// Check whether node arguments match arguments values
			for ( i = 0; i < len; i++ ) {
				if ( node.args[ i ] !== arguments[ i ] ) {
					node = node.next;
					continue searchCache;
				}
			}

			// At this point we can assume we've found a match

			// Surface matched node to head if not already
			if ( node !== head ) {
				// As tail, shift to previous. Must only shift if not also
				// head, since if both head and tail, there is no previous.
				if ( node === tail ) {
					tail = node.prev;
				}

				// Adjust siblings to point to each other. If node was tail,
				// this also handles new tail's empty `next` assignment.
				/** @type {MemizeCacheNode} */ ( node.prev ).next = node.next;
				if ( node.next ) {
					node.next.prev = node.prev;
				}

				node.next = head;
				node.prev = null;
				/** @type {MemizeCacheNode} */ ( head ).prev = node;
				head = node;
			}

			// Return immediately
			return node.val;
		}

		// No cached value found. Continue to insertion phase:

		// Create a copy of arguments (avoid leaking deoptimization)
		args = new Array( len );
		for ( i = 0; i < len; i++ ) {
			args[ i ] = arguments[ i ];
		}

		node = {
			args: args,

			// Generate the result from original function
			val: fn.apply( null, args ),
		};

		// Don't need to check whether node is already head, since it would
		// have been returned above already if it was

		// Shift existing head down list
		if ( head ) {
			head.prev = node;
			node.next = head;
		} else {
			// If no head, follows that there's no tail (at initial or reset)
			tail = node;
		}

		// Trim tail if we're reached max size and are pending cache insertion
		if ( size === /** @type {MemizeOptions} */ ( options ).maxSize ) {
			tail = /** @type {MemizeCacheNode} */ ( tail ).prev;
			/** @type {MemizeCacheNode} */ ( tail ).next = null;
		} else {
			size++;
		}

		head = node;

		return node.val;
	}

	memoized.clear = function() {
		head = null;
		tail = null;
		size = 0;
	};

	if ( false ) {}

	// Ignore reason: There's not a clear solution to create an intersection of
	// the function with additional properties, where the goal is to retain the
	// function signature of the incoming argument and add control properties
	// on the return value.

	// @ts-ignore
	return memoized;
}

module.exports = memize;


/***/ }),

/***/ "6cHw":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _gechiui_element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("ewfG");
/* harmony import */ var _gechiui_element__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_gechiui_element__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("Gz8V");
/* harmony import */ var _gechiui_primitives__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__);


/**
 * GeChiUI dependencies
 */

const search = Object(_gechiui_element__WEBPACK_IMPORTED_MODULE_0__["createElement"])(_gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, Object(_gechiui_element__WEBPACK_IMPORTED_MODULE_0__["createElement"])(_gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__["Path"], {
  d: "M13.5 6C10.5 6 8 8.5 8 11.5c0 1.1.3 2.1.9 3l-3.4 3 1 1.1 3.4-2.9c1 .9 2.2 1.4 3.6 1.4 3 0 5.5-2.5 5.5-5.5C19 8.5 16.5 6 13.5 6zm0 9.5c-2.2 0-4-1.8-4-4s1.8-4 4-4 4 1.8 4 4-1.8 4-4 4z"
}));
/* harmony default export */ __webpack_exports__["a"] = (search);


/***/ }),

/***/ "7JoZ":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: external ["gc","element"]
var external_gc_element_ = __webpack_require__("ewfG");

// EXTERNAL MODULE: external ["gc","primitives"]
var external_gc_primitives_ = __webpack_require__("Gz8V");

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/pencil.js


/**
 * GeChiUI dependencies
 */

const pencil = Object(external_gc_element_["createElement"])(external_gc_primitives_["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, Object(external_gc_element_["createElement"])(external_gc_primitives_["Path"], {
  d: "M20.1 5.1L16.9 2 6.2 12.7l-1.3 4.4 4.5-1.3L20.1 5.1zM4 20.8h8v-1.5H4v1.5z"
}));
/* harmony default export */ var library_pencil = (pencil);

// CONCATENATED MODULE: ./node_modules/@gechiui/icons/build-module/library/edit.js
/**
 * Internal dependencies
 */

/* harmony default export */ var edit = __webpack_exports__["a"] = (library_pencil);


/***/ }),

/***/ "8mya":
/***/ (function(module, exports) {

(function() { module.exports = window["gc"]["blob"]; }());

/***/ }),

/***/ "8pBv":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _gechiui_element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("ewfG");
/* harmony import */ var _gechiui_element__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_gechiui_element__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("Gz8V");
/* harmony import */ var _gechiui_primitives__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__);


/**
 * GeChiUI dependencies
 */

const symbolFilled = Object(_gechiui_element__WEBPACK_IMPORTED_MODULE_0__["createElement"])(_gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, Object(_gechiui_element__WEBPACK_IMPORTED_MODULE_0__["createElement"])(_gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__["Path"], {
  d: "M21.3 10.8l-5.6-5.6c-.7-.7-1.8-.7-2.5 0l-5.6 5.6c-.7.7-.7 1.8 0 2.5l5.6 5.6c.3.3.8.5 1.2.5s.9-.2 1.2-.5l5.6-5.6c.8-.7.8-1.9.1-2.5zm-17.6 1L10 5.5l-1-1-6.3 6.3c-.7.7-.7 1.8 0 2.5L9 19.5l1.1-1.1-6.3-6.3c-.2 0-.2-.2-.1-.3z"
}));
/* harmony default export */ __webpack_exports__["a"] = (symbolFilled);


/***/ }),

/***/ "9B20":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _gechiui_element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("ewfG");
/* harmony import */ var _gechiui_element__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_gechiui_element__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("Gz8V");
/* harmony import */ var _gechiui_primitives__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__);


/**
 * GeChiUI dependencies
 */

const header = Object(_gechiui_element__WEBPACK_IMPORTED_MODULE_0__["createElement"])(_gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, Object(_gechiui_element__WEBPACK_IMPORTED_MODULE_0__["createElement"])(_gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__["Path"], {
  d: "M18.5 10.5H10v8h8a.5.5 0 00.5-.5v-7.5zm-10 0h-3V18a.5.5 0 00.5.5h2.5v-8zM6 4h12a2 2 0 012 2v12a2 2 0 01-2 2H6a2 2 0 01-2-2V6a2 2 0 012-2z"
}));
/* harmony default export */ __webpack_exports__["a"] = (header);


/***/ }),

/***/ "A/WM":
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
  Copyright (c) 2018 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
/* global define */

(function () {
	'use strict';

	var classNames = (function () {
		// don't inherit from Object so we can skip hasOwnProperty check later
		// http://stackoverflow.com/questions/15518328/creating-js-object-with-object-createnull#answer-21079232
		function StorageObject() {}
		StorageObject.prototype = Object.create(null);

		function _parseArray (resultSet, array) {
			var length = array.length;

			for (var i = 0; i < length; ++i) {
				_parse(resultSet, array[i]);
			}
		}

		var hasOwn = {}.hasOwnProperty;

		function _parseNumber (resultSet, num) {
			resultSet[num] = true;
		}

		function _parseObject (resultSet, object) {
			if (object.toString === Object.prototype.toString) {
				for (var k in object) {
					if (hasOwn.call(object, k)) {
						// set value to false instead of deleting it to avoid changing object structure
						// https://www.smashingmagazine.com/2012/11/writing-fast-memory-efficient-javascript/#de-referencing-misconceptions
						resultSet[k] = !!object[k];
					}
				}
			} else {
				resultSet[object.toString()] = true;
			}
		}

		var SPACE = /\s+/;
		function _parseString (resultSet, str) {
			var array = str.split(SPACE);
			var length = array.length;

			for (var i = 0; i < length; ++i) {
				resultSet[array[i]] = true;
			}
		}

		function _parse (resultSet, arg) {
			if (!arg) return;
			var argType = typeof arg;

			// 'foo bar'
			if (argType === 'string') {
				_parseString(resultSet, arg);

			// ['foo', 'bar', ...]
			} else if (Array.isArray(arg)) {
				_parseArray(resultSet, arg);

			// { 'foo': true, ... }
			} else if (argType === 'object') {
				_parseObject(resultSet, arg);

			// '130'
			} else if (argType === 'number') {
				_parseNumber(resultSet, arg);
			}
		}

		function _classNames () {
			// don't leak arguments
			// https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#32-leaking-arguments
			var len = arguments.length;
			var args = Array(len);
			for (var i = 0; i < len; i++) {
				args[i] = arguments[i];
			}

			var classSet = new StorageObject();
			_parseArray(classSet, args);

			var list = [];

			for (var k in classSet) {
				if (classSet[k]) {
					list.push(k)
				}
			}

			return list.join(' ');
		}

		return _classNames;
	})();

	if ( true && module.exports) {
		classNames.default = classNames;
		module.exports = classNames;
	} else if (true) {
		// register as 'classnames', consistent with npm package name
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {
			return classNames;
		}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {}
}());


/***/ }),

/***/ "ATjk":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _gechiui_element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("ewfG");
/* harmony import */ var _gechiui_element__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_gechiui_element__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("Gz8V");
/* harmony import */ var _gechiui_primitives__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__);


/**
 * GeChiUI dependencies
 */

const media = Object(_gechiui_element__WEBPACK_IMPORTED_MODULE_0__["createElement"])(_gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, Object(_gechiui_element__WEBPACK_IMPORTED_MODULE_0__["createElement"])(_gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__["Path"], {
  d: "M18.7 3H5.3C4 3 3 4 3 5.3v13.4C3 20 4 21 5.3 21h13.4c1.3 0 2.3-1 2.3-2.3V5.3C21 4 20 3 18.7 3zm.8 15.7c0 .4-.4.8-.8.8H5.3c-.4 0-.8-.4-.8-.8V5.3c0-.4.4-.8.8-.8h13.4c.4 0 .8.4.8.8v13.4zM10 15l5-3-5-3v6z"
}));
/* harmony default export */ __webpack_exports__["a"] = (media);


/***/ }),

/***/ "Bimd":
/***/ (function(module, exports) {

(function() { module.exports = window["gc"]["date"]; }());

/***/ }),

/***/ "CBCh":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _gechiui_element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("ewfG");
/* harmony import */ var _gechiui_element__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_gechiui_element__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("Gz8V");
/* harmony import */ var _gechiui_primitives__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__);


/**
 * GeChiUI dependencies
 */

const group = Object(_gechiui_element__WEBPACK_IMPORTED_MODULE_0__["createElement"])(_gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__["SVG"], {
  viewBox: "0 0 24 24",
  xmlns: "http://www.w3.org/2000/svg"
}, Object(_gechiui_element__WEBPACK_IMPORTED_MODULE_0__["createElement"])(_gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__["Path"], {
  d: "M18 4h-7c-1.1 0-2 .9-2 2v3H6c-1.1 0-2 .9-2 2v7c0 1.1.9 2 2 2h7c1.1 0 2-.9 2-2v-3h3c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm-4.5 14c0 .3-.2.5-.5.5H6c-.3 0-.5-.2-.5-.5v-7c0-.3.2-.5.5-.5h3V13c0 1.1.9 2 2 2h2.5v3zm0-4.5H11c-.3 0-.5-.2-.5-.5v-2.5H13c.3 0 .5.2.5.5v2.5zm5-.5c0 .3-.2.5-.5.5h-3V11c0-1.1-.9-2-2-2h-2.5V6c0-.3.2-.5.5-.5h7c.3 0 .5.2.5.5v7z"
}));
/* harmony default export */ __webpack_exports__["a"] = (group);


/***/ }),

/***/ "Ck0e":
/***/ (function(module, exports) {

(function() { module.exports = window["gc"]["autop"]; }());

/***/ }),

/***/ "D40o":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _gechiui_element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("ewfG");
/* harmony import */ var _gechiui_element__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_gechiui_element__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("Gz8V");
/* harmony import */ var _gechiui_primitives__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__);


/**
 * GeChiUI dependencies
 */

const alignCenter = Object(_gechiui_element__WEBPACK_IMPORTED_MODULE_0__["createElement"])(_gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, Object(_gechiui_element__WEBPACK_IMPORTED_MODULE_0__["createElement"])(_gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__["Path"], {
  d: "M16.4 4.2H7.6v1.5h8.9V4.2zM4 11.2v1.5h16v-1.5H4zm3.6 8.6h8.9v-1.5H7.6v1.5z"
}));
/* harmony default export */ __webpack_exports__["a"] = (alignCenter);


/***/ }),

/***/ "DUvu":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _gechiui_element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("ewfG");
/* harmony import */ var _gechiui_element__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_gechiui_element__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("Gz8V");
/* harmony import */ var _gechiui_primitives__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__);


/**
 * GeChiUI dependencies
 */

const symbol = Object(_gechiui_element__WEBPACK_IMPORTED_MODULE_0__["createElement"])(_gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, Object(_gechiui_element__WEBPACK_IMPORTED_MODULE_0__["createElement"])(_gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__["Path"], {
  d: "M21.3 10.8l-5.6-5.6c-.7-.7-1.8-.7-2.5 0l-5.6 5.6c-.7.7-.7 1.8 0 2.5l5.6 5.6c.3.3.8.5 1.2.5s.9-.2 1.2-.5l5.6-5.6c.8-.7.8-1.9.1-2.5zm-1 1.4l-5.6 5.6c-.1.1-.3.1-.4 0l-5.6-5.6c-.1-.1-.1-.3 0-.4l5.6-5.6s.1-.1.2-.1.1 0 .2.1l5.6 5.6c.1.1.1.3 0 .4zm-16.6-.4L10 5.5l-1-1-6.3 6.3c-.7.7-.7 1.8 0 2.5L9 19.5l1.1-1.1-6.3-6.3c-.2 0-.2-.2-.1-.3z"
}));
/* harmony default export */ __webpack_exports__["a"] = (symbol);


/***/ }),

/***/ "EXvS":
/***/ (function(module, exports) {

(function() { module.exports = window["gc"]["dom"]; }());

/***/ }),

/***/ "FEKF":
/***/ (function(module, exports, __webpack_require__) {

/*! Fast Average Color | © 2019 Denis Seleznev | MIT License | https://github.com/hcodes/fast-average-color/ */
(function (global, factory) {
	 true ? module.exports = factory() :
	undefined;
}(this, (function () { 'use strict';

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArrayLimit(arr, i) {
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance");
}

var FastAverageColor =
/*#__PURE__*/
function () {
  function FastAverageColor() {
    _classCallCheck(this, FastAverageColor);
  }

  _createClass(FastAverageColor, [{
    key: "getColorAsync",

    /**
     * Get asynchronously the average color from not loaded image.
     *
     * @param {HTMLImageElement} resource
     * @param {Function} callback
     * @param {Object|null} [options]
     * @param {Array}  [options.defaultColor=[255, 255, 255, 255]]
     * @param {*}      [options.data]
     * @param {string} [options.mode="speed"] "precision" or "speed"
     * @param {string} [options.algorithm="sqrt"] "simple", "sqrt" or "dominant"
     * @param {number} [options.step=1]
     * @param {number} [options.left=0]
     * @param {number} [options.top=0]
     * @param {number} [options.width=width of resource]
     * @param {number} [options.height=height of resource]
     */
    value: function getColorAsync(resource, callback, options) {
      if (resource.complete) {
        callback.call(resource, this.getColor(resource, options), options && options.data);
      } else {
        this._bindImageEvents(resource, callback, options);
      }
    }
    /**
     * Get the average color from images, videos and canvas.
     *
     * @param {HTMLImageElement|HTMLVideoElement|HTMLCanvasElement} resource
     * @param {Object|null} [options]
     * @param {Array}  [options.defaultColor=[255, 255, 255, 255]]
     * @param {*}      [options.data]
     * @param {string} [options.mode="speed"] "precision" or "speed"
     * @param {string} [options.algorithm="sqrt"] "simple", "sqrt" or "dominant"
     * @param {number} [options.step=1]
     * @param {number} [options.left=0]
     * @param {number} [options.top=0]
     * @param {number} [options.width=width of resource]
     * @param {number} [options.height=height of resource]
     *
     * @returns {Object}
     */

  }, {
    key: "getColor",
    value: function getColor(resource, options) {
      options = options || {};

      var defaultColor = this._getDefaultColor(options),
          originalSize = this._getOriginalSize(resource),
          size = this._prepareSizeAndPosition(originalSize, options);

      var error = null,
          value = defaultColor;

      if (!size.srcWidth || !size.srcHeight || !size.destWidth || !size.destHeight) {
        return this._prepareResult(defaultColor, new Error('FastAverageColor: Incorrect sizes.'));
      }

      if (!this._ctx) {
        this._canvas = this._makeCanvas();
        this._ctx = this._canvas.getContext && this._canvas.getContext('2d');

        if (!this._ctx) {
          return this._prepareResult(defaultColor, new Error('FastAverageColor: Canvas Context 2D is not supported in this browser.'));
        }
      }

      this._canvas.width = size.destWidth;
      this._canvas.height = size.destHeight;

      try {
        this._ctx.clearRect(0, 0, size.destWidth, size.destHeight);

        this._ctx.drawImage(resource, size.srcLeft, size.srcTop, size.srcWidth, size.srcHeight, 0, 0, size.destWidth, size.destHeight);

        var bitmapData = this._ctx.getImageData(0, 0, size.destWidth, size.destHeight).data;

        value = this.getColorFromArray4(bitmapData, options);
      } catch (e) {
        // Security error, CORS
        // https://developer.mozilla.org/en/docs/Web/HTML/CORS_enabled_image
        error = e;
      }

      return this._prepareResult(value, error);
    }
    /**
     * Get the average color from a array when 1 pixel is 4 bytes.
     *
     * @param {Array|Uint8Array} arr
     * @param {Object} [options]
     * @param {string} [options.algorithm="sqrt"] "simple", "sqrt" or "dominant"
     * @param {Array}  [options.defaultColor=[255, 255, 255, 255]]
     * @param {number} [options.step=1]
     *
     * @returns {Array} [red (0-255), green (0-255), blue (0-255), alpha (0-255)]
     */

  }, {
    key: "getColorFromArray4",
    value: function getColorFromArray4(arr, options) {
      options = options || {};
      var bytesPerPixel = 4,
          arrLength = arr.length;

      if (arrLength < bytesPerPixel) {
        return this._getDefaultColor(options);
      }

      var len = arrLength - arrLength % bytesPerPixel,
          preparedStep = (options.step || 1) * bytesPerPixel,
          algorithm = '_' + (options.algorithm || 'sqrt') + 'Algorithm';

      if (typeof this[algorithm] !== 'function') {
        throw new Error("FastAverageColor: ".concat(options.algorithm, " is unknown algorithm."));
      }

      return this[algorithm](arr, len, preparedStep);
    }
    /**
     * Destroy the instance.
     */

  }, {
    key: "destroy",
    value: function destroy() {
      delete this._canvas;
      delete this._ctx;
    }
  }, {
    key: "_getDefaultColor",
    value: function _getDefaultColor(options) {
      return this._getOption(options, 'defaultColor', [255, 255, 255, 255]);
    }
  }, {
    key: "_getOption",
    value: function _getOption(options, name, defaultValue) {
      return typeof options[name] === 'undefined' ? defaultValue : options[name];
    }
  }, {
    key: "_prepareSizeAndPosition",
    value: function _prepareSizeAndPosition(originalSize, options) {
      var srcLeft = this._getOption(options, 'left', 0),
          srcTop = this._getOption(options, 'top', 0),
          srcWidth = this._getOption(options, 'width', originalSize.width),
          srcHeight = this._getOption(options, 'height', originalSize.height),
          destWidth = srcWidth,
          destHeight = srcHeight;

      if (options.mode === 'precision') {
        return {
          srcLeft: srcLeft,
          srcTop: srcTop,
          srcWidth: srcWidth,
          srcHeight: srcHeight,
          destWidth: destWidth,
          destHeight: destHeight
        };
      }

      var maxSize = 100,
          minSize = 10;
      var factor;

      if (srcWidth > srcHeight) {
        factor = srcWidth / srcHeight;
        destWidth = maxSize;
        destHeight = Math.round(destWidth / factor);
      } else {
        factor = srcHeight / srcWidth;
        destHeight = maxSize;
        destWidth = Math.round(destHeight / factor);
      }

      if (destWidth > srcWidth || destHeight > srcHeight || destWidth < minSize || destHeight < minSize) {
        destWidth = srcWidth;
        destHeight = srcHeight;
      }

      return {
        srcLeft: srcLeft,
        srcTop: srcTop,
        srcWidth: srcWidth,
        srcHeight: srcHeight,
        destWidth: destWidth,
        destHeight: destHeight
      };
    }
  }, {
    key: "_simpleAlgorithm",
    value: function _simpleAlgorithm(arr, len, preparedStep) {
      var redTotal = 0,
          greenTotal = 0,
          blueTotal = 0,
          alphaTotal = 0,
          count = 0;

      for (var i = 0; i < len; i += preparedStep) {
        var alpha = arr[i + 3],
            red = arr[i] * alpha,
            green = arr[i + 1] * alpha,
            blue = arr[i + 2] * alpha;
        redTotal += red;
        greenTotal += green;
        blueTotal += blue;
        alphaTotal += alpha;
        count++;
      }

      return alphaTotal ? [Math.round(redTotal / alphaTotal), Math.round(greenTotal / alphaTotal), Math.round(blueTotal / alphaTotal), Math.round(alphaTotal / count)] : [0, 0, 0, 0];
    }
  }, {
    key: "_sqrtAlgorithm",
    value: function _sqrtAlgorithm(arr, len, preparedStep) {
      var redTotal = 0,
          greenTotal = 0,
          blueTotal = 0,
          alphaTotal = 0,
          count = 0;

      for (var i = 0; i < len; i += preparedStep) {
        var red = arr[i],
            green = arr[i + 1],
            blue = arr[i + 2],
            alpha = arr[i + 3];
        redTotal += red * red * alpha;
        greenTotal += green * green * alpha;
        blueTotal += blue * blue * alpha;
        alphaTotal += alpha;
        count++;
      }

      return alphaTotal ? [Math.round(Math.sqrt(redTotal / alphaTotal)), Math.round(Math.sqrt(greenTotal / alphaTotal)), Math.round(Math.sqrt(blueTotal / alphaTotal)), Math.round(alphaTotal / count)] : [0, 0, 0, 0];
    }
  }, {
    key: "_dominantAlgorithm",
    value: function _dominantAlgorithm(arr, len, preparedStep) {
      var colorHash = {},
          divider = 24;

      for (var i = 0; i < len; i += preparedStep) {
        var red = arr[i],
            green = arr[i + 1],
            blue = arr[i + 2],
            alpha = arr[i + 3],
            key = Math.round(red / divider) + ',' + Math.round(green / divider) + ',' + Math.round(blue / divider);

        if (colorHash[key]) {
          colorHash[key] = [colorHash[key][0] + red * alpha, colorHash[key][1] + green * alpha, colorHash[key][2] + blue * alpha, colorHash[key][3] + alpha, colorHash[key][4] + 1];
        } else {
          colorHash[key] = [red * alpha, green * alpha, blue * alpha, alpha, 1];
        }
      }

      var buffer = Object.keys(colorHash).map(function (key) {
        return colorHash[key];
      }).sort(function (a, b) {
        var countA = a[4],
            countB = b[4];
        return countA > countB ? -1 : countA === countB ? 0 : 1;
      });

      var _buffer$ = _slicedToArray(buffer[0], 5),
          redTotal = _buffer$[0],
          greenTotal = _buffer$[1],
          blueTotal = _buffer$[2],
          alphaTotal = _buffer$[3],
          count = _buffer$[4];

      return alphaTotal ? [Math.round(redTotal / alphaTotal), Math.round(greenTotal / alphaTotal), Math.round(blueTotal / alphaTotal), Math.round(alphaTotal / count)] : [0, 0, 0, 0];
    }
  }, {
    key: "_bindImageEvents",
    value: function _bindImageEvents(resource, callback, options) {
      var _this = this;

      options = options || {};

      var data = options && options.data,
          defaultColor = this._getDefaultColor(options),
          onload = function onload() {
        unbindEvents();
        callback.call(resource, _this.getColor(resource, options), data);
      },
          onerror = function onerror() {
        unbindEvents();
        callback.call(resource, _this._prepareResult(defaultColor, new Error('Image error')), data);
      },
          onabort = function onabort() {
        unbindEvents();
        callback.call(resource, _this._prepareResult(defaultColor, new Error('Image abort')), data);
      },
          unbindEvents = function unbindEvents() {
        resource.removeEventListener('load', onload);
        resource.removeEventListener('error', onerror);
        resource.removeEventListener('abort', onabort);
      };

      resource.addEventListener('load', onload);
      resource.addEventListener('error', onerror);
      resource.addEventListener('abort', onabort);
    }
  }, {
    key: "_prepareResult",
    value: function _prepareResult(value, error) {
      var rgb = value.slice(0, 3),
          rgba = [].concat(rgb, value[3] / 255),
          isDark = this._isDark(value);

      return {
        error: error,
        value: value,
        rgb: 'rgb(' + rgb.join(',') + ')',
        rgba: 'rgba(' + rgba.join(',') + ')',
        hex: this._arrayToHex(rgb),
        hexa: this._arrayToHex(value),
        isDark: isDark,
        isLight: !isDark
      };
    }
  }, {
    key: "_getOriginalSize",
    value: function _getOriginalSize(resource) {
      if (resource instanceof HTMLImageElement) {
        return {
          width: resource.naturalWidth,
          height: resource.naturalHeight
        };
      }

      if (resource instanceof HTMLVideoElement) {
        return {
          width: resource.videoWidth,
          height: resource.videoHeight
        };
      }

      return {
        width: resource.width,
        height: resource.height
      };
    }
  }, {
    key: "_toHex",
    value: function _toHex(num) {
      var str = num.toString(16);
      return str.length === 1 ? '0' + str : str;
    }
  }, {
    key: "_arrayToHex",
    value: function _arrayToHex(arr) {
      return '#' + arr.map(this._toHex).join('');
    }
  }, {
    key: "_isDark",
    value: function _isDark(color) {
      // http://www.w3.org/TR/AERT#color-contrast
      var result = (color[0] * 299 + color[1] * 587 + color[2] * 114) / 1000;
      return result < 128;
    }
  }, {
    key: "_makeCanvas",
    value: function _makeCanvas() {
      return typeof window === 'undefined' ? new OffscreenCanvas(1, 1) : document.createElement('canvas');
    }
  }]);

  return FastAverageColor;
}();

return FastAverageColor;

})));


/***/ }),

/***/ "FFw/":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _gechiui_element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("ewfG");
/* harmony import */ var _gechiui_element__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_gechiui_element__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("Gz8V");
/* harmony import */ var _gechiui_primitives__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__);


/**
 * GeChiUI dependencies
 */

const grid = Object(_gechiui_element__WEBPACK_IMPORTED_MODULE_0__["createElement"])(_gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, Object(_gechiui_element__WEBPACK_IMPORTED_MODULE_0__["createElement"])(_gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__["Path"], {
  d: "M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-7.8 16.5H5c-.3 0-.5-.2-.5-.5v-6.2h6.8v6.7zm0-8.3H4.5V5c0-.3.2-.5.5-.5h6.2v6.7zm8.3 7.8c0 .3-.2.5-.5.5h-6.2v-6.8h6.8V19zm0-7.8h-6.8V4.5H19c.3 0 .5.2.5.5v6.2z",
  fillRule: "evenodd",
  clipRule: "evenodd"
}));
/* harmony default export */ __webpack_exports__["a"] = (grid);


/***/ }),

/***/ "FOZ3":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _gechiui_element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("ewfG");
/* harmony import */ var _gechiui_element__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_gechiui_element__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("Gz8V");
/* harmony import */ var _gechiui_primitives__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__);


/**
 * GeChiUI dependencies
 */

const linkOff = Object(_gechiui_element__WEBPACK_IMPORTED_MODULE_0__["createElement"])(_gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, Object(_gechiui_element__WEBPACK_IMPORTED_MODULE_0__["createElement"])(_gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__["Path"], {
  d: "M15.6 7.3h-.7l1.6-3.5-.9-.4-3.9 8.5H9v1.5h2l-1.3 2.8H8.4c-2 0-3.7-1.7-3.7-3.7s1.7-3.7 3.7-3.7H10V7.3H8.4c-2.9 0-5.2 2.3-5.2 5.2 0 2.9 2.3 5.2 5.2 5.2H9l-1.4 3.2.9.4 5.7-12.5h1.4c2 0 3.7 1.7 3.7 3.7s-1.7 3.7-3.7 3.7H14v1.5h1.6c2.9 0 5.2-2.3 5.2-5.2 0-2.9-2.4-5.2-5.2-5.2z"
}));
/* harmony default export */ __webpack_exports__["a"] = (linkOff);


/***/ }),

/***/ "Gz8V":
/***/ (function(module, exports) {

(function() { module.exports = window["gc"]["primitives"]; }());

/***/ }),

/***/ "IgLd":
/***/ (function(module, exports) {

(function() { module.exports = window["gc"]["data"]; }());

/***/ }),

/***/ "JWwu":
/***/ (function(module, exports) {

(function() { module.exports = window["gc"]["deprecated"]; }());

/***/ }),

/***/ "KvVw":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _gechiui_element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("ewfG");
/* harmony import */ var _gechiui_element__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_gechiui_element__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("Gz8V");
/* harmony import */ var _gechiui_primitives__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__);


/**
 * GeChiUI dependencies
 */

const chevronLeft = Object(_gechiui_element__WEBPACK_IMPORTED_MODULE_0__["createElement"])(_gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, Object(_gechiui_element__WEBPACK_IMPORTED_MODULE_0__["createElement"])(_gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__["Path"], {
  d: "M14.6 7l-1.2-1L8 12l5.4 6 1.2-1-4.6-5z"
}));
/* harmony default export */ __webpack_exports__["a"] = (chevronLeft);


/***/ }),

/***/ "LzsW":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _gechiui_element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("ewfG");
/* harmony import */ var _gechiui_element__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_gechiui_element__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("Gz8V");
/* harmony import */ var _gechiui_primitives__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__);


/**
 * GeChiUI dependencies
 */

const settings = Object(_gechiui_element__WEBPACK_IMPORTED_MODULE_0__["createElement"])(_gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, Object(_gechiui_element__WEBPACK_IMPORTED_MODULE_0__["createElement"])(_gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__["Path"], {
  d: "M14.5 13.8c-1.1 0-2.1.7-2.4 1.8H4V17h8.1c.3 1 1.3 1.8 2.4 1.8s2.1-.7 2.4-1.8H20v-1.5h-3.1c-.3-1-1.3-1.7-2.4-1.7zM11.9 7c-.3-1-1.3-1.8-2.4-1.8S7.4 6 7.1 7H4v1.5h3.1c.3 1 1.3 1.8 2.4 1.8s2.1-.7 2.4-1.8H20V7h-8.1z"
}));
/* harmony default export */ __webpack_exports__["a"] = (settings);


/***/ }),

/***/ "Mg0k":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _gechiui_element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("ewfG");
/* harmony import */ var _gechiui_element__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_gechiui_element__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("Gz8V");
/* harmony import */ var _gechiui_primitives__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__);


/**
 * GeChiUI dependencies
 */

const closeSmall = Object(_gechiui_element__WEBPACK_IMPORTED_MODULE_0__["createElement"])(_gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, Object(_gechiui_element__WEBPACK_IMPORTED_MODULE_0__["createElement"])(_gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__["Path"], {
  d: "M12 13.06l3.712 3.713 1.061-1.06L13.061 12l3.712-3.712-1.06-1.06L12 10.938 8.288 7.227l-1.061 1.06L10.939 12l-3.712 3.712 1.06 1.061L12 13.061z"
}));
/* harmony default export */ __webpack_exports__["a"] = (closeSmall);


/***/ }),

/***/ "NEvm":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _gechiui_element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("ewfG");
/* harmony import */ var _gechiui_element__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_gechiui_element__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("Gz8V");
/* harmony import */ var _gechiui_primitives__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__);


/**
 * GeChiUI dependencies
 */

const footer = Object(_gechiui_element__WEBPACK_IMPORTED_MODULE_0__["createElement"])(_gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, Object(_gechiui_element__WEBPACK_IMPORTED_MODULE_0__["createElement"])(_gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__["Path"], {
  fillRule: "evenodd",
  d: "M18 5.5h-8v8h8.5V6a.5.5 0 00-.5-.5zm-9.5 8h-3V6a.5.5 0 01.5-.5h2.5v8zM6 4h12a2 2 0 012 2v12a2 2 0 01-2 2H6a2 2 0 01-2-2V6a2 2 0 012-2z"
}));
/* harmony default export */ __webpack_exports__["a"] = (footer);


/***/ }),

/***/ "NQKH":
/***/ (function(module, exports) {

(function() { module.exports = window["gc"]["a11y"]; }());

/***/ }),

/***/ "NxuN":
/***/ (function(module, exports) {

(function() { module.exports = window["gc"]["coreData"]; }());

/***/ }),

/***/ "Ppya":
/***/ (function(module, exports) {

(function() { module.exports = window["gc"]["reusableBlocks"]; }());

/***/ }),

/***/ "QoGU":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _gechiui_element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("ewfG");
/* harmony import */ var _gechiui_element__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_gechiui_element__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("Gz8V");
/* harmony import */ var _gechiui_primitives__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__);


/**
 * GeChiUI dependencies
 */

const upload = Object(_gechiui_element__WEBPACK_IMPORTED_MODULE_0__["createElement"])(_gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, Object(_gechiui_element__WEBPACK_IMPORTED_MODULE_0__["createElement"])(_gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__["Path"], {
  d: "M18.5 15v3.5H13V6.7l4.5 4.1 1-1.1-6.2-5.8-5.8 5.8 1 1.1 4-4v11.7h-6V15H4v5h16v-5z"
}));
/* harmony default export */ __webpack_exports__["a"] = (upload);


/***/ }),

/***/ "TSYQ":
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
  Copyright (c) 2018 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
/* global define */

(function () {
	'use strict';

	var hasOwn = {}.hasOwnProperty;

	function classNames() {
		var classes = [];

		for (var i = 0; i < arguments.length; i++) {
			var arg = arguments[i];
			if (!arg) continue;

			var argType = typeof arg;

			if (argType === 'string' || argType === 'number') {
				classes.push(arg);
			} else if (Array.isArray(arg)) {
				if (arg.length) {
					var inner = classNames.apply(null, arg);
					if (inner) {
						classes.push(inner);
					}
				}
			} else if (argType === 'object') {
				if (arg.toString === Object.prototype.toString) {
					for (var key in arg) {
						if (hasOwn.call(arg, key) && arg[key]) {
							classes.push(key);
						}
					}
				} else {
					classes.push(arg.toString());
				}
			}
		}

		return classes.join(' ');
	}

	if ( true && module.exports) {
		classNames.default = classNames;
		module.exports = classNames;
	} else if (true) {
		// register as 'classnames', consistent with npm package name
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {
			return classNames;
		}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {}
}());


/***/ }),

/***/ "Tv9K":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _gechiui_element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("ewfG");
/* harmony import */ var _gechiui_element__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_gechiui_element__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("Gz8V");
/* harmony import */ var _gechiui_primitives__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__);


/**
 * GeChiUI dependencies
 */

const check = Object(_gechiui_element__WEBPACK_IMPORTED_MODULE_0__["createElement"])(_gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, Object(_gechiui_element__WEBPACK_IMPORTED_MODULE_0__["createElement"])(_gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__["Path"], {
  d: "M16.7 7.1l-6.3 8.5-3.3-2.5-.9 1.2 4.5 3.4L17.9 8z"
}));
/* harmony default export */ __webpack_exports__["a"] = (check);


/***/ }),

/***/ "UEDd":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _gechiui_element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("ewfG");
/* harmony import */ var _gechiui_element__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_gechiui_element__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("Gz8V");
/* harmony import */ var _gechiui_primitives__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__);


/**
 * GeChiUI dependencies
 */

const button = Object(_gechiui_element__WEBPACK_IMPORTED_MODULE_0__["createElement"])(_gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__["SVG"], {
  viewBox: "0 0 24 24",
  xmlns: "http://www.w3.org/2000/svg"
}, Object(_gechiui_element__WEBPACK_IMPORTED_MODULE_0__["createElement"])(_gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__["Path"], {
  d: "M19 6.5H5c-1.1 0-2 .9-2 2v7c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2v-7c0-1.1-.9-2-2-2zm.5 9c0 .3-.2.5-.5.5H5c-.3 0-.5-.2-.5-.5v-7c0-.3.2-.5.5-.5h14c.3 0 .5.2.5.5v7zM8 12.8h8v-1.5H8v1.5z"
}));
/* harmony default export */ __webpack_exports__["a"] = (button);


/***/ }),

/***/ "W2Kb":
/***/ (function(module, exports) {

(function() { module.exports = window["gc"]["notices"]; }());

/***/ }),

/***/ "YLtl":
/***/ (function(module, exports) {

(function() { module.exports = window["lodash"]; }());

/***/ }),

/***/ "ZUv1":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _gechiui_element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("ewfG");
/* harmony import */ var _gechiui_element__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_gechiui_element__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("Gz8V");
/* harmony import */ var _gechiui_primitives__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__);


/**
 * GeChiUI dependencies
 */

const chevronRight = Object(_gechiui_element__WEBPACK_IMPORTED_MODULE_0__["createElement"])(_gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, Object(_gechiui_element__WEBPACK_IMPORTED_MODULE_0__["createElement"])(_gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__["Path"], {
  d: "M10.6 6L9.4 7l4.6 5-4.6 5 1.2 1 5.4-6z"
}));
/* harmony default export */ __webpack_exports__["a"] = (chevronRight);


/***/ }),

/***/ "abaT":
/***/ (function(__webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function(e,f){var a={white:"#ffffff",bisque:"#ffe4c4",blue:"#0000ff",cadetblue:"#5f9ea0",chartreuse:"#7fff00",chocolate:"#d2691e",coral:"#ff7f50",antiquewhite:"#faebd7",aqua:"#00ffff",azure:"#f0ffff",whitesmoke:"#f5f5f5",papayawhip:"#ffefd5",plum:"#dda0dd",blanchedalmond:"#ffebcd",black:"#000000",gold:"#ffd700",goldenrod:"#daa520",gainsboro:"#dcdcdc",cornsilk:"#fff8dc",cornflowerblue:"#6495ed",burlywood:"#deb887",aquamarine:"#7fffd4",beige:"#f5f5dc",crimson:"#dc143c",cyan:"#00ffff",darkblue:"#00008b",darkcyan:"#008b8b",darkgoldenrod:"#b8860b",darkkhaki:"#bdb76b",darkgray:"#a9a9a9",darkgreen:"#006400",darkgrey:"#a9a9a9",peachpuff:"#ffdab9",darkmagenta:"#8b008b",darkred:"#8b0000",darkorchid:"#9932cc",darkorange:"#ff8c00",darkslateblue:"#483d8b",gray:"#808080",darkslategray:"#2f4f4f",darkslategrey:"#2f4f4f",deeppink:"#ff1493",deepskyblue:"#00bfff",wheat:"#f5deb3",firebrick:"#b22222",floralwhite:"#fffaf0",ghostwhite:"#f8f8ff",darkviolet:"#9400d3",magenta:"#ff00ff",green:"#008000",dodgerblue:"#1e90ff",grey:"#808080",honeydew:"#f0fff0",hotpink:"#ff69b4",blueviolet:"#8a2be2",forestgreen:"#228b22",lawngreen:"#7cfc00",indianred:"#cd5c5c",indigo:"#4b0082",fuchsia:"#ff00ff",brown:"#a52a2a",maroon:"#800000",mediumblue:"#0000cd",lightcoral:"#f08080",darkturquoise:"#00ced1",lightcyan:"#e0ffff",ivory:"#fffff0",lightyellow:"#ffffe0",lightsalmon:"#ffa07a",lightseagreen:"#20b2aa",linen:"#faf0e6",mediumaquamarine:"#66cdaa",lemonchiffon:"#fffacd",lime:"#00ff00",khaki:"#f0e68c",mediumseagreen:"#3cb371",limegreen:"#32cd32",mediumspringgreen:"#00fa9a",lightskyblue:"#87cefa",lightblue:"#add8e6",midnightblue:"#191970",lightpink:"#ffb6c1",mistyrose:"#ffe4e1",moccasin:"#ffe4b5",mintcream:"#f5fffa",lightslategray:"#778899",lightslategrey:"#778899",navajowhite:"#ffdead",navy:"#000080",mediumvioletred:"#c71585",powderblue:"#b0e0e6",palegoldenrod:"#eee8aa",oldlace:"#fdf5e6",paleturquoise:"#afeeee",mediumturquoise:"#48d1cc",mediumorchid:"#ba55d3",rebeccapurple:"#663399",lightsteelblue:"#b0c4de",mediumslateblue:"#7b68ee",thistle:"#d8bfd8",tan:"#d2b48c",orchid:"#da70d6",mediumpurple:"#9370db",purple:"#800080",pink:"#ffc0cb",skyblue:"#87ceeb",springgreen:"#00ff7f",palegreen:"#98fb98",red:"#ff0000",yellow:"#ffff00",slateblue:"#6a5acd",lavenderblush:"#fff0f5",peru:"#cd853f",palevioletred:"#db7093",violet:"#ee82ee",teal:"#008080",slategray:"#708090",slategrey:"#708090",aliceblue:"#f0f8ff",darkseagreen:"#8fbc8f",darkolivegreen:"#556b2f",greenyellow:"#adff2f",seagreen:"#2e8b57",seashell:"#fff5ee",tomato:"#ff6347",silver:"#c0c0c0",sienna:"#a0522d",lavender:"#e6e6fa",lightgreen:"#90ee90",orange:"#ffa500",orangered:"#ff4500",steelblue:"#4682b4",royalblue:"#4169e1",turquoise:"#40e0d0",yellowgreen:"#9acd32",salmon:"#fa8072",saddlebrown:"#8b4513",sandybrown:"#f4a460",rosybrown:"#bc8f8f",darksalmon:"#e9967a",lightgoldenrodyellow:"#fafad2",snow:"#fffafa",lightgrey:"#d3d3d3",lightgray:"#d3d3d3",dimgray:"#696969",dimgrey:"#696969",olivedrab:"#6b8e23",olive:"#808000"},r={};for(var d in a)r[a[d]]=d;var l={};e.prototype.toName=function(f){if(!(this.rgba.a||this.rgba.r||this.rgba.g||this.rgba.b))return"transparent";var d,i,n=r[this.toHex()];if(n)return n;if(null==f?void 0:f.closest){var o=this.toRgb(),t=1/0,b="black";if(!l.length)for(var c in a)l[c]=new e(a[c]).toRgb();for(var g in a){var u=(d=o,i=l[g],Math.pow(d.r-i.r,2)+Math.pow(d.g-i.g,2)+Math.pow(d.b-i.b,2));u<t&&(t=u,b=g)}return b}};f.string.push([function(f){var r=f.toLowerCase(),d="transparent"===r?"#0000":a[r];return d?new e(d).toRgb():null},"name"])});


/***/ }),

/***/ "ajyK":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _gechiui_element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("ewfG");
/* harmony import */ var _gechiui_element__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_gechiui_element__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("Gz8V");
/* harmony import */ var _gechiui_primitives__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__);


/**
 * GeChiUI dependencies
 */

const close = Object(_gechiui_element__WEBPACK_IMPORTED_MODULE_0__["createElement"])(_gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, Object(_gechiui_element__WEBPACK_IMPORTED_MODULE_0__["createElement"])(_gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__["Path"], {
  d: "M13 11.8l6.1-6.3-1-1-6.1 6.2-6.1-6.2-1 1 6.1 6.3-6.5 6.7 1 1 6.5-6.6 6.5 6.6 1-1z"
}));
/* harmony default export */ __webpack_exports__["a"] = (close);


/***/ }),

/***/ "bLmS":
/***/ (function(module, exports) {

(function() { module.exports = window["gc"]["serverSideRender"]; }());

/***/ }),

/***/ "dMTb":
/***/ (function(module, exports) {

(function() { module.exports = window["gc"]["compose"]; }());

/***/ }),

/***/ "dQQD":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _gechiui_element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("ewfG");
/* harmony import */ var _gechiui_element__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_gechiui_element__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("Gz8V");
/* harmony import */ var _gechiui_primitives__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__);


/**
 * GeChiUI dependencies
 */

const alignRight = Object(_gechiui_element__WEBPACK_IMPORTED_MODULE_0__["createElement"])(_gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, Object(_gechiui_element__WEBPACK_IMPORTED_MODULE_0__["createElement"])(_gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__["Path"], {
  d: "M11.1 19.8H20v-1.5h-8.9v1.5zm0-15.6v1.5H20V4.2h-8.9zM4 12.8h16v-1.5H4v1.5z"
}));
/* harmony default export */ __webpack_exports__["a"] = (alignRight);


/***/ }),

/***/ "eXYJ":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _gechiui_element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("ewfG");
/* harmony import */ var _gechiui_element__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_gechiui_element__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("Gz8V");
/* harmony import */ var _gechiui_primitives__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__);


/**
 * GeChiUI dependencies
 */

const alignLeft = Object(_gechiui_element__WEBPACK_IMPORTED_MODULE_0__["createElement"])(_gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, Object(_gechiui_element__WEBPACK_IMPORTED_MODULE_0__["createElement"])(_gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__["Path"], {
  d: "M4 19.8h8.9v-1.5H4v1.5zm8.9-15.6H4v1.5h8.9V4.2zm-8.9 7v1.5h16v-1.5H4z"
}));
/* harmony default export */ __webpack_exports__["a"] = (alignLeft);


/***/ }),

/***/ "ewfG":
/***/ (function(module, exports) {

(function() { module.exports = window["gc"]["element"]; }());

/***/ }),

/***/ "fHnH":
/***/ (function(__webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export Colord */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return w; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return k; });
/* unused harmony export getFormat */
/* unused harmony export random */
var r={grad:.9,turn:360,rad:360/(2*Math.PI)},t=function(r){return"string"==typeof r?r.length>0:"number"==typeof r},n=function(r,t,n){return void 0===t&&(t=0),void 0===n&&(n=Math.pow(10,t)),Math.round(n*r)/n+0},e=function(r,t,n){return void 0===t&&(t=0),void 0===n&&(n=1),r>n?n:r>t?r:t},u=function(r){return(r=isFinite(r)?r%360:0)>0?r:r+360},a=function(r){return{r:e(r.r,0,255),g:e(r.g,0,255),b:e(r.b,0,255),a:e(r.a)}},o=function(r){return{r:n(r.r),g:n(r.g),b:n(r.b),a:n(r.a,3)}},i=/^#([0-9a-f]{3,8})$/i,s=function(r){var t=r.toString(16);return t.length<2?"0"+t:t},h=function(r){var t=r.r,n=r.g,e=r.b,u=r.a,a=Math.max(t,n,e),o=a-Math.min(t,n,e),i=o?a===t?(n-e)/o:a===n?2+(e-t)/o:4+(t-n)/o:0;return{h:60*(i<0?i+6:i),s:a?o/a*100:0,v:a/255*100,a:u}},b=function(r){var t=r.h,n=r.s,e=r.v,u=r.a;t=t/360*6,n/=100,e/=100;var a=Math.floor(t),o=e*(1-n),i=e*(1-(t-a)*n),s=e*(1-(1-t+a)*n),h=a%6;return{r:255*[e,i,o,o,s,e][h],g:255*[s,e,e,i,o,o][h],b:255*[o,o,s,e,e,i][h],a:u}},g=function(r){return{h:u(r.h),s:e(r.s,0,100),l:e(r.l,0,100),a:e(r.a)}},d=function(r){return{h:n(r.h),s:n(r.s),l:n(r.l),a:n(r.a,3)}},f=function(r){return b((n=(t=r).s,{h:t.h,s:(n*=((e=t.l)<50?e:100-e)/100)>0?2*n/(e+n)*100:0,v:e+n,a:t.a}));var t,n,e},c=function(r){return{h:(t=h(r)).h,s:(u=(200-(n=t.s))*(e=t.v)/100)>0&&u<200?n*e/100/(u<=100?u:200-u)*100:0,l:u/2,a:t.a};var t,n,e,u},l=/^hsla?\(\s*([+-]?\d*\.?\d+)(deg|rad|grad|turn)?\s*,\s*([+-]?\d*\.?\d+)%\s*,\s*([+-]?\d*\.?\d+)%\s*(?:,\s*([+-]?\d*\.?\d+)(%)?\s*)?\)$/i,p=/^hsla?\(\s*([+-]?\d*\.?\d+)(deg|rad|grad|turn)?\s+([+-]?\d*\.?\d+)%\s+([+-]?\d*\.?\d+)%\s*(?:\/\s*([+-]?\d*\.?\d+)(%)?\s*)?\)$/i,v=/^rgba?\(\s*([+-]?\d*\.?\d+)(%)?\s*,\s*([+-]?\d*\.?\d+)(%)?\s*,\s*([+-]?\d*\.?\d+)(%)?\s*(?:,\s*([+-]?\d*\.?\d+)(%)?\s*)?\)$/i,m=/^rgba?\(\s*([+-]?\d*\.?\d+)(%)?\s+([+-]?\d*\.?\d+)(%)?\s+([+-]?\d*\.?\d+)(%)?\s*(?:\/\s*([+-]?\d*\.?\d+)(%)?\s*)?\)$/i,y={string:[[function(r){var t=i.exec(r);return t?(r=t[1]).length<=4?{r:parseInt(r[0]+r[0],16),g:parseInt(r[1]+r[1],16),b:parseInt(r[2]+r[2],16),a:4===r.length?n(parseInt(r[3]+r[3],16)/255,2):1}:6===r.length||8===r.length?{r:parseInt(r.substr(0,2),16),g:parseInt(r.substr(2,2),16),b:parseInt(r.substr(4,2),16),a:8===r.length?n(parseInt(r.substr(6,2),16)/255,2):1}:null:null},"hex"],[function(r){var t=v.exec(r)||m.exec(r);return t?t[2]!==t[4]||t[4]!==t[6]?null:a({r:Number(t[1])/(t[2]?100/255:1),g:Number(t[3])/(t[4]?100/255:1),b:Number(t[5])/(t[6]?100/255:1),a:void 0===t[7]?1:Number(t[7])/(t[8]?100:1)}):null},"rgb"],[function(t){var n=l.exec(t)||p.exec(t);if(!n)return null;var e,u,a=g({h:(e=n[1],u=n[2],void 0===u&&(u="deg"),Number(e)*(r[u]||1)),s:Number(n[3]),l:Number(n[4]),a:void 0===n[5]?1:Number(n[5])/(n[6]?100:1)});return f(a)},"hsl"]],object:[[function(r){var n=r.r,e=r.g,u=r.b,o=r.a,i=void 0===o?1:o;return t(n)&&t(e)&&t(u)?a({r:Number(n),g:Number(e),b:Number(u),a:Number(i)}):null},"rgb"],[function(r){var n=r.h,e=r.s,u=r.l,a=r.a,o=void 0===a?1:a;if(!t(n)||!t(e)||!t(u))return null;var i=g({h:Number(n),s:Number(e),l:Number(u),a:Number(o)});return f(i)},"hsl"],[function(r){var n=r.h,a=r.s,o=r.v,i=r.a,s=void 0===i?1:i;if(!t(n)||!t(a)||!t(o))return null;var h=function(r){return{h:u(r.h),s:e(r.s,0,100),v:e(r.v,0,100),a:e(r.a)}}({h:Number(n),s:Number(a),v:Number(o),a:Number(s)});return b(h)},"hsv"]]},N=function(r,t){for(var n=0;n<t.length;n++){var e=t[n][0](r);if(e)return[e,t[n][1]]}return[null,void 0]},x=function(r){return"string"==typeof r?N(r.trim(),y.string):"object"==typeof r&&null!==r?N(r,y.object):[null,void 0]},I=function(r){return x(r)[1]},M=function(r,t){var n=c(r);return{h:n.h,s:e(n.s+100*t,0,100),l:n.l,a:n.a}},H=function(r){return(299*r.r+587*r.g+114*r.b)/1e3/255},$=function(r,t){var n=c(r);return{h:n.h,s:n.s,l:e(n.l+100*t,0,100),a:n.a}},j=function(){function r(r){this.parsed=x(r)[0],this.rgba=this.parsed||{r:0,g:0,b:0,a:1}}return r.prototype.isValid=function(){return null!==this.parsed},r.prototype.brightness=function(){return n(H(this.rgba),2)},r.prototype.isDark=function(){return H(this.rgba)<.5},r.prototype.isLight=function(){return H(this.rgba)>=.5},r.prototype.toHex=function(){return r=o(this.rgba),t=r.r,e=r.g,u=r.b,i=(a=r.a)<1?s(n(255*a)):"","#"+s(t)+s(e)+s(u)+i;var r,t,e,u,a,i},r.prototype.toRgb=function(){return o(this.rgba)},r.prototype.toRgbString=function(){return r=o(this.rgba),t=r.r,n=r.g,e=r.b,(u=r.a)<1?"rgba("+t+", "+n+", "+e+", "+u+")":"rgb("+t+", "+n+", "+e+")";var r,t,n,e,u},r.prototype.toHsl=function(){return d(c(this.rgba))},r.prototype.toHslString=function(){return r=d(c(this.rgba)),t=r.h,n=r.s,e=r.l,(u=r.a)<1?"hsla("+t+", "+n+"%, "+e+"%, "+u+")":"hsl("+t+", "+n+"%, "+e+"%)";var r,t,n,e,u},r.prototype.toHsv=function(){return r=h(this.rgba),{h:n(r.h),s:n(r.s),v:n(r.v),a:n(r.a,3)};var r},r.prototype.invert=function(){return w({r:255-(r=this.rgba).r,g:255-r.g,b:255-r.b,a:r.a});var r},r.prototype.saturate=function(r){return void 0===r&&(r=.1),w(M(this.rgba,r))},r.prototype.desaturate=function(r){return void 0===r&&(r=.1),w(M(this.rgba,-r))},r.prototype.grayscale=function(){return w(M(this.rgba,-1))},r.prototype.lighten=function(r){return void 0===r&&(r=.1),w($(this.rgba,r))},r.prototype.darken=function(r){return void 0===r&&(r=.1),w($(this.rgba,-r))},r.prototype.rotate=function(r){return void 0===r&&(r=15),this.hue(this.hue()+r)},r.prototype.alpha=function(r){return"number"==typeof r?w({r:(t=this.rgba).r,g:t.g,b:t.b,a:r}):n(this.rgba.a,3);var t},r.prototype.hue=function(r){var t=c(this.rgba);return"number"==typeof r?w({h:r,s:t.s,l:t.l,a:t.a}):n(t.h)},r.prototype.isEqual=function(r){return this.toHex()===w(r).toHex()},r}(),w=function(r){return r instanceof j?r:new j(r)},S=[],k=function(r){r.forEach(function(r){S.indexOf(r)<0&&(r(j,y),S.push(r))})},E=function(){return new j({r:255*Math.random(),g:255*Math.random(),b:255*Math.random()})};


/***/ }),

/***/ "jd0n":
/***/ (function(module, exports) {

(function() { module.exports = window["gc"]["components"]; }());

/***/ }),

/***/ "jww0":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _gechiui_element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("ewfG");
/* harmony import */ var _gechiui_element__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_gechiui_element__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("Gz8V");
/* harmony import */ var _gechiui_primitives__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__);


/**
 * GeChiUI dependencies
 */

const sidebar = Object(_gechiui_element__WEBPACK_IMPORTED_MODULE_0__["createElement"])(_gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, Object(_gechiui_element__WEBPACK_IMPORTED_MODULE_0__["createElement"])(_gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__["Path"], {
  d: "M18 5.5H6a.5.5 0 00-.5.5v3h13V6a.5.5 0 00-.5-.5zm.5 5H10v8h8a.5.5 0 00.5-.5v-7.5zM6 4h12a2 2 0 012 2v12a2 2 0 01-2 2H6a2 2 0 01-2-2V6a2 2 0 012-2z"
}));
/* harmony default export */ __webpack_exports__["a"] = (sidebar);


/***/ }),

/***/ "kZIl":
/***/ (function(module, exports) {

(function() { module.exports = window["gc"]["hooks"]; }());

/***/ }),

/***/ "kt2g":
/***/ (function(module, exports) {

(function() { module.exports = window["gc"]["richText"]; }());

/***/ }),

/***/ "l35S":
/***/ (function(module, exports) {

(function() { module.exports = window["gc"]["keycodes"]; }());

/***/ }),

/***/ "lyGs":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _gechiui_element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("ewfG");
/* harmony import */ var _gechiui_element__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_gechiui_element__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("Gz8V");
/* harmony import */ var _gechiui_primitives__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__);


/**
 * GeChiUI dependencies
 */

const keyboardReturn = Object(_gechiui_element__WEBPACK_IMPORTED_MODULE_0__["createElement"])(_gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "-2 -2 24 24"
}, Object(_gechiui_element__WEBPACK_IMPORTED_MODULE_0__["createElement"])(_gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__["Path"], {
  d: "M6.734 16.106l2.176-2.38-1.093-1.028-3.846 4.158 3.846 4.157 1.093-1.027-2.176-2.38h2.811c1.125 0 2.25.03 3.374 0 1.428-.001 3.362-.25 4.963-1.277 1.66-1.065 2.868-2.906 2.868-5.859 0-2.479-1.327-4.896-3.65-5.93-1.82-.813-3.044-.8-4.806-.788l-.567.002v1.5c.184 0 .368 0 .553-.002 1.82-.007 2.704-.014 4.21.657 1.854.827 2.76 2.657 2.76 4.561 0 2.472-.973 3.824-2.178 4.596-1.258.807-2.864 1.04-4.163 1.04h-.02c-1.115.03-2.229 0-3.344 0H6.734z"
}));
/* harmony default export */ __webpack_exports__["a"] = (keyboardReturn);


/***/ }),

/***/ "n68F":
/***/ (function(module, exports) {

(function() { module.exports = window["gc"]["blocks"]; }());

/***/ }),

/***/ "nLrk":
/***/ (function(module, exports) {

(function() { module.exports = window["gc"]["blockEditor"]; }());

/***/ }),

/***/ "qsmw":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _gechiui_element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("ewfG");
/* harmony import */ var _gechiui_element__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_gechiui_element__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("Gz8V");
/* harmony import */ var _gechiui_primitives__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__);


/**
 * GeChiUI dependencies
 */

const link = Object(_gechiui_element__WEBPACK_IMPORTED_MODULE_0__["createElement"])(_gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, Object(_gechiui_element__WEBPACK_IMPORTED_MODULE_0__["createElement"])(_gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__["Path"], {
  d: "M15.6 7.2H14v1.5h1.6c2 0 3.7 1.7 3.7 3.7s-1.7 3.7-3.7 3.7H14v1.5h1.6c2.8 0 5.2-2.3 5.2-5.2 0-2.9-2.3-5.2-5.2-5.2zM4.7 12.4c0-2 1.7-3.7 3.7-3.7H10V7.2H8.4c-2.9 0-5.2 2.3-5.2 5.2 0 2.9 2.3 5.2 5.2 5.2H10v-1.5H8.4c-2 0-3.7-1.7-3.7-3.7zm4.6.9h5.3v-1.5H9.3v1.5z"
}));
/* harmony default export */ __webpack_exports__["a"] = (link);


/***/ }),

/***/ "rl/G":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _gechiui_element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("ewfG");
/* harmony import */ var _gechiui_element__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_gechiui_element__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("Gz8V");
/* harmony import */ var _gechiui_primitives__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__);


/**
 * GeChiUI dependencies
 */

const code = Object(_gechiui_element__WEBPACK_IMPORTED_MODULE_0__["createElement"])(_gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__["SVG"], {
  viewBox: "0 0 24 24",
  xmlns: "http://www.w3.org/2000/svg"
}, Object(_gechiui_element__WEBPACK_IMPORTED_MODULE_0__["createElement"])(_gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__["Path"], {
  d: "M20.8 10.7l-4.3-4.3-1.1 1.1 4.3 4.3c.1.1.1.3 0 .4l-4.3 4.3 1.1 1.1 4.3-4.3c.7-.8.7-1.9 0-2.6zM4.2 11.8l4.3-4.3-1-1-4.3 4.3c-.7.7-.7 1.8 0 2.5l4.3 4.3 1.1-1.1-4.3-4.3c-.2-.1-.2-.3-.1-.4z"
}));
/* harmony default export */ __webpack_exports__["a"] = (code);


/***/ }),

/***/ "txjq":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _gechiui_element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("ewfG");
/* harmony import */ var _gechiui_element__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_gechiui_element__WEBPACK_IMPORTED_MODULE_0__);
/**
 * GeChiUI dependencies
 */

/** @typedef {{icon: JSX.Element, size?: number} & import('@gechiui/primitives').SVGProps} IconProps */

/**
 * Return an SVG icon.
 *
 * @param {IconProps} props icon is the SVG component to render
 *                          size is a number specifiying the icon size in pixels
 *                          Other props will be passed to wrapped SVG component
 *
 * @return {JSX.Element}  Icon component
 */

function Icon(_ref) {
  let {
    icon,
    size = 24,
    ...props
  } = _ref;
  return Object(_gechiui_element__WEBPACK_IMPORTED_MODULE_0__["cloneElement"])(icon, {
    width: size,
    height: size,
    ...props
  });
}

/* harmony default export */ __webpack_exports__["a"] = (Icon);


/***/ }),

/***/ "wwl2":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _gechiui_element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("ewfG");
/* harmony import */ var _gechiui_element__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_gechiui_element__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("Gz8V");
/* harmony import */ var _gechiui_primitives__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__);


/**
 * GeChiUI dependencies
 */

const layout = Object(_gechiui_element__WEBPACK_IMPORTED_MODULE_0__["createElement"])(_gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__["SVG"], {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, Object(_gechiui_element__WEBPACK_IMPORTED_MODULE_0__["createElement"])(_gechiui_primitives__WEBPACK_IMPORTED_MODULE_1__["Path"], {
  d: "M18 5.5H6a.5.5 0 00-.5.5v3h13V6a.5.5 0 00-.5-.5zm.5 5H10v8h8a.5.5 0 00.5-.5v-7.5zm-10 0h-3V18a.5.5 0 00.5.5h2.5v-8zM6 4h12a2 2 0 012 2v12a2 2 0 01-2 2H6a2 2 0 01-2-2V6a2 2 0 012-2z"
}));
/* harmony default export */ __webpack_exports__["a"] = (layout);


/***/ }),

/***/ "wx14":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return _extends; });
function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

/***/ }),

/***/ "wy2R":
/***/ (function(module, exports) {

(function() { module.exports = window["moment"]; }());

/***/ }),

/***/ "z4sU":
/***/ (function(module, exports) {

(function() { module.exports = window["gc"]["i18n"]; }());

/***/ }),

/***/ "zP/e":
/***/ (function(module, exports) {

(function() { module.exports = window["gc"]["url"]; }());

/***/ })

/******/ });